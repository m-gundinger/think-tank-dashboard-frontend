
// FILE: eslint.config.js
import globals from "globals";
import pluginJs from "@typescript-eslint/eslint-plugin";
import parserTs from "@typescript-eslint/parser";
import pluginReactConfig from "eslint-plugin-react/configs/recommended.js";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReactRefresh from "eslint-plugin-react-refresh";
import configPrettier from "eslint-config-prettier";

export default [
  {
    files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"],
    languageOptions: {
      parser: parserTs,
      parserOptions: {
        ecmaFeatures: { jsx: true },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    plugins: {
      "@typescript-eslint": pluginJs,
      "react-hooks": pluginReactHooks,
      "react-refresh": pluginReactRefresh,
    },
    rules: {
      ...pluginJs.configs["eslint-recommended"].rules,
      ...pluginJs.configs["recommended"].rules,
      ...pluginReactConfig.rules,
      ...pluginReactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
    },
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  configPrettier,
];

// FILE: src/App.tsx
import { Routes, Route, Navigate } from "react-router-dom";
import { ProtectedLayout } from "./routes/ProtectedLayout";
import { WorkspaceLayout } from "./routes/WorkspaceLayout";
import { LoginPage } from "./pages/Login";
import { DashboardPage } from "./pages/Dashboard";
import { WorkspacesPage } from "./pages/Workspaces";
import { ProjectListPage } from "./pages/ProjectListPage";
import { ProjectDetailPage } from "./pages/ProjectDetailPage";
import { AdminLayout } from "./routes/AdminLayout";
import { UserListPage } from "./pages/admin/UserListPage";
import { RoleListPage } from "./pages/admin/RoleListPage";
import { PermissionListPage } from "./pages/admin/PermissionListPage";
import { AnnouncementListPage } from "./pages/admin/AnnouncementListPage";
import { ProfilePage } from "./pages/ProfilePage";
import { DashboardDetailPage } from "./pages/DashboardDetailPage";
import { WorkflowListPage } from "./pages/admin/WorkflowListPage";
import { SettingsPage } from "./pages/SettingsPage";
import { IntegrationsPage } from "./pages/IntegrationsPage";
import { PublicationsPage } from "./pages/PublicationsPage";
import { TeamsPage } from "./pages/TeamsPage";
import { AccountSettingsPage } from "./pages/AccountSettingsPage";
import { IntegrationCallbackPage } from "./pages/IntegrationCallbackPage";
import { ProjectSettingsPage } from "./pages/ProjectSettingsPage";
import { ProjectAccessControlPage } from "./pages/ProjectAccessControlPage";
import { ProjectCustomFieldsPage } from "./pages/ProjectCustomFieldsPage";
import { ForgotPasswordPage } from "./pages/ForgotPasswordPage";
import { ResetPasswordPage } from "./pages/ResetPasswordPage";
import { SetupPasswordPage } from "./pages/SetupPasswordPage";
import { ErrorBoundary } from "./components/ui/ErrorBoundary";
import { ProjectGeneralSettingsPage } from "./pages/ProjectGeneralSettingsPage";
import { JobMonitoringPage } from "./pages/admin/JobMonitoringPage";
import { SystemStatusPage } from "./pages/admin/SystemStatusPage";
import { CrmPage } from "./pages/CrmPage";

function App() {
  return (
    <ErrorBoundary>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/forgot-password" element={<ForgotPasswordPage />} />
        <Route path="/reset-password" element={<ResetPasswordPage />} />
        <Route path="/setup-password" element={<SetupPasswordPage />} />

        <Route
          path="/integrations/callback"
          element={<IntegrationCallbackPage />}
        />

        <Route path="/" element={<ProtectedLayout />}>
          <Route index element={<Navigate to="/dashboard" replace />} />
          <Route path="dashboard" element={<DashboardPage />} />
          <Route path="workspaces" element={<WorkspacesPage />} />
          <Route path="publications" element={<PublicationsPage />} />
          <Route path="crm" element={<CrmPage />} />

          <Route path="workspaces/:workspaceId" element={<WorkspaceLayout />}>
            <Route index element={<Navigate to="projects" replace />} />
            <Route path="projects" element={<ProjectListPage />} />
            <Route path="teams" element={<TeamsPage />} />
          </Route>

          <Route
            path="workspaces/:workspaceId/projects/:projectId"
            element={
              <ErrorBoundary>
                <ProjectDetailPage />
              </ErrorBoundary>
            }
          />
          <Route
            path="workspaces/:workspaceId/projects/:projectId/settings"
            element={<ProjectSettingsPage />}
          >
            <Route index element={<Navigate to="general" replace />} />
            <Route path="general" element={<ProjectGeneralSettingsPage />} />
            <Route path="access" element={<ProjectAccessControlPage />} />
            <Route path="custom-fields" element={<ProjectCustomFieldsPage />} />
          </Route>
          <Route
            path="workspaces/:workspaceId/projects/:projectId/:dashboardId"
            element={<DashboardDetailPage />}
          />
          <Route path="profile" element={<ProfilePage />} />
          <Route path="settings" element={<SettingsPage />}>
            <Route index element={<Navigate to="integrations" replace />} />
            <Route path="integrations" element={<IntegrationsPage />} />
            <Route path="security" element={<AccountSettingsPage />} />
          </Route>

          <Route path="admin" element={<AdminLayout />}>
            <Route index element={<Navigate to="/admin/users" replace />} />
            <Route path="users" element={<UserListPage />} />
            <Route path="roles" element={<RoleListPage />} />
            <Route path="permissions" element={<PermissionListPage />} />
            <Route path="workflows" element={<WorkflowListPage />} />
            <Route path="announcements" element={<AnnouncementListPage />} />
            <Route path="jobs" element={<JobMonitoringPage />} />
            <Route path="system" element={<SystemStatusPage />} />
          </Route>
        </Route>
      </Routes>
    </ErrorBoundary>
  );
}

export default App;

// FILE: src/components/layout/ActiveUsers.tsx
import { usePresenceStore } from "@/store/presence";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface Member {
  socketId: string;
  user: {
    name?: string;
    avatarUrl?: string;
  };
}

export function ActiveUsers() {
  const members = usePresenceStore(
    (state: { members: Member[] }) => state.members
  );

  return (
    <TooltipProvider>
      <div className="flex items-center -space-x-2">
        {members.map((member: Member) => (
          <Tooltip key={member.socketId}>
            <TooltipTrigger asChild>
              <Avatar className="h-7 w-7 border-2 border-white">
                <AvatarImage
                  src={member.user.avatarUrl}
                  alt={member.user.name}
                />
                <AvatarFallback>{member.user.name?.charAt(0)}</AvatarFallback>
              </Avatar>
            </TooltipTrigger>
            <TooltipContent>
              <p>{member.user.name}</p>
            </TooltipContent>
          </Tooltip>
        ))}
      </div>
    </TooltipProvider>
  );
}

// FILE: src/components/layout/Header.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useGetProfile } from "@/features/profile/api/useGetProfile";
import { useLogout } from "@/features/auth/api/useLogout";
import { LogOut, User, Search, Settings } from "lucide-react";
import { Link } from "react-router-dom";
import { SearchDialog } from "@/features/search/components/SearchDialog";
import { NotificationBell } from "@/features/notifications/components/NotificationBell";
import { useState } from "react";

export function Header() {
  const { data: user, isLoading } = useGetProfile();
  const logoutMutation = useLogout();
  const [isSearchOpen, setIsSearchOpen] = useState(false);

  const handleLogout = () => {
    logoutMutation.mutate();
  };

  return (
    <>
      <header className="flex h-16 items-center border-b bg-white px-6">
        <div className="flex-1"></div>
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 rounded-full"
            onClick={() => setIsSearchOpen(true)}
          >
            <Search className="h-5 w-5" />
          </Button>
          <NotificationBell />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                {isLoading ? (
                  <div className="h-8 w-8 animate-pulse rounded-full bg-gray-200"></div>
                ) : (
                  <Avatar className="h-8 w-8">
                    <AvatarImage
                      src={user?.person?.avatarUrl}
                      alt={user?.name}
                    />
                    <AvatarFallback>{user?.name?.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm leading-none font-medium">
                    {user?.name}
                  </p>
                  <p className="text-muted-foreground text-xs leading-none">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link to="/profile">
                  <User className="mr-2 h-4 w-4" />
                  <span>Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link to="/settings/integrations">
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Settings</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                disabled={logoutMutation.isPending}
              >
                <LogOut className="mr-2 h-4 w-4" />
                <span>
                  {logoutMutation.isPending ? "Logging out..." : "Log out"}
                </span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <SearchDialog isOpen={isSearchOpen} onOpenChange={setIsSearchOpen} />
    </>
  );
}

// FILE: src/components/layout/MainContent.tsx
import { ReactNode } from "react";

interface MainContentProps {
  children: ReactNode;
}

export function MainContent({ children }: MainContentProps) {
  return <main className="flex-1 overflow-auto p-6">{children}</main>;
}

// FILE: src/components/layout/Sidebar.tsx
import { NavLink, useLocation } from "react-router-dom";
import {
  LayoutDashboard,
  FolderKanban,
  Wrench,
  FileText,
  ChevronDown,
  Users,
  Shield,
  Lock,
  Zap,
  Megaphone,
  Clock,
  Activity,
  Contact,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";

const mainNavItems = [
  { to: "/dashboard", icon: LayoutDashboard, label: "Dashboard" },
  { to: "/workspaces", icon: FolderKanban, label: "Workspaces" },
  { to: "/publications", icon: FileText, label: "Publications" },
  { to: "/crm", icon: Contact, label: "CRM" },
];

const adminNavItems = [
  { to: "/admin/users", icon: Users, label: "Users" },
  { to: "/admin/roles", icon: Shield, label: "Roles" },
  { to: "/admin/permissions", icon: Lock, label: "Permissions" },
  { to: "/admin/workflows", icon: Zap, label: "Workflows" },
  { to: "/admin/announcements", icon: Megaphone, label: "Announcements" },
  { to: "/admin/jobs", icon: Clock, label: "Jobs & Queues" },
  { to: "/admin/system", icon: Activity, label: "System Status" },
];

export function Sidebar() {
  const location = useLocation();
  const isAdminPath = location.pathname.startsWith("/admin");
  const [isAdminOpen, setIsAdminOpen] = useState(isAdminPath);

  return (
    <aside className="hidden w-64 flex-col border-r bg-gray-100/40 p-4 lg:flex">
      <h1 className="mb-8 text-2xl font-bold">AutoNomos</h1>
      <nav className="flex flex-col gap-1">
        {mainNavItems.map((item) => (
          <NavLink
            key={item.to}
            to={item.to}
            className={({ isActive }) =>
              cn(
                "text-muted-foreground hover:text-primary flex items-center gap-3 rounded-lg px-3 py-2 text-base font-medium transition-all",
                isActive && "bg-muted text-primary"
              )
            }
          >
            <item.icon className="h-4 w-4" />
            {item.label}
          </NavLink>
        ))}

        <div>
          <button
            onClick={() => setIsAdminOpen(!isAdminOpen)}
            className={cn(
              "text-muted-foreground hover:text-primary flex w-full items-center justify-between gap-3 rounded-lg px-3 py-2 text-base font-medium transition-all",
              isAdminPath && "bg-muted text-primary"
            )}
          >
            <div className="flex items-center gap-3">
              <Wrench className="h-4 w-4" />
              <span>Admin</span>
            </div>
            <ChevronDown
              className={cn(
                "h-4 w-4 transition-transform",
                isAdminOpen && "rotate-180"
              )}
            />
          </button>
          {isAdminOpen && (
            <div className="mt-1 space-y-1 pl-6">
              {adminNavItems.map((item) => (
                <NavLink
                  key={item.to}
                  to={item.to}
                  className={({ isActive }) =>
                    cn(
                      "text-muted-foreground hover:text-primary flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-normal transition-all",
                      isActive && "text-primary"
                    )
                  }
                >
                  <item.icon className="h-4 w-4" />
                  {item.label}
                </NavLink>
              ))}
            </div>
          )}
        </div>
      </nav>
    </aside>
  );
}

// FILE: src/features/activities/api/useGetActivities.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getActivities(
  workspaceId: string,
  projectId: string,
  query: any
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/activities`,
    { params: query }
  );
  return data;
}

export function useGetActivities(
  workspaceId: string,
  projectId: string,
  query: any
) {
  return useQuery({
    queryKey: ["activities", projectId, query],
    queryFn: () => getActivities(workspaceId, projectId, query),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/activities/components/ProjectActivityLog.tsx
import { useGetActivities } from "../api/useGetActivities";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Activity, MessageSquarePlus, SquarePlus, Trash2 } from "lucide-react";

const activityIconMap: Record<string, React.ElementType> = {
  TASK_CREATED: SquarePlus,
  TASK_UPDATED: Activity,
  TASK_DELETED: Trash2,
  COMMENT_CREATED: MessageSquarePlus,
  DEFAULT: Activity,
};

function formatActivityDetails(activity: any): string {
  const actorName = activity.actor.name;
  switch (activity.actionType) {
    case "TASK_CREATED":
      return `${actorName} created task "${activity.details.title}"`;
    case "TASK_DELETED":
      return `${actorName} deleted task "${activity.details.title}"`;
    case "COMMENT_CREATED":
      return `${actorName} commented on a task: "${activity.details.content.substring(
        0,
        50
      )}..."`;
    case "TASK_UPDATED":
      return `${actorName} updated task "${activity.details.title}"`;
    default:
      return `${actorName} performed action: ${activity.actionType}`;
  }
}

export function ProjectActivityLog({ workspaceId, projectId }: any) {
  const { data, isLoading, isError } = useGetActivities(
    workspaceId,
    projectId,
    {
      limit: 50,
    }
  );

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="flex items-center gap-4">
            <Skeleton className="h-8 w-8 rounded-full" />
            <Skeleton className="h-4 w-full" />
          </div>
        ))}
      </div>
    );
  }

  if (isError) return <div>Failed to load project activity.</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Activity Feed</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {data?.data?.length > 0 ? (
          data.data.map((activity: any) => {
            const Icon =
              activityIconMap[activity.actionType] || activityIconMap.DEFAULT;
            return (
              <div key={activity.id} className="flex items-start gap-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100">
                  <Icon className="h-4 w-4 text-gray-500" />
                </div>
                <div className="flex-grow">
                  <p className="text-sm">{formatActivityDetails(activity)}</p>
                  <p className="text-muted-foreground text-xs">
                    {new Date(activity.createdAt).toLocaleString()}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <p className="text-muted-foreground text-center text-sm">
            No activity recorded in this project yet.
          </p>
        )}
      </CardContent>
    </Card>
  );
}

// FILE: src/features/admin/announcements/api/useCreateAnnouncement.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createAnnouncement(announcementData: any): Promise<any> {
  const { data } = await api.post("/announcements", announcementData);
  return data;
}

export function useCreateAnnouncement() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: createAnnouncement,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["announcements"] });
    },
  });
}

// FILE: src/features/admin/announcements/api/useDeleteAnnouncement.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function deleteAnnouncement(id: string): Promise<void> {
  await api.delete(`/announcements/${id}`);
}

export function useDeleteAnnouncement() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deleteAnnouncement,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["announcements"] });
    },
  });
}

// FILE: src/features/admin/announcements/api/useGetAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getAnnouncements(query: any): Promise<any> {
  const { data } = await api.get("/announcements", { params: query });
  return data;
}

export function useGetAnnouncements(query: any) {
  return useQuery({
    queryKey: ["announcements", query],
    queryFn: () => getAnnouncements(query),
  });
}

async function getAnnouncement(id: string): Promise<any> {
  const { data } = await api.get(`/announcements/${id}`);
  return data;
}

export function useGetAnnouncement(id: string | null) {
  return useQuery<any>({
    queryKey: ["announcement", id],
    queryFn: () => getAnnouncement(id!),

    enabled: !!id,
  });
}

// FILE: src/features/admin/announcements/api/useUpdateAnnouncement.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  id: string;
  data: any;
}

async function updateAnnouncement({ id, data }: UpdateParams): Promise<any> {
  const response = await api.put(`/announcements/${id}`, data);
  return response.data;
}

export function useUpdateAnnouncement() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, UpdateParams>({
    mutationFn: updateAnnouncement,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["announcements"] });
    },
  });
}

// FILE: src/features/admin/announcements/components/AnnouncementForm.tsx
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useCreateAnnouncement } from "../api/useCreateAnnouncement";
import { useUpdateAnnouncement } from "../api/useUpdateAnnouncement";
import { RichTextEditor } from "@/components/ui/RichTextEditor";

interface AnnouncementFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function AnnouncementForm({
  initialData,
  onSuccess,
}: AnnouncementFormProps) {
  const isEditMode = !!initialData;
  const createMutation = useCreateAnnouncement();
  const updateMutation = useUpdateAnnouncement();

  const mutation = isEditMode ? updateMutation : createMutation;

  const form = useForm<any>({
    defaultValues: {
      title: "",
      content: "",
      status: "DRAFT",
      severity: "INFO",
      isPinned: false,
    },
  });

  useEffect(() => {
    if (isEditMode) {
      form.reset({
        ...initialData,
        content: initialData.content?.message || "",
      });
    }
  }, [initialData, isEditMode, form]);

  async function onSubmit(values: any) {
    const finalValues = {
      ...values,
      content: { message: values.content },
    };

    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: finalValues },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(finalValues, {
        onSuccess: () => {
          form.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input placeholder="e.g., System Maintenance" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="content"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Content</FormLabel>
              <FormControl>
                <RichTextEditor value={field.value} onChange={field.onChange} />
              </FormControl>
              <FormDescription>
                This content will be displayed to users.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Status</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="DRAFT">Draft</SelectItem>
                    <SelectItem value="PUBLISHED">Published</SelectItem>
                    <SelectItem value="ARCHIVED">Archived</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="severity"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Severity</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="INFO">Info</SelectItem>
                    <SelectItem value="LOW">Low</SelectItem>
                    <SelectItem value="MEDIUM">Medium</SelectItem>
                    <SelectItem value="HIGH">High</SelectItem>
                    <SelectItem value="CRITICAL">Critical</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="isPinned"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
              <div className="space-y-0.5">
                <FormLabel>Pin Announcement</FormLabel>
                <FormDescription>
                  Pinned announcements will appear at the top.
                </FormDescription>
              </div>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Announcement"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/announcements/components/AnnouncementList.tsx
import { useState } from "react";
import { useGetAnnouncements } from "../api/useGetAnnouncements";
import { useDeleteAnnouncement } from "../api/useDeleteAnnouncement";
import { Card, CardFooter } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2, Edit } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { EditAnnouncementDialog } from "./EditAnnouncementDialog";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

export function AnnouncementList() {
  const [page, setPage] = useState(1);
  const { data, isLoading, isError } = useGetAnnouncements({ page, limit: 10 });
  const deleteMutation = useDeleteAnnouncement();
  const [editingId, setEditingId] = useState<string | null>(null);

  const handleDelete = (id: string, title: string) => {
    if (window.confirm(`Delete announcement "${title}"?`)) {
      deleteMutation.mutate(id);
    }
  };

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  if (isLoading) return <div>Loading announcements...</div>;
  if (isError) return <div>Error loading announcements.</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Title</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Severity</TableHead>
              <TableHead>Pinned</TableHead>
              <TableHead>Published</TableHead>
              <TableHead className="w-[50px] text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data?.data?.length > 0 ? (
              data.data.map((item: any) => (
                <TableRow key={item.id}>
                  <TableCell className="font-medium">{item.title}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{item.status}</Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="secondary">{item.severity}</Badge>
                  </TableCell>
                  <TableCell>{item.isPinned ? "Yes" : "No"}</TableCell>
                  <TableCell>
                    {item.publishedAt
                      ? new Date(item.publishedAt).toLocaleDateString()
                      : "N/A"}
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => setEditingId(item.id)}>
                          <Edit className="mr-2 h-4 w-4" /> Edit
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          className="text-red-600"
                          onClick={() => handleDelete(item.id, item.title)}
                        >
                          <Trash2 className="mr-2 h-4 w-4" /> Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} className="h-24 text-center">
                  No announcements found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        <CardFooter className="pt-4">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page - 1);
                  }}
                  isActive={page > 1}
                />
              </PaginationItem>
              {Array.from({ length: data?.totalPages || 1 }, (_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(i + 1);
                    }}
                    isActive={page === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page + 1);
                  }}
                  isActive={page < (data?.totalPages || 1)}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </CardFooter>
      </Card>
      <EditAnnouncementDialog
        announcementId={editingId}
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
      />
    </>
  );
}

// FILE: src/features/admin/announcements/components/CreateAnnouncementDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { AnnouncementForm } from "./AnnouncementForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreateAnnouncementDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Announcement
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Announcement</DialogTitle>
          <DialogDescription>
            Broadcast information to all users or specific roles.
          </DialogDescription>
        </DialogHeader>
        <AnnouncementForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/announcements/components/EditAnnouncementDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { AnnouncementForm } from "./AnnouncementForm";
import { useGetAnnouncement } from "../api/useGetAnnouncements";
import { Skeleton } from "@/components/ui/skeleton";

interface EditAnnouncementDialogProps {
  announcementId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditAnnouncementDialog({
  announcementId,
  isOpen,
  onOpenChange,
}: EditAnnouncementDialogProps) {
  const { data: announcement, isLoading } = useGetAnnouncement(announcementId);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Announcement</DialogTitle>
          <DialogDescription>
            Make changes to the announcement details.
          </DialogDescription>
        </DialogHeader>
        {isLoading && announcementId ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-24 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        ) : (
          <AnnouncementForm
            initialData={announcement}
            onSuccess={() => onOpenChange(false)}
          />
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/jobs/api/useCreateJobSchedule.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function createJobSchedule(scheduleData: any): Promise<any> {
  const { data } = await api.post("/admin/jobs/schedules", scheduleData);
  return data;
}

export function useCreateJobSchedule() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: createJobSchedule,
    onSuccess: () => {
      toast.success("Job schedule created successfully.");
      queryClient.invalidateQueries({ queryKey: ["jobSchedules"] });
    },
    onError: (error: any) => {
      toast.error("Failed to create schedule", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/jobs/api/useGetJobs.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobs(query: any): Promise<any> {
  const { data } = await api.get("/admin/jobs", { params: query });
  return data;
}

export function useGetJobs(query: any) {
  return useQuery({
    queryKey: ["jobs", query],
    queryFn: () => getJobs(query),

    refetchInterval: 5000,
  });
}

async function getJob(jobId: string): Promise<any> {
  const { data } = await api.get(`/admin/jobs/${jobId}`);
  return data;
}

export function useGetJob(jobId: string | null) {
  return useQuery({
    queryKey: ["job", jobId],
    queryFn: () => getJob(jobId!),
    enabled: !!jobId,
  });
}

// FILE: src/features/admin/jobs/api/useGetJobSchedules.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobSchedules(query: any): Promise<any> {
  const { data } = await api.get("/admin/jobs/schedules", { params: query });
  return data;
}

export function useGetJobSchedules(query: any) {
  return useQuery({
    queryKey: ["jobSchedules", query],
    queryFn: () => getJobSchedules(query),
  });
}

// FILE: src/features/admin/jobs/api/useGetJobSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobSystemStatus(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/status");
  return data;
}

export function useGetJobSystemStatus() {
  return useQuery({
    queryKey: ["jobSystemStatus"],
    queryFn: getJobSystemStatus,
    refetchInterval: 5000,
  });
}

async function getQueueStats(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/queue-stats");
  return data;
}

export function useGetQueueStats() {
  return useQuery({
    queryKey: ["queueStats"],
    queryFn: getQueueStats,
    refetchInterval: 5000,
  });
}

// FILE: src/features/admin/jobs/api/useGetJobTypes.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobTypes(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/job-types");
  return data;
}

export function useGetJobTypes() {
  return useQuery({
    queryKey: ["jobTypes"],
    queryFn: getJobTypes,
    staleTime: Infinity,
  });
}

// FILE: src/features/admin/jobs/api/useJobActions.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function retryJob(jobId: string): Promise<any> {
  const { data } = await api.post(`/admin/jobs/${jobId}/retry`);
  return data;
}

export function useRetryJob() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, string>({
    mutationFn: retryJob,
    onSuccess: (data) => {
      toast.success("Job sent for retry.", {
        description: `Job ID: ${data.job.id}`,
      });
      queryClient.invalidateQueries({ queryKey: ["jobs"] });
      queryClient.invalidateQueries({ queryKey: ["job", data.job.id] });
    },
    onError: (error: any) => {
      toast.error("Failed to retry job", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

async function cancelJob(jobId: string): Promise<any> {
  const { data } = await api.post(`/admin/jobs/${jobId}/cancel`);
  return data;
}

export function useCancelJob() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, string>({
    mutationFn: cancelJob,
    onSuccess: (data) => {
      toast.success("Job cancelled.", {
        description: `Job ID: ${data.job.id}`,
      });
      queryClient.invalidateQueries({ queryKey: ["jobs"] });
      queryClient.invalidateQueries({ queryKey: ["job", data.job.id] });
    },
    onError: (error: any) => {
      toast.error("Failed to cancel job", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/jobs/api/useJobScheduleActions.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface UpdateParams {
  scheduleId: string;
  data: { isActive: boolean };
}

async function updateJobSchedule({ scheduleId, data }: UpdateParams) {
  const response = await api.put(`/admin/jobs/schedules/${scheduleId}`, data);
  return response.data;
}

export function useUpdateJobSchedule() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, UpdateParams>({
    mutationFn: updateJobSchedule,
    onSuccess: () => {
      toast.success("Job schedule updated.");
      queryClient.invalidateQueries({ queryKey: ["jobSchedules"] });
    },
    onError: (error: any) => {
      toast.error("Failed to update schedule", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

async function deleteJobSchedule(scheduleId: string) {
  await api.delete(`/admin/jobs/schedules/${scheduleId}`);
}

export function useDeleteJobSchedule() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deleteJobSchedule,
    onSuccess: () => {
      toast.success("Job schedule deleted.");
      queryClient.invalidateQueries({ queryKey: ["jobSchedules"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete schedule", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/jobs/api/useTriggerJobSchedule.ts
import api from "@/lib/api";
import { useMutation } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function triggerJobSchedule(
  scheduleId: string
): Promise<{ jobId: string }> {
  const { data } = await api.post(
    `/admin/jobs/schedules/${scheduleId}/trigger`
  );
  return data;
}

export function useTriggerJobSchedule() {
  return useMutation<any, AxiosError, string>({
    mutationFn: triggerJobSchedule,
    onSuccess: (data) => {
      toast.success("Job schedule triggered successfully.", {
        description: `New Job ID: ${data.jobId}`,
      });
    },
    onError: (error: any) => {
      toast.error("Failed to trigger schedule", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/jobs/components/CreateJobScheduleDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from "react";
import { PlusCircle } from "lucide-react";
import { CreateJobScheduleForm } from "./CreateJobScheduleForm";

export function CreateJobScheduleDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Schedule
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Job Schedule</DialogTitle>
          <DialogDescription>
            Define a recurring job that will run automatically.
          </DialogDescription>
        </DialogHeader>
        <CreateJobScheduleForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/jobs/components/CreateJobScheduleForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { z } from "zod";
import { useCreateJobSchedule } from "../api/useCreateJobSchedule";
import { useGetJobTypes } from "../api/useGetJobTypes";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const JobScheduleFormSchema = z.object({
  name: z.string().min(1, "Schedule name is required."),
  jobType: z.string().min(1, "Job type is required."),
  cronExpression: z.string().min(1, "A valid CRON expression is required."),
  payload: z.string(),
  isActive: z.boolean(),
});

type JobScheduleFormValues = {
  name: string;
  jobType: string;
  cronExpression: string;
  payload: string;
  isActive: boolean;
};

interface CreateJobScheduleFormProps {
  onSuccess?: () => void;
}

export function CreateJobScheduleForm({
  onSuccess,
}: CreateJobScheduleFormProps) {
  const createMutation = useCreateJobSchedule();
  const { data: jobTypesData, isLoading: isLoadingJobTypes } = useGetJobTypes();

  const form = useForm<JobScheduleFormValues>({
    resolver: zodResolver(JobScheduleFormSchema),
    defaultValues: {
      name: "",
      jobType: "",
      cronExpression: "",
      payload: "",
      isActive: true,
    },
  });

  async function onSubmit(values: JobScheduleFormValues) {
    let parsedPayload = {};
    if (values.payload && values.payload.trim()) {
      try {
        parsedPayload = JSON.parse(values.payload);
      } catch (e) {
        form.setError("payload", {
          type: "manual",
          message: "Payload must be valid JSON",
        });
        return;
      }
    }

    const submitData = {
      ...values,
      payload: parsedPayload,
    };

    await createMutation.mutateAsync(submitData, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Schedule Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Daily Cleanup" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="jobType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Job Type</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger disabled={isLoadingJobTypes}>
                    <SelectValue placeholder="Select a job type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {jobTypesData?.jobTypes.map((jobType: any) => (
                    <SelectItem key={jobType.type} value={jobType.type}>
                      {jobType.type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="cronExpression"
          render={({ field }) => (
            <FormItem>
              <FormLabel>CRON Expression</FormLabel>
              <FormControl>
                <Input placeholder="e.g., 0 2 * * *" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="payload"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Payload (JSON)</FormLabel>
              <FormControl>
                <Textarea placeholder='{ "days": 7 }' {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="isActive"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
              <FormLabel>Active</FormLabel>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Schedule"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/jobs/components/JobList.tsx
import { useState } from "react";
import { useGetJobs } from "../api/useGetJobs";
import { useRetryJob, useCancelJob } from "../api/useJobActions";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  RefreshCw,
  XCircle,
  Clock,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { JobStatus } from "@/types";
import { Job } from "../types";

const statusVariantMap: Record<
  JobStatus,
  "default" | "secondary" | "destructive" | "outline"
> = {
  [JobStatus.PENDING]: "outline",
  [JobStatus.RUNNING]: "default",
  [JobStatus.COMPLETED]: "secondary",
  [JobStatus.FAILED]: "destructive",
  [JobStatus.CANCELLED]: "destructive",
};

const statusIconMap: Record<JobStatus, React.ElementType> = {
  [JobStatus.PENDING]: Clock,
  [JobStatus.RUNNING]: RefreshCw,
  [JobStatus.COMPLETED]: CheckCircle,
  [JobStatus.FAILED]: AlertCircle,
  [JobStatus.CANCELLED]: XCircle,
};

export function JobList() {
  const [page] = useState(1);
  const { data, isLoading, isError } = useGetJobs({ page, limit: 20 });
  const retryMutation = useRetryJob();
  const cancelMutation = useCancelJob();

  if (isLoading) return <div>Loading jobs...</div>;
  if (isError) return <div>Error loading jobs.</div>;

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Status</TableHead>
          <TableHead>Type</TableHead>
          <TableHead>Attempts</TableHead>
          <TableHead>Created At</TableHead>
          <TableHead className="w-[50px] text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {data?.data?.length > 0 ? (
          data.data.map((job: Job) => {
            const StatusIcon = statusIconMap[job.status];
            return (
              <TableRow key={job.id}>
                <TableCell>
                  <Badge variant={statusVariantMap[job.status]}>
                    <StatusIcon className="mr-2 h-4 w-4" />
                    {job.status}
                  </Badge>
                </TableCell>
                <TableCell className="font-mono text-xs">{job.type}</TableCell>
                <TableCell>
                  {job.attempts} / {job.maxAttempts}
                </TableCell>
                <TableCell>
                  {new Date(job.createdAt).toLocaleString()}
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem
                        onClick={() => retryMutation.mutate(job.id)}
                        disabled={
                          job.status === "RUNNING" || job.status === "PENDING"
                        }
                      >
                        <RefreshCw className="mr-2 h-4 w-4" /> Retry
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => cancelMutation.mutate(job.id)}
                        disabled={
                          job.status !== "RUNNING" && job.status !== "PENDING"
                        }
                      >
                        <XCircle className="mr-2 h-4 w-4" /> Cancel
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            );
          })
        ) : (
          <TableRow>
            <TableCell colSpan={5} className="h-24 text-center">
              No jobs found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}

// FILE: src/features/admin/jobs/components/JobScheduleList.tsx
import { useState } from "react";
import { useGetJobSchedules } from "../api/useGetJobSchedules";
import {
  useUpdateJobSchedule,
  useDeleteJobSchedule,
} from "../api/useJobScheduleActions";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";

export function JobScheduleList() {
  const [page] = useState(1);
  const { data, isLoading, isError } = useGetJobSchedules({
    page,
    limit: 20,
  });
  const updateMutation = useUpdateJobSchedule();
  const deleteMutation = useDeleteJobSchedule();

  if (isLoading) return <div>Loading schedules...</div>;
  if (isError) return <div>Error loading schedules.</div>;

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Name</TableHead>
          <TableHead>Cron Expression</TableHead>
          <TableHead>Job Type</TableHead>
          <TableHead>Next Run</TableHead>
          <TableHead>Active</TableHead>
          <TableHead className="text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {data?.data?.length > 0 ? (
          data.data.map((schedule: any) => (
            <TableRow key={schedule.id}>
              <TableCell className="font-medium">{schedule.name}</TableCell>
              <TableCell className="font-mono text-xs">
                {schedule.cronExpression}
              </TableCell>
              <TableCell className="font-mono text-xs">
                {schedule.jobType}
              </TableCell>
              <TableCell>
                {schedule.nextRunAt
                  ? new Date(schedule.nextRunAt).toLocaleString()
                  : "N/A"}
              </TableCell>
              <TableCell>
                <Switch
                  checked={schedule.isActive}
                  onCheckedChange={(isActive) =>
                    updateMutation.mutate({
                      scheduleId: schedule.id,
                      data: { isActive },
                    })
                  }
                />
              </TableCell>
              <TableCell className="text-right">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => deleteMutation.mutate(schedule.id)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </TableCell>
            </TableRow>
          ))
        ) : (
          <TableRow>
            <TableCell colSpan={6} className="h-24 text-center">
              No job schedules found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}

// FILE: src/features/admin/jobs/components/JobSystemStatus.tsx
import {
  useGetJobSystemStatus,
  useGetQueueStats,
} from "../api/useGetJobSystemStatus";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";

const StatCard = ({
  title,
  value,
  isLoading,
}: {
  title: string;
  value: React.ReactNode;
  isLoading: boolean;
}) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {isLoading ? (
        <Skeleton className="h-8 w-1/2" />
      ) : (
        <div className="text-2xl font-bold">{value}</div>
      )}
    </CardContent>
  </Card>
);

export function JobSystemStatus() {
  const { data: statusData, isLoading: isLoadingStatus } =
    useGetJobSystemStatus();
  const { data: queueData, isLoading: isLoadingQueue } = useGetQueueStats();

  const processorStatus = statusData?.processor;
  const schedulerStatus = statusData?.scheduler;
  const queueStats = queueData?.totalJobs;

  const isProcessorOk =
    processorStatus &&
    processorStatus.isProcessing &&
    processorStatus.consecutiveFailures < 5;

  return (
    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
      <StatCard
        title="Processor Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={isProcessorOk ? "default" : "destructive"}>
            {isProcessorOk ? "Running" : "Error"}
          </Badge>
        }
      />
      <StatCard
        title="Scheduler Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={schedulerStatus?.isRunning ? "default" : "outline"}>
            {schedulerStatus?.isRunning ? "Running" : "Stopped"}
          </Badge>
        }
      />
      <StatCard
        title="Jobs Running"
        isLoading={isLoadingStatus}
        value={processorStatus?.runningJobs ?? "N/A"}
      />
      <StatCard
        title="Jobs Pending"
        isLoading={isLoadingQueue}
        value={queueStats?.pending ?? "N/A"}
      />
    </div>
  );
}

// FILE: src/features/admin/jobs/types.ts
import { z } from "zod";
import {
  createPaginationSchema,
  createPaginatedResponseSchema,
} from "@/lib/zod";
import { JobStatus } from "@/types";

export const JobIdParamsSchema = z.object({
  jobId: z.string().uuid(),
});

export const JobScheduleIdParamsSchema = z.object({
  scheduleId: z.string().uuid(),
});

export const JobSchema = z.object({
  id: z.string().uuid(),
  type: z.string(),
  payload: z.record(z.string(), z.unknown()),
  status: z.nativeEnum(JobStatus),
  priority: z.number().int(),
  attempts: z.number().int(),
  maxAttempts: z.number().int(),
  scheduledAt: z.coerce.date().nullable(),
  startedAt: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  failedAt: z.coerce.date().nullable(),
  nextRetryAt: z.coerce.date().nullable(),
  error: z.string().nullable(),
  result: z.record(z.string(), z.unknown()).nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
});

export type Job = z.infer<typeof JobSchema>;

export const JobAttemptSchema = z.object({
  id: z.string().uuid(),
  jobId: z.string().uuid(),
  attemptNumber: z.number().int(),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().nullable(),
  error: z.string().nullable(),
  duration: z.number().int().nullable(),
});

export const JobWithAttemptsSchema = JobSchema.extend({
  attempts_log: z.array(JobAttemptSchema),
});

export const JobScheduleSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  jobType: z.string(),
  cronExpression: z.string(),
  payload: z.record(z.string(), z.unknown()),
  isActive: z.boolean(),
  lastRunAt: z.coerce.date().nullable(),
  nextRunAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
});

export const JobListQuerySchema = createPaginationSchema().extend({
  type: z.string().optional(),
  status: z.nativeEnum(JobStatus).optional(),
  sortBy: z
    .enum(["createdAt", "scheduledAt", "priority", "type", "status"])
    .default("createdAt"),
  sortOrder: z.enum(["asc", "desc"]).default("desc"),
});

export const JobScheduleListQuerySchema = createPaginationSchema().extend({
  jobType: z.string().optional(),
  isActive: z.preprocess((val) => val === "true", z.boolean()).optional(),
  sortBy: z
    .enum(["name", "createdAt", "lastRunAt", "nextRunAt"])
    .default("name"),
  sortOrder: z.enum(["asc", "desc"]).default("asc"),
});

export const PaginatedJobsResponseSchema =
  createPaginatedResponseSchema(JobSchema);
export const PaginatedJobSchedulesResponseSchema =
  createPaginatedResponseSchema(JobScheduleSchema);

export const QueueStatsSchema = z.object({
  totalJobs: z.object({
    total: z.number().int(),
    pending: z.number().int(),
    running: z.number().int(),
    completed: z.number().int(),
    failed: z.number().int(),
    cancelled: z.number().int(),
  }),
  averageWaitTime: z.number(),
  averageProcessingTime: z.number(),
  throughputPerHour: z.number(),
  failureRate: z.number(),
});

export const JobSystemStatusResponseSchema = z.object({
  processor: z.object({
    isProcessing: z.boolean(),
    runningJobs: z.number().int(),
    consecutiveFailures: z.number().int(),
  }),
  scheduler: z.object({ isRunning: z.boolean() }),
  registeredJobTypes: z.number().int(),
});

// FILE: src/features/admin/PermissionListPage.tsx
import { PermissionList } from "@/features/admin/permissions/components/PermissionList";

export function PermissionListPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          System Permissions
        </h1>
        <p className="text-muted-foreground">
          A read-only list of all available permissions in the system.
        </p>
      </div>
      <PermissionList />
    </div>
  );
}

// FILE: src/features/admin/permissions/api/useCreatePermission.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function createPermission(permissionData: any): Promise<any> {
  const { data } = await api.post("/admin/permissions", permissionData);
  return data;
}

export function useCreatePermission() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createPermission,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["permissions"] });
    },
  });
}

// FILE: src/features/admin/permissions/api/useDeletePermission.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function deletePermission(permissionId: string): Promise<void> {
  await api.delete(`/admin/permissions/${permissionId}`);
}

export function useDeletePermission() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deletePermission,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["permissions"] });
    },
  });
}

// FILE: src/features/admin/permissions/api/useGetPermissions.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getPermissions(query: any): Promise<any> {
  const { data } = await api.get("/admin/permissions", { params: query });
  return data;
}

export function useGetPermissions(query: any) {
  return useQuery({
    queryKey: ["permissions", query],
    queryFn: () => getPermissions(query),
  });
}

async function getPermission(id: string): Promise<any> {
  const { data } = await api.get(`/admin/permissions/${id}`);
  return data;
}

export function useGetPermission(id: string | null) {
  return useQuery<any>({
    queryKey: ["permission", id],
    queryFn: () => getPermission(id!),
    enabled: !!id,
  });
}

// FILE: src/features/admin/permissions/api/useUpdatePermission.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function updatePermission({
  permissionId,
  permissionData,
}: {
  permissionId: string;
  permissionData: any;
}): Promise<any> {
  const { data } = await api.put(
    `/admin/permissions/${permissionId}`,
    permissionData
  );
  return data;
}

export function useUpdatePermission(permissionId: string) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (permissionData: any) =>
      updatePermission({ permissionId, permissionData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["permissions"] });
    },
  });
}

// FILE: src/features/admin/permissions/components/CreatePermissionDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PermissionForm } from "./PermissionForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreatePermissionDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Permission
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Permission</DialogTitle>
          <DialogDescription>
            Define a new action and subject pair for access control.
          </DialogDescription>
        </DialogHeader>
        <PermissionForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/permissions/components/PermissionForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreatePermission } from "../api/useCreatePermission";
import { useUpdatePermission } from "../api/useUpdatePermission";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { RichTextEditor } from "@/components/ui/RichTextEditor";

const permissionSchema = z.object({
  action: z.string().min(1, "Action is required."),
  subject: z.string().min(1, "Subject is required."),
  description: z.string().optional(),
});
type PermissionFormValues = z.infer<typeof permissionSchema>;

interface PermissionFormProps {
  permission?: any;
  onSuccess?: () => void;
}

export function PermissionForm({ permission, onSuccess }: PermissionFormProps) {
  const createMutation = useCreatePermission();
  const updateMutation = useUpdatePermission(permission?.id);
  const mutation = permission ? updateMutation : createMutation;
  const form = useForm<PermissionFormValues>({
    resolver: zodResolver(permissionSchema),
    defaultValues: {
      action: "",
      subject: "",
      description: "",
    },
  });

  useEffect(() => {
    if (permission) {
      form.reset(permission);
    }
  }, [permission, form]);

  async function onSubmit(values: PermissionFormValues) {
    await mutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="action"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Action</FormLabel>
              <FormControl>
                <Input placeholder="e.g., manage, create, read" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="subject"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Subject</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Project, Task, User" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : permission
              ? "Save Changes"
              : "Create Permission"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/permissions/components/PermissionList.tsx
import { useState } from "react";
import { useGetPermissions } from "../api/useGetPermissions";
import { useDeletePermission } from "../api/useDeletePermission";
import { Card, CardFooter } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

export function PermissionList() {
  const [page, setPage] = useState(1);
  const { data, isLoading, isError } = useGetPermissions({ page, limit: 15 });
  const deleteMutation = useDeletePermission();

  const handleDelete = (permission: any) => {
    if (
      window.confirm(
        `Delete permission "${permission.action} on ${permission.subject}"?`
      )
    ) {
      deleteMutation.mutate(permission.id);
    }
  };

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  if (isLoading) return <div>Loading permissions...</div>;
  if (isError) return <div>Error loading permissions.</div>;

  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Action</TableHead>
            <TableHead>Subject</TableHead>
            <TableHead>Description</TableHead>
            <TableHead className="w-[50px]">
              <span className="sr-only">Actions</span>
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {data?.data?.length > 0 ? (
            data.data.map((p: any) => (
              <TableRow key={p.id}>
                <TableCell className="font-mono">{p.action}</TableCell>
                <TableCell className="font-mono">{p.subject}</TableCell>
                <TableCell>{p.description}</TableCell>
                <TableCell>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => handleDelete(p)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={4} className="h-24 text-center">
                No permissions found.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
      <CardFooter className="border-t pt-4">
        {data?.totalPages > 1 && (
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page - 1);
                  }}
                  isActive={page > 1}
                />
              </PaginationItem>
              {[...Array(data.totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(i + 1);
                    }}
                    isActive={page === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page + 1);
                  }}
                  isActive={page < data.totalPages}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </CardFooter>
    </Card>
  );
}

// FILE: src/features/admin/RoleListPage.tsx
import { RoleList } from "@/features/admin/roles/components/RoleList";

export function RoleListPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Role Management</h1>
        <p className="text-muted-foreground">
          View system roles and their assigned permissions.
        </p>
      </div>
      <RoleList />
    </div>
  );
}

// FILE: src/features/admin/roles/api/useAssignPermissionToRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function assignPermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.post(`/admin/roles/${roleId}/permissions`, {
    permissionId,
  });
  return data;
}

export function useAssignPermissionToRole(roleId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (permissionId: string) =>
      assignPermission({ roleId, permissionId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["roles"] });
      queryClient.invalidateQueries({ queryKey: ["role", roleId] });
    },
  });
}

// FILE: src/features/admin/roles/api/useCreateRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function createRole(roleData: any): Promise<any> {
  const { data } = await api.post("/admin/roles", roleData);
  return data;
}

export function useCreateRole() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createRole,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["roles"] });
    },
  });
}

// FILE: src/features/admin/roles/api/useDeleteRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function deleteRole(roleId: string): Promise<void> {
  await api.delete(`/admin/roles/${roleId}`);
}

export function useDeleteRole() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deleteRole,
    onSuccess: () => {
      toast.success("Role deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["roles"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete role", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/roles/api/useGetRoles.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getRoles(): Promise<any> {
  const { data } = await api.get("/admin/roles");
  return data;
}

export function useGetRoles() {
  return useQuery({
    queryKey: ["roles"],
    queryFn: getRoles,
  });
}

async function getRole(roleId: string): Promise<any> {
  const { data } = await api.get(`/admin/roles/${roleId}`);
  return data;
}

export function useGetRole(roleId: string) {
  return useQuery({
    queryKey: ["role", roleId],
    queryFn: () => getRole(roleId),
    enabled: !!roleId,
  });
}

// FILE: src/features/admin/roles/api/useRevokePermissionFromRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function revokePermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.delete(
    `/admin/roles/${roleId}/permissions/${permissionId}`
  );
  return data;
}

export function useRevokePermissionFromRole(roleId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (permissionId: string) =>
      revokePermission({ roleId, permissionId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["roles"] });
      queryClient.invalidateQueries({ queryKey: ["role", roleId] });
    },
  });
}

// FILE: src/features/admin/roles/api/useUpdateRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function updateRole({
  roleId,
  roleData,
}: {
  roleId: string;
  roleData: any;
}): Promise<any> {
  const { data } = await api.put(`/admin/roles/${roleId}`, roleData);
  return data;
}

export function useUpdateRole(roleId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (roleData: any) => updateRole({ roleId, roleData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["roles"] });
      queryClient.invalidateQueries({ queryKey: ["role", roleId] });
    },
  });
}

// FILE: src/features/admin/roles/components/CreateRoleDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useForm } from "react-hook-form";
import { useState } from "react";
import { PlusCircle } from "lucide-react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateRole } from "../api/useCreateRole";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const roleSchema = z.object({
  name: z.string().min(2, "Role name must be at least 2 characters."),
  description: z.string().optional(),
});
type RoleFormValues = z.infer<typeof roleSchema>;

export function CreateRoleDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const createMutation = useCreateRole();
  const form = useForm<RoleFormValues>({
    resolver: zodResolver(roleSchema),
    defaultValues: { name: "", description: "" },
  });
  async function onSubmit(values: RoleFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        setIsOpen(false);
      },
    });
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Role
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Role</DialogTitle>
          <DialogDescription>
            Define a new global role and assign permissions later.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Role Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Content Manager" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Input placeholder="What this role can do" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button
              type="submit"
              className="w-full"
              disabled={createMutation.isPending}
            >
              {createMutation.isPending ? "Creating..." : "Create Role"}
            </Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/roles/components/EditRoleDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetRole } from "../api/useGetRoles";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useUpdateRole } from "../api/useUpdateRole";
import { useEffect, useState } from "react";
import { useGetPermissions } from "../../permissions/api/useGetPermissions";
import { useAssignPermissionToRole } from "../api/useAssignPermissionToRole";
import { useRevokePermissionFromRole } from "../api/useRevokePermissionFromRole";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, ChevronsUpDown, XIcon } from "lucide-react";
import { cn } from "@/lib/utils";

const roleSchema = z.object({
  name: z.string().min(2, "Role name must be at least 2 characters."),
  description: z.string().optional(),
});
type RoleFormValues = z.infer<typeof roleSchema>;

function EditRoleForm({
  role,
  onSuccess,
}: {
  role: any;
  onSuccess: () => void;
}) {
  const updateMutation = useUpdateRole(role.id);
  const form = useForm<RoleFormValues>({
    resolver: zodResolver(roleSchema),
    defaultValues: { name: "", description: "" },
  });

  useEffect(() => {
    form.reset({ name: role.name, description: role.description });
  }, [role, form]);

  async function onSubmit(values: RoleFormValues) {
    updateMutation.mutate(values, { onSuccess });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Role Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />
        <Button type="submit" disabled={updateMutation.isPending}>
          Save Changes
        </Button>
      </form>
    </Form>
  );
}

function ManageRolePermissions({ role }: { role: any }) {
  const { data: permissionsData, isLoading } = useGetPermissions({
    limit: 100,
  });
  const assignMutation = useAssignPermissionToRole(role.id);
  const revokeMutation = useRevokePermissionFromRole(role.id);
  const [popoverOpen, setPopoverOpen] = useState(false);

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));

  const availablePermissions =
    permissionsData?.data.filter(
      (permission: any) => !rolePermissionIds.has(permission.id)
    ) || [];

  return (
    <div className="space-y-2">
      <h4 className="font-semibold">Permissions</h4>
      <div className="flex min-h-[60px] flex-wrap items-center gap-1 rounded-md border p-2">
        {role.permissions.length > 0 ? (
          role.permissions.map((permission: any) => (
            <Badge key={permission.id} variant="secondary">
              {permission.action} on {permission.subject}
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => revokeMutation.mutate(permission.id)}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="text-muted-foreground px-2 text-sm">
            No permissions assigned.
          </p>
        )}
      </div>

      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            className="w-full justify-between"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Add a permission..."}
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search permissions..." />
            <CommandList>
              <CommandEmpty>No permissions found.</CommandEmpty>
              <CommandGroup>
                {availablePermissions.map((permission: any) => (
                  <CommandItem
                    key={permission.id}
                    value={`${permission.action} ${permission.subject}`}
                    onSelect={() => {
                      assignMutation.mutate(permission.id);
                      setPopoverOpen(false);
                    }}
                  >
                    <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                    {permission.action} on {permission.subject}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  );
}

interface EditRoleDialogProps {
  roleId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditRoleDialog({
  roleId,
  isOpen,
  onOpenChange,
}: EditRoleDialogProps) {
  const { data: roleData, isLoading } = useGetRole(roleId!);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-4xl">
        <DialogHeader>
          <DialogTitle>Edit Role</DialogTitle>
          <DialogDescription>
            Update role details and manage assigned permissions.
          </DialogDescription>
        </DialogHeader>
        {isLoading || !roleData ? (
          <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
            <div className="space-y-4">
              <Skeleton className="h-10 w-full" />
              <Skeleton className="h-10 w-full" />
            </div>
            <div className="space-y-4">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-24 w-full" />
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
            <EditRoleForm
              role={roleData}
              onSuccess={() => onOpenChange(false)}
            />
            <ManageRolePermissions role={roleData} />
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/roles/components/RoleCard.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useDeleteRole } from "../api/useDeleteRole";

interface RoleCardProps {
  role: any;
  onEdit: (roleId: string) => void;
}

export function RoleCard({ role, onEdit }: RoleCardProps) {
  const deleteMutation = useDeleteRole();

  const handleDelete = () => {
    if (
      window.confirm(
        `Are you sure you want to delete the "${role.name}" role? This action cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  return (
    <Card key={role.id}>
      <CardHeader className="flex-row items-center justify-between">
        <CardTitle>{role.name}</CardTitle>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-8 w-8 p-0">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEdit(role.id)}>
              <Edit className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-600 focus:text-red-600"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="space-y-2">
        <p className="text-muted-foreground text-sm">
          {role.description || "No description."}
        </p>
        <div className="flex flex-wrap gap-1">
          <span className="text-sm font-semibold">Permissions:</span>
          {role.permissions?.length > 0 ? (
            role.permissions.map((p: any) => (
              <Badge variant="outline" key={p.id}>
                {p.action} on {p.subject}
              </Badge>
            ))
          ) : (
            <span className="text-muted-foreground text-sm">None</span>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/admin/roles/components/RoleList.tsx
import { useGetRoles } from "../api/useGetRoles";
import { useState } from "react";
import { EditRoleDialog } from "./EditRoleDialog";
import { RoleCard } from "./RoleCard";

export function RoleList() {
  const { data, isLoading, isError } = useGetRoles();
  const [editingRoleId, setEditingRoleId] = useState<string | null>(null);

  if (isLoading) return <div>Loading roles...</div>;
  if (isError) return <div>Error loading roles.</div>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2">
        {data?.data?.map((role: any) => (
          <RoleCard key={role.id} role={role} onEdit={setEditingRoleId} />
        ))}
      </div>
      <EditRoleDialog
        roleId={editingRoleId}
        isOpen={!!editingRoleId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setEditingRoleId(null);
        }}
      />
    </>
  );
}

// FILE: src/features/admin/system-status/api/useGetSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getSystemStatus(): Promise<any> {
  const { data } = await api.get("/status");
  return data;
}

export function useGetSystemStatus() {
  return useQuery({
    queryKey: ["systemStatus"],
    queryFn: getSystemStatus,

    refetchInterval: 15000,
  });
}

// FILE: src/features/admin/system-status/components/SystemStatusDashboard.tsx
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";
import { useGetSystemStatus } from "../api/useGetSystemStatus";
import { Server, Database, BrainCircuit } from "lucide-react";

const StatusBadge = ({
  status,
}: {
  status: "ok" | "degraded" | "down" | string;
}) => {
  const variant =
    status === "ok"
      ? "default"
      : status === "degraded"
        ? "secondary"
        : "destructive";
  return <Badge variant={variant}>{status}</Badge>;
};

export function SystemStatusDashboard() {
  const { data, isLoading, isError, error } = useGetSystemStatus();

  if (isLoading) {
    return <Skeleton className="h-64 w-full" />;
  }

  if (isError) {
    return (
      <div className="text-destructive">
        Failed to load system status: {error.message}
      </div>
    );
  }

  const { status, timestamp, version, metrics, dependencies } = data;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Overall Status</span>
            <StatusBadge status={status} />
          </CardTitle>
          <CardDescription>
            Last checked: {new Date(timestamp).toLocaleString()}
          </CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 gap-4 text-sm md:grid-cols-3">
          <div>
            <strong>Version:</strong> {version.release}
          </div>
          <div>
            <strong>Commit:</strong> {version.commit.substring(0, 7)}
          </div>
          <div>
            <strong>Uptime:</strong> {metrics.uptime}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Dependencies</CardTitle>
          <CardDescription>
            Status of core application dependencies.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Service</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Response Time</TableHead>
                <TableHead>Details</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {Object.entries(dependencies).map(
                ([name, depStatus]: [string, any]) => (
                  <TableRow key={name}>
                    <TableCell className="font-medium capitalize">
                      {name}
                    </TableCell>
                    <TableCell>
                      <StatusBadge status={depStatus.status} />
                    </TableCell>
                    <TableCell>{depStatus.responseTime}</TableCell>
                    <TableCell className="text-muted-foreground text-xs">
                      {depStatus.message || "OK"}
                    </TableCell>
                  </TableRow>
                )
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

// FILE: src/features/admin/UserListPage.tsx
import { UserList } from "@/features/admin/users/components/UserList";
import { CreateUserDialog } from "@/features/admin/users/components/CreateUserDialog";

export function UserListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground">View and manage system users.</p>
        </div>
        <CreateUserDialog />
      </div>
      <UserList />
    </div>
  );
}

// FILE: src/features/admin/users/api/useAssignRoleToUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function assignRoleToUser({
  userId,
  roleId,
}: {
  userId: string;
  roleId: string;
}): Promise<any> {
  const { data } = await api.post(`/admin/users/${userId}/roles`, { roleId });
  return data;
}

export function useAssignRoleToUser(userId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (roleId: string) => assignRoleToUser({ userId, roleId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      queryClient.invalidateQueries({ queryKey: ["user", userId] });
    },
  });
}

// FILE: src/features/admin/users/api/useCreateUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createUser(newUserData: any): Promise<any> {
  const { data } = await api.post("/admin/users", newUserData);
  return data;
}

export function useCreateUser() {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: createUser,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
    },
  });
}

// FILE: src/features/admin/users/api/useDeleteUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function deleteUser(userId: string): Promise<void> {
  await api.delete(`/admin/users/${userId}`);
}

export function useDeleteUser() {
  const queryClient = useQueryClient();

  return useMutation<void, AxiosError, string>({
    mutationFn: deleteUser,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
    },
  });
}

// FILE: src/features/admin/users/api/useGetUser.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getUser(userId: string): Promise<any> {
  const { data } = await api.get(`/admin/users/${userId}`);
  return data;
}

export function useGetUser(userId: string) {
  return useQuery({
    enabled: !!userId,
    queryKey: ["user", userId],
    queryFn: () => getUser(userId),
  });
}

// FILE: src/features/admin/users/api/useGetUsers.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getUsers(query: any): Promise<any> {
  const { data } = await api.get("/admin/users", { params: query });
  return data;
}

export function useGetUsers(query: any) {
  return useQuery({
    queryKey: ["users", query],
    queryFn: () => getUsers(query),
  });
}

// FILE: src/features/admin/users/api/useHardDeleteUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function hardDeleteUser(userId: string): Promise<void> {
  await api.delete(`/admin/users/${userId}/hard`);
}

export function useHardDeleteUser() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: hardDeleteUser,
    onSuccess: () => {
      toast.success("User permanently deleted.");
      queryClient.invalidateQueries({ queryKey: ["users"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete user", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/users/api/useRemoveRoleFromUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function removeRoleFromUser({
  userId,
  roleId,
}: {
  userId: string;
  roleId: string;
}): Promise<any> {
  await api.delete(`/admin/users/${userId}/roles/${roleId}`);
}

export function useRemoveRoleFromUser(userId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (roleId: string) => removeRoleFromUser({ userId, roleId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      queryClient.invalidateQueries({ queryKey: ["user", userId] });
    },
  });
}

// FILE: src/features/admin/users/api/useSetUserStatus.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface SetStatusParams {
  userId: string;
  isActive: boolean;
}

async function setUserStatus({
  userId,
  isActive,
}: SetStatusParams): Promise<any> {
  const { data } = await api.patch(`/admin/users/${userId}/status`, {
    isActive,
  });
  return data;
}

export function useSetUserStatus() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, SetStatusParams>({
    mutationFn: setUserStatus,
    onSuccess: (updatedUser) => {
      queryClient.setQueryData<any>(["users"], (oldData: any) => {
        if (!oldData) return oldData;
        return {
          ...oldData,
          data: oldData.data.map((user: any) =>
            user.id === updatedUser.id ? updatedUser : user
          ),
        };
      });
    },
    onSettled: (_data, _error, variables) => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      queryClient.invalidateQueries({ queryKey: ["user", variables.userId] });
    },
  });
}

// FILE: src/features/admin/users/api/useUpdateUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function updateUser({
  userId,
  userData,
}: {
  userId: string;
  userData: any;
}): Promise<any> {
  const { data } = await api.put(`/admin/users/${userId}`, userData);
  return data;
}

export function useUpdateUser(userId: string) {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: (userData) => updateUser({ userId, userData }),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      queryClient.invalidateQueries({ queryKey: ["user", data.id] });
    },
  });
}

// FILE: src/features/admin/users/components/CreateUserDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateUserForm } from "./CreateUserForm";
import { useState } from "react";
import { UserPlus } from "lucide-react";

export function CreateUserDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <UserPlus className="mr-2 h-4 w-4" />
          New User
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New User</DialogTitle>
          <DialogDescription>
            Fill out the form below to create a new user account. An invitation
            email will be sent for them to set their password.
          </DialogDescription>
        </DialogHeader>
        <CreateUserForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/users/components/CreateUserForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { useCreateUser } from "../api/useCreateUser";
import { useGetRoles } from "@/features/admin/roles/api/useGetRoles";
import { AxiosError } from "axios";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const createUserSchema = z.object({
  person: z.object({
    firstName: z.string().min(1, "First name is required."),
    lastName: z.string().min(1, "Last name is required."),
    email: z.string().email("A valid email is required."),
  }),
  roles: z.array(z.string()).optional(),
});

type CreateUserFormValues = z.infer<typeof createUserSchema>;

interface CreateUserFormProps {
  onSuccess?: () => void;
}

export function CreateUserForm({ onSuccess }: CreateUserFormProps) {
  const createMutation = useCreateUser();
  const { data: rolesData } = useGetRoles();

  const form = useForm<CreateUserFormValues>({
    resolver: zodResolver(createUserSchema),
    defaultValues: {
      person: {
        firstName: "",
        lastName: "",
        email: "",
      },
      roles: [],
    },
  });

  async function onSubmit(values: CreateUserFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="person.firstName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>First Name</FormLabel>
              <FormControl>
                <Input placeholder="John" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="person.lastName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Last Name</FormLabel>
              <FormControl>
                <Input placeholder="Doe" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="person.email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address</FormLabel>
              <FormControl>
                <Input placeholder="name@example.com" {...field} />
              </FormControl>
              <FormDescription>
                An invitation will be sent to this email to set a password.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="roles"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Roles</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      role="combobox"
                      className={cn(
                        "w-full justify-between",

                        !(field.value && field.value.length) &&
                          "text-muted-foreground"
                      )}
                    >
                      <div className="flex flex-wrap items-center gap-1">
                        {(field.value || []).length > 0 ? (
                          rolesData?.data
                            .filter((role: any) =>
                              (field.value || []).includes(role.name)
                            )
                            .map((role: any) => (
                              <Badge variant="secondary" key={role.id}>
                                {role.name}
                              </Badge>
                            ))
                        ) : (
                          <span>Select roles</span>
                        )}
                      </div>
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                  <Command>
                    <CommandInput placeholder="Search roles..." />
                    <CommandList>
                      <CommandEmpty>No roles found.</CommandEmpty>
                      <CommandGroup>
                        {rolesData?.data?.map((role: any) => (
                          <CommandItem
                            value={role.name}
                            key={role.id}
                            onSelect={() => {
                              const selectedRoles = field.value || [];
                              const isSelected = selectedRoles.includes(
                                role.name
                              );
                              form.setValue(
                                "roles",
                                isSelected
                                  ? selectedRoles.filter(
                                      (r: any) => r !== role.name
                                    )
                                  : [...selectedRoles, role.name]
                              );
                            }}
                          >
                            <Check
                              className={cn(
                                "mr-2 h-4 w-4",

                                (field.value || []).includes(role.name)
                                  ? "opacity-100"
                                  : "opacity-0"
                              )}
                            />
                            {role.name}
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        {errorMessage && (
          <div className="text-sm font-medium text-red-500">{errorMessage}</div>
        )}
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending
            ? "Sending Invite..."
            : "Create and Invite User"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/users/components/EditUserDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetUser } from "../api/useGetUser";
import { EditUserForm } from "./EditUserForm";
import { ManageUserRoles } from "./ManageUserRoles";

interface EditUserDialogProps {
  userId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditUserDialog({
  userId,
  isOpen,
  onOpenChange,
}: EditUserDialogProps) {
  const { data: userData, isLoading } = useGetUser(userId!);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Edit User Profile</DialogTitle>
          <DialogDescription>
            Modify user details and manage their roles.
          </DialogDescription>
        </DialogHeader>
        {isLoading || !userData ? (
          <div className="p-8 text-center">Loading user data...</div>
        ) : (
          <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
            <EditUserForm
              user={userData}
              onSuccess={() => onOpenChange(false)}
            />
            <ManageUserRoles user={userData} />
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/users/components/EditUserForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useUpdateUser } from "../api/useUpdateUser";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const editUserSchema = z.object({
  firstName: z.string().min(1, "First name is required."),
  lastName: z.string().min(1, "Last name is required."),
  email: z.string().email("A valid email is required."),
});

type EditUserFormValues = z.infer<typeof editUserSchema>;

interface EditUserFormProps {
  user: any;
  onSuccess?: () => void;
}

export function EditUserForm({ user, onSuccess }: EditUserFormProps) {
  const updateMutation = useUpdateUser(user.id);
  const form = useForm<EditUserFormValues>({
    resolver: zodResolver(editUserSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
    },
  });
  useEffect(() => {
    if (user) {
      form.reset({
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email || "",
      });
    }
  }, [user, form]);
  async function onSubmit(values: EditUserFormValues) {
    await updateMutation.mutateAsync(values, {
      onSuccess,
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="firstName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>First Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="lastName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Last Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={updateMutation.isPending}
        >
          {updateMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/users/components/ManageUserRoles.tsx
import { useGetRoles } from "../../roles/api/useGetRoles";
import { useAssignRoleToUser } from "../api/useAssignRoleToUser";
import { useRemoveRoleFromUser } from "../api/useRemoveRoleFromUser";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { XIcon } from "lucide-react";
import { useState } from "react";

interface ManageUserRolesProps {
  user: any;
}

export function ManageUserRoles({ user }: ManageUserRolesProps) {
  const [selectedRole, setSelectedRole] = useState("");
  const { data: rolesData, isLoading: isLoadingRoles } = useGetRoles();
  const assignRoleMutation = useAssignRoleToUser(user.id);
  const removeRoleMutation = useRemoveRoleFromUser(user.id);

  const availableRoles =
    rolesData?.data.filter((role: any) => !user.roles.includes(role.name)) ||
    [];

  const handleAssignRole = () => {
    if (selectedRole) {
      assignRoleMutation.mutate(selectedRole, {
        onSuccess: () => setSelectedRole(""),
      });
    }
  };

  return (
    <div className="space-y-4 rounded-lg border p-4">
      <h4 className="font-semibold">User Roles</h4>
      <div className="flex flex-wrap gap-2">
        {user.roles.length > 0 ? (
          user.roles.map((roleName: string) => (
            <Badge key={roleName} variant="secondary" className="pr-1">
              <span>{roleName}</span>
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => {
                  const role = rolesData?.data.find(
                    (r: any) => r.name === roleName
                  );
                  if (role) removeRoleMutation.mutate(role.id);
                }}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="text-muted-foreground text-sm">No roles assigned.</p>
        )}
      </div>

      <div className="flex items-center gap-2">
        <Select
          value={selectedRole}
          onValueChange={setSelectedRole}
          disabled={availableRoles.length === 0}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a role to add" />
          </SelectTrigger>
          <SelectContent>
            {isLoadingRoles ? (
              <SelectItem value="loading" disabled>
                Loading roles...
              </SelectItem>
            ) : (
              availableRoles.map((role: any) => (
                <SelectItem key={role.id} value={role.id}>
                  {role.name}
                </SelectItem>
              ))
            )}
          </SelectContent>
        </Select>
        <Button
          onClick={handleAssignRole}
          disabled={!selectedRole || assignRoleMutation.isPending}
          size="sm"
        >
          {assignRoleMutation.isPending ? "Adding..." : "Add Role"}
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/admin/users/components/UserList.tsx
import { useState } from "react";
import { useGetUsers } from "../api/useGetUsers";
import { Card, CardFooter } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { EditUserDialog } from "./EditUserDialog";
import { UserTableRow } from "./UserTableRow";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

export function UserList() {
  const [page, setPage] = useState(1);
  const { data, isLoading, isError } = useGetUsers({ page, limit: 10 });
  const [editingUserId, setEditingUserId] = useState<string | null>(null);

  if (isLoading) return <div>Loading users...</div>;
  if (isError) return <div>Error loading users.</div>;

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Roles</TableHead>
              <TableHead>Created At</TableHead>
              <TableHead className="w-[50px]">
                <span className="sr-only">Actions</span>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data?.data?.length > 0 ? (
              data.data.map((user: any) => (
                <UserTableRow
                  key={user.id}
                  user={user}
                  onEdit={() => setEditingUserId(user.id)}
                />
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} className="h-24 text-center">
                  No users found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        <CardFooter className="pt-4">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page - 1);
                  }}
                  isActive={page > 1}
                />
              </PaginationItem>
              {Array.from({ length: data?.totalPages || 1 }, (_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(i + 1);
                    }}
                    isActive={page === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page + 1);
                  }}
                  isActive={page < (data?.totalPages || 1)}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </CardFooter>
      </Card>

      <EditUserDialog
        userId={editingUserId}
        isOpen={!!editingUserId}
        onOpenChange={(isOpen) => {
          if (!isOpen) {
            setEditingUserId(null);
          }
        }}
      />
    </>
  );
}

// FILE: src/features/admin/users/components/UserTableRow.tsx
import { TableCell, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2, ShieldAlert } from "lucide-react";
import { useDeleteUser } from "../api/useDeleteUser";
import { useSetUserStatus } from "../api/useSetUserStatus";
import { useHardDeleteUser } from "../api/useHardDeleteUser";
import { cn } from "@/lib/utils";
import { Switch } from "@/components/ui/switch";

interface UserTableRowProps {
  user: any;
  onEdit: (userId: string) => void;
}

export function UserTableRow({ user, onEdit }: UserTableRowProps) {
  const deleteUserMutation = useDeleteUser();
  const setUserStatusMutation = useSetUserStatus();
  const hardDeleteUserMutation = useHardDeleteUser();

  const handleDelete = (isHard: boolean) => {
    const action = isHard ? "permanently delete" : "soft-delete (deactivate)";
    if (
      window.confirm(`Are you sure you want to ${action} user: ${user.name}?`)
    ) {
      if (isHard) {
        hardDeleteUserMutation.mutate(user.id);
      } else {
        deleteUserMutation.mutate(user.id);
      }
    }
  };

  const handleStatusChange = (isActive: boolean) => {
    setUserStatusMutation.mutate({ userId: user.id, isActive });
  };

  return (
    <TableRow>
      <TableCell className="font-medium">
        <div className="flex items-center gap-3">
          <div className="flex flex-col">
            <span className="font-semibold">{user.name}</span>
            <span className="text-muted-foreground text-sm">{user.id}</span>
          </div>
        </div>
      </TableCell>
      <TableCell>{user.email}</TableCell>
      <TableCell>
        <div className="flex items-center gap-2">
          <Switch
            checked={user.isActive}
            onCheckedChange={handleStatusChange}
            aria-label="User active status"
          />
          <Badge
            variant={user.isActive ? "default" : "destructive"}
            className={cn(
              "pointer-events-none",
              user.isActive ? "bg-green-500" : ""
            )}
          >
            {user.isActive ? "Active" : "Inactive"}
          </Badge>
        </div>
      </TableCell>
      <TableCell className="max-w-xs space-x-1 truncate">
        {user.roles.map((role: string) => (
          <Badge key={role} variant="secondary">
            {role}
          </Badge>
        ))}
      </TableCell>
      <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>
      <TableCell>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem onClick={() => onEdit(user.id)}>
              <Edit className="mr-2 h-4 w-4" />
              <span>Edit User & Roles</span>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              className="text-amber-600 focus:text-amber-600"
              onClick={() => handleDelete(false)}
              disabled={deleteUserMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              <span>Deactivate (Soft Delete)</span>
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-600 focus:text-red-600"
              onClick={() => handleDelete(true)}
              disabled={hardDeleteUserMutation.isPending}
            >
              <ShieldAlert className="mr-2 h-4 w-4" />
              <span>Hard Delete</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </TableCell>
    </TableRow>
  );
}

// FILE: src/features/admin/workflows/api/useCreateWorkflow.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createWorkflow(workflowData: any): Promise<any> {
  const { data } = await api.post("/admin/workflows", workflowData);
  return data;
}

export function useCreateWorkflow() {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: createWorkflow,
    onSuccess: (newWorkflow) => {
      queryClient.setQueryData<any>(["workflows"], (oldData: any) => {
        if (!oldData) return oldData;
        return {
          ...oldData,
          data: [newWorkflow, ...oldData.data],
          total: oldData.total + 1,
        };
      });
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ["workflows"] });
    },
  });
}

// FILE: src/features/admin/workflows/api/useDeleteWorkflow.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function deleteWorkflow(workflowId: string): Promise<void> {
  await api.delete(`/admin/workflows/${workflowId}`);
}

export function useDeleteWorkflow() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deleteWorkflow,
    onSuccess: () => {
      toast.success("Workflow deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["workflows"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete workflow", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/admin/workflows/api/useGetWorkflow.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWorkflow(workflowId: string): Promise<any> {
  const { data } = await api.get(`/admin/workflows/${workflowId}`);
  return data;
}

export function useGetWorkflow(workflowId: string) {
  return useQuery<any>({
    queryKey: ["workflow", workflowId],
    queryFn: () => getWorkflow(workflowId),
    enabled: !!workflowId,
  });
}

// FILE: src/features/admin/workflows/api/useGetWorkflowRuns.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWorkflowRuns(workflowId: string, query: any): Promise<any> {
  const { data } = await api.get(`/admin/workflows/${workflowId}/runs`, {
    params: query,
  });
  return data;
}

export function useGetWorkflowRuns(workflowId: string, query: any) {
  return useQuery<any>({
    queryKey: ["workflow-runs", workflowId, query],
    queryFn: () => getWorkflowRuns(workflowId, query),
    enabled: !!workflowId,
  });
}

// FILE: src/features/admin/workflows/api/useGetWorkflows.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWorkflows(): Promise<any> {
  const { data } = await api.get("/admin/workflows");
  return data;
}

export function useGetWorkflows() {
  return useQuery<any>({
    queryKey: ["workflows"],
    queryFn: getWorkflows,
  });
}

// FILE: src/features/admin/workflows/api/useToggleWorkflow.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface ToggleParams {
  workflowId: string;
  enabled: boolean;
}

async function toggleWorkflow({
  workflowId,
  enabled,
}: ToggleParams): Promise<any> {
  const { data } = await api.post(`/admin/workflows/${workflowId}/toggle`, {
    enabled,
  });
  return data;
}

export function useToggleWorkflow() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, ToggleParams>({
    mutationFn: toggleWorkflow,
    onSuccess: (updatedWorkflow) => {
      queryClient.setQueryData(["workflows"], (oldData: any) => {
        if (!oldData) return oldData;
        return {
          ...oldData,
          data: oldData.data.map((w: any) =>
            w.id === updatedWorkflow.id ? updatedWorkflow : w
          ),
        };
      });
    },
  });
}

// FILE: src/features/admin/workflows/api/useUpdateWorkflow.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workflowId: string;
  data: any;
}

async function updateWorkflow({
  workflowId,
  data,
}: UpdateParams): Promise<any> {
  const response = await api.put(`/admin/workflows/${workflowId}`, data);
  return response.data;
}

export function useUpdateWorkflow() {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, UpdateParams>({
    mutationFn: updateWorkflow,
    onSuccess: (updatedWorkflow) => {
      queryClient.setQueryData(
        ["workflow", updatedWorkflow.id],
        updatedWorkflow
      );

      queryClient.setQueryData<any>(["workflows"], (oldData: any) => {
        if (!oldData) return oldData;
        return {
          ...oldData,
          data: oldData.data.map((w: any) =>
            w.id === updatedWorkflow.id ? updatedWorkflow : w
          ),
        };
      });
    },
    onSettled: (_data, _error, variables) => {
      queryClient.invalidateQueries({ queryKey: ["workflows"] });
      queryClient.invalidateQueries({
        queryKey: ["workflow", variables.workflowId],
      });
    },
  });
}

// FILE: src/features/admin/workflows/components/action-fields/CreateTaskFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function CreateTaskFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.title`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Task Title</FormLabel>
          <FormControl>
            <Input placeholder="Enter the title for the new task" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/action-fields/UpdateTaskStatusFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TaskStatus } from "@/types";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function UpdateTaskStatusFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.status`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>New Status</FormLabel>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder="Select a new status" />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {Object.values(TaskStatus).map((status) => (
                <SelectItem key={status} value={status}>
                  {status}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/ActionRepeater.tsx
import { Control, useWatch } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { WorkflowActionType } from "@/types";
import { UpdateTaskStatusFields } from "./action-fields/UpdateTaskStatusFields";
import { CreateTaskFields } from "./action-fields/CreateTaskFields";

interface ActionRepeaterProps {
  control: Control<any>;
  index: number;
  remove: (index: number) => void;
}

const actionFieldComponents: Record<string, React.FC<any>> = {
  UPDATE_TASK_STATUS: UpdateTaskStatusFields,
  CREATE_TASK: CreateTaskFields,
};

export function ActionRepeater({
  control,
  index,
  remove,
}: ActionRepeaterProps) {
  const actionType = useWatch({
    control,
    name: `actions.${index}.type`,
  });

  const SpecificFields = actionFieldComponents[actionType as string];

  return (
    <div className="flex items-start gap-4 rounded-md border bg-slate-50 p-4">
      <div className="flex-grow space-y-4">
        <FormField
          control={control}
          name={`actions.${index}.type`}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Action</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an action" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(WorkflowActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </FormItem>
          )}
        />
        {SpecificFields && <SpecificFields control={control} index={index} />}
      </div>
      <Button
        type="button"
        variant="ghost"
        size="icon"
        onClick={() => remove(index)}
        className="mt-8 shrink-0"
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}

// FILE: src/features/admin/workflows/components/CreateWorkflowDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from "react";
import { PlusCircle } from "lucide-react";
import { WorkflowForm } from "./WorkflowForm";

export function CreateWorkflowDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Workflow
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Create New Workflow</DialogTitle>
          <DialogDescription>
            Configure a trigger and a series of actions to automate your
            processes.
          </DialogDescription>
        </DialogHeader>
        <WorkflowForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/workflows/components/EditWorkflowDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetWorkflow } from "../api/useGetWorkflow";
import { WorkflowForm } from "./WorkflowForm";
import { Skeleton } from "@/components/ui/skeleton";

interface EditWorkflowDialogProps {
  workflowId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditWorkflowDialog({
  workflowId,
  isOpen,
  onOpenChange,
}: EditWorkflowDialogProps) {
  const { data: workflowData, isLoading } = useGetWorkflow(workflowId!);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Edit Workflow</DialogTitle>
          <DialogDescription>
            Modify the workflow's trigger and actions.
          </DialogDescription>
        </DialogHeader>
        {isLoading && workflowId ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-24 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        ) : (
          workflowData && (
            <WorkflowForm
              initialData={workflowData}
              onSuccess={() => onOpenChange(false)}
            />
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowForm.tsx
import { useForm, useFieldArray } from "react-hook-form";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ActivityActionType, TaskStatus, WorkflowActionType } from "@/types";
import { useCreateWorkflow } from "../api/useCreateWorkflow";
import { useUpdateWorkflow } from "../api/useUpdateWorkflow";
import { ActionRepeater } from "./ActionRepeater";
import { PlusCircle } from "lucide-react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const createTaskConfigSchema = z.object({
  title: z.string().min(1),
});

const updateTaskStatusConfigSchema = z.object({
  status: z.nativeEnum(TaskStatus),
});

const workflowActionSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal(WorkflowActionType.CREATE_TASK),
    config: createTaskConfigSchema,
    order: z.number(),
  }),
  z.object({
    type: z.literal(WorkflowActionType.UPDATE_TASK_STATUS),
    config: updateTaskStatusConfigSchema,
    order: z.number(),
  }),
]);

const workflowSchema = z.object({
  name: z.string().min(1, "Workflow name is required."),
  description: z.string().optional(),
  triggerType: z.nativeEnum(ActivityActionType),
  enabled: z.boolean(),
  actions: z.array(workflowActionSchema),
});

type WorkflowFormValues = z.infer<typeof workflowSchema>;

interface WorkflowFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function WorkflowForm({ initialData, onSuccess }: WorkflowFormProps) {
  const isEditMode = !!initialData;
  const createMutation = useCreateWorkflow();
  const updateMutation = useUpdateWorkflow();

  const mutation = isEditMode ? updateMutation : createMutation;
  const form = useForm<WorkflowFormValues>({
    resolver: zodResolver(workflowSchema),
    defaultValues: {
      name: "",
      description: "",
      triggerType: ActivityActionType.TASK_CREATED,
      enabled: true,
      actions: [],
    },
  });
  useEffect(() => {
    if (isEditMode) {
      form.reset({
        ...initialData,
        description: initialData.description ?? "",
      });
    }
  }, [initialData, isEditMode, form]);
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "actions",
  });
  async function onSubmit(values: WorkflowFormValues) {
    const finalValues = {
      ...values,
      actions: values.actions.map((action: any, index: any) => ({
        ...action,
        order: index,
      })),
    };
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { workflowId: initialData.id, data: finalValues },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(finalValues, {
        onSuccess: () => {
          form.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Workflow Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Notify on Task Creation" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="triggerType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>When this happens...</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a trigger event" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(ActivityActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <div>
          <h3 className="mb-2 text-sm font-medium">Do this...</h3>
          <div className="space-y-4 rounded-md border p-4">
            {fields.map((field, index) => (
              <ActionRepeater
                key={field.id}
                control={form.control}
                index={index}
                remove={remove}
              />
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() =>
                append({
                  type: WorkflowActionType.CREATE_TASK,
                  config: {},
                  order: fields.length,
                } as any)
              }
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Action
            </Button>
          </div>
        </div>

        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Workflow"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowList.tsx
import { useState } from "react";
import { useGetWorkflows } from "../api/useGetWorkflows";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Edit, Eye, Trash2, MoreHorizontal } from "lucide-react";
import { EditWorkflowDialog } from "./EditWorkflowDialog";
import { WorkflowRunsDialog } from "./WorkflowRunsDialog";
import { useToggleWorkflow } from "../api/useToggleWorkflow";
import { useDeleteWorkflow } from "../api/useDeleteWorkflow";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function WorkflowList() {
  const { data, isLoading, isError } = useGetWorkflows();
  const [editingWorkflowId, setEditingWorkflowId] = useState<string | null>(
    null
  );
  const [viewingRunsFor, setViewingRunsFor] = useState<any | null>(null);
  const toggleMutation = useToggleWorkflow();
  const deleteMutation = useDeleteWorkflow();

  if (isLoading) return <div>Loading workflows...</div>;
  if (isError) return <div>Error loading workflows.</div>;

  const handleDelete = (workflow: any) => {
    if (
      window.confirm(
        `Delete workflow "${workflow.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(workflow.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {data?.data.map((workflow: any) => (
          <Card key={workflow.id}>
            <CardHeader>
              <div className="flex items-start justify-between">
                <CardTitle>{workflow.name}</CardTitle>
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground text-sm">
                      {workflow.enabled ? "Enabled" : "Disabled"}
                    </span>
                    <Switch
                      checked={workflow.enabled}
                      onCheckedChange={(enabled) =>
                        toggleMutation.mutate({
                          workflowId: workflow.id,
                          enabled,
                        })
                      }
                    />
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 p-0"
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        onClick={() => setEditingWorkflowId(workflow.id)}
                      >
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setViewingRunsFor(workflow)}
                      >
                        <Eye className="mr-2 h-4 w-4" />
                        View Runs
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-500"
                        onClick={() => handleDelete(workflow)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-2">
              <p className="text-muted-foreground text-sm">
                {workflow.description}
              </p>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Trigger:</span>
                <Badge variant="outline">{workflow.triggerType}</Badge>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Actions:</span>
                <div className="flex flex-wrap gap-1">
                  {workflow.actions.map((action: any) => (
                    <Badge variant="secondary" key={action.id}>
                      {action.type}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <EditWorkflowDialog
        isOpen={!!editingWorkflowId}
        workflowId={editingWorkflowId}
        onOpenChange={(isOpen) => {
          if (!isOpen) {
            setEditingWorkflowId(null);
          }
        }}
      />
      <WorkflowRunsDialog
        isOpen={!!viewingRunsFor}
        workflowId={viewingRunsFor?.id ?? null}
        workflowName={viewingRunsFor?.name ?? ""}
        onOpenChange={(isOpen) => {
          if (!isOpen) {
            setViewingRunsFor(null);
          }
        }}
      />
    </>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunDetail.tsx
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";

interface WorkflowRunDetailProps {
  run: any | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-500",
  FAILED: "bg-red-500",
  RUNNING: "bg-blue-500",
};

export function WorkflowRunDetail({
  run,
  isOpen,
  onOpenChange,
}: WorkflowRunDetailProps) {
  if (!run) return null;

  return (
    <Drawer open={isOpen} onOpenChange={onOpenChange}>
      <DrawerContent>
        <div className="mx-auto w-full max-w-2xl">
          <DrawerHeader>
            <div className="flex items-center justify-between">
              <DrawerTitle>Workflow Run: {run.id}</DrawerTitle>
              <Badge className={cn(statusColors[run.status])}>
                {run.status}
              </Badge>
            </div>
            <DrawerDescription>
              Ran at: {new Date(run.startedAt).toLocaleString()}
            </DrawerDescription>
          </DrawerHeader>
          <div className="grid grid-cols-2 gap-4 px-4 pb-4">
            <div className="space-y-2">
              <h4 className="font-semibold">Trigger Context</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.context, null, 2)}
                </pre>
              </ScrollArea>
            </div>
            <div className="space-y-2">
              <h4 className="font-semibold">Execution Logs</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.logs, null, 2)}
                </pre>
              </ScrollArea>
            </div>
          </div>
        </div>
      </DrawerContent>
    </Drawer>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunList.tsx
import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { useGetWorkflowRuns } from "../api/useGetWorkflowRuns";
import { WorkflowRunDetail } from "./WorkflowRunDetail";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-100 text-green-800",
  FAILED: "bg-red-100 text-red-800",
  RUNNING: "bg-blue-100 text-blue-800",
};

export function WorkflowRunList({ workflowId }: { workflowId: string }) {
  const [selectedRun, setSelectedRun] = useState<any | null>(null);
  const { data, isLoading, isError } = useGetWorkflowRuns(workflowId, {
    page: 1,
    limit: 50,
  });

  if (isLoading) return <div>Loading run history...</div>;
  if (isError) return <div>Error loading run history.</div>;

  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Status</TableHead>
              <TableHead>Started At</TableHead>
              <TableHead>Completed At</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data?.data.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  This workflow has not been run yet.
                </TableCell>
              </TableRow>
            ) : (
              data?.data.map((run: any) => (
                <TableRow key={run.id}>
                  <TableCell>
                    <Badge
                      className={cn(statusColors[run.status])}
                      variant="outline"
                    >
                      {run.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {new Date(run.startedAt).toLocaleString()}
                  </TableCell>
                  <TableCell>
                    {run.completedAt
                      ? new Date(run.completedAt).toLocaleString()
                      : "N/A"}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedRun(run)}
                    >
                      View Details
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      <WorkflowRunDetail
        isOpen={!!selectedRun}
        run={selectedRun}
        onOpenChange={(isOpen) => !isOpen && setSelectedRun(null)}
      />
    </>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunsDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { WorkflowRunList } from "./WorkflowRunList";

interface WorkflowRunsDialogProps {
  workflowId: string | null;
  workflowName: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function WorkflowRunsDialog({
  workflowId,
  workflowName,
  isOpen,
  onOpenChange,
}: WorkflowRunsDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Run History: {workflowName}</DialogTitle>
          <DialogDescription>
            A log of all executions for this workflow.
          </DialogDescription>
        </DialogHeader>
        {workflowId && <WorkflowRunList workflowId={workflowId} />}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/announcements/api/useGetActiveAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getActiveAnnouncements(): Promise<any[]> {
  const { data } = await api.get("/announcements/active");
  return data;
}

export function useGetActiveAnnouncements() {
  return useQuery({
    queryKey: ["activeAnnouncements"],
    queryFn: getActiveAnnouncements,

    staleTime: 1000 * 60 * 5,
  });
}

// FILE: src/features/announcements/api/useGetAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getAnnouncements(query: any): Promise<any> {
  const { data } = await api.get("/announcements", { params: query });
  return data;
}

export function useGetAnnouncements(query: any) {
  return useQuery({
    queryKey: ["announcements", query],
    queryFn: () => getAnnouncements(query),
  });
}

async function getAnnouncement(id: string): Promise<any> {
  const { data } = await api.get(`/announcements/${id}`);
  return data;
}

export function useGetAnnouncement(id: string | null) {
  return useQuery<any>({
    queryKey: ["announcement", id],
    queryFn: () => getAnnouncement(id!),

    enabled: !!id,
  });
}

// FILE: src/features/announcements/components/ActiveAnnouncements.tsx
import { useState } from "react";
import { useGetActiveAnnouncements } from "../api/useGetActiveAnnouncements";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Megaphone, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { RichTextOutput } from "@/components/ui/RichTextOutput";

export function ActiveAnnouncements() {
  const { data: announcements, isLoading } = useGetActiveAnnouncements();
  const [dismissedIds, setDismissedIds] = useState<string[]>([]);

  if (isLoading || !announcements || announcements.length === 0) {
    return null;
  }

  const handleDismiss = (id: string) => {
    setDismissedIds((prev) => [...prev, id]);
  };

  const announcementsToShow = announcements.filter(
    (ann) => !dismissedIds.includes(ann.id)
  );

  if (announcementsToShow.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      {announcementsToShow.map((ann) => (
        <Alert key={ann.id}>
          <Megaphone className="h-4 w-4" />
          <div className="flex-grow">
            <AlertTitle className="flex items-center justify-between">
              <span>{ann.title}</span>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => handleDismiss(ann.id)}
              >
                <X className="h-4 w-4" />
              </Button>
            </AlertTitle>
            <AlertDescription>
              {ann.content?.message ? (
                <RichTextOutput html={ann.content.message} />
              ) : (
                "This announcement does not have a detailed message."
              )}
            </AlertDescription>
          </div>
        </Alert>
      ))}
    </div>
  );
}

// FILE: src/features/auth/api/useForgotPassword.ts
import api from "@/lib/api";
import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";

async function forgotPassword(email: string): Promise<{ message: string }> {
  const { data } = await api.post("/auth/forgot-password", { email });
  return data;
}

export function useForgotPassword() {
  return useMutation({
    mutationFn: forgotPassword,
    onSuccess: (data) => {
      toast.success("Request sent", {
        description: data.message,
      });
    },
    onError: (error: any) => {
      toast.error("Failed to send reset link", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/auth/api/useLogin.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useMutation } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { useNavigate } from "react-router-dom";

async function login(credentials: any): Promise<any> {
  console.log(
    "useLogin: Firing API call to /auth/login with credentials:",
    credentials
  );
  const { data } = await api.post("/auth/login", credentials);
  return data;
}

export function useLogin() {
  const navigate = useNavigate();
  const { setAccessToken } = useAuthStore();
  return useMutation<any, AxiosError, any>({
    mutationFn: login,
    onSuccess: (data) => {
      console.log("useLogin: Login successful, received data:", data);
      setAccessToken(data.accessToken);
      navigate("/dashboard", { replace: true });
    },
    onError: (error) => {
      console.error("useLogin: Login failed with error object:", error);
      if (error.response) {
        console.error("useLogin: Error response data:", error.response.data);
        console.error(
          "useLogin: Error response status:",
          error.response.status
        );
      } else if (error.request) {
        console.error(
          "useLogin: No response received, request was:",
          error.request
        );
      } else {
        console.error("useLogin: Error setting up request:", error.message);
      }
    },
  });
}

// FILE: src/features/auth/api/useLogout.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

async function logoutUser() {
  return api.post("/auth/logout");
}

export function useLogout() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);

  return useMutation({
    mutationFn: logoutUser,
    onSuccess: () => {
      queryClient.clear();

      setAccessToken(null);

      navigate("/login", { replace: true });
      toast.info("You have been successfully logged out.");
    },
    onError: () => {
      queryClient.clear();
      setAccessToken(null);
      navigate("/login", { replace: true });
      toast.warning(
        "Could not contact the server, but you have been logged out locally."
      );
    },
  });
}

// FILE: src/features/auth/api/useResetPassword.ts
import api from "@/lib/api";
import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

interface ResetPasswordData {
  token: string;
  newPassword: string;
}

async function resetPassword(
  resetData: ResetPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("/auth/reset-password", resetData);
  return data;
}

export function useResetPassword() {
  const navigate = useNavigate();
  return useMutation({
    mutationFn: resetPassword,
    onSuccess: (data) => {
      toast.success("Password Reset Successfully", {
        description: data.message,
      });
      navigate("/login");
    },
    onError: (error: any) => {
      toast.error("Failed to reset password", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/auth/api/useSetupPassword.ts
import api from "@/lib/api";
import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

interface SetupPasswordData {
  token: string;
  newPassword: string;
}

async function setupPassword(
  setupData: SetupPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("/auth/setup-password", setupData);
  return data;
}

export function useSetupPassword() {
  const navigate = useNavigate();
  return useMutation({
    mutationFn: setupPassword,
    onSuccess: (data) => {
      toast.success("Password Set Successfully", {
        description: data.message,
      });
      navigate("/login");
    },
    onError: (error: any) => {
      toast.error("Failed to set password", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/auth/components/ForgotPasswordForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useForgotPassword } from "../api/useForgotPassword";
import { Link } from "react-router-dom";

const forgotPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
});

type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>;

export function ForgotPasswordForm() {
  const forgotPasswordMutation = useForgotPassword();

  const form = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(forgotPasswordSchema),
    defaultValues: { email: "" },
  });

  function onSubmit(values: ForgotPasswordFormValues) {
    forgotPasswordMutation.mutate(values.email);
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Forgot Password?</h1>
        <p className="text-muted-foreground">
          Enter your email and we'll send you a link to reset it.
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="name@example.com" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={forgotPasswordMutation.isPending}
          >
            {forgotPasswordMutation.isPending
              ? "Sending..."
              : "Send Reset Link"}
          </Button>
        </form>
      </Form>
      <div className="mt-4 text-center text-sm">
        <Link to="/login" className="hover:text-primary underline">
          Back to login
        </Link>
      </div>
    </div>
  );
}

// FILE: src/features/auth/components/LoginForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useLogin } from "../api/useLogin";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { Link } from "react-router-dom";

const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
  password: z.string().min(1, "Password is required."),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export function LoginForm() {
  const loginMutation = useLogin();
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  function onSubmit(values: LoginFormValues) {
    console.log("LoginForm: Submitting with values:", values);
    loginMutation.mutate(values);
  }

  const getErrorMessage = () => {
    if (!loginMutation.isError || !loginMutation.error) {
      return null;
    }
    const error = loginMutation.error as AxiosError<{ message?: string }>;
    console.log("LoginForm: getErrorMessage received error:", error);
    return error.response?.data?.message || "An unexpected error occurred.";
  };

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome Back</h1>
        <p className="text-muted-foreground">
          Enter your credentials to sign in
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="name@example.com" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <div className="flex items-center justify-between">
                  <FormLabel>Password</FormLabel>
                  <Link
                    to="/forgot-password"
                    className="text-primary text-sm font-medium hover:underline"
                  >
                    Forgot Password?
                  </Link>
                </div>
                <FormControl>
                  <Input type="password" placeholder="••••••••" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {loginMutation.isError && (
            <div className="text-sm font-medium text-red-500">
              {getErrorMessage()}
            </div>
          )}
          <Button
            type="submit"
            className="w-full"
            disabled={loginMutation.isPending}
          >
            {loginMutation.isPending ? "Signing in..." : "Sign In"}
          </Button>
        </form>
      </Form>
    </div>
  );
}

// FILE: src/features/auth/components/ResetPasswordForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useResetPassword } from "../api/useResetPassword";
import { useSearchParams } from "react-router-dom";
import { useEffect } from "react";

const resetPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>;

export function ResetPasswordForm() {
  const resetPasswordMutation = useResetPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  const form = useForm<ResetPasswordFormValues>({
    resolver: zodResolver(resetPasswordSchema),
    defaultValues: {
      token: token || "",
      newPassword: "",
      confirmPassword: "",
    },
  });

  useEffect(() => {
    if (token) {
      form.setValue("token", token);
    }
  }, [token, form]);

  function onSubmit(values: ResetPasswordFormValues) {
    resetPasswordMutation.mutate(values);
  }

  if (!token) {
    return (
      <div className="text-center text-red-500">
        Invalid or missing reset token. Please request a new link.
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Reset Your Password</h1>
        <p className="text-muted-foreground">
          Enter and confirm your new password.
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="newPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>New Password</FormLabel>
                <FormControl>
                  <Input type="password" placeholder="••••••••" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="confirmPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Confirm New Password</FormLabel>
                <FormControl>
                  <Input type="password" placeholder="••••••••" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={resetPasswordMutation.isPending}
          >
            {resetPasswordMutation.isPending
              ? "Resetting..."
              : "Reset Password"}
          </Button>
        </form>
      </Form>
    </div>
  );
}

// FILE: src/features/auth/components/SetupPasswordForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useSetupPassword } from "../api/useSetupPassword";
import { useSearchParams } from "react-router-dom";
import { useEffect } from "react";

const setupPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type SetupPasswordFormValues = z.infer<typeof setupPasswordSchema>;

export function SetupPasswordForm() {
  const setupPasswordMutation = useSetupPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  const form = useForm<SetupPasswordFormValues>({
    resolver: zodResolver(setupPasswordSchema),
    defaultValues: {
      token: token || "",
      newPassword: "",
      confirmPassword: "",
    },
  });

  useEffect(() => {
    if (token) {
      form.setValue("token", token);
    }
  }, [token, form]);

  function onSubmit(values: SetupPasswordFormValues) {
    setupPasswordMutation.mutate(values);
  }

  if (!token) {
    return (
      <div className="text-center text-red-500">
        Invalid or missing invitation token. Please contact an administrator.
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome!</h1>
        <p className="text-muted-foreground">
          Set up your password to activate your account.
        </p>
      </div>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="newPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>New Password</FormLabel>
                <FormControl>
                  <Input type="password" placeholder="••••••••" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="confirmPassword"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Confirm New Password</FormLabel>
                <FormControl>
                  <Input type="password" placeholder="••••••••" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={setupPasswordMutation.isPending}
          >
            {setupPasswordMutation.isPending
              ? "Setting Password..."
              : "Set Password & Login"}
          </Button>
        </form>
      </Form>
    </div>
  );
}

// FILE: src/features/comments/api/useAddComment.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function addComment({
  workspaceId,
  projectId,
  taskId,
  content,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments`,
    { content }
  );
  return data;
}

export function useAddComment(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (content: string) =>
      addComment({ workspaceId, projectId, taskId, content }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["comments", taskId] });
    },
  });
}

// FILE: src/features/comments/api/useDeleteComment.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface DeleteCommentParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  commentId: string;
}

async function deleteComment({
  workspaceId,
  projectId,
  taskId,
  commentId,
}: DeleteCommentParams): Promise<any> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments/${commentId}`
  );
}

export function useDeleteComment(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (commentId: string) =>
      deleteComment({ workspaceId, projectId, taskId, commentId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["comments", taskId] });
    },
  });
}

// FILE: src/features/comments/api/useGetComments.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getComments(
  workspaceId: string,
  projectId: string,
  taskId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments`
  );
  return data;
}

export function useGetComments(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useQuery({
    queryKey: ["comments", taskId],
    queryFn: () => getComments(workspaceId, projectId, taskId),
    enabled: !!workspaceId && !!projectId && !!taskId,
  });
}

// FILE: src/features/comments/api/useUpdateComment.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface UpdateCommentParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  commentId: string;
  content: string;
}

async function updateComment({
  workspaceId,
  projectId,
  taskId,
  commentId,
  content,
}: UpdateCommentParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments/${commentId}`,
    { content }
  );
  return data;
}

export function useUpdateComment(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (data: { commentId: string; content: string }) =>
      updateComment({ workspaceId, projectId, taskId, ...data }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["comments", taskId] });
    },
  });
}

// FILE: src/features/comments/components/CommentItem.tsx
import { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useUpdateComment } from "../api/useUpdateComment";
import { useDeleteComment } from "../api/useDeleteComment";
import { EditableField } from "@/components/ui/EditableField";
import { toast } from "sonner";
import { RichTextOutput } from "@/components/ui/RichTextOutput";

interface CommentItemProps {
  comment: any;
  workspaceId: string;
  projectId: string;
  taskId: string;
}

export function CommentItem({
  comment,
  workspaceId,
  projectId,
  taskId,
}: CommentItemProps) {
  const [isEditing, setIsEditing] = useState(false);
  const updateCommentMutation = useUpdateComment(
    workspaceId,
    projectId,
    taskId
  );
  const deleteCommentMutation = useDeleteComment(
    workspaceId,
    projectId,
    taskId
  );

  const handleSave = (newContent: string) => {
    updateCommentMutation.mutate(
      { commentId: comment.id, content: newContent },
      {
        onSuccess: () => {
          setIsEditing(false);
          toast.success("Comment updated.");
        },
        onError: () => {
          toast.error("Failed to update comment.");
        },
      }
    );
  };

  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this comment?")) {
      deleteCommentMutation.mutate(comment.id, {
        onSuccess: () => {
          toast.success("Comment deleted.");
        },
        onError: () => {
          toast.error("Failed to delete comment.");
        },
      });
    }
  };

  const canEdit = true;

  return (
    <div className="flex items-start gap-3">
      <Avatar className="h-8 w-8">
        <AvatarImage src={comment.author.avatarUrl} />
        <AvatarFallback>{comment.author.name?.charAt(0)}</AvatarFallback>
      </Avatar>
      <div className="w-full">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm font-semibold">{comment.author.name}</span>
            <span className="text-muted-foreground text-xs">
              {new Date(comment.createdAt).toLocaleString()}
            </span>
          </div>
          {canEdit && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="h-6 w-6">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem onClick={() => setIsEditing(true)}>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="text-red-500"
                  onClick={handleDelete}
                  disabled={deleteCommentMutation.isPending}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>
        <div className="mt-1 rounded-md bg-gray-100 p-2 text-sm">
          {isEditing ? (
            <EditableField
              initialValue={comment.content}
              onSave={handleSave}
              as="richtext"
            />
          ) : (
            <RichTextOutput
              html={comment.content}
              className="prose prose-sm max-w-none"
            />
          )}
        </div>
      </div>
    </div>
  );
}
// FILE: src/features/comments/components/CommentSection.tsx
import { Button } from "@/components/ui/button";
import { useAddComment } from "../api/useAddComment";
import { useGetComments } from "../api/useGetComments";
import { useState, useCallback } from "react";
import { useSocketSubscription } from "@/hooks/useSocketSubscription";
import { useQueryClient } from "@tanstack/react-query";
import { CommentItem } from "./CommentItem";
import { RichTextEditor } from "@/components/ui/RichTextEditor";

export function CommentSection({ workspaceId, projectId, taskId }: any) {
  const queryClient = useQueryClient();
  const { data: commentsData, isLoading } = useGetComments(
    workspaceId,
    projectId,
    taskId
  );
  const addCommentMutation = useAddComment(workspaceId, projectId, taskId);
  const [newComment, setNewComment] = useState("");

  const handleCommentUpdate = useCallback(
    (event: any) => {
      const { action, comment } = event.payload;
      console.log("Received COMMENT_UPDATED event:", event.payload);
      queryClient.setQueryData(["comments", taskId], (oldData: any) => {
        if (!oldData) return oldData;
        let newComments;
        if (action === "created") {
          newComments = [comment, ...oldData.data];
        } else {
          newComments = oldData.data;
        }
        return { ...oldData, data: newComments };
      });
    },
    [queryClient, taskId]
  );

  useSocketSubscription("Project", projectId, {
    COMMENT_UPDATED: handleCommentUpdate,
  });

  const isCommentEmpty = () => {
    if (!newComment) return true;
    const cleaned = newComment.replace(/<p><\/p>/g, "").trim();
    return cleaned.length === 0;
  };

  const handleAddComment = () => {
    if (!isCommentEmpty()) {
      addCommentMutation.mutate(newComment, {
        onSuccess: () => setNewComment(""),
      });
    }
  };

  if (isLoading) return <div>Loading comments...</div>;

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Comments</h3>
      <div className="space-y-4">
        {commentsData?.data?.map((comment: any) => (
          <CommentItem
            key={comment.id}
            comment={comment}
            workspaceId={workspaceId}
            projectId={projectId}
            taskId={taskId}
          />
        ))}
      </div>
      <div className="space-y-2">
        <RichTextEditor value={newComment} onChange={setNewComment} />
        <Button
          onClick={handleAddComment}
          disabled={addCommentMutation.isPending || isCommentEmpty()}
        >
          {addCommentMutation.isPending ? "Posting..." : "Post Comment"}
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/crm/api/useCreatePerson.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function createPerson(personData: any): Promise<any> {
  const { data } = await api.post("/people", personData);
  return data;
}

export function useCreatePerson() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: createPerson,
    onSuccess: () => {
      toast.success("Person created successfully.");
      queryClient.invalidateQueries({ queryKey: ["people"] });
    },
    onError: (error: any) => {
      toast.error("Failed to create person", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/crm/api/useDeletePerson.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function deletePerson(personId: string): Promise<void> {
  await api.delete(`/people/${personId}`);
}

export function useDeletePerson() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deletePerson,
    onSuccess: () => {
      toast.success("Person deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["people"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete person", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/crm/api/useGetPeople.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getPeople(query: any): Promise<any> {
  const { data } = await api.get("/people", { params: query });
  return data;
}

export function useGetPeople(query: any) {
  return useQuery({
    queryKey: ["people", query],
    queryFn: () => getPeople(query),
  });
}

// FILE: src/features/crm/api/useGetPerson.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getPerson(personId: string): Promise<any> {
  const { data } = await api.get(`/people/${personId}`);
  return data;
}

export function useGetPerson(personId: string) {
  return useQuery({
    enabled: !!personId,
    queryKey: ["person", personId],
    queryFn: () => getPerson(personId),
  });
}

// FILE: src/features/crm/api/useUpdatePerson.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface UpdateParams {
  personId: string;
  data: any;
}

async function updatePerson({ personId, data }: UpdateParams): Promise<any> {
  const response = await api.put(`/people/${personId}`, data);
  return response.data;
}

export function useUpdatePerson() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, UpdateParams>({
    mutationFn: updatePerson,
    onSuccess: (data) => {
      toast.success("Person updated successfully.");
      queryClient.invalidateQueries({ queryKey: ["people"] });
      queryClient.setQueryData(["person", data.id], data);
    },
    onError: (error: any) => {
      toast.error("Failed to update person", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/crm/components/CreatePersonDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreatePersonForm } from "./CreatePersonForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreatePersonDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Person
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Person</DialogTitle>
          <DialogDescription>
            Add a new person to the CRM. This won't create a system user
            account.
          </DialogDescription>
        </DialogHeader>
        <CreatePersonForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/crm/components/CreatePersonForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreatePerson } from "../api/useCreatePerson";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const createPersonSchema = z.object({
  firstName: z.string().min(1, "First name is required."),
  lastName: z.string().min(1, "Last name is required."),
  email: z
    .string()
    .email("A valid email is required.")
    .optional()
    .or(z.literal("")),
});

type CreatePersonFormValues = z.infer<typeof createPersonSchema>;

interface CreatePersonFormProps {
  onSuccess?: () => void;
}

export function CreatePersonForm({ onSuccess }: CreatePersonFormProps) {
  const createMutation = useCreatePerson();

  const form = useForm<CreatePersonFormValues>({
    resolver: zodResolver(createPersonSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
    },
  });

  async function onSubmit(values: CreatePersonFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="firstName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>First Name</FormLabel>
              <FormControl>
                <Input placeholder="John" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="lastName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Last Name</FormLabel>
              <FormControl>
                <Input placeholder="Doe" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address (Optional)</FormLabel>
              <FormControl>
                <Input placeholder="name@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Person"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/crm/components/PersonCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";

interface PersonCardProps {
  person: any;
  onSelect: () => void;
}

export function PersonCard({ person, onSelect }: PersonCardProps) {
  return (
    <Card
      className="hover:border-primary cursor-pointer transition-colors"
      onClick={onSelect}
    >
      <CardHeader className="flex flex-row items-center gap-4">
        <Avatar className="h-12 w-12">
          <AvatarImage src={person.avatarUrl} alt={person.name} />
          <AvatarFallback>{person.name?.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <CardTitle className="text-base">{person.name}</CardTitle>
          <CardDescription className="text-xs">{person.email}</CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-wrap gap-1">
          {person.roles.map((role: string) => (
            <Badge key={role} variant="secondary">
              {role}
            </Badge>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/crm/components/PersonDetailContent.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  Cake,
  ExternalLink,
  Github,
  Globe,
  Linkedin,
  Mail,
  Phone,
  Twitter,
} from "lucide-react";
import { format } from "date-fns";
import { RichTextOutput } from "@/components/ui/RichTextOutput";

const socialIcons: Record<string, React.ElementType> = {
  LINKEDIN: Linkedin,
  TWITTER: Twitter,
  GITHUB: Github,
  WEBSITE: Globe,
  OTHER: ExternalLink,
};

function InfoItem({
  icon: Icon,
  label,
  value,
}: {
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
}) {
  if (!value) return null;
  return (
    <div className="flex items-start gap-3">
      <Icon className="text-muted-foreground mt-1 h-4 w-4" />
      <div>
        <p className="text-muted-foreground text-xs">{label}</p>
        <p className="text-sm">{value}</p>
      </div>
    </div>
  );
}

export function PersonDetailContent({ person }: { person: any }) {
  const name = `${person.firstName} ${person.lastName}`;
  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Avatar className="h-20 w-20">
          <AvatarImage src={person.avatarUrl} alt={name} />
          <AvatarFallback className="text-3xl">
            {name?.charAt(0)}
          </AvatarFallback>
        </Avatar>
        <div>
          <h2 className="text-2xl font-bold">{name}</h2>
          <div className="mt-1 flex flex-wrap gap-1">
            {person.roles?.map((role: string) => (
              <Badge key={role} variant="outline">
                {role}
              </Badge>
            ))}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <InfoItem icon={Mail} label="Email" value={person.email} />
        <InfoItem icon={Phone} label="Phone" value={person.phoneNumber} />
        <InfoItem
          icon={Cake}
          label="Birthday"
          value={person.birthday && format(new Date(person.birthday), "PPP")}
        />
      </div>

      {person.biography && (
        <div>
          <h3 className="mb-2 font-semibold">Biography</h3>
          <div className="prose prose-sm dark:prose-invert max-w-none">
            <RichTextOutput html={person.biography} />
          </div>
        </div>
      )}

      {person.socialLinks?.length > 0 && (
        <div>
          <h3 className="mb-2 font-semibold">On the Web</h3>
          <div className="space-y-2">
            {person.socialLinks.map((link: any) => {
              const Icon = socialIcons[link.provider] || ExternalLink;
              return (
                <a
                  key={link.id}
                  href={link.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="hover:text-primary flex items-center gap-2 text-sm"
                >
                  <Icon className="h-4 w-4" />
                  <span className="truncate">{link.url}</span>
                </a>
              );
            })}
          </div>
        </div>
      )}

      {person.skills?.length > 0 && (
        <div>
          <h3 className="mb-2 font-semibold">Skills</h3>
          <div className="flex flex-wrap gap-2">
            {person.skills.map((skill: any) => (
              <Badge key={skill.id} variant="secondary">
                {skill.name}
              </Badge>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

// FILE: src/features/crm/components/PersonDetailPanel.tsx
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
} from "@/components/ui/sheet";
import { useGetPerson } from "../api/useGetPerson";
import { Skeleton } from "@/components/ui/skeleton";
import { PersonDetailContent } from "./PersonDetailContent";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useDeletePerson } from "../api/useDeletePerson";

interface PersonDetailPanelProps {
  personId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex items-center gap-4">
      <Skeleton className="h-20 w-20 rounded-full" />
      <div className="space-y-2">
        <Skeleton className="h-7 w-48" />
        <Skeleton className="h-4 w-64" />
      </div>
    </div>
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-20 w-full" />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-12 w-full" />
  </div>
);

export function PersonDetailPanel({
  personId,
  onOpenChange,
}: PersonDetailPanelProps) {
  const { data: person, isLoading } = useGetPerson(personId!);
  const deleteMutation = useDeletePerson();

  const handleDelete = () => {
    if (window.confirm(`Are you sure you want to delete ${person.name}?`)) {
      deleteMutation.mutate(person.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <Sheet open={!!personId} onOpenChange={onOpenChange}>
      <SheetContent className="flex w-full flex-col sm:max-w-lg">
        {isLoading ? (
          <PanelSkeleton />
        ) : person ? (
          <>
            <SheetHeader>
              <SheetTitle>{`${person.firstName} ${person.lastName}`}</SheetTitle>
              <SheetDescription>{person.email}</SheetDescription>
            </SheetHeader>
            <div className="h-[calc(100vh-8rem)] flex-1 overflow-y-auto py-4 pr-4">
              <PersonDetailContent person={person} />
            </div>
            <SheetFooter className="mt-auto border-t pt-4">
              <div className="flex w-full justify-end gap-2">
                <Button variant="outline">
                  <Edit className="mr-2 h-4 w-4" /> Edit
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleDelete}
                  disabled={deleteMutation.isPending}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  {deleteMutation.isPending ? "Deleting..." : "Delete"}
                </Button>
              </div>
            </SheetFooter>
          </>
        ) : (
          <div className="p-6">Could not load person details.</div>
        )}
      </SheetContent>
    </Sheet>
  );
}

// FILE: src/features/crm/components/PersonList.tsx
import { useState } from "react";
import { useGetPeople } from "../api/useGetPeople";
import { useDebounce } from "@/hooks/useDebounce";
import { Input } from "@/components/ui/input";
import { PersonTableRow } from "./PersonTableRow";
import { Skeleton } from "@/components/ui/skeleton";
import { EmptyState } from "@/components/ui/empty-state";
import { Contact } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardFooter } from "@/components/ui/card";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

interface PersonListProps {
  onPersonSelect: (personId: string) => void;
}

const PersonListSkeleton = () => (
  <div className="space-y-2">
    {Array.from({ length: 8 }).map((_, i) => (
      <Skeleton key={i} className="h-12 w-full rounded-lg" />
    ))}
  </div>
);

export function PersonList({ onPersonSelect }: PersonListProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  const { data, isLoading, isError } = useGetPeople({
    search: debouncedSearchTerm,
    page,
    limit: 10,
  });

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        placeholder="Search by name or email..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="max-w-sm"
      />

      {isLoading && <PersonListSkeleton />}

      {!isLoading && data?.data?.length > 0 && (
        <Card>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Roles</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {data.data.map((person: any) => (
                <PersonTableRow
                  key={person.id}
                  person={person}
                  onSelect={() => onPersonSelect(person.id)}
                />
              ))}
            </TableBody>
          </Table>
          <CardFooter className="pt-4">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(page - 1);
                    }}
                    isActive={page > 1}
                  />
                </PaginationItem>
                {[...Array(data.totalPages)].map((_, i) => (
                  <PaginationItem key={i}>
                    <PaginationLink
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        handlePageChange(i + 1);
                      }}
                      isActive={page === i + 1}
                    >
                      {i + 1}
                    </PaginationLink>
                  </PaginationItem>
                ))}
                <PaginationItem>
                  <PaginationNext
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(page + 1);
                    }}
                    isActive={page < data.totalPages}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </CardFooter>
        </Card>
      )}

      {!isLoading && (!data || data.data.length === 0) && (
        <EmptyState
          icon={<Contact />}
          title="No People Found"
          description="No one matches your search criteria, or no people have been added yet."
        />
      )}

      {isError && <div>Error loading people.</div>}
    </div>
  );
}

// FILE: src/features/crm/components/PersonTableRow.tsx
import { TableCell, TableRow } from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface PersonTableRowProps {
  person: any;
  onSelect: () => void;
}

export function PersonTableRow({ person, onSelect }: PersonTableRowProps) {
  return (
    <TableRow onClick={onSelect} className="cursor-pointer">
      <TableCell>
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage
              src={person.avatarUrl}
              alt={`${person.firstName} ${person.lastName}`}
            />
            <AvatarFallback>{person.firstName?.charAt(0)}</AvatarFallback>
          </Avatar>
          <span className="font-medium">{`${person.firstName} ${person.lastName}`}</span>
        </div>
      </TableCell>
      <TableCell>{person.email}</TableCell>
      <TableCell>
        <div className="flex flex-wrap gap-1">
          {person.roles.map((role: string) => (
            <Badge key={role} variant="secondary">
              {role}
            </Badge>
          ))}
        </div>
      </TableCell>
      <TableCell>
        <Badge
          variant={person.isActive ? "default" : "destructive"}
          className={cn(
            "pointer-events-none",
            person.isActive ? "bg-green-500" : ""
          )}
        >
          {person.isActive ? "Active" : "Inactive"}
        </Badge>
      </TableCell>
    </TableRow>
  );
}

// FILE: src/features/custom-fields/api/useCreateCustomFieldDefinition.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface CreateParams {
  workspaceId: string;
  projectId: string;
  definitionData: any;
}

async function createCustomFieldDefinition({
  workspaceId,
  projectId,
  definitionData,
}: CreateParams): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    definitionData
  );
  return data;
}

export function useCreateCustomFieldDefinition(
  workspaceId: string,
  projectId: string
) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (definitionData) =>
      createCustomFieldDefinition({ workspaceId, projectId, definitionData }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: ["customFieldDefinitions", projectId],
      });
    },
  });
}

// FILE: src/features/custom-fields/api/useDeleteCustomFieldDefinition.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface DeleteParams {
  workspaceId: string;
  projectId: string;
  customFieldId: string;
}

async function deleteCustomFieldDefinition({
  workspaceId,
  projectId,
  customFieldId,
}: DeleteParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields/${customFieldId}`
  );
}

export function useDeleteCustomFieldDefinition(
  workspaceId: string,
  projectId: string
) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (customFieldId) =>
      deleteCustomFieldDefinition({ workspaceId, projectId, customFieldId }),
    onSuccess: () => {
      toast.success("Custom field deleted.");
      queryClient.invalidateQueries({
        queryKey: ["customFieldDefinitions", projectId],
      });
    },
    onError: (error: any) => {
      toast.error("Failed to delete custom field", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/custom-fields/api/useGetCustomFieldDefinitions.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getCustomFieldDefinitions(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields`
  );
  return data;
}

export function useGetCustomFieldDefinitions(
  workspaceId: string,
  projectId: string
) {
  return useQuery({
    queryKey: ["customFieldDefinitions", projectId],
    queryFn: () => getCustomFieldDefinitions(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

async function getCustomFieldDefinition(
  workspaceId: string,
  projectId: string,
  customFieldId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields/${customFieldId}`
  );
  return data;
}

export function useGetCustomFieldDefinition(
  workspaceId: string,
  projectId: string,
  customFieldId: string | null
) {
  return useQuery({
    queryKey: ["customFieldDefinition", customFieldId],
    queryFn: () =>
      getCustomFieldDefinition(workspaceId, projectId, customFieldId!),
    enabled: !!workspaceId && !!projectId && !!customFieldId,
  });
}

// FILE: src/features/custom-fields/api/useUpdateCustomFieldDefinition.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workspaceId: string;
  projectId: string;
  customFieldId: string;
  definitionData: any;
}

async function updateCustomFieldDefinition({
  workspaceId,
  projectId,
  customFieldId,
  definitionData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields/${customFieldId}`,
    definitionData
  );
  return data;
}

export function useUpdateCustomFieldDefinition(
  workspaceId: string,
  projectId: string
) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, { customFieldId: string; data: any }>({
    mutationFn: ({ customFieldId, data }) =>
      updateCustomFieldDefinition({
        workspaceId,
        projectId,
        customFieldId,
        definitionData: data,
      }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: ["customFieldDefinitions", projectId],
      });
    },
  });
}

// FILE: src/features/custom-fields/components/CreateCustomFieldDialog.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PlusCircle } from "lucide-react";
import { CustomFieldDefinitionForm } from "./CustomFieldDefinitionForm";

interface Props {
  workspaceId: string;
  projectId: string;
}

export function CreateCustomFieldDialog({ workspaceId, projectId }: Props) {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Custom Field
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Custom Field</DialogTitle>
          <DialogDescription>
            This field will be available for all tasks in this project.
          </DialogDescription>
        </DialogHeader>
        <CustomFieldDefinitionForm
          workspaceId={workspaceId}
          projectId={projectId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/custom-fields/components/CustomFieldDefinitionForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { CustomFieldType } from "@/types";
import { useCreateCustomFieldDefinition } from "../api/useCreateCustomFieldDefinition";
import { useUpdateCustomFieldDefinition } from "../api/useUpdateCustomFieldDefinition";
import { useEffect } from "react";

interface FormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CustomFieldDefinitionForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: FormProps) {
  const isEditMode = !!initialData;
  const createMutation = useCreateCustomFieldDefinition(workspaceId, projectId);
  const updateMutation = useUpdateCustomFieldDefinition(workspaceId, projectId);

  const mutation = isEditMode ? updateMutation : createMutation;
  const form = useForm<any>({
    defaultValues: {
      name: "",
      type: CustomFieldType.TEXT,
      options: { values: [] },
    },
  });
  const selectedType = form.watch("type");

  useEffect(() => {
    if (isEditMode && initialData) {
      form.reset({
        ...initialData,
        options: {
          values: initialData.options?.values || [],
        },
      });
    }
  }, [initialData, isEditMode, form]);

  const onSubmit = (values: any) => {
    const basePayload: { name: string; type: string; options?: any } = {
      name: values.name,
      type: values.type,
    };

    if (values.type === "SELECT") {
      basePayload.options = {
        values:
          typeof values.options.values === "string"
            ? values.options.values
                .split(",")
                .map((s: string) => s.trim())
                .filter(Boolean)
            : values.options.values,
      };
    }

    if (isEditMode) {
      updateMutation.mutate(
        { customFieldId: initialData.id, data: basePayload },
        { onSuccess }
      );
    } else {
      createMutation.mutate(basePayload, {
        onSuccess: () => {
          form.reset();
          onSuccess?.();
        },
      });
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Field Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Story Points" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="type"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Field Type</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
                disabled={isEditMode}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a field type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(CustomFieldType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        {selectedType === "SELECT" && (
          <FormField
            control={form.control}
            name="options.values"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Options</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="Enter comma-separated values, e.g., Low, Medium, High"
                    {...field}
                    value={
                      Array.isArray(field.value)
                        ? field.value.join(", ")
                        : field.value
                    }
                  />
                </FormControl>
                <FormDescription>
                  For 'Select' type fields, provide a comma-separated list of
                  options.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
        )}
        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Field"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/custom-fields/components/CustomFieldDefinitionList.tsx
import { useState } from "react";
import { useGetCustomFieldDefinitions } from "../api/useGetCustomFieldDefinitions";
import { useDeleteCustomFieldDefinition } from "../api/useDeleteCustomFieldDefinition";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { EditCustomFieldDialog } from "./EditCustomFieldDialog";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

export function CustomFieldDefinitionList({
  workspaceId,
  projectId,
}: ListProps) {
  const { data: fieldsData, isLoading } = useGetCustomFieldDefinitions(
    workspaceId,
    projectId
  );
  const deleteMutation = useDeleteCustomFieldDefinition(workspaceId, projectId);
  const [editingFieldId, setEditingFieldId] = useState<string | null>(null);

  const handleDelete = (field: any) => {
    if (
      window.confirm(`Delete custom field "${field.name}"? This is permanent.`)
    ) {
      deleteMutation.mutate(field.id);
    }
  };

  if (isLoading) return <div>Loading custom fields...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Type</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {fieldsData?.data.length > 0 ? (
              fieldsData.data.map((field: any) => (
                <TableRow key={field.id}>
                  <TableCell className="font-medium">{field.name}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{field.type}</Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem
                          onClick={() => setEditingFieldId(field.id)}
                        >
                          <Edit className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          className="text-red-500"
                          onClick={() => handleDelete(field)}
                          disabled={deleteMutation.isPending}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={3} className="h-24 text-center">
                  No custom fields defined for this project.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <EditCustomFieldDialog
        fieldId={editingFieldId}
        workspaceId={workspaceId}
        projectId={projectId}
        isOpen={!!editingFieldId}
        onOpenChange={(isOpen) => !isOpen && setEditingFieldId(null)}
      />
    </>
  );
}

// FILE: src/features/custom-fields/components/EditCustomFieldDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { CustomFieldDefinitionForm } from "./CustomFieldDefinitionForm";
import { useGetCustomFieldDefinition } from "../api/useGetCustomFieldDefinitions";
import { Skeleton } from "@/components/ui/skeleton";

interface EditDialogProps {
  fieldId: string | null;
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditCustomFieldDialog({
  fieldId,
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditDialogProps) {
  const { data: fieldData, isLoading } = useGetCustomFieldDefinition(
    workspaceId,
    projectId,
    fieldId
  );

  if (!fieldId) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Custom Field</DialogTitle>
          <DialogDescription>
            Change the name or options for this custom field. The type cannot be
            changed after creation.
          </DialogDescription>
        </DialogHeader>
        {isLoading ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-9 w-24" />
          </div>
        ) : (
          fieldData && (
            <CustomFieldDefinitionForm
              workspaceId={workspaceId}
              projectId={projectId}
              initialData={fieldData}
              onSuccess={() => onOpenChange(false)}
            />
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/dashboards/api/useCreateDashboard.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function createDashboard({
  workspaceId,
  projectId,
  dashboardData,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards`,
    dashboardData
  );
  return data;
}

export function useCreateDashboard(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (dashboardData: any) =>
      createDashboard({ workspaceId, projectId, dashboardData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["dashboards", projectId] });
    },
  });
}

// FILE: src/features/dashboards/api/useDeleteDashboard.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface DeleteParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
}

async function deleteDashboard({
  workspaceId,
  projectId,
  dashboardId,
}: DeleteParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}`
  );
}

export function useDeleteDashboard(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (dashboardId) =>
      deleteDashboard({ workspaceId, projectId, dashboardId }),
    onSuccess: () => {
      toast.success("Dashboard deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["dashboards", projectId] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete dashboard", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/dashboards/api/useGetDashboard.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getDashboard(
  workspaceId: string,
  projectId: string,
  dashboardId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}`
  );
  return data;
}

export function useGetDashboard(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  return useQuery({
    queryKey: ["dashboard", dashboardId],
    queryFn: () => getDashboard(workspaceId, projectId, dashboardId),
    enabled: !!workspaceId && !!projectId && !!dashboardId,
  });
}

// FILE: src/features/dashboards/api/useGetDashboards.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getDashboards(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards`
  );
  return data;
}

export function useGetDashboards(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["dashboards", projectId],
    queryFn: () => getDashboards(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/dashboards/api/useUpdateDashboard.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface UpdateParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  dashboardData: any;
}

async function updateDashboard({
  workspaceId,
  projectId,
  dashboardId,
  dashboardData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}`,
    dashboardData
  );
  return data;
}

export function useUpdateDashboard(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (dashboardData) =>
      updateDashboard({ workspaceId, projectId, dashboardId, dashboardData }),
    onSuccess: (updatedDashboard) => {
      toast.success("Dashboard updated successfully.");
      queryClient.invalidateQueries({ queryKey: ["dashboards", projectId] });
      queryClient.setQueryData(["dashboard", dashboardId], updatedDashboard);
    },
    onError: (error: any) => {
      toast.error("Failed to update dashboard", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/dashboards/components/CreateDashboardDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateDashboardForm } from "./CreateDashboardForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

interface CreateDashboardDialogProps {
  workspaceId: string;
  projectId: string;
}

export function CreateDashboardDialog({
  workspaceId,
  projectId,
}: CreateDashboardDialogProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Dashboard
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create New Dashboard</DialogTitle>
          <DialogDescription>
            Dashboards contain widgets to visualize your project data.
          </DialogDescription>
        </DialogHeader>
        <CreateDashboardForm
          workspaceId={workspaceId}
          projectId={projectId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/dashboards/components/CreateDashboardForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateDashboard } from "../api/useCreateDashboard";
import { useUpdateDashboard } from "../api/useUpdateDashboard";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const dashboardSchema = z.object({
  name: z.string().min(2, "Dashboard name must be at least 2 characters."),
  description: z.string().optional(),
});

type DashboardFormValues = z.infer<typeof dashboardSchema>;

interface DashboardFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CreateDashboardForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: DashboardFormProps) {
  const isEditMode = !!initialData;
  const createMutation = useCreateDashboard(workspaceId, projectId);
  const updateMutation = useUpdateDashboard(
    workspaceId,
    projectId,
    initialData?.id
  );
  const mutation = isEditMode ? updateMutation : createMutation;

  const form = useForm<DashboardFormValues>({
    resolver: zodResolver(dashboardSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      form.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, form]);
  async function onSubmit(values: DashboardFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(values, { onSuccess });
    } else {
      await createMutation.mutateAsync(
        { ...values, projectId },
        {
          onSuccess: () => {
            form.reset();
            onSuccess?.();
          },
        }
      );
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Dashboard Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Q3 Metrics" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input
                  placeholder="A summary of what this dashboard tracks"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Dashboard"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/dashboards/components/DashboardCard.tsx
import {
  Card,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useDeleteDashboard } from "../api/useDeleteDashboard";

interface DashboardCardProps {
  dashboard: any;
  onEdit: (dashboardId: string) => void;
}

export function DashboardCard({ dashboard, onEdit }: DashboardCardProps) {
  const deleteMutation = useDeleteDashboard(
    dashboard.workspaceId,
    dashboard.projectId
  );

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${dashboard.name}" dashboard?`
      )
    ) {
      deleteMutation.mutate(dashboard.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(dashboard.id);
  };

  const dashboardUrl = `./${dashboard.id}`;

  return (
    <Link to={dashboardUrl}>
      <Card className="hover:border-primary transition-colors">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <CardTitle>{dashboard.name}</CardTitle>
              <CardDescription>
                {dashboard.description || "No description provided."}
              </CardDescription>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 flex-shrink-0 p-0"
                  onClick={(e) => e.preventDefault()}
                >
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={handleEdit}>
                  <Edit className="mr-2 h-4 w-4" />
                  <span>Edit</span>
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="text-red-600 focus:text-red-600"
                  onClick={handleDelete}
                  disabled={deleteMutation.isPending}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  <span>Delete</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>
      </Card>
    </Link>
  );
}

// FILE: src/features/dashboards/components/DashboardList.tsx
import { useGetDashboards } from "../api/useGetDashboards";
import { DashboardCard } from "./DashboardCard";
import { useState } from "react";
import { EditDashboardDialog } from "./EditDashboardDialog";

export function DashboardList({
  workspaceId,
  projectId,
}: {
  workspaceId: string;
  projectId: string;
}) {
  const { data, isLoading, isError } = useGetDashboards(workspaceId, projectId);
  const [editingDashboardId, setEditingDashboardId] = useState<string | null>(
    null
  );

  if (isLoading) return <div>Loading dashboards...</div>;
  if (isError) return <div>Error loading dashboards.</div>;
  if (!data || data.data.length === 0) {
    return <p>This project has no dashboards yet. Create one to begin!</p>;
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((dashboard: any) => (
          <DashboardCard
            dashboard={{ ...dashboard, workspaceId, projectId }}
            key={dashboard.id}
            onEdit={setEditingDashboardId}
          />
        ))}
      </div>
      <EditDashboardDialog
        workspaceId={workspaceId}
        projectId={projectId}
        dashboardId={editingDashboardId}
        isOpen={!!editingDashboardId}
        onOpenChange={(isOpen) => !isOpen && setEditingDashboardId(null)}
      />
    </>
  );
}

// FILE: src/features/dashboards/components/EditDashboardDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetDashboard } from "../api/useGetDashboard";
import { CreateDashboardForm } from "./CreateDashboardForm";
import { Skeleton } from "@/components/ui/skeleton";

interface EditDialogProps {
  workspaceId: string;
  projectId: string;
  dashboardId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditDashboardDialog({
  workspaceId,
  projectId,
  dashboardId,
  isOpen,
  onOpenChange,
}: EditDialogProps) {
  const { data: dashboardData, isLoading } = useGetDashboard(
    workspaceId,
    projectId,
    dashboardId!
  );

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Dashboard</DialogTitle>
          <DialogDescription>
            Make changes to your dashboard here. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        {isLoading && dashboardId ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-9 w-24" />
          </div>
        ) : (
          dashboardData && (
            <CreateDashboardForm
              workspaceId={workspaceId}
              projectId={projectId}
              initialData={dashboardData}
              onSuccess={() => onOpenChange(false)}
            />
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/epics/api/useCreateEpic.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createEpic({
  workspaceId,
  projectId,
  epicData,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`,
    epicData
  );
  return data;
}

export function useCreateEpic(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: (epicData) => createEpic({ workspaceId, projectId, epicData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["epics", projectId] });
    },
  });
}

// FILE: src/features/epics/api/useDeleteEpic.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function deleteEpic({
  workspaceId,
  projectId,
  epicId,
}: {
  workspaceId: string;
  projectId: string;
  epicId: string;
}): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/epics/${epicId}`
  );
}

export function useDeleteEpic(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();

  return useMutation<void, AxiosError, string>({
    mutationFn: (epicId) => deleteEpic({ workspaceId, projectId, epicId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["epics", projectId] });
    },
  });
}

// FILE: src/features/epics/api/useGetEpics.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getEpic(
  workspaceId: string,
  projectId: string,
  epicId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/epics/${epicId}`
  );
  return data;
}

export function useGetEpic(
  workspaceId: string,
  projectId: string,
  epicId: string | null
) {
  return useQuery({
    queryKey: ["epic", epicId],
    queryFn: () => getEpic(workspaceId, projectId, epicId!),
    enabled: !!workspaceId && !!projectId && !!epicId,
  });
}

async function getEpics(workspaceId: string, projectId: string): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`
  );
  return data;
}

export function useGetEpics(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["epics", projectId],
    queryFn: () => getEpics(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/epics/api/useUpdateEpic.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workspaceId: string;
  projectId: string;
  epicId: string;
  epicData: any;
}

async function updateEpic({
  workspaceId,
  projectId,
  epicId,
  epicData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/epics/${epicId}`,
    epicData
  );
  return data;
}

export function useUpdateEpic(
  workspaceId: string,
  projectId: string,
  epicId: string
) {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: (epicData) =>
      updateEpic({ workspaceId, projectId, epicId, epicData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["epics", projectId] });
    },
  });
}

// FILE: src/features/epics/components/CreateEpicDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateEpicForm } from "./CreateEpicForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

interface CreateEpicDialogProps {
  workspaceId: string;
  projectId: string;
}

export function CreateEpicDialog({
  workspaceId,
  projectId,
}: CreateEpicDialogProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Epic
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Epic</DialogTitle>
          <DialogDescription>
            Epics are large bodies of work that can be broken down into a number
            of smaller tasks.
          </DialogDescription>
        </DialogHeader>
        <CreateEpicForm
          workspaceId={workspaceId}
          projectId={projectId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/epics/components/CreateEpicForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { useCreateEpic } from "../api/useCreateEpic";
import { EpicStatus } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const epicSchema = z.object({
  name: z.string().min(3, "Epic name must be at least 3 characters."),
  description: z.string().optional(),
  status: z.nativeEnum(EpicStatus),
});
type EpicFormValues = z.infer<typeof epicSchema>;

interface CreateEpicFormProps {
  workspaceId: string;
  projectId: string;
  onSuccess?: () => void;
}

export function CreateEpicForm({
  workspaceId,
  projectId,
  onSuccess,
}: CreateEpicFormProps) {
  const createMutation = useCreateEpic(workspaceId, projectId);
  const form = useForm<EpicFormValues>({
    resolver: zodResolver(epicSchema),
    defaultValues: {
      name: "",
      description: "",
      status: EpicStatus.TODO,
    },
  });
  async function onSubmit(values: EpicFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Epic Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., 2025 Marketing Campaign" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Epic"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/epics/components/EditEpicDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetEpic } from "../api/useGetEpics";
import { Skeleton } from "@/components/ui/skeleton";
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { useUpdateEpic } from "../api/useUpdateEpic";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const editEpicSchema = z.object({
  name: z.string().min(3, "Epic name must be at least 3 characters."),
  description: z.string().optional(),
});
type EditEpicFormValues = z.infer<typeof editEpicSchema>;

interface EditEpicDialogProps {
  epicId: string | null;
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditEpicDialog({
  epicId,
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditEpicDialogProps) {
  const { data: epic, isLoading } = useGetEpic(workspaceId, projectId, epicId);
  const updateMutation = useUpdateEpic(workspaceId, projectId, epicId!);
  const form = useForm<EditEpicFormValues>({
    resolver: zodResolver(editEpicSchema),
  });

  useEffect(() => {
    if (epic) {
      form.reset({
        name: epic.name,
        description: epic.description || "",
      });
    }
  }, [epic, form]);

  async function onSubmit(values: EditEpicFormValues) {
    updateMutation.mutate(values, {
      onSuccess: () => onOpenChange(false),
    });
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Epic</DialogTitle>
          <DialogDescription>
            Make changes to your epic's details.
          </DialogDescription>
        </DialogHeader>
        {isLoading ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-24 w-full" />
          </div>
        ) : (
          epic && (
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-4"
              >
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Epic Name</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <RichTextEditor
                          value={field.value ?? ""}
                          onChange={field.onChange}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" disabled={updateMutation.isPending}>
                  {updateMutation.isPending ? "Saving..." : "Save Changes"}
                </Button>
              </form>
            </Form>
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/epics/components/EpicList.tsx
import { useState } from "react";
import { useGetEpics } from "../api/useGetEpics";
import { useDeleteEpic } from "../api/useDeleteEpic";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Edit, Trash2 } from "lucide-react";
import { EditEpicDialog } from "./EditEpicDialog";

export function EpicList({ workspaceId, projectId }: any) {
  const { data, isLoading, isError } = useGetEpics(workspaceId, projectId);
  const deleteMutation = useDeleteEpic(workspaceId, projectId);
  const [editingEpicId, setEditingEpicId] = useState<string | null>(null);

  if (isLoading) return <div>Loading epics...</div>;
  if (isError) return <div>Error loading epics.</div>;

  const handleDelete = (epic: any) => {
    if (
      window.confirm(`Are you sure you want to delete the epic "${epic.name}"?`)
    ) {
      deleteMutation.mutate(epic.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {data?.data?.length > 0 ? (
          data.data.map((epic: any) => (
            <Card key={epic.id}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div>
                    <CardTitle>{epic.name}</CardTitle>
                    <CardDescription className="mt-1">
                      {epic.description || "No description."}
                    </CardDescription>
                  </div>
                  <div className="flex gap-1">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setEditingEpicId(epic.id)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleDelete(epic)}
                    >
                      <Trash2 className="text-destructive h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-muted-foreground">
                    Status: {epic.status}
                  </span>
                  <div className="flex w-1/3 items-center gap-2">
                    <Progress value={epic.progress} className="h-2" />
                    <span className="text-muted-foreground w-12 text-right">
                      {epic.progress}%
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : (
          <p>No epics found for this project.</p>
        )}
      </div>
      <EditEpicDialog
        isOpen={!!editingEpicId}
        epicId={editingEpicId}
        workspaceId={workspaceId}
        projectId={projectId}
        onOpenChange={(isOpen) => !isOpen && setEditingEpicId(null)}
      />
    </>
  );
}

// FILE: src/features/notifications/api/useBroadcastNotification.ts
import api from "@/lib/api";
import { useMutation } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function broadcastNotification(notificationData: any): Promise<any> {
  const { data } = await api.post("/notifications/broadcast", notificationData);
  return data;
}

export function useBroadcastNotification() {
  return useMutation<any, AxiosError, any>({
    mutationFn: broadcastNotification,
    onSuccess: (data) => {
      toast.success("Broadcast Sent", {
        description: `Notification sent to ${data.count} user(s).`,
      });
    },
    onError: (error: any) => {
      toast.error("Broadcast Failed", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/notifications/api/useGetNotificationPreferences.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getNotificationPreferences(): Promise<any> {
  const { data } = await api.get("/notifications/preferences");
  return data;
}

export function useGetNotificationPreferences() {
  return useQuery({
    queryKey: ["notificationPreferences"],
    queryFn: getNotificationPreferences,
  });
}

// FILE: src/features/notifications/api/useGetNotifications.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getNotifications(query?: { limit?: number }): Promise<any> {
  const { data } = await api.get("/notifications", { params: query });
  return data;
}

export function useGetNotifications(limit = 10) {
  return useQuery({
    queryKey: ["notifications"],
    queryFn: () => getNotifications({ limit }),
  });
}

// FILE: src/features/notifications/api/useMarkAllNotificationsAsRead.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function markAllAsRead(): Promise<any> {
  const { data } = await api.post("/notifications/mark-all-as-read");
  return data;
}

export function useMarkAllNotificationsAsRead() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: markAllAsRead,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["notifications"] });
    },
  });
}

// FILE: src/features/notifications/api/useMarkNotificationAsRead.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function markAsRead(notificationId: string): Promise<any> {
  const { data } = await api.patch(`/notifications/${notificationId}/read`);
  return data;
}

export function useMarkNotificationAsRead() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: markAsRead,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["notifications"] });
    },
  });
}

// FILE: src/features/notifications/api/useUpdateNotificationPreferences.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function updateNotificationPreferences(
  preferencesData: any
): Promise<any> {
  const { data } = await api.put("/notifications/preferences", preferencesData);
  return data;
}

export function useUpdateNotificationPreferences() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: updateNotificationPreferences,
    onSuccess: (data) => {
      queryClient.setQueryData(["notificationPreferences"], data);
      toast.success("Notification preferences updated.");
    },
    onError: (error: any) => {
      toast.error("Failed to update preferences", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/notifications/components/BroadcastNotificationDialog.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Megaphone } from "lucide-react";
import { BroadcastNotificationForm } from "./BroadcastNotificationForm";

export function BroadcastNotificationDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Megaphone className="mr-2 h-4 w-4" />
          Broadcast Notification
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send a Broadcast Notification</DialogTitle>
          <DialogDescription>
            This message will be sent as a real-time notification to all active
            users.
          </DialogDescription>
        </DialogHeader>
        <BroadcastNotificationForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/notifications/components/BroadcastNotificationForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { NotificationSeverity, NotificationType } from "@/types";
import { useBroadcastNotification } from "../api/useBroadcastNotification";

const broadcastSchema = z.object({
  message: z.string().min(1, "Message is required."),
  severity: z.nativeEnum(NotificationSeverity),
  type: z.nativeEnum(NotificationType),
});
type BroadcastFormValues = z.infer<typeof broadcastSchema>;

interface BroadcastFormProps {
  onSuccess?: () => void;
}

export function BroadcastNotificationForm({ onSuccess }: BroadcastFormProps) {
  const broadcastMutation = useBroadcastNotification();
  const form = useForm<BroadcastFormValues>({
    resolver: zodResolver(broadcastSchema),
    defaultValues: {
      message: "",
      severity: NotificationSeverity.MEDIUM,
      type: NotificationType.SYSTEM_BROADCAST,
    },
  });

  async function onSubmit(values: BroadcastFormValues) {
    await broadcastMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Broadcast Message</FormLabel>
              <FormControl>
                <RichTextEditor value={field.value} onChange={field.onChange} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="severity"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Severity</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(NotificationSeverity).map((s) => (
                      <SelectItem key={s} value={s}>
                        {s}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(NotificationType).map((t) => (
                      <SelectItem key={t} value={t}>
                        {t.replace(/_/g, " ")}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <Button
          type="submit"
          className="w-full"
          disabled={broadcastMutation.isPending}
        >
          {broadcastMutation.isPending ? "Sending..." : "Send Broadcast"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/notifications/components/NotificationBell.tsx
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { BellIcon } from "lucide-react";
import { useGetNotifications } from "../api/useGetNotifications";
import { NotificationItem } from "./NotificationItem";
import { useMarkAllNotificationsAsRead } from "../api/useMarkAllNotificationsAsRead";
import { Skeleton } from "@/components/ui/skeleton";

export function NotificationBell() {
  const { data, isLoading } = useGetNotifications();
  const markAllReadMutation = useMarkAllNotificationsAsRead();
  const unreadCount = data?.unreadCount ?? 0;

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="relative h-8 w-8 rounded-full"
        >
          <BellIcon className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute top-0 right-0 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs text-white">
              {unreadCount}
            </span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between border-b p-3">
          <h4 className="font-medium">Notifications</h4>
          <Button
            variant="link"
            size="sm"
            className="h-auto p-0"
            onClick={() => markAllReadMutation.mutate()}
            disabled={markAllReadMutation.isPending || unreadCount === 0}
          >
            Mark all as read
          </Button>
        </div>
        <div className="max-h-96 overflow-y-auto">
          {isLoading ? (
            <div className="space-y-3 p-4">
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
            </div>
          ) : data?.data?.length > 0 ? (
            data.data.map((notification: any) => (
              <NotificationItem
                key={notification.id}
                notification={notification}
              />
            ))
          ) : (
            <p className="text-muted-foreground p-4 text-center text-sm">
              You're all caught up!
            </p>
          )}
        </div>
      </PopoverContent>
    </Popover>
  );
}

// FILE: src/features/notifications/components/NotificationItem.tsx
import { useMarkNotificationAsRead } from "../api/useMarkNotificationAsRead";
import { cn } from "@/lib/utils";

export function NotificationItem({ notification }: { notification: any }) {
  const markAsReadMutation = useMarkNotificationAsRead();

  const handleClick = () => {
    if (!notification.isRead) {
      markAsReadMutation.mutate(notification.id);
    }
  };

  return (
    <div
      className={cn(
        "hover:bg-accent flex cursor-pointer items-start gap-3 p-3",
        !notification.isRead && "bg-blue-50 dark:bg-blue-900/20"
      )}
      onClick={handleClick}
    >
      {!notification.isRead && (
        <span className="mt-1 block h-2 w-2 rounded-full bg-blue-500" />
      )}
      <div className={cn("grid gap-1", notification.isRead && "pl-5")}>
        <p className="text-sm font-medium">{notification.message}</p>
        <p className="text-muted-foreground text-sm">
          {new Date(notification.createdAt).toLocaleString()}
        </p>
      </div>
    </div>
  );
}

// FILE: src/features/notifications/components/NotificationPreferencesForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { useGetNotificationPreferences } from "../api/useGetNotificationPreferences";
import { useUpdateNotificationPreferences } from "../api/useUpdateNotificationPreferences";
import { useEffect } from "react";
import { Skeleton } from "@/components/ui/skeleton";

const notificationTypes = [
  "SYSTEM_BROADCAST",
  "TASK_ASSIGNMENT",
  "COMMENT_MENTION",
  "PROJECT_INVITE",
];

const emailFrequencies = ["NONE", "DAILY", "WEEKLY", "IMMEDIATELY"];

const preferencesSchema = z.object({
  preferences: z.record(
    z.string(),
    z.object({
      inApp: z.boolean().optional(),
      email: z.boolean().optional(),
    })
  ),
  emailDigestFrequency: z.enum(["NONE", "DAILY", "WEEKLY", "IMMEDIATELY"]),
});

type PreferencesFormValues = z.infer<typeof preferencesSchema>;

export function NotificationPreferencesForm() {
  const { data, isLoading } = useGetNotificationPreferences();
  const updateMutation = useUpdateNotificationPreferences();

  const form = useForm<PreferencesFormValues>({
    resolver: zodResolver(preferencesSchema),
  });

  useEffect(() => {
    if (data) {
      form.reset({
        preferences: data.preferences || {},
        emailDigestFrequency: data.emailDigestFrequency || "DAILY",
      });
    }
  }, [data, form]);

  function onSubmit(values: PreferencesFormValues) {
    updateMutation.mutate(values);
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/2" />
          <Skeleton className="mt-2 h-4 w-3/4" />
        </CardHeader>
        <CardContent className="space-y-6">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Notification Preferences</CardTitle>
        <CardDescription>
          Manage how and when you are notified about activity.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {notificationTypes.map((type) => (
              <FormField
                key={type}
                control={form.control}
                name={`preferences.${type}.inApp`}
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base capitalize">
                        {type.replace(/_/g, " ").toLowerCase()}
                      </FormLabel>
                      <FormDescription>
                        Receive in-app notifications for this event.
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            ))}
            <FormField
              control={form.control}
              name="emailDigestFrequency"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Digest Frequency</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select email frequency" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {emailFrequencies.map((freq) => (
                        <SelectItem key={freq} value={freq}>
                          {freq.charAt(0) + freq.slice(1).toLowerCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    Choose how often you want to receive email summaries.
                  </FormDescription>
                </FormItem>
              )}
            />
            <Button type="submit" disabled={updateMutation.isPending}>
              {updateMutation.isPending ? "Saving..." : "Save Preferences"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/profile/api/useGetProfile.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProfile(): Promise<any> {
  const { data } = await api.get("/users/me");
  return data;
}

export function useGetProfile() {
  return useQuery({
    queryKey: ["profile"],
    queryFn: getProfile,
  });
}

// FILE: src/features/profile/api/useUpdateProfile.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function updateProfile(profileData: any): Promise<any> {
  const { data } = await api.patch("/users/me/profile", profileData);
  return data;
}

export function useUpdateProfile() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateProfile,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["profile"] });
    },
  });
}

// FILE: src/features/profile/components/ProfileForm.tsx
import { useForm, useFieldArray } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useGetProfile } from "../api/useGetProfile";
import { useUpdateProfile } from "../api/useUpdateProfile";
import { useEffect } from "react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { CalendarIcon, Trash2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { SocialProvider } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { RichTextEditor } from "@/components/ui/RichTextEditor";

const socialLinkSchema = z.object({
  provider: z.nativeEnum(SocialProvider),
  url: z.string().url("Please enter a valid URL."),
});

const phoneRegex = new RegExp(/^[+]*[(]?[0-9]{1,4}[)]?[-\s./0-9]*$/);
const profileSchema = z.object({
  firstName: z.string().min(1, "First name is required."),
  lastName: z.string().min(1, "Last name is required."),
  biography: z.string().optional().nullable(),
  phoneNumber: z
    .string()
    .refine((val) => {
      if (!val) return true;
      return phoneRegex.test(val);
    }, "Invalid phone number format.")
    .optional()
    .nullable(),
  birthday: z.date().nullable().optional(),
  socialLinks: z.array(socialLinkSchema).optional(),
});

export function ProfileForm() {
  const { data: profile, isLoading } = useGetProfile();
  const updateProfileMutation = useUpdateProfile();

  const form = useForm<any>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      biography: "",
      phoneNumber: "",
      birthday: null,
      socialLinks: [],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "socialLinks",
  });

  useEffect(() => {
    if (profile) {
      form.reset({
        firstName: profile.firstName || "",
        lastName: profile.lastName || "",
        biography: profile.biography || "",
        phoneNumber: profile.phoneNumber || "",
        birthday: profile.birthday ? new Date(profile.birthday) : null,
        socialLinks: profile.socialLinks || [],
      });
    }
  }, [profile, form]);

  const onSubmit = (values: any) => {
    updateProfileMutation.mutate(values);
  };

  if (isLoading) return <div>Loading profile...</div>;

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="max-w-2xl space-y-8"
      >
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          <FormField
            control={form.control}
            name="firstName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>First Name</FormLabel>
                <FormControl>
                  <Input placeholder="Your first name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lastName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Last Name</FormLabel>
                <FormControl>
                  <Input placeholder="Your last name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Phone Number</FormLabel>
                <FormControl>
                  <Input
                    placeholder="+1 (555) 123-4567"
                    {...field}
                    value={field.value ?? ""}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="birthday"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Date of Birth</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-[240px] pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        {field.value ? (
                          format(field.value, "PPP")
                        ) : (
                          <span>Pick a date</span>
                        )}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value}
                      onSelect={field.onChange}
                      disabled={(date) =>
                        date > new Date() || date < new Date("1900-01-01")
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="biography"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Biography</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div>
          <FormLabel>Social Links</FormLabel>
          <div className="mt-2 space-y-4">
            {fields.map((field, index) => (
              <div key={field.id} className="flex items-center gap-2">
                <FormField
                  control={form.control}
                  name={`socialLinks.${index}.provider`}
                  render={({ field }) => (
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger className="w-[150px]">
                          <SelectValue placeholder="Provider" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {Object.values(SocialProvider).map((p) => (
                          <SelectItem key={p} value={p}>
                            {p}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  )}
                />
                <FormField
                  control={form.control}
                  name={`socialLinks.${index}.url`}
                  render={({ field }) => (
                    <Input
                      {...field}
                      placeholder="https://example.com/username"
                      className="flex-grow"
                    />
                  )}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  onClick={() => remove(index)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </div>
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() =>
                append({ provider: SocialProvider.WEBSITE, url: "" })
              }
            >
              Add Social Link
            </Button>
          </div>
        </div>

        <Button type="submit" disabled={updateProfileMutation.isPending}>
          {updateProfileMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/project-roles/api/useAssignPermissionToProjectRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function assignPermission({
  workspaceId,
  projectId,
  roleId,
  permissionId,
}: any) {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/roles/${roleId}/permissions`,
    { permissionId }
  );
  return data;
}

export function useAssignPermissionToProjectRole(
  workspaceId: string,
  projectId: string,
  roleId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (permissionId: string) =>
      assignPermission({ workspaceId, projectId, roleId, permissionId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projectRoles", projectId] });
    },
  });
}

// FILE: src/features/project-roles/api/useCreateProjectRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function createProjectRole({ workspaceId, projectId, roleData }: any) {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    roleData
  );
  return data;
}

export function useCreateProjectRole(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (roleData: any) =>
      createProjectRole({ workspaceId, projectId, roleData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projectRoles", projectId] });
    },
  });
}

// FILE: src/features/project-roles/api/useDeleteProjectRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function deleteProjectRole({ workspaceId, projectId, roleId }: any) {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/roles/${roleId}`
  );
}

export function useDeleteProjectRole(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (roleId: string) =>
      deleteProjectRole({ workspaceId, projectId, roleId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projectRoles", projectId] });
    },
  });
}

// FILE: src/features/project-roles/api/useGetProjectRoles.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjectRoles(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`
  );
  return data;
}

export function useGetProjectRoles(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["projectRoles", projectId],
    queryFn: () => getProjectRoles(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/project-roles/api/useRevokePermissionFromProjectRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function revokePermission({
  workspaceId,
  projectId,
  roleId,
  permissionId,
}: any) {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/roles/${roleId}/permissions/${permissionId}`
  );
}

export function useRevokePermissionFromProjectRole(
  workspaceId: string,
  projectId: string,
  roleId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (permissionId: string) =>
      revokePermission({ workspaceId, projectId, roleId, permissionId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projectRoles", projectId] });
    },
  });
}

// FILE: src/features/project-roles/api/useUpdateProjectRole.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function updateProjectRole({
  workspaceId,
  projectId,
  roleId,
  roleData,
}: any) {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/roles/${roleId}`,
    roleData
  );
  return data;
}

export function useUpdateProjectRole(
  workspaceId: string,
  projectId: string,
  roleId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (roleData: any) =>
      updateProjectRole({ workspaceId, projectId, roleId, roleData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projectRoles", projectId] });
    },
  });
}

// FILE: src/features/project-roles/components/CreateProjectRoleDialog.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PlusCircle } from "lucide-react";
import { CreateProjectRoleForm } from "./CreateProjectRoleForm";

interface Props {
  workspaceId: string;
  projectId: string;
}

export function CreateProjectRoleDialog({ workspaceId, projectId }: Props) {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Project Role
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Project Role</DialogTitle>
          <DialogDescription>
            This role will only be available within this project.
          </DialogDescription>
        </DialogHeader>
        <CreateProjectRoleForm
          workspaceId={workspaceId}
          projectId={projectId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/project-roles/components/CreateProjectRoleForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateProjectRole } from "../api/useCreateProjectRole";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const projectRoleSchema = z.object({
  name: z.string().min(2, "Role name must be at least 2 characters."),
});
type ProjectRoleFormValues = z.infer<typeof projectRoleSchema>;

interface CreateProjectRoleFormProps {
  workspaceId: string;
  projectId: string;
  onSuccess?: () => void;
}

export function CreateProjectRoleForm({
  workspaceId,
  projectId,
  onSuccess,
}: CreateProjectRoleFormProps) {
  const createMutation = useCreateProjectRole(workspaceId, projectId);
  const form = useForm<ProjectRoleFormValues>({
    resolver: zodResolver(projectRoleSchema),
    defaultValues: { name: "" },
  });
  async function onSubmit(values: ProjectRoleFormValues) {
    createMutation.mutate(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Role Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Contributor" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Role"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/project-roles/components/EditProjectRoleDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { useGetPermissions } from "@/features/admin/permissions/api/useGetPermissions";
import { useAssignPermissionToProjectRole } from "../api/useAssignPermissionToProjectRole";
import { useRevokePermissionFromProjectRole } from "../api/useRevokePermissionFromProjectRole";

interface EditProjectRoleDialogProps {
  role: any | null;
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditProjectRoleDialog({
  role,
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditProjectRoleDialogProps) {
  const { data: permissionsData, isLoading: isLoadingPermissions } =
    useGetPermissions({ limit: 100 });
  const assignMutation = useAssignPermissionToProjectRole(
    workspaceId,
    projectId,
    role?.id
  );
  const revokeMutation = useRevokePermissionFromProjectRole(
    workspaceId,
    projectId,
    role?.id
  );
  if (!isOpen || !role) return null;

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));
  const handlePermissionToggle = (permissionId: string, isChecked: boolean) => {
    if (isChecked) {
      assignMutation.mutate(permissionId);
    } else {
      revokeMutation.mutate(permissionId);
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Edit Role: {role.name}</DialogTitle>
          <DialogDescription>
            Manage the permissions assigned to this project-specific role.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <h4 className="font-semibold">Permissions</h4>
          {isLoadingPermissions ? (
            <p>Loading permissions...</p>
          ) : (
            <div className="grid h-96 overflow-y-auto rounded-md border p-4 sm:grid-cols-2">
              {permissionsData?.data.map((permission: any) => (
                <div key={permission.id} className="flex items-center gap-2">
                  <Checkbox
                    id={`perm-${permission.id}`}
                    checked={rolePermissionIds.has(permission.id)}
                    onCheckedChange={(checked) =>
                      handlePermissionToggle(permission.id, !!checked)
                    }
                  />
                  <label
                    htmlFor={`perm-${permission.id}`}
                    className="text-sm font-medium"
                  >
                    {permission.action} on {permission.subject}
                  </label>
                </div>
              ))}
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/project-roles/components/ProjectRoleList.tsx
import { useState } from "react";
import { useGetProjectRoles } from "../api/useGetProjectRoles";
import { useDeleteProjectRole } from "../api/useDeleteProjectRole";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Edit, Trash2 } from "lucide-react";
import { EditProjectRoleDialog } from "./EditProjectRoleDialog";

interface Props {
  workspaceId: string;
  projectId: string;
}

export function ProjectRoleList({ workspaceId, projectId }: Props) {
  const { data: rolesData, isLoading } = useGetProjectRoles(
    workspaceId,
    projectId
  );
  const deleteMutation = useDeleteProjectRole(workspaceId, projectId);
  const [editingRole, setEditingRole] = useState<any | null>(null);

  if (isLoading) return <div>Loading Project Roles...</div>;

  const handleDelete = (role: any) => {
    if (
      window.confirm(
        `Delete project role "${role.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {rolesData?.data.map((role: any) => (
          <Card key={role.id}>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>{role.name}</CardTitle>
              <div className="flex items-center gap-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setEditingRole(role)}
                >
                  <Edit className="mr-2 h-4 w-4" /> Manage Permissions
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => handleDelete(role)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-1">
                {role.permissions?.length > 0 ? (
                  role.permissions.map((p: any) => (
                    <Badge variant="secondary" key={p.id}>
                      {p.action} on {p.subject}
                    </Badge>
                  ))
                ) : (
                  <span className="text-muted-foreground text-sm">
                    No permissions assigned.
                  </span>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <EditProjectRoleDialog
        role={editingRole}
        workspaceId={workspaceId}
        projectId={projectId}
        isOpen={!!editingRole}
        onOpenChange={(isOpen) => !isOpen && setEditingRole(null)}
      />
    </>
  );
}

// FILE: src/features/projects/api/useAddProjectMember.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface AddMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
  roleId: string;
}

async function addProjectMember(params: AddMemberParams): Promise<any> {
  const { workspaceId, projectId, userId, roleId } = params;
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/members`,
    { userId, roleId }
  );
  return data;
}

export function useAddProjectMember(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, { userId: string; roleId: string }>({
    mutationFn: ({ userId, roleId }) =>
      addProjectMember({ workspaceId, projectId, userId, roleId }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: ["projectMembers", projectId],
      });
    },
  });
}

// FILE: src/features/projects/api/useCreateProject.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createProject({ workspaceId, projectData }: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects`,
    projectData
  );
  return data;
}

export function useCreateProject(workspaceId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (projectData) => createProject({ workspaceId, projectData }),

    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["projects", workspaceId] });
    },
  });
}

// FILE: src/features/projects/api/useDeleteProject.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function deleteProject({
  workspaceId,
  projectId,
}: {
  workspaceId: string;
  projectId: string;
}): Promise<void> {
  await api.delete(`/workspaces/${workspaceId}/projects/${projectId}`);
}

export function useDeleteProject(workspaceId: string) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (projectId) => deleteProject({ workspaceId, projectId }),
    onSuccess: () => {
      toast.success("Project deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["projects", workspaceId] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete project", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/projects/api/useGetProject.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProject(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}`
  );
  return data;
}

export function useGetProject(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["project", projectId],
    queryFn: () => getProject(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/projects/api/useGetProjectMembers.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjectMembers(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/members`
  );
  return data;
}

export function useGetProjectMembers(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["projectMembers", projectId],
    queryFn: () => getProjectMembers(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/projects/api/useGetProjects.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjects(workspaceId: string): Promise<any> {
  const { data } = await api.get(`/workspaces/${workspaceId}/projects`);
  return data;
}

export function useGetProjects(workspaceId: string) {
  return useQuery({
    queryKey: ["projects", workspaceId],
    queryFn: () => getProjects(workspaceId),

    enabled: !!workspaceId,
  });
}

// FILE: src/features/projects/api/useRemoveProjectMember.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface RemoveMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
}

async function removeProjectMember(params: RemoveMemberParams): Promise<void> {
  const { workspaceId, projectId, userId } = params;
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/members/${userId}`
  );
}

export function useRemoveProjectMember(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (userId) =>
      removeProjectMember({ workspaceId, projectId, userId }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: ["projectMembers", projectId],
      });
    },
  });
}

// FILE: src/features/projects/api/useUpdateProject.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workspaceId: string;
  projectId: string;
  projectData: any;
}

async function updateProject({
  workspaceId,
  projectId,
  projectData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}`,
    projectData
  );
  return data;
}

export function useUpdateProject(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (projectData) =>
      updateProject({ workspaceId, projectId, projectData }),
    onSuccess: (updatedProject) => {
      queryClient.invalidateQueries({ queryKey: ["projects", workspaceId] });
      queryClient.setQueryData(["project", projectId], updatedProject);
    },
  });
}

// FILE: src/features/projects/api/useUpdateProjectMember.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface UpdateMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
  roleId: string;
}

async function updateProjectMember(params: UpdateMemberParams): Promise<any> {
  const { workspaceId, projectId, userId, roleId } = params;
  const { data } = await api.patch(
    `/workspaces/${workspaceId}/projects/${projectId}/members/${userId}`,
    { roleId }
  );
  return data;
}

export function useUpdateProjectMember(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, { userId: string; roleId: string }>({
    mutationFn: ({ userId, roleId }) =>
      updateProjectMember({ workspaceId, projectId, userId, roleId }),
    onSuccess: () => {
      toast.success("Project member's role has been updated.");
      queryClient.invalidateQueries({
        queryKey: ["projectMembers", projectId],
      });
    },
    onError: (error: any) => {
      toast.error("Failed to update role", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/projects/components/CreateProjectDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateProjectForm } from "./CreateProjectForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreateProjectDialog({ workspaceId }: { workspaceId: string }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Project
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create a new project</DialogTitle>
          <DialogDescription>
            Projects live inside workspaces and contain your tasks.
          </DialogDescription>
        </DialogHeader>
        <CreateProjectForm
          workspaceId={workspaceId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/projects/components/CreateProjectForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateProject } from "../api/useCreateProject";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useCreateView } from "@/features/views/api/useCreateView";
import { toast } from "sonner";

const projectSchema = z.object({
  name: z.string().min(2, "Project name must be at least 2 characters."),
  description: z.string().optional(),
});
type ProjectFormValues = z.infer<typeof projectSchema>;

interface CreateProjectFormProps {
  workspaceId: string;
  onSuccess?: () => void;
}

export function CreateProjectForm({
  workspaceId,
  onSuccess,
}: CreateProjectFormProps) {
  const createProjectMutation = useCreateProject(workspaceId);
  const createViewMutation = useCreateView(workspaceId);

  const form = useForm<ProjectFormValues>({
    resolver: zodResolver(projectSchema),
    defaultValues: { name: "", description: "" },
  });

  async function onSubmit(values: ProjectFormValues) {
    createProjectMutation.mutate(values, {
      onSuccess: async (newProject) => {
        toast.success(
          `Project "${newProject.name}" created. Setting up default views...`
        );

        const listPromise = createViewMutation.mutateAsync({
          viewData: { name: "List", type: "LIST" },
          projectId: newProject.id,
        });

        const kanbanPromise = createViewMutation.mutateAsync({
          viewData: {
            name: "Kanban",
            type: "KANBAN",
            columns: [
              { name: "To Do" },
              { name: "In Progress" },
              { name: "In Review" },
              { name: "Done" },
            ],
          },
          projectId: newProject.id,
        });

        await Promise.all([listPromise, kanbanPromise]);

        toast.success("Default views created.");
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createProjectMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Project Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Annual Report Analysis" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input
                  placeholder="A short description of the project's goals"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {errorMessage && (
          <div className="text-sm font-medium text-red-500">{errorMessage}</div>
        )}
        <Button
          type="submit"
          className="w-full"
          disabled={createProjectMutation.isPending}
        >
          {createProjectMutation.isPending ? "Creating..." : "Create Project"}
        </Button>
      </form>
    </Form>
  );
}
// FILE: src/features/projects/components/EditProjectDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetProject } from "../api/useGetProject";
import { EditProjectForm } from "./EditProjectForm";
import { Skeleton } from "@/components/ui/skeleton";

interface EditProjectDialogProps {
  workspaceId: string;
  projectId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditProjectDialog({
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditProjectDialogProps) {
  const { data: projectData, isLoading } = useGetProject(
    workspaceId!,
    projectId!
  );

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Project</DialogTitle>
          <DialogDescription>
            Make changes to your project here. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        {isLoading && projectId ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-9 w-24" />
          </div>
        ) : (
          projectData && (
            <EditProjectForm
              project={projectData}
              onSuccess={() => onOpenChange(false)}
            />
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/projects/components/EditProjectForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useUpdateProject } from "../api/useUpdateProject";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const projectSchema = z.object({
  name: z.string().min(2, "Project name must be at least 2 characters."),
  description: z.string().optional(),
});

type ProjectFormValues = z.infer<typeof projectSchema>;

interface EditProjectFormProps {
  project: any;
  onSuccess?: () => void;
}

export function EditProjectForm({ project, onSuccess }: EditProjectFormProps) {
  const updateMutation = useUpdateProject(project.workspaceId, project.id);
  const form = useForm<ProjectFormValues>({
    resolver: zodResolver(projectSchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });
  useEffect(() => {
    if (project) {
      form.reset({
        name: project.name,
        description: project.description || "",
      });
    }
  }, [project, form]);
  async function onSubmit(values: ProjectFormValues) {
    await updateMutation.mutateAsync(values, {
      onSuccess,
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Project Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={updateMutation.isPending}
        >
          {updateMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/projects/components/InviteProjectMember.tsx
import { useState } from "react";
import { useGetUsers } from "@/features/admin/users/api/useGetUsers";
import { useGetProjectRoles } from "@/features/project-roles/api/useGetProjectRoles";
import { useAddProjectMember } from "../api/useAddProjectMember";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ChevronsUpDown } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface InviteProjectMemberProps {
  workspaceId: string;
  projectId: string;
  existingMemberIds: string[];
}

export function InviteProjectMember({
  workspaceId,
  projectId,
  existingMemberIds,
}: InviteProjectMemberProps) {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [selectedRoleId, setSelectedRoleId] = useState<string | null>(null);
  const [userSearch, setUserSearch] = useState("");

  const { data: usersData, isLoading: isLoadingUsers } = useGetUsers({
    search: userSearch,
  });
  const { data: rolesData, isLoading: isLoadingRoles } = useGetProjectRoles(
    workspaceId,
    projectId
  );
  const addMemberMutation = useAddProjectMember(workspaceId, projectId);

  const availableUsers =
    usersData?.data.filter((u: any) => !existingMemberIds.includes(u.id)) || [];

  const handleInvite = () => {
    if (selectedUserId && selectedRoleId) {
      addMemberMutation.mutate(
        { userId: selectedUserId, roleId: selectedRoleId },
        {
          onSuccess: () => {
            setSelectedUserId(null);
            setUserSearch("");
          },
        }
      );
    }
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle>Invite New Member</CardTitle>
        <CardDescription>
          Add a new member to this project and assign them a role.
        </CardDescription>
      </CardHeader>
      <CardContent className="flex items-end gap-2">
        <div className="flex-grow">
          <Label>User</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                className="w-full justify-between"
              >
                {selectedUserId
                  ? usersData?.data.find((u: any) => u.id === selectedUserId)
                      ?.name
                  : "Select a user"}
                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput
                  placeholder="Search by name or email..."
                  onValueChange={setUserSearch}
                />
                <CommandList>
                  {isLoadingUsers && <CommandItem>Loading...</CommandItem>}
                  <CommandEmpty>No users found.</CommandEmpty>
                  <CommandGroup>
                    {availableUsers.map((user: any) => (
                      <CommandItem
                        value={user.name}
                        key={user.id}
                        onSelect={() => setSelectedUserId(user.id)}
                      >
                        {user.name} ({user.email})
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
        </div>
        <div className="w-[200px]">
          <Label>Role</Label>
          <Select onValueChange={setSelectedRoleId} disabled={isLoadingRoles}>
            <SelectTrigger>
              <SelectValue placeholder="Select a role" />
            </SelectTrigger>
            <SelectContent>
              {rolesData?.data.map((role: any) => (
                <SelectItem key={role.id} value={role.id}>
                  {role.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <Button
          onClick={handleInvite}
          disabled={
            !selectedUserId || !selectedRoleId || addMemberMutation.isPending
          }
        >
          {addMemberMutation.isPending ? "Inviting..." : "Invite"}
        </Button>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/projects/components/ProjectCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useDeleteProject } from "../api/useDeleteProject";

interface ProjectCardProps {
  project: any;
  onEdit: (projectId: string) => void;
}

export function ProjectCard({ project, onEdit }: ProjectCardProps) {
  const deleteMutation = useDeleteProject(project.workspaceId);

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${project.name}" project? This action is permanent.`
      )
    ) {
      deleteMutation.mutate(project.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(project.id);
  };

  const projectUrl = `/workspaces/${project.workspaceId}/projects/${project.id}`;

  return (
    <Link to={projectUrl}>
      <Card className="hover:border-primary flex h-full flex-col transition-colors">
        <CardHeader className="flex flex-row items-start justify-between">
          <div>
            <CardTitle>{project.name}</CardTitle>
            <CardDescription>{project.description}</CardDescription>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 p-0"
                onClick={(e) => e.preventDefault()}
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={handleEdit}>
                <Edit className="mr-2 h-4 w-4" />
                <span>Edit</span>
              </DropdownMenuItem>
              <DropdownMenuItem
                className="text-red-600 focus:text-red-600"
                onClick={handleDelete}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Delete</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </CardHeader>
        <CardContent className="flex-grow"></CardContent>
        <CardContent>
          <div className="text-muted-foreground flex justify-between text-sm">
            <span>Status: {project.status}</span>
            <span>
              Created: {new Date(project.createdAt).toLocaleDateString()}
            </span>
          </div>
        </CardContent>
      </Card>
    </Link>
  );
}

// FILE: src/features/projects/components/ProjectList.tsx
import { useGetProjects } from "../api/useGetProjects";
import { ProjectCard } from "./ProjectCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { FolderKanban } from "lucide-react";
import { CreateProjectDialog } from "./CreateProjectDialog";
import { useState } from "react";
import { EditProjectDialog } from "./EditProjectDialog";

const ProjectListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function ProjectList({ workspaceId }: { workspaceId: string }) {
  const { data, isLoading, isError, error } = useGetProjects(workspaceId);
  const [editingProjectId, setEditingProjectId] = useState<string | null>(null);

  if (isLoading) {
    return <ProjectListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Projects"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching projects for this workspace."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<FolderKanban className="text-primary h-10 w-10" />}
        title="This workspace has no projects yet."
        description="Create the first project in this workspace to get started."
        action={<CreateProjectDialog workspaceId={workspaceId} />}
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((project: any) => (
          <ProjectCard
            project={project}
            key={project.id}
            onEdit={setEditingProjectId}
          />
        ))}
      </div>

      <EditProjectDialog
        workspaceId={workspaceId}
        projectId={editingProjectId}
        isOpen={!!editingProjectId}
        onOpenChange={(isOpen) => !isOpen && setEditingProjectId(null)}
      />
    </>
  );
}

// FILE: src/features/projects/components/ProjectMemberList.tsx
import { useGetProjectMembers } from "../api/useGetProjectMembers";
import { useRemoveProjectMember } from "../api/useRemoveProjectMember";
import { useGetProjectRoles } from "@/features/project-roles/api/useGetProjectRoles";
import { useUpdateProjectMember } from "../api/useUpdateProjectMember";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card } from "@/components/ui/card";

interface ProjectMemberListProps {
  workspaceId: string;
  projectId: string;
}

export function ProjectMemberList({
  workspaceId,
  projectId,
}: ProjectMemberListProps) {
  const { data: membersData, isLoading: isLoadingMembers } =
    useGetProjectMembers(workspaceId, projectId);
  const { data: rolesData, isLoading: isLoadingRoles } = useGetProjectRoles(
    workspaceId,
    projectId
  );
  const removeMemberMutation = useRemoveProjectMember(workspaceId, projectId);
  const updateMemberMutation = useUpdateProjectMember(workspaceId, projectId);

  const handleDelete = (member: any) => {
    if (window.confirm(`Remove ${member.name} from this project?`)) {
      removeMemberMutation.mutate(member.userId);
    }
  };

  const handleRoleChange = (userId: string, roleId: string) => {
    updateMemberMutation.mutate({ userId, roleId });
  };

  if (isLoadingMembers || isLoadingRoles) return <div>Loading members...</div>;

  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Member</TableHead>
            <TableHead>Role</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {membersData?.length > 0 ? (
            membersData.map((member: any) => (
              <TableRow key={member.userId}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={member.avatarUrl} />
                      <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="font-medium">{member.name}</span>
                  </div>
                </TableCell>
                <TableCell>
                  <Select
                    value={member.roleId}
                    onValueChange={(newRoleId) =>
                      handleRoleChange(member.userId, newRoleId)
                    }
                  >
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select a role" />
                    </SelectTrigger>
                    <SelectContent>
                      {rolesData?.data.map((role: any) => (
                        <SelectItem key={role.id} value={role.id}>
                          {role.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => handleDelete(member)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Remove from Project
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={3} className="h-24 text-center">
                No members have been added to this project yet.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </Card>
  );
}

// FILE: src/features/publications/api/useCreatePublication.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function createPublication(publicationData: any) {
  const { data } = await api.post("/publications", publicationData);
  return data;
}

export function useCreatePublication() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createPublication,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["publications"] });
    },
  });
}

// FILE: src/features/publications/api/useCreatePublications.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

async function createPublication(publicationData: any) {
  const { data } = await api.post("/publications", publicationData);
  return data;
}

export function useCreatePublication() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: createPublication,
    onSuccess: () => {
      toast.success("Publication created successfully.");
      queryClient.invalidateQueries({ queryKey: ["publications"] });
    },
    onError: (error: any) => {
      toast.error("Failed to create publication", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/publications/api/useDeletePublication.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

async function deletePublication(id: string): Promise<void> {
  await api.delete(`/publications/${id}`);
}

export function useDeletePublication() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: deletePublication,
    onSuccess: () => {
      toast.success("Publication deleted.");
      queryClient.invalidateQueries({ queryKey: ["publications"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete publication", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/publications/api/useGetPublications.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

export interface GetPublicationsQuery {
  page?: number;
  limit?: number;
  search?: string;
  sortBy?: "createdAt" | "updatedAt" | "title";
  sortOrder?: "asc" | "desc";
}

export const getPublications = async (query: GetPublicationsQuery) => {
  const { data } = await api.get("/publications", { params: query });
  return data;
};

export const useGetPublications = (query: GetPublicationsQuery) => {
  return useQuery({
    queryKey: ["publications", query],
    queryFn: () => getPublications(query),
  });
};

// FILE: src/features/publications/api/useUpdatePublication.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

interface UpdateParams {
  id: string;
  data: any;
}

async function updatePublication({ id, data }: UpdateParams): Promise<any> {
  const response = await api.put(`/publications/${id}`, data);
  return response.data;
}

export function useUpdatePublication() {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: updatePublication,
    onSuccess: (data) => {
      toast.success("Publication updated successfully.");
      queryClient.invalidateQueries({ queryKey: ["publications"] });
      queryClient.setQueryData(["publication", data.id], data);
    },
    onError: (error: any) => {
      toast.error("Failed to update publication", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/publications/components/CreatePublicationDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from "react";
import { PlusCircle } from "lucide-react";
import { CreatePublicationForm } from "./CreatePublicationForm";

export function CreatePublicationDialog() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Publication
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create Publication</DialogTitle>
          <DialogDescription>
            Add a new article, paper, or report to the knowledge base.
          </DialogDescription>
        </DialogHeader>
        <CreatePublicationForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/publications/components/CreatePublicationForm.tsx
import { useForm } from "react-hook-form";
import { useCreatePublication } from "../api/useCreatePublications";
import { useUpdatePublication } from "../api/useUpdatePublication";
import { useGetUsers } from "@/features/admin/users/api/useGetUsers";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { RichTextEditor } from "@/components/ui/RichTextEditor";

const publicationSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters."),
  excerpt: z.string().optional(),
  authorIds: z.array(z.string().uuid()),
  status: z.enum(["DRAFT", "PUBLISHED", "ARCHIVED"]),
});
type PublicationFormValues = z.infer<typeof publicationSchema>;

interface PublicationFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function CreatePublicationForm({
  initialData,
  onSuccess,
}: PublicationFormProps) {
  const isEditMode = !!initialData;
  const createMutation = useCreatePublication();
  const updateMutation = useUpdatePublication();
  const mutation = isEditMode ? updateMutation : createMutation;

  const { data: usersData } = useGetUsers({});
  const form = useForm<PublicationFormValues>({
    resolver: zodResolver(publicationSchema),
    defaultValues: {
      title: "",
      excerpt: "",
      authorIds: [],
      status: "DRAFT",
    },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      form.reset({
        ...initialData,
        authorIds: initialData.authors?.map((a: any) => a.id) || [],
      });
    }
  }, [initialData, isEditMode, form]);

  async function onSubmit(values: PublicationFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          form.reset();
          onSuccess?.();
        },
      });
    }
  }

  const selectedAuthors =
    usersData?.data.filter((user: any) =>
      form.watch("authorIds").includes(user.id)
    ) || [];

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input
                  placeholder="The Future of AI in Research..."
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="excerpt"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Excerpt (Optional)</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="authorIds"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Authors</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      role="combobox"
                      className="h-auto w-full justify-between"
                    >
                      <div className="flex flex-wrap items-center gap-1">
                        {selectedAuthors.length > 0
                          ? selectedAuthors.map((user: any) => (
                              <Badge variant="secondary" key={user.id}>
                                {user.name}
                              </Badge>
                            ))
                          : "Select authors..."}
                      </div>
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                  <Command>
                    <CommandInput placeholder="Search users..." />
                    <CommandList>
                      <CommandEmpty>No users found.</CommandEmpty>
                      <CommandGroup>
                        {usersData?.data.map((user: any) => (
                          <CommandItem
                            value={user.name}
                            key={user.id}
                            onSelect={() => {
                              const isSelected = field.value.includes(user.id);
                              form.setValue(
                                "authorIds",
                                isSelected
                                  ? field.value.filter(
                                      (id: any) => id !== user.id
                                    )
                                  : [...field.value, user.id]
                              );
                            }}
                          >
                            <Check
                              className={cn(
                                "mr-2 h-4 w-4",
                                field.value.includes(user.id)
                                  ? "opacity-100"
                                  : "opacity-0"
                              )}
                            />
                            {user.name}
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Publication"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/publications/components/EditPublicationDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { CreatePublicationForm } from "./CreatePublicationForm";

interface EditDialogProps {
  publication: any | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditPublicationDialog({
  publication,
  isOpen,
  onOpenChange,
}: EditDialogProps) {
  if (!publication) return null;
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Publication</DialogTitle>
          <DialogDescription>
            Make changes to the publication details.
          </DialogDescription>
        </DialogHeader>
        <CreatePublicationForm
          initialData={publication}
          onSuccess={() => onOpenChange(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/publications/components/PublicationCard.tsx
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useDeletePublication } from "../api/useDeletePublication";

interface PublicationCardProps {
  publication: any;
  onEdit: (publication: any) => void;
}

const statusVariantMap: Record<
  string,
  "default" | "outline" | "secondary" | "destructive"
> = {
  DRAFT: "secondary",
  PUBLISHED: "default",
  ARCHIVED: "outline",
};

export function PublicationCard({ publication, onEdit }: PublicationCardProps) {
  const deleteMutation = useDeletePublication();

  const handleDelete = () => {
    if (window.confirm(`Delete publication "${publication.title}"?`)) {
      deleteMutation.mutate(publication.id);
    }
  };

  return (
    <Card className="flex flex-col">
      <CardHeader className="flex-row items-start justify-between">
        <div className="flex-grow">
          <CardTitle>{publication.title}</CardTitle>
          <CardDescription>
            {publication.excerpt || "No excerpt provided."}
          </CardDescription>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex-shrink-0"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEdit(publication)}>
              <Edit className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-600 focus:text-red-600"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardFooter className="flex justify-between">
        <div className="flex flex-wrap gap-1">
          {publication.authors.map((author: any) => (
            <Badge key={author.id} variant="secondary" className="font-normal">
              {author.name}
            </Badge>
          ))}
        </div>
        <Badge variant={statusVariantMap[publication.status]}>
          {publication.status}
        </Badge>
      </CardFooter>
    </Card>
  );
}

// FILE: src/features/publications/components/PublicationList.tsx
import { useState } from "react";
import { useGetPublications } from "../api/useGetPublications";
import { PublicationCard } from "./PublicationCard";
import { Skeleton } from "@/components/ui/skeleton";
import { EditPublicationDialog } from "./EditPublicationDialog";

const PublicationListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 6 }).map((_, i) => (
      <div key={i} className="flex flex-col space-y-3">
        <Skeleton className="h-[125px] w-full rounded-xl" />
        <div className="space-y-2">
          <Skeleton className="h-4 w-3/4" />
          <Skeleton className="h-4 w-1/2" />
        </div>
      </div>
    ))}
  </div>
);

export function PublicationList() {
  const { data, isLoading, isError } = useGetPublications({
    page: 1,
    limit: 12,
  });
  const [editingPublication, setEditingPublication] = useState<any | null>(
    null
  );

  if (isLoading) return <PublicationListSkeleton />;
  if (isError) return <div>Failed to load publications.</div>;
  if (!data || data.data.length === 0) return <div>No publications found.</div>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((pub: any) => (
          <PublicationCard
            key={pub.id}
            publication={pub}
            onEdit={setEditingPublication}
          />
        ))}
      </div>
      <EditPublicationDialog
        publication={editingPublication}
        isOpen={!!editingPublication}
        onOpenChange={(isOpen) => !isOpen && setEditingPublication(null)}
      />
    </>
  );
}

// FILE: src/features/search/api/useSearch.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

interface SearchQuery {
  q: string;
  limit?: number;
  type?: "project" | "task" | "publication" | "report" | "user";
}

async function performSearch(query: SearchQuery): Promise<any> {
  const { data } = await api.get("/search", { params: query });
  return data;
}

export function useSearch(searchTerm: string, limit = 5) {
  return useQuery({
    queryKey: ["search", searchTerm],
    queryFn: () => performSearch({ q: searchTerm, limit }),

    enabled: searchTerm.length > 1,
  });
}

// FILE: src/features/search/components/SearchDialog.tsx
import { useEffect, useState } from "react";
import {
  CommandDialog,
  CommandEmpty,
  CommandInput,
  CommandList,
} from "@/components/ui/command";
import { useDebounce } from "@/hooks/useDebounce";
import { useSearch } from "../api/useSearch";
import { SearchResultGroup } from "./SearchResultGroup";

interface SearchDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function SearchDialog({ isOpen, onOpenChange }: SearchDialogProps) {
  const [query, setQuery] = useState("");
  const debouncedQuery = useDebounce(query, 300);
  const { data: results, isLoading } = useSearch(debouncedQuery);

  useEffect(() => {
    if (!isOpen) {
      setQuery("");
    }
  }, [isOpen]);

  return (
    <CommandDialog open={isOpen} onOpenChange={onOpenChange}>
      <CommandInput
        placeholder="Search for projects, tasks, users..."
        value={query}
        onValueChange={setQuery}
      />
      <CommandList>
        {isLoading && <div className="p-4 text-sm">Searching...</div>}
        {!isLoading && !results && debouncedQuery.length > 1 && (
          <CommandEmpty>No results found.</CommandEmpty>
        )}
        {results && (
          <>
            <SearchResultGroup heading="Projects" results={results.projects} />
            <SearchResultGroup heading="Tasks" results={results.tasks} />
            <SearchResultGroup
              heading="Publications"
              results={results.publications}
            />
            <SearchResultGroup heading="Users" results={results.users} />
          </>
        )}
      </CommandList>
    </CommandDialog>
  );
}

// FILE: src/features/search/components/SearchResultGroup.tsx
import { CommandGroup, CommandSeparator } from "@/components/ui/command";
import { SearchResultItem } from "./SearchResultItem";

export function SearchResultGroup({
  heading,
  results,
}: {
  heading: string;
  results: any[];
}) {
  if (results.length === 0) {
    return null;
  }

  return (
    <>
      <CommandGroup heading={heading}>
        {results.map((item) => (
          <SearchResultItem item={item} key={`${item.__typename}-${item.id}`} />
        ))}
      </CommandGroup>
      <CommandSeparator />
    </>
  );
}

// FILE: src/features/search/components/SearchResultItem.tsx
import { CommandItem } from "@/components/ui/command";
import { getIcon } from "@/lib/icons";
import { useNavigate } from "react-router-dom";

export function SearchResultItem({ item }: { item: any }) {
  const navigate = useNavigate();

  const getLink = () => {
    switch (item.__typename) {
      case "Project":
        return `/workspaces/DUMMY_WS_ID/projects/${item.id}`;
      case "Task":
        return `/workspaces/DUMMY_WS_ID/projects/${item.projectId}/tasks/${item.id}`;
      case "User":
        return `/profile/${item.id}`;
      default:
        return "/";
    }
  };

  const handleSelect = () => {
    const url = getLink().replace("DUMMY_WS_ID", "1");
    navigate(url);
  };

  const Icon = getIcon(item.__typename);

  return (
    <CommandItem
      key={item.id}
      onSelect={handleSelect}
      value={item.name || item.title}
    >
      <Icon className="mr-2 h-4 w-4" />
      <span>{item.name || item.title}</span>
    </CommandItem>
  );
}

// FILE: src/features/security/api/useChangePassword.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useAuthStore } from "@/store/auth";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

async function changePassword(passwordData: any): Promise<any> {
  const { data } = await api.post("/users/me/change-password", passwordData);
  return data;
}

export function useChangePassword() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);

  return useMutation({
    mutationFn: changePassword,
    onSuccess: () => {
      toast.success("Password changed successfully.", {
        description:
          "For your security, you have been logged out. Please sign in again with your new password.",
      });

      queryClient.clear();

      setAccessToken(null);

      navigate("/login", { replace: true });
    },
    onError: (error: any) => {
      toast.error("Failed to change password", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/security/components/ChangePasswordForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { useChangePassword } from "../api/useChangePassword";

const changePasswordSchema = z
  .object({
    currentPassword: z.string().min(1, "Current password is required."),
    newPassword: z
      .string()
      .min(8, "New password must be at least 8 characters long."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "New passwords do not match.",
    path: ["confirmPassword"],
  });

type ChangePasswordFormValues = z.infer<typeof changePasswordSchema>;

export function ChangePasswordForm() {
  const changePasswordMutation = useChangePassword();

  const form = useForm<ChangePasswordFormValues>({
    resolver: zodResolver(changePasswordSchema),
    defaultValues: {
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    },
  });

  function onSubmit(values: ChangePasswordFormValues) {
    changePasswordMutation.mutate(values);
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          For your security, we recommend choosing a strong password that you
          don't use elsewhere.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="currentPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Current Password</FormLabel>
                  <FormControl>
                    <Input type="password" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="newPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>New Password</FormLabel>
                  <FormControl>
                    <Input type="password" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Confirm New Password</FormLabel>
                  <FormControl>
                    <Input type="password" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" disabled={changePasswordMutation.isPending}>
              {changePasswordMutation.isPending
                ? "Changing Password..."
                : "Change Password"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/tasks/api/useAddTaskLink.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface AddLinkParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  linkData: any;
}

async function addTaskLink({
  workspaceId,
  projectId,
  taskId,
  linkData,
}: AddLinkParams): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/links`,
    linkData
  );
  return data;
}

export function useAddTaskLink(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (linkData: any) =>
      addTaskLink({ workspaceId, projectId, taskId, linkData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
    },
  });
}

// FILE: src/features/tasks/api/useAssignUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function assignUser({
  workspaceId,
  projectId,
  taskId,
  userId,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/assignees`,
    { userId }
  );
  return data;
}

export function useAssignUser(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (userId: string) =>
      assignUser({ workspaceId, projectId, taskId, userId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
    },
  });
}

// FILE: src/features/tasks/api/useCreateTask.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function createTask({
  workspaceId,
  projectId,
  taskData,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    taskData
  );
  return data;
}

export function useCreateTask(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (taskData) => createTask({ workspaceId, projectId, taskData }),
    onSuccess: (newTask) => {
      toast.success(`Task "${newTask.title}" created.`);

      // Invalidate all queries starting with this key, which will include
      // all view data, lists, etc. for this project's tasks.
      queryClient.invalidateQueries({
        queryKey: ["projects", projectId, "tasks"],
      });

      if (newTask.parentId) {
        queryClient.invalidateQueries({
          queryKey: ["task", newTask.parentId],
        });
      }
    },
    onError: (error: any) => {
      toast.error("Failed to create task", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}
// FILE: src/features/tasks/api/useDeleteTask.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function deleteTask({
  workspaceId,
  projectId,
  taskId,
}: any): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`
  );
}

export function useDeleteTask(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();

  return useMutation<void, AxiosError, string>({
    mutationFn: (taskId) => deleteTask({ workspaceId, projectId, taskId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["tasks", projectId] });
    },
  });
}

// FILE: src/features/tasks/api/useGetTask.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getTask(
  workspaceId: string,
  projectId: string,
  taskId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`
  );
  return data;
}

export function useGetTask(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useQuery({
    queryKey: ["task", taskId],
    queryFn: () => getTask(workspaceId, projectId, taskId),
    enabled: !!workspaceId && !!projectId && !!taskId,
  });
}

// FILE: src/features/tasks/api/useGetTasks.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getTasks(
  workspaceId: string,
  projectId: string,
  query: any
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    { params: query }
  );
  return data;
}

export function useGetTasks(
  workspaceId: string,
  projectId: string,
  query: any,
  options: { enabled?: boolean } = { enabled: true }
) {
  return useQuery({
    queryKey: ["tasks", projectId, query],
    queryFn: () => getTasks(workspaceId, projectId, query),

    enabled: !!workspaceId && !!projectId && options.enabled,
  });
}

// FILE: src/features/tasks/api/useMoveTask.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { TaskStatus } from "@/types";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface MoveTaskParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  targetColumnId: string;
  orderInColumn: number;
  newStatus?: TaskStatus | null;
}

async function moveTask(params: MoveTaskParams): Promise<any> {
  const { data } = await api.patch(
    `/workspaces/${params.workspaceId}/projects/${params.projectId}/tasks/${params.taskId}/move`,
    {
      targetColumnId: params.targetColumnId,
      orderInColumn: params.orderInColumn,
      newStatus: params.newStatus,
    }
  );
  return data;
}

export function useMoveTask() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, MoveTaskParams>({
    mutationFn: moveTask,
    onSuccess: () => {
      // The onSettled block is sufficient for invalidation.
      // We could add optimistic updates back here later if needed.
    },
    onError: () => {
      toast.error("Failed to move task.");
    },
    // onSettled always runs after a mutation, on either success or error.
    // This is the most reliable place to refetch data.
    onSettled: (_data, _error, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["projects", variables.projectId, "tasks"],
      });
    },
  });
}
// FILE: src/features/tasks/api/useRemoveTaskLink.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface RemoveLinkParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  linkId: string;
}

async function removeTaskLink({
  workspaceId,
  projectId,
  taskId,
  linkId,
}: RemoveLinkParams): Promise<any> {
  const { data } = await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/links/${linkId}`
  );
  return data;
}

export function useRemoveTaskLink(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (linkId: string) =>
      removeTaskLink({ workspaceId, projectId, taskId, linkId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
    },
  });
}

// FILE: src/features/tasks/api/useUnassignUser.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function unassignUser({
  workspaceId,
  projectId,
  taskId,
  userId,
}: any): Promise<any> {
  const { data } = await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/assignees/${userId}`
  );
  return data;
}

export function useUnassignUser(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (userId: string) =>
      unassignUser({ workspaceId, projectId, taskId, userId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
    },
  });
}

// FILE: src/features/tasks/api/useUpdateTask.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function updateTask({
  workspaceId,
  projectId,
  taskId,
  taskData,
}: any): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`,
    taskData
  );
  return data;
}

export function useUpdateTask(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (taskData) =>
      updateTask({ workspaceId, projectId, taskId, taskData }),
    onSuccess: () => {
      // Invalidate the new hierarchical key for all project tasks
      queryClient.invalidateQueries({
        queryKey: ["projects", projectId, "tasks"],
      });
      // Also invalidate the specific task detail query, which is good practice
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
    },
  });
}
// FILE: src/features/tasks/api/useUpdateTaskCustomValues.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface UpdateValuesParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  updates: { fieldId: string; value: any }[];
}

async function updateTaskCustomValues({
  workspaceId,
  projectId,
  taskId,
  updates,
}: UpdateValuesParams): Promise<any> {
  const { data } = await api.patch(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/custom-fields`,
    { updates }
  );
  return data;
}

export function useUpdateTaskCustomValues(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (updates: { fieldId: string; value: any }[]) =>
      updateTaskCustomValues({ workspaceId, projectId, taskId, updates }),
    onSuccess: (updatedTask) => {
      queryClient.setQueryData(["task", taskId], updatedTask);

      queryClient.invalidateQueries({ queryKey: ["tasks", projectId] });
    },
  });
}

// FILE: src/features/tasks/components/CreateTaskDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateTaskForm } from "./CreateTaskForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

interface CreateTaskDialogProps {
  workspaceId: string;
  projectId: string;
  parentId?: string | null;

  trigger?: React.ReactNode;
  isOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
}

export function CreateTaskDialog({
  workspaceId,
  projectId,
  parentId,

  trigger,
  isOpen: externalIsOpen,
  onOpenChange: externalOnOpenChange,
}: CreateTaskDialogProps) {
  const [internalIsOpen, setInternalIsOpen] = useState(false);
  const isControlled =
    externalIsOpen !== undefined && externalOnOpenChange !== undefined;
  const isOpen = isControlled ? externalIsOpen : internalIsOpen;
  const onOpenChange = isControlled ? externalOnOpenChange : setInternalIsOpen;

  const handleSuccess = () => {
    onOpenChange(false);
  };

  const dialogContent = (
    <DialogContent>
      <DialogHeader>
        <DialogTitle>
          {parentId ? "Create Sub-task" : "Create a new task"}
        </DialogTitle>
        <DialogDescription>
          Fill in the details below to add a new task to your project.
        </DialogDescription>
      </DialogHeader>
      <CreateTaskForm
        workspaceId={workspaceId}
        projectId={projectId}
        parentId={parentId}
        onSuccess={handleSuccess}
      />
    </DialogContent>
  );

  if (isControlled) {
    return (
      <Dialog open={isOpen} onOpenChange={onOpenChange}>
        {dialogContent}
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
        {trigger || (
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" />
            New Task
          </Button>
        )}
      </DialogTrigger>
      {dialogContent}
    </Dialog>
  );
}

// FILE: src/features/tasks/components/CreateTaskForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { useCreateTask } from "../api/useCreateTask";
import { useGetEpics } from "@/features/epics/api/useGetEpics";
import { AxiosError } from "axios";
import { TaskStatus, TaskPriority } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

const taskSchema = z.object({
  title: z.string().min(1, "Title is required."),
  description: z.string().optional(),
  status: z.nativeEnum(TaskStatus),
  priority: z.nativeEnum(TaskPriority),
  epicId: z.string().nullable().optional(),
  parentId: z.string().nullable().optional(),
  boardColumnId: z.string().uuid().optional().nullable(),
  dueDate: z.date().optional().nullable(),
});
type TaskFormValues = z.infer<typeof taskSchema>;

interface CreateTaskFormProps {
  workspaceId: string;
  projectId: string;
  parentId?: string | null;
  onSuccess?: () => void;
}

export function CreateTaskForm({
  workspaceId,
  projectId,
  parentId = null,
  onSuccess,
}: CreateTaskFormProps) {
  const createMutation = useCreateTask(workspaceId, projectId);
  const { data: epicsData, isLoading: isLoadingEpics } = useGetEpics(
    workspaceId,
    projectId
  );

  const form = useForm<TaskFormValues>({
    resolver: zodResolver(taskSchema),
    defaultValues: {
      title: "",
      description: "",
      status: TaskStatus.TODO,
      priority: TaskPriority.NONE,
      epicId: null,
      parentId: parentId,
      boardColumnId: null,
      dueDate: null,
    },
  });

  async function onSubmit(values: TaskFormValues) {
    const submitData: Partial<TaskFormValues> = { ...values };
    if (!submitData.boardColumnId) delete submitData.boardColumnId;
    if (!submitData.epicId) delete submitData.epicId;
    if (!submitData.parentId) delete submitData.parentId;

    await createMutation.mutateAsync(submitData, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input
                  placeholder="e.g. Draft Q3 financial report"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Status</FormLabel>
                <Select onValueChange={field.onChange} value={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a status" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(TaskStatus).map((s) => (
                      <SelectItem key={s} value={s}>
                        {s}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="priority"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Priority</FormLabel>
                <Select onValueChange={field.onChange} value={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a priority" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(TaskPriority).map((p) => (
                      <SelectItem key={p} value={p}>
                        {p}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="epicId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Epic (Optional)</FormLabel>
                <Select
                  onValueChange={(value) => field.onChange(value || null)}
                  value={field.value ?? ""}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select an epic" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {isLoadingEpics ? (
                      <div className="text-muted-foreground p-2 text-sm">
                        Loading epics...
                      </div>
                    ) : (
                      epicsData?.data?.map((epic: any) => (
                        <SelectItem key={epic.id} value={epic.id}>
                          {epic.name}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dueDate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Due Date (Optional)</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        {field.value ? (
                          format(field.value, "PPP")
                        ) : (
                          <span>Pick a date</span>
                        )}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value || undefined}
                      onSelect={field.onChange}
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        {errorMessage && (
          <div className="text-sm font-medium text-red-500">{errorMessage}</div>
        )}

        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating Task..." : "Create Task"}
        </Button>
      </form>
    </Form>
  );
}
// FILE: src/features/tasks/components/SubtaskItem.tsx
import { Badge } from "@/components/ui/badge";
import { CheckSquare, Square } from "lucide-react";

interface SubtaskItemProps {
  task: any;
  onTaskSelect: (taskId: string) => void;
}

export function SubtaskItem({ task, onTaskSelect }: SubtaskItemProps) {
  const isCompleted = task.status === "DONE";

  const handleClick = () => {
    onTaskSelect(task.id);
  };

  return (
    <div
      className="hover:bg-accent flex cursor-pointer items-center gap-3 rounded-md p-2"
      onClick={handleClick}
    >
      {isCompleted ? (
        <CheckSquare className="text-muted-foreground h-4 w-4" />
      ) : (
        <Square className="text-muted-foreground h-4 w-4" />
      )}
      <span className="flex-grow truncate text-sm">{task.title}</span>
      <Badge variant="outline" className="text-xs">
        {task.priority}
      </Badge>
    </div>
  );
}

// FILE: src/features/tasks/components/SubtaskList.tsx
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { SubtaskItem } from "./SubtaskItem";

interface SubtaskListProps {
  task: any;
  onAddSubtask: () => void;
  onTaskSelect: (taskId: string) => void;
}

export function SubtaskList({
  task,
  onAddSubtask,
  onTaskSelect,
}: SubtaskListProps) {
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Sub-tasks</h3>
        <Button variant="ghost" size="sm" onClick={onAddSubtask}>
          <Plus className="mr-1 h-4 w-4" /> Add Sub-task
        </Button>
      </div>
      <div className="space-y-1 rounded-md border p-2">
        {task.subtasks?.length > 0 ? (
          task.subtasks.map((subtask: any) => (
            <SubtaskItem
              key={subtask.id}
              task={subtask}
              onTaskSelect={onTaskSelect}
            />
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No sub-tasks yet.
          </p>
        )}
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskAssignees.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { Check, UserPlus, X } from "lucide-react";
import { useAssignUser } from "../api/useAssignUser";
import { useUnassignUser } from "../api/useUnassignUser";
import { cn } from "@/lib/utils";

export function TaskAssignees({ task, workspaceId, projectId }: any) {
  const { data: membersData } = useGetProjectMembers(workspaceId, projectId);
  const assignUserMutation = useAssignUser(workspaceId, projectId, task.id);
  const unassignUserMutation = useUnassignUser(workspaceId, projectId, task.id);

  const assignedIds = new Set(task.assignees.map((a: any) => a.id));

  return (
    <div>
      <h3 className="mb-2 text-sm font-semibold">Assignees</h3>
      <div className="flex flex-wrap items-center gap-2">
        {task.assignees.map((assignee: any) => (
          <div
            key={assignee.id}
            className="flex items-center gap-2 rounded-full bg-gray-100 pr-2"
          >
            <Avatar className="h-6 w-6">
              <AvatarImage src={assignee.avatarUrl} />
              <AvatarFallback>{assignee.name?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="text-sm">{assignee.name}</span>
            <button onClick={() => unassignUserMutation.mutate(assignee.id)}>
              <X className="text-muted-foreground hover:text-primary h-3 w-3" />
            </button>
          </div>
        ))}

        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="icon" className="h-6 w-6">
              <UserPlus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[200px] p-0">
            <Command>
              <CommandInput placeholder="Assign user..." />
              <CommandList>
                <CommandEmpty>No users found.</CommandEmpty>
                <CommandGroup>
                  {membersData?.map((member: any) => (
                    <CommandItem
                      key={member.userId}
                      value={member.name}
                      onSelect={() => assignUserMutation.mutate(member.userId)}
                      disabled={assignedIds.has(member.userId)}
                    >
                      <Check
                        className={cn(
                          "mr-2 h-4 w-4",
                          assignedIds.has(member.userId)
                            ? "opacity-100"
                            : "opacity-0"
                        )}
                      />
                      {member.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskCustomFields.tsx
import { useGetCustomFieldDefinitions } from "@/features/custom-fields/api/useGetCustomFieldDefinitions";
import { useUpdateTaskCustomValues } from "../api/useUpdateTaskCustomValues";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Label } from "@/components/ui/label";
import { Calendar as CalendarIcon } from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { format } from "date-fns";

export function TaskCustomFields({ task, workspaceId, projectId }: any) {
  const { data: definitionsData, isLoading } = useGetCustomFieldDefinitions(
    workspaceId,
    projectId
  );
  const { mutate: updateValues } = useUpdateTaskCustomValues(
    workspaceId,
    projectId,
    task.id
  );

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
    );
  }

  if (!definitionsData || definitionsData.data.length === 0) {
    return null;
  }

  const handleUpdate = (fieldId: string, value: any) => {
    updateValues([{ fieldId, value }]);
  };

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Custom Fields</h3>
      <div className="space-y-4">
        {definitionsData.data.map((def: any) => {
          const currentValue =
            task.customFields.find((cf: any) => cf.fieldId === def.id)?.value ??
            "";

          return (
            <div key={def.id}>
              <Label className="text-muted-foreground text-xs">
                {def.name}
              </Label>
              {def.type === "TEXT" && (
                <Input
                  defaultValue={currentValue}
                  onBlur={(e) => handleUpdate(def.id, e.target.value)}
                />
              )}
              {def.type === "NUMBER" && (
                <Input
                  type="number"
                  defaultValue={currentValue}
                  onBlur={(e) =>
                    handleUpdate(def.id, parseFloat(e.target.value))
                  }
                />
              )}
              {def.type === "DATE" && (
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !currentValue && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {currentValue ? (
                        format(new Date(currentValue), "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={
                        currentValue ? new Date(currentValue) : undefined
                      }
                      onSelect={(date) =>
                        handleUpdate(def.id, date?.toISOString())
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              )}
              {def.type === "SELECT" && (
                <Select
                  defaultValue={currentValue}
                  onValueChange={(value) => handleUpdate(def.id, value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={`Select ${def.name}`} />
                  </SelectTrigger>
                  <SelectContent>
                    {def.options?.values?.map((option: string) => (
                      <SelectItem key={option} value={option}>
                        {option}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskDetailBody.tsx
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { CommentSection } from "@/features/comments/components/CommentSection";
import { SubtaskList } from "./SubtaskList";
import { useState, useEffect } from "react";
import { CreateTaskDialog } from "./CreateTaskDialog";
import { TaskLinks } from "./TaskLinks";
import { EditableField } from "@/components/ui/EditableField";

export function TaskDetailBody({
  task,
  workspaceId,
  projectId,
  onSave,
  onTaskSelect,
}: any) {
  const [isSubtaskDialogOpen, setIsSubtaskDialogOpen] = useState(false);
  const [description, setDescription] = useState(task.description || "");

  useEffect(() => {
    setDescription(task.description || "");
  }, [task.description]);

  return (
    <div className="col-span-2 space-y-6 overflow-y-auto border-r pr-6">
      <RichTextEditor
        value={description}
        onChange={setDescription}
        onBlur={() => {
          if (description !== task.description) {
            onSave("description", description);
          }
        }}
      />

      <SubtaskList
        task={task}
        onAddSubtask={() => setIsSubtaskDialogOpen(true)}
        onTaskSelect={onTaskSelect}
      />

      <TaskLinks task={task} workspaceId={workspaceId} projectId={projectId} />

      <CommentSection
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={task.id}
      />

      <CreateTaskDialog
        workspaceId={workspaceId}
        projectId={projectId}
        parentId={task.id}
        isOpen={isSubtaskDialogOpen}
        onOpenChange={setIsSubtaskDialogOpen}
      />
    </div>
  );
}

// FILE: src/features/tasks/components/TaskDetailModal.tsx
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { EditableField } from "@/components/ui/EditableField";
import { useGetTask } from "../api/useGetTask";
import { useUpdateTask } from "../api/useUpdateTask";
import { TaskDetailBody } from "./TaskDetailBody";
import {
  TaskDetailSidebar,
  TaskDetailSidebarSkeleton,
} from "./TaskDetailSidebar";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { CornerUpLeft } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface TaskDetailModalProps {
  workspaceId: string;
  projectId: string;
  taskId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onTaskSelect: (taskId: string | null) => void;
}

export function TaskDetailModal({
  workspaceId,
  projectId,
  taskId,
  isOpen,
  onOpenChange,
  onTaskSelect,
}: TaskDetailModalProps) {
  const { data: task, isLoading } = useGetTask(
    workspaceId!,
    projectId!,
    taskId!
  );
  const updateTaskMutation = useUpdateTask(workspaceId!, projectId!, taskId!);

  const handleSave = (field: "title" | "description", value: string) => {
    updateTaskMutation.mutate({ [field]: value });
  };

  const renderContent = () => {
    if (isLoading || !task) {
      return (
        <>
          <div className="pr-6">
            <Skeleton className="h-8 w-3/4" />
          </div>
          <div className="grid flex-1 grid-cols-3 gap-6 overflow-y-hidden py-4">
            <div className="col-span-2 space-y-6 overflow-y-auto border-r pr-6">
              <Skeleton className="h-32 w-full" />
              <Skeleton className="h-4 w-1/4" />
              <Skeleton className="h-24 w-full" />
            </div>
            <TaskDetailSidebarSkeleton />
          </div>
        </>
      );
    }
    return (
      <>
        <DialogTitle className="flex items-center gap-2 pr-6">
          {task.parentId && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 flex-shrink-0"
                    onClick={() => onTaskSelect(task.parentId)}
                  >
                    <CornerUpLeft className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Go to parent task</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
          <EditableField
            initialValue={task.title}
            onSave={(newTitle) => handleSave("title", newTitle)}
            className="text-2xl font-bold"
            placeholder="Task Title"
          />
        </DialogTitle>
        <DialogDescription className="text-muted-foreground pr-6 text-xs">
          Task ID: {task.id}
        </DialogDescription>
        <div className="grid flex-1 grid-cols-3 gap-6 overflow-y-hidden py-4">
          <TaskDetailBody
            task={task}
            workspaceId={workspaceId}
            projectId={projectId}
            onSave={handleSave}
            onTaskSelect={onTaskSelect}
          />
          <TaskDetailSidebar
            task={task}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        </div>
      </>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="flex max-h-[90vh] flex-col sm:max-w-4xl">
        {renderContent()}
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/tasks/components/TaskDetailSidebar.tsx
import { TaskAssignees } from "./TaskAssignees";
import { TimeLogSection } from "@/features/timelogs/components/TimeLogSection";
import { Skeleton } from "@/components/ui/skeleton";
import { TaskCustomFields } from "./TaskCustomFields";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useUpdateTask } from "../api/useUpdateTask";
import { TaskStatus, TaskPriority } from "@/types";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { Calendar as CalendarIcon, X } from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";

export function TaskDetailSidebar({ task, workspaceId, projectId }: any) {
  const updateTaskMutation = useUpdateTask(workspaceId, projectId, task.id);

  const handleUpdate = (
    field: "status" | "priority" | "dueDate",
    value: string | null
  ) => {
    updateTaskMutation.mutate({ [field]: value });
  };

  return (
    <div className="col-span-1 space-y-6 overflow-y-auto pr-1">
      <div>
        <h3 className="mb-2 text-sm font-semibold">Status</h3>
        <Select
          value={task.status}
          onValueChange={(value) => handleUpdate("status", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set status" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskStatus).map((s) => (
              <SelectItem key={s} value={s}>
                {s}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Priority</h3>
        <Select
          value={task.priority}
          onValueChange={(value) => handleUpdate("priority", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set priority" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskPriority).map((p) => (
              <SelectItem key={p} value={p}>
                {p}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Due Date</h3>
        <div className="flex items-center gap-1">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !task.dueDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {task.dueDate ? (
                  format(new Date(task.dueDate), "PPP")
                ) : (
                  <span>Pick a date</span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="flex w-auto flex-col space-y-2 p-2">
              <div className="rounded-t-md border p-1 text-center text-sm">
                Selected date
              </div>
              <Calendar
                mode="single"
                selected={task.dueDate ? new Date(task.dueDate) : undefined}
                onSelect={(date) =>
                  handleUpdate("dueDate", date?.toISOString() ?? null)
                }
              />
            </PopoverContent>
          </Popover>
          {task.dueDate && (
            <Button
              variant="ghost"
              size="icon"
              className="h-9 w-9"
              onClick={() => handleUpdate("dueDate", null)}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
      </div>
      <TaskAssignees
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TaskCustomFields
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TimeLogSection
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={task.id}
      />
    </div>
  );
}

export function TaskDetailSidebarSkeleton() {
  return (
    <div className="col-span-1 space-y-6">
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-7 w-24 rounded-full" />
          <Skeleton className="h-7 w-7 rounded-full" />
        </div>
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-10 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-8 w-1/2" />
        <Skeleton className="h-10 w-full" />
      </div>
    </div>
  );
}
// FILE: src/features/tasks/components/TaskLinks.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Link2, Trash2 } from "lucide-react";
import { useAddTaskLink } from "../api/useAddTaskLink";
import { useRemoveTaskLink } from "../api/useRemoveTaskLink";
import { TaskLinkType } from "@/types";

export function TaskLinks({ task, workspaceId, projectId }: any) {
  const [targetTaskId, setTargetTaskId] = useState("");
  const [linkType, setLinkType] = useState<TaskLinkType>(
    TaskLinkType.RELATES_TO
  );

  const addLinkMutation = useAddTaskLink(workspaceId, projectId, task.id);
  const removeLinkMutation = useRemoveTaskLink(workspaceId, projectId, task.id);

  const handleAddLink = (e: React.FormEvent) => {
    e.preventDefault();
    if (!targetTaskId.trim()) return;
    addLinkMutation.mutate(
      { targetTaskId, type: linkType },
      { onSuccess: () => setTargetTaskId("") }
    );
  };

  return (
    <div className="space-y-2">
      <h3 className="text-sm font-semibold">Linked Tasks</h3>
      <div className="space-y-1 rounded-md border p-2">
        {task.links?.length > 0 ? (
          task.links.map((link: any) => (
            <div
              key={link.id}
              className="hover:bg-accent flex items-center justify-between p-2 text-sm"
            >
              <div className="flex items-center gap-2">
                <Link2 className="h-3 w-3" />
                <span className="font-medium">
                  {link.type.replace(/_/g, " ")}:
                </span>
                <span className="text-muted-foreground truncate">
                  {link.targetTask.title}
                </span>
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => removeLinkMutation.mutate(link.id)}
              >
                <Trash2 className="h-3 w-3" />
              </Button>
            </div>
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No linked tasks.
          </p>
        )}
      </div>
      <form onSubmit={handleAddLink} className="flex gap-2">
        <Input
          placeholder="Paste Task ID to link"
          value={targetTaskId}
          onChange={(e) => setTargetTaskId(e.target.value)}
        />
        <Select
          value={linkType}
          onValueChange={(value) => setLinkType(value as TaskLinkType)}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskLinkType).map((type) => (
              <SelectItem key={type} value={type}>
                {type.replace(/_/g, " ")}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Button type="submit" disabled={addLinkMutation.isPending}>
          Link
        </Button>
      </form>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskList.tsx
import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardFooter } from "@/components/ui/card";
import { TaskTableRow } from "./TaskTableRow";
import { EmptyState } from "@/components/ui/empty-state";
import { CreateTaskDialog } from "./CreateTaskDialog";
import { CheckSquare } from "lucide-react";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { Task } from "../task.types";

export function TaskList({
  workspaceId,
  projectId,
  tasks,
  onTaskSelect,
}: {
  workspaceId: string;
  projectId: string;
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}) {
  const [page, setPage] = useState(1);
  const limit = 15;
  const totalPages = Math.ceil(tasks.length / limit);
  const paginatedTasks = tasks.slice((page - 1) * limit, page * limit);

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= totalPages) {
      setPage(newPage);
    }
  };

  const renderBody = () => {
    if (tasks.length === 0) {
      return (
        <TableRow>
          <TableCell colSpan={5}>
            <EmptyState
              icon={<CheckSquare className="text-primary h-10 w-10" />}
              title="No tasks yet"
              description="Create the first task in this project to get started."
              action={
                <CreateTaskDialog
                  workspaceId={workspaceId}
                  projectId={projectId}
                />
              }
            />
          </TableCell>
        </TableRow>
      );
    }
    return paginatedTasks.map((task: any) => (
      <TaskTableRow
        key={task.id}
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
        onTaskSelect={onTaskSelect}
        level={0}
      />
    ));
  };

  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Title</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Priority</TableHead>
            <TableHead>Due Date</TableHead>
            <TableHead className="w-[50px]">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>{renderBody()}</TableBody>
      </Table>
      <CardFooter className="border-t pt-4">
        {totalPages > 1 && (
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page - 1);
                  }}
                  isActive={page > 1}
                />
              </PaginationItem>
              {[...Array(totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePageChange(i + 1);
                    }}
                    isActive={page === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(page + 1);
                  }}
                  isActive={page < totalPages}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </CardFooter>
    </Card>
  );
}

// FILE: src/features/tasks/components/TaskTableRow.tsx
import { TableCell, TableRow } from "@/components/ui/table";
import { MoreHorizontal, Edit, Copy, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useUpdateTask } from "../api/useUpdateTask";
import { useDeleteTask } from "../api/useDeleteTask";
import { TaskStatus, TaskPriority } from "@/types";
import { toast } from "sonner";
import React from "react";
import { format } from "date-fns";

interface TaskTableRowProps {
  task: any;
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string) => void;
  level?: number;
}

export function TaskTableRow({
  task,
  workspaceId,
  projectId,
  onTaskSelect,
  level = 0,
}: TaskTableRowProps) {
  const updateTaskMutation = useUpdateTask(workspaceId, projectId, task.id);
  const deleteTaskMutation = useDeleteTask(workspaceId, projectId);

  const handleStatusChange = (newStatus: string) => {
    updateTaskMutation.mutate({ status: newStatus });
  };
  const handlePriorityChange = (newPriority: string) => {
    if (newPriority !== task.priority) {
      updateTaskMutation.mutate({ priority: newPriority });
    }
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (
      window.confirm(`Are you sure you want to delete task: "${task.title}"?`)
    ) {
      deleteTaskMutation.mutate(task.id);
    }
  };

  const handleCopyId = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(task.id);
    toast.success("Task ID copied to clipboard.");
  };

  return (
    <React.Fragment>
      <TableRow
        className="cursor-pointer"
        onClick={() => onTaskSelect(task.id)}
      >
        <TableCell className="font-medium">
          <div style={{ paddingLeft: `${level * 24}px` }}>{task.title}</div>
        </TableCell>
        <TableCell onClick={(e) => e.stopPropagation()}>
          <Select onValueChange={handleStatusChange} value={task.status}>
            <SelectTrigger className="w-[140px]">
              <SelectValue placeholder="Set status" />
            </SelectTrigger>
            <SelectContent>
              {Object.values(TaskStatus).map((s) => (
                <SelectItem key={s} value={s}>
                  {s}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </TableCell>
        <TableCell onClick={(e) => e.stopPropagation()}>
          <Select
            onValueChange={handlePriorityChange}
            defaultValue={task.priority}
          >
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="Set priority" />
            </SelectTrigger>
            <SelectContent>
              {Object.values(TaskPriority).map((p) => (
                <SelectItem key={p} value={p}>
                  {p}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </TableCell>
        <TableCell>
          {task.dueDate ? format(new Date(task.dueDate), "PPP") : "None"}
        </TableCell>
        <TableCell onClick={(e) => e.stopPropagation()}>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onTaskSelect(task.id)}>
                <Edit className="mr-2 h-4 w-4" />
                <span>Edit Task</span>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleCopyId}>
                <Copy className="mr-2 h-4 w-4" />
                <span>Copy Task ID</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-red-600" onClick={handleDelete}>
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Delete Task</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </TableCell>
      </TableRow>
      {task.subtasks?.map((subtask: any) => (
        <TaskTableRow
          key={subtask.id}
          task={subtask}
          workspaceId={workspaceId}
          projectId={projectId}
          onTaskSelect={onTaskSelect}
          level={level + 1}
        />
      ))}
    </React.Fragment>
  );
}
// FILE: src/features/tasks/task.types.ts
import {
  TaskStatus,
  TaskPriority,
  TaskLinkType,
  CustomFieldType,
} from "@/types";
import { z } from "zod";
import {
  createPaginationSchema,
  createPaginatedResponseSchema,
  createUuidParamSchema,
} from "@/lib/zod";

export const ProjectIdParamsSchema = createUuidParamSchema(
  "projectId",
  "Project"
);
export type ProjectIdParams = z.infer<typeof ProjectIdParamsSchema>;

export const TaskIdParamsSchema = createUuidParamSchema("taskId", "Task");
export type TaskIdParams = z.infer<typeof TaskIdParamsSchema>;

export const TaskLinkIdParamsSchema = TaskIdParamsSchema.extend({
  linkId: z.string().uuid(),
});
export interface TaskLinkIdParams {
  taskId: string;
  linkId: string;
}

export const TaskAssigneeParamsSchema = TaskIdParamsSchema.extend({
  userId: z.string().uuid(),
});
export interface TaskAssigneeParams {
  taskId: string;
  userId: string;
}

const TaskAssigneeSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  avatarUrl: z.string().url().nullable(),
});

const TaskLinkSchema = z.object({
  id: z.string().uuid(),
  type: z.nativeEnum(TaskLinkType),
  targetTask: z
    .object({
      id: z.string().uuid(),
      title: z.string(),
      status: z.nativeEnum(TaskStatus),
    })
    .optional(),
  sourceTask: z
    .object({
      id: z.string().uuid(),
      title: z.string(),
      status: z.nativeEnum(TaskStatus),
    })
    .optional(),
});

const CustomFieldDefinitionForTaskSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  type: z.nativeEnum(CustomFieldType),
  options: z.any().nullable(),
});

const TaskCustomFieldSchema = z.object({
  fieldId: z.string().uuid(),
  value: z.any(),
  definition: CustomFieldDefinitionForTaskSchema,
});

const BaseTaskSchema = z.object({
  __typename: z.literal("Task"),
  id: z.string().uuid(),
  title: z.string(),
  description: z.string().nullable(),
  status: z.nativeEnum(TaskStatus),
  priority: z.nativeEnum(TaskPriority),
  projectId: z.string().uuid(),
  creatorId: z.string().uuid(),
  startDate: z.date().nullable(),
  dueDate: z.date().nullable(),
  timeEstimate: z.number().int().nullable(),
  epicId: z.string().uuid().nullable(),
  boardColumnId: z.string().uuid().nullable(),
  orderInColumn: z.number().int().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
  assignees: z.array(TaskAssigneeSchema),
  links: z.array(TaskLinkSchema),
  linkedToBy: z.array(TaskLinkSchema),
  customFields: z.array(TaskCustomFieldSchema),
  parentId: z.string().uuid().nullable(),
});

export type Task = z.infer<typeof BaseTaskSchema> & {
  subtasks: Task[];
};
export const TaskSchema: z.ZodType<Task> = BaseTaskSchema.extend({
  subtasks: z.lazy(() => z.array(TaskSchema)),
});

export type TaskLink = z.infer<typeof TaskLinkSchema>;

export const CreateTaskDtoSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().optional().nullable(),
  status: z.nativeEnum(TaskStatus).default(TaskStatus.TODO),
  priority: z.nativeEnum(TaskPriority).default(TaskPriority.NONE),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  timeEstimate: z.number().int().positive().optional().nullable(),
  projectId: z.string().uuid(),
  epicId: z.string().uuid().optional().nullable(),
  boardColumnId: z.string().uuid().optional(),
  parentId: z.string().uuid().optional().nullable(),
});
export type CreateTaskDto = z.infer<typeof CreateTaskDtoSchema>;

export const CreateTaskBodySchema = CreateTaskDtoSchema.omit({
  projectId: true,
});
export type CreateTaskBody = z.infer<typeof CreateTaskBodySchema>;

export const UpdateTaskDtoSchema = CreateTaskDtoSchema.omit({
  projectId: true,
  parentId: true,
}).partial();
export type UpdateTaskDto = z.infer<typeof UpdateTaskDtoSchema>;

export const MoveTaskDtoSchema = z.object({
  targetColumnId: z.string().uuid(),
  orderInColumn: z.number().int(),
});
export type MoveTaskDto = z.infer<typeof MoveTaskDtoSchema>;

export const CreateTaskLinkDtoSchema = z.object({
  targetTaskId: z.string().uuid(),
  type: z.nativeEnum(TaskLinkType),
});
export type CreateTaskLinkDto = z.infer<typeof CreateTaskLinkDtoSchema>;

export const AssignUserToTaskDtoSchema = z.object({
  userId: z.string().uuid(),
});
export type AssignUserToTaskDto = z.infer<typeof AssignUserToTaskDtoSchema>;

export const UpdateTaskCustomValuesDtoSchema = z.object({
  updates: z.array(
    z.object({
      fieldId: z.string().uuid(),
      value: z.any().optional(),
    })
  ),
});
export type UpdateTaskCustomValuesDto = z.infer<
  typeof UpdateTaskCustomValuesDtoSchema
>;

export const ListTasksQuerySchema = createPaginationSchema().extend({
  status: z.nativeEnum(TaskStatus).optional(),
  priority: z.nativeEnum(TaskPriority).optional(),
  search: z.string().optional(),
  startDate: z.coerce.date().optional(),
  endDate: z.coerce.date().optional(),
  includeSubtasks: z.boolean().default(false),
  sortBy: z
    .enum([
      "createdAt",
      "updatedAt",
      "title",
      "status",
      "priority",
      "dueDate",
      "orderInColumn",
    ])
    .default("orderInColumn"),
  sortOrder: z.enum(["asc", "desc"]).default("asc"),
});
export type ListTasksQuery = z.infer<typeof ListTasksQuerySchema>;

export const PaginatedTasksResponseSchema =
  createPaginatedResponseSchema(TaskSchema);

export type PaginatedTasksResponse = z.infer<
  typeof PaginatedTasksResponseSchema
>;

// FILE: src/features/teams/api/useAddUserToTeam.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function addUserToTeam({
  workspaceId,
  teamId,
  userId,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/teams/${teamId}/members/${userId}`
  );
  return data;
}

export function useAddUserToTeam(workspaceId: string, teamId: string) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (userId: string) =>
      addUserToTeam({ workspaceId, teamId, userId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["teams", workspaceId] });
      queryClient.invalidateQueries({ queryKey: ["team", teamId] });
    },
  });
}

// FILE: src/features/teams/api/useCreateTeam.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createTeam({ workspaceId, teamData }: any): Promise<any> {
  const { data } = await api.post(`/workspaces/${workspaceId}/teams`, teamData);
  return data;
}

export function useCreateTeam(workspaceId: string) {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: (teamData) => createTeam({ workspaceId, teamData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["teams", workspaceId] });
    },
  });
}

// FILE: src/features/teams/api/useDeleteTeam.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function deleteTeam({
  workspaceId,
  teamId,
}: {
  workspaceId: string;
  teamId: string;
}): Promise<void> {
  await api.delete(`/workspaces/${workspaceId}/teams/${teamId}`);
}

export function useDeleteTeam(workspaceId: string) {
  const queryClient = useQueryClient();

  return useMutation<void, AxiosError, string>({
    mutationFn: (teamId) => deleteTeam({ workspaceId, teamId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["teams", workspaceId] });
    },
  });
}

// FILE: src/features/teams/api/useGetTeams.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getTeams(workspaceId: string, query?: any): Promise<any> {
  const { data } = await api.get(`/workspaces/${workspaceId}/teams`, {
    params: query,
  });
  return data;
}

export function useGetTeams(workspaceId: string, query?: any) {
  return useQuery({
    queryKey: ["teams", workspaceId, query],
    queryFn: () => getTeams(workspaceId, query),
    enabled: !!workspaceId,
  });
}

async function getTeam(workspaceId: string, teamId: string): Promise<any> {
  const { data } = await api.get(`/workspaces/${workspaceId}/teams/${teamId}`);
  return data;
}

export function useGetTeam(workspaceId: string, teamId: string | null) {
  return useQuery({
    queryKey: ["team", teamId],
    queryFn: () => getTeam(workspaceId, teamId!),
    enabled: !!workspaceId && !!teamId,
  });
}

// FILE: src/features/teams/api/useRemoveUserFromTeam.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function removeUserFromTeam({
  workspaceId,
  teamId,
  userId,
}: any): Promise<any> {
  const { data } = await api.delete(
    `/workspaces/${workspaceId}/teams/${teamId}/members/${userId}`
  );
  return data;
}

export function useRemoveUserFromTeam(workspaceId: string, teamId: string) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (userId: string) =>
      removeUserFromTeam({ workspaceId, teamId, userId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["teams", workspaceId] });
      queryClient.invalidateQueries({ queryKey: ["team", teamId] });
    },
  });
}

// FILE: src/features/teams/api/useUpdateTeam.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workspaceId: string;
  teamId: string;
  teamData: any;
}

async function updateTeam({
  workspaceId,
  teamId,
  teamData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/teams/${teamId}`,
    teamData
  );
  return data;
}

export function useUpdateTeam(workspaceId: string, teamId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (teamData) => updateTeam({ workspaceId, teamId, teamData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["teams", workspaceId] });
      queryClient.invalidateQueries({ queryKey: ["team", teamId] });
    },
  });
}

// FILE: src/features/teams/components/CreateTeamDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateTeamForm } from "./CreateTeamForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreateTeamDialog({ workspaceId }: { workspaceId: string }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Team
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create a new team</DialogTitle>
          <DialogDescription>
            Teams help you group users within a workspace.
          </DialogDescription>
        </DialogHeader>
        <CreateTeamForm
          workspaceId={workspaceId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/teams/components/CreateTeamForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateTeam } from "../api/useCreateTeam";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const teamSchema = z.object({
  name: z.string().min(2, "Team name must be at least 2 characters."),
  description: z.string().optional(),
});

type TeamFormValues = z.infer<typeof teamSchema>;

interface CreateTeamFormProps {
  workspaceId: string;
  onSuccess?: () => void;
}

export function CreateTeamForm({
  workspaceId,
  onSuccess,
}: CreateTeamFormProps) {
  const createMutation = useCreateTeam(workspaceId);
  const form = useForm<TeamFormValues>({
    resolver: zodResolver(teamSchema),
    defaultValues: { name: "", description: "" },
  });
  async function onSubmit(values: TeamFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Team Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Research Division" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input
                  placeholder="A short description of the team's purpose"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Team"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/teams/components/EditTeamDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetTeam } from "../api/useGetTeams";
import { EditTeamForm } from "./EditTeamForm";
import { ManageTeamMembers } from "./ManageTeamMembers";
import { Skeleton } from "@/components/ui/skeleton";

interface EditTeamDialogProps {
  teamId: string | null;
  workspaceId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditTeamDialog({
  teamId,
  workspaceId,
  isOpen,
  onOpenChange,
}: EditTeamDialogProps) {
  const { data: team, isLoading } = useGetTeam(workspaceId, teamId);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Edit Team</DialogTitle>
          <DialogDescription>
            Update team details and manage its members.
          </DialogDescription>
        </DialogHeader>
        {isLoading && teamId ? (
          <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
            <div className="space-y-4">
              <Skeleton className="h-10 w-full" />
              <Skeleton className="h-10 w-full" />
              <Skeleton className="h-9 w-24" />
            </div>
            <div className="space-y-4">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-10 w-full" />
            </div>
          </div>
        ) : team ? (
          <div className="grid grid-cols-1 gap-8 py-4 md:grid-cols-2">
            <EditTeamForm
              team={team}
              workspaceId={workspaceId}
              onSuccess={() => onOpenChange(false)}
            />
            <ManageTeamMembers team={team} workspaceId={workspaceId} />
          </div>
        ) : null}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/teams/components/EditTeamForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useUpdateTeam } from "../api/useUpdateTeam";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const teamSchema = z.object({
  name: z.string().min(2, "Team name must be at least 2 characters."),
  description: z.string().optional(),
});

type TeamFormValues = z.infer<typeof teamSchema>;

interface EditTeamFormProps {
  team: any;
  workspaceId: string;
  onSuccess?: () => void;
}

export function EditTeamForm({
  team,
  workspaceId,
  onSuccess,
}: EditTeamFormProps) {
  const updateMutation = useUpdateTeam(workspaceId, team.id);
  const form = useForm<TeamFormValues>({
    resolver: zodResolver(teamSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (team) {
      form.reset({
        name: team.name,
        description: team.description || "",
      });
    }
  }, [team, form]);
  async function onSubmit(values: TeamFormValues) {
    await updateMutation.mutateAsync(values, {
      onSuccess,
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Team Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" disabled={updateMutation.isPending}>
          {updateMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/teams/components/ManageTeamMembers.tsx
import { useGetUsers } from "@/features/admin/users/api/useGetUsers";
import { useAddUserToTeam } from "../api/useAddUserToTeam";
import { useRemoveUserFromTeam } from "../api/useRemoveUserFromTeam";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Check, UserPlus, XIcon } from "lucide-react";

interface ManageTeamMembersProps {
  team: any;
  workspaceId: string;
}

export function ManageTeamMembers({
  team,
  workspaceId,
}: ManageTeamMembersProps) {
  const { data: usersData, isLoading: isLoadingUsers } = useGetUsers({});
  const addUserMutation = useAddUserToTeam(workspaceId, team.id);
  const removeUserMutation = useRemoveUserFromTeam(workspaceId, team.id);

  const memberIds = new Set(team.members.map((m: any) => m.id));

  const availableUsers =
    usersData?.data.filter((user: any) => !memberIds.has(user.id)) || [];

  return (
    <div className="space-y-4">
      <div>
        <h4 className="font-semibold">Current Members</h4>
        <div className="mt-2 flex min-h-[40px] flex-wrap items-center gap-2 rounded-md border p-2">
          {team.members.length > 0 ? (
            team.members.map((member: any) => (
              <Badge key={member.id} variant="secondary" className="pr-1">
                <Avatar className="mr-2 h-5 w-5">
                  <AvatarImage src={member.avatarUrl} />
                  <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                </Avatar>
                <span>{member.name}</span>
                <Button
                  size="icon"
                  variant="ghost"
                  className="ml-1 h-4 w-4"
                  onClick={() => removeUserMutation.mutate(member.id)}
                >
                  <XIcon className="h-3 w-3" />
                </Button>
              </Badge>
            ))
          ) : (
            <p className="text-muted-foreground px-2 text-sm">
              No members in this team.
            </p>
          )}
        </div>
      </div>

      <div>
        <h4 className="font-semibold">Add Member</h4>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              className="w-full justify-between"
              disabled={isLoadingUsers}
            >
              Select user to add...
              <UserPlus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
            <Command>
              <CommandInput placeholder="Search users..." />
              <CommandList>
                <CommandEmpty>No users available.</CommandEmpty>
                <CommandGroup>
                  {availableUsers.map((user: any) => (
                    <CommandItem
                      value={user.name}
                      key={user.id}
                      onSelect={() => {
                        addUserMutation.mutate(user.id);
                      }}
                    >
                      <Check className="mr-2 h-4 w-4 opacity-0" />
                      {user.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/teams/components/TeamCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useDeleteTeam } from "../api/useDeleteTeam";

export function TeamCard({ team, onEdit }: { team: any; onEdit: () => void }) {
  const deleteMutation = useDeleteTeam(team.workspaceId);

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (
      window.confirm(`Are you sure you want to delete the "${team.name}" team?`)
    ) {
      deleteMutation.mutate(team.id);
    }
  };

  return (
    <Card className="hover:border-primary flex flex-col transition-colors">
      <CardHeader className="flex-row items-start justify-between">
        <div>
          <CardTitle>{team.name}</CardTitle>
          <CardDescription className="mt-1">
            {team.description || "No description provided."}
          </CardDescription>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => e.stopPropagation()}
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent onClick={(e) => e.stopPropagation()}>
            <DropdownMenuItem onClick={onEdit}>
              <Edit className="mr-2 h-4 w-4" />
              <span>Edit & Manage Members</span>
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-500 focus:text-red-600"
              onClick={handleDelete}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              <span>Delete Team</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow space-y-4">
        <div>
          <h4 className="text-muted-foreground mb-2 text-sm font-medium">
            Members
          </h4>
          <div className="flex items-center -space-x-2">
            {team.members.map((member: any) => (
              <Avatar key={member.id} className="h-7 w-7 border-2 border-white">
                <AvatarImage src={member.avatarUrl} alt={member.name} />
                <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
              </Avatar>
            ))}
            {team.members.length === 0 && (
              <p className="text-muted-foreground text-sm">No members yet.</p>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/teams/components/TeamList.tsx
import { useState } from "react";
import { useGetTeams } from "../api/useGetTeams";
import { TeamCard } from "./TeamCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { CreateTeamDialog } from "./CreateTeamDialog";
import { Users } from "lucide-react";
import { EditTeamDialog } from "./EditTeamDialog";

const TeamListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function TeamList({ workspaceId }: { workspaceId: string }) {
  const { data, isLoading, isError, error } = useGetTeams(workspaceId);
  const [editingTeamId, setEditingTeamId] = useState<string | null>(null);

  if (isLoading) {
    return <TeamListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Teams"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching teams for this workspace."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Users className="text-primary h-10 w-10" />}
        title="This workspace has no teams yet."
        description="Create the first team to start organizing users."
        action={<CreateTeamDialog workspaceId={workspaceId} />}
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((team: any) => (
          <TeamCard
            team={team}
            key={team.id}
            onEdit={() => setEditingTeamId(team.id)}
          />
        ))}
      </div>
      <EditTeamDialog
        teamId={editingTeamId}
        workspaceId={workspaceId}
        isOpen={!!editingTeamId}
        onOpenChange={(isOpen) => !isOpen && setEditingTeamId(null)}
      />
    </>
  );
}

// FILE: src/features/timelogs/api/useAddTimeLog.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

async function addTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogData,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs`,
    timeLogData
  );
  return data;
}

export function useAddTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (timeLogData: any) =>
      addTimeLog({ workspaceId, projectId, taskId, timeLogData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["timeLogs", taskId] });
    },
  });
}

// FILE: src/features/timelogs/api/useDeleteTimeLog.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface DeleteTimeLogParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  timeLogId: string;
}

async function deleteTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogId,
}: DeleteTimeLogParams): Promise<any> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs/${timeLogId}`
  );
}

export function useDeleteTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (timeLogId: string) =>
      deleteTimeLog({ workspaceId, projectId, taskId, timeLogId }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["timeLogs", taskId] });
    },
  });
}

// FILE: src/features/timelogs/api/useGetTimeLogs.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getTimeLogs(
  workspaceId: string,
  projectId: string,
  taskId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs`
  );
  return data;
}

export function useGetTimeLogs(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useQuery({
    queryKey: ["timeLogs", taskId],
    queryFn: () => getTimeLogs(workspaceId, projectId, taskId),
    enabled: !!workspaceId && !!projectId && !!taskId,
  });
}

// FILE: src/features/timelogs/api/useUpdateTimeLog.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface UpdateTimeLogParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  timeLogId: string;
  timeLogData: any;
}

async function updateTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogId,
  timeLogData,
}: UpdateTimeLogParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs/${timeLogId}`,
    timeLogData
  );
  return data;
}

export function useUpdateTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (data: { timeLogId: string; timeLogData: any }) =>
      updateTimeLog({ workspaceId, projectId, taskId, ...data }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["timeLogs", taskId] });
    },
  });
}

// FILE: src/features/timelogs/components/TimeLogItem.tsx
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { useDeleteTimeLog } from "../api/useDeleteTimeLog";
import { toast } from "sonner";

interface TimeLogItemProps {
  log: any;
  workspaceId: string;
  projectId: string;
  taskId: string;
}

export function TimeLogItem({
  log,
  workspaceId,
  projectId,
  taskId,
}: TimeLogItemProps) {
  const deleteMutation = useDeleteTimeLog(workspaceId, projectId, taskId);

  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this time log?")) {
      deleteMutation.mutate(log.id, {
        onSuccess: () => toast.success("Time log deleted."),
        onError: () => toast.error("Failed to delete time log."),
      });
    }
  };

  return (
    <div className="hover:bg-accent/50 flex items-center justify-between rounded-md p-2 text-sm">
      <div className="flex-grow">
        <span>{log.description || "Time logged"}</span>
        <p className="text-muted-foreground text-xs">
          Logged on: {new Date(log.loggedAt).toLocaleDateString()}
        </p>
      </div>
      <div className="flex items-center gap-2">
        <span className="font-medium">{log.duration}m</span>
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={handleDelete}
          disabled={deleteMutation.isPending}
        >
          <Trash2 className="text-destructive h-3 w-3" />
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/timelogs/components/TimeLogSection.tsx
import { useGetTimeLogs } from "../api/useGetTimeLogs";
import { useAddTimeLog } from "../api/useAddTimeLog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { TimeLogItem } from "./TimeLogItem";

export function TimeLogSection({ workspaceId, projectId, taskId }: any) {
  const { data: timeLogsData, isLoading } = useGetTimeLogs(
    workspaceId,
    projectId,
    taskId
  );
  const addTimeLogMutation = useAddTimeLog(workspaceId, projectId, taskId);

  const [duration, setDuration] = useState("");
  const [description, setDescription] = useState("");

  const handleAddTimeLog = () => {
    const durationInMinutes = parseInt(duration, 10);
    if (!isNaN(durationInMinutes) && durationInMinutes > 0) {
      addTimeLogMutation.mutate(
        {
          taskId: taskId,
          duration: durationInMinutes,
          description,
          loggedAt: new Date().toISOString(),
        },
        {
          onSuccess: () => {
            setDuration("");
            setDescription("");
          },
        }
      );
    }
  };

  if (isLoading) return <div>Loading time logs...</div>;

  const totalMinutes =
    timeLogsData?.data?.reduce(
      (sum: number, log: any) => sum + log.duration,
      0
    ) || 0;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Time Tracking</h3>
      <div className="text-2xl font-bold">
        {hours}h {minutes}m
      </div>
      <div className="space-y-2">
        <div className="grid grid-cols-3 gap-2">
          <Input
            type="number"
            placeholder="Minutes"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            className="col-span-1"
          />
          <Input
            placeholder="Description (optional)"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="col-span-2"
          />
        </div>
        <Button
          onClick={handleAddTimeLog}
          disabled={addTimeLogMutation.isPending || !duration}
          size="sm"
        >
          {addTimeLogMutation.isPending ? "Logging..." : "Log Time"}
        </Button>
      </div>
      <div className="max-h-32 space-y-1 overflow-y-auto rounded-md border p-1">
        {timeLogsData?.data?.length > 0 ? (
          timeLogsData.data.map((log: any) => (
            <TimeLogItem
              key={log.id}
              log={log}
              workspaceId={workspaceId}
              projectId={projectId}
              taskId={taskId}
            />
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No time logged for this task.
          </p>
        )}
      </div>
    </div>
  );
}

// FILE: src/features/views/api/useCreateView.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface CreateViewParams {
  workspaceId: string;
  projectId: string;
  viewData: any;
}

async function createView({
  workspaceId,
  projectId,
  viewData,
}: CreateViewParams): Promise<any> {
  const payload = {
    ...viewData,
    projectId: projectId,
  };
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/views`,
    payload
  );

  return data;
}

export function useCreateView(workspaceId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, { projectId: string; viewData: any }>({
    mutationFn: ({ projectId, viewData }) =>
      createView({ workspaceId, projectId, viewData }),
    onSuccess: (_, variables) => {
      toast.success("New view created successfully.");
      queryClient.invalidateQueries({
        queryKey: ["views", variables.projectId],
      });
    },
    onError: (error: any) => {
      toast.error("Failed to create view", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/views/api/useDeleteView.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface DeleteViewParams {
  workspaceId: string;
  projectId: string;
  viewId: string;
}

async function deleteView({
  workspaceId,
  projectId,
  viewId,
}: DeleteViewParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`
  );
}

export function useDeleteView(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (viewId) => deleteView({ workspaceId, projectId, viewId }),
    onSuccess: () => {
      toast.success("View deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete view", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/views/api/useGetProjectViews.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjectViews(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views`
  );
  return data;
}

export function useGetProjectViews(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["views", projectId],
    queryFn: () => getProjectViews(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}
// FILE: src/features/views/api/useGetView.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getView(
  workspaceId: string,
  projectId: string,
  viewId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`
  );
  return data;
}

export function useGetView(
  workspaceId: string,
  projectId: string,
  viewId: string | null
) {
  return useQuery({
    queryKey: ["view", viewId],
    queryFn: () => getView(workspaceId, projectId, viewId!),
    enabled: !!workspaceId && !!projectId && !!viewId,
  });
}
// FILE: src/features/views/api/useGetViewData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { ListTasksQuery } from "@/features/tasks/task.types";

async function getViewData(
  workspaceId: string,
  projectId: string,
  viewId: string,
  query: ListTasksQuery
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}/data`,
    { params: query }
  );
  return data;
}

export function useGetViewData(
  workspaceId: string,
  projectId: string,
  viewId: string | null,
  query: ListTasksQuery,
  options: { enabled?: boolean } = { enabled: true }
) {
  return useQuery({
    queryKey: ["projects", projectId, "tasks", "view", viewId, query],
    queryFn: () => getViewData(workspaceId, projectId, viewId!, query),
    enabled: !!workspaceId && !!projectId && !!viewId && options.enabled,
  });
}
// FILE: src/features/views/api/useUpdateView.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface UpdateViewParams {
  workspaceId: string;
  projectId: string;
  viewId: string;
  viewData: any;
}

async function updateView({
  workspaceId,
  projectId,
  viewId,
  viewData,
}: UpdateViewParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`,
    viewData
  );
  return data;
}

export function useUpdateView(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, { viewId: string; viewData: any }>({
    mutationFn: ({ viewId, viewData }) =>
      updateView({ workspaceId, projectId, viewId, viewData }),
    onSuccess: (_, variables) => {
      toast.success("View updated successfully.");
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });
      queryClient.invalidateQueries({ queryKey: ["view", variables.viewId] });
    },
    onError: (error: any) => {
      toast.error("Failed to update view", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/views/components/KanbanBoard.tsx
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  DragStartEvent,
} from "@dnd-kit/core";
import { KanbanColumn } from "./KanbanColumn";
import { useMoveTask } from "@/features/tasks/api/useMoveTask";
import { Task } from "@/features/tasks/task.types";
import { TaskStatus, View, ViewColumn } from "@/types";
import { createPortal } from "react-dom";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { useMemo, useState } from "react";
import { EmptyState } from "@/components/ui/empty-state";
import { Kanban } from "lucide-react";

interface KanbanBoardProps {
  workspaceId: string;
  projectId: string;
  views: View[];
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

function mapStatusToColumnName(status: TaskStatus): string {
  switch (status) {
    case TaskStatus.TODO:
      return "To Do";
    case TaskStatus.IN_PROGRESS:
      return "In Progress";
    case TaskStatus.IN_REVIEW:
      return "In Review";
    case TaskStatus.DONE:
      return "Done";
    default:
      return "";
  }
}

// This function now correctly handles parent and sub-task visibility.
const getDisplayableTasks = (tasks: Task[]): Task[] => {
  const displayable: Task[] = [];
  if (!tasks) return displayable;

  for (const task of tasks) {
    // If a task has no subtasks, it's always displayable.
    if (!task.subtasks || task.subtasks.length === 0) {
      displayable.push(task);
    } else {
      // If a task has subtasks, check if they are all done.
      const allSubtasksDone = task.subtasks.every(
        (sub) => sub.status === TaskStatus.DONE
      );

      // If all subtasks are done, display the parent task itself.
      if (allSubtasksDone) {
        displayable.push(task);
      } else {
        // Otherwise, don't show the parent, but recursively find
        // and show its individual (non-done) subtasks.
        displayable.push(...getDisplayableTasks(task.subtasks));
      }
    }
  }
  return displayable;
};

const flattenTasks = (tasksToFlatten: Task[]): Task[] => {
  let flat: Task[] = [];
  if (!tasksToFlatten) return flat;
  for (const task of tasksToFlatten) {
    flat.push(task);
    if (task.subtasks) {
      flat.push(...flattenTasks(task.subtasks));
    }
  }
  return flat;
};

function mapColumnNameToStatus(columnName: string): TaskStatus | null {
  const normalizedName = columnName.trim().toUpperCase().replace(/\s+/g, "_");
  if (normalizedName === "TO_DO") return TaskStatus.TODO;
  if (Object.values(TaskStatus).includes(normalizedName as TaskStatus)) {
    return normalizedName as TaskStatus;
  }
  return null;
}

export function KanbanBoard({
  workspaceId,
  projectId,
  views,
  tasks,
  onTaskSelect,
}: KanbanBoardProps) {
  const moveTaskMutation = useMoveTask();
  const [activeTask, setActiveTask] = useState<Task | null>(null);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const displayableTasks = useMemo(() => getDisplayableTasks(tasks), [tasks]);

  const columns = useMemo(() => {
    const kanbanView = views.find((v) => v.type === "KANBAN");
    return kanbanView?.columns || [];
  }, [views]);

  const tasksByColumn = useMemo(() => {
    const grouped = columns.reduce(
      (acc: Record<string, Task[]>, col: ViewColumn) => {
        acc[col.id] = [];
        return acc;
      },
      {} as Record<string, Task[]>
    );

    displayableTasks.forEach((task) => {
      let targetColumnId = task.boardColumnId;

      if (!targetColumnId) {
        const expectedColumnName = mapStatusToColumnName(task.status);
        const fallbackColumn = columns.find(
          (c: ViewColumn) =>
            c.name.toUpperCase() === expectedColumnName.toUpperCase()
        );
        if (fallbackColumn) {
          targetColumnId = fallbackColumn.id;
        }
      }

      if (targetColumnId && grouped[targetColumnId]) {
        grouped[targetColumnId].push(task);
      }
    });

    return grouped;
  }, [columns, displayableTasks]);

  const onDragStart = (event: DragStartEvent) => {
    const allTasksFlat = flattenTasks(tasks);
    const task = allTasksFlat.find((t) => t.id === event.active.id);
    if (task) setActiveTask(task);
  };

  const onDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;
    if (!over) return;
    const allTasksFlat = flattenTasks(tasks);
    const draggedTask = allTasksFlat.find((t) => t.id === active.id);
    const targetColumnId =
      over.data.current?.sortable?.containerId || over.id.toString();
    const targetColumn = columns.find((col: any) => col.id === targetColumnId);
    if (draggedTask && targetColumnId && targetColumn) {
      const newStatus = mapColumnNameToStatus(targetColumn.name);
      moveTaskMutation.mutate({
        workspaceId,
        projectId,
        taskId: active.id as string,
        targetColumnId: targetColumnId,
        newStatus: newStatus,
        orderInColumn: 0,
      });
    }
  };

  if (columns.length === 0) {
    return (
      <EmptyState
        icon={<Kanban />}
        title="Kanban Board Not Configured"
        description="This Kanban view has no columns. Please edit the view in project settings."
      />
    );
  }

  return (
    <DndContext
      sensors={sensors}
      onDragStart={onDragStart}
      onDragEnd={onDragEnd}
    >
      <div className="flex h-full gap-4 overflow-x-auto p-1">
        {columns.map((col: ViewColumn) => (
          <KanbanColumn
            key={col.id}
            column={col}
            tasks={tasksByColumn[col.id] || []}
            onTaskSelect={onTaskSelect}
          />
        ))}
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}

// FILE: src/features/views/components/KanbanColumn.tsx
import { SortableContext } from "@dnd-kit/sortable";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { useMemo } from "react";
import { useDroppable } from "@dnd-kit/core";

export function KanbanColumn({ column, tasks, onTaskSelect }: any) {
  const { setNodeRef } = useDroppable({
    id: column.id,
    data: { type: "Column", column },
  });

  const tasksIds = useMemo(() => {
    return tasks.map((task: any) => task.id);
  }, [tasks]);

  return (
    <div
      ref={setNodeRef}
      className="flex w-72 shrink-0 flex-col rounded-lg bg-gray-100/60 p-2"
    >
      <h3 className="p-2 font-semibold text-gray-700">{column.name}</h3>
      <div className="flex-grow space-y-2">
        <SortableContext items={tasksIds}>
          {tasks.map((task: any) => (
            <KanbanTaskCard
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}

// FILE: src/features/views/components/KanbanTaskCard.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Edit, Copy, Trash2, Calendar } from "lucide-react";
import { useDeleteTask } from "@/features/tasks/api/useDeleteTask";
import { useParams } from "react-router-dom";
import { toast } from "sonner";
import { format } from "date-fns";

export function KanbanTaskCard({ task, onTaskSelect }: any) {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({ id: task.id, data: { type: "Task", task } });
  const deleteTaskMutation = useDeleteTask(workspaceId!, projectId!);

  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm(`Delete task "${task.title}"?`)) {
      deleteTaskMutation.mutate(task.id);
    }
  };

  const handleCopyId = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(task.id);
    toast.success("Task ID copied to clipboard.");
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    onTaskSelect(task.id);
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      onClick={() => onTaskSelect(task.id)}
    >
      <Card className="mb-2 cursor-grab active:cursor-grabbing">
        <CardHeader className="flex-row items-start justify-between p-3 pb-2">
          <CardTitle className="text-sm font-normal">{task.title}</CardTitle>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6 shrink-0"
                onClick={(e) => e.stopPropagation()}
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent onClick={(e) => e.stopPropagation()}>
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={handleEdit}>
                <Edit className="mr-2 h-4 w-4" />
                <span>Edit Task</span>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleCopyId}>
                <Copy className="mr-2 h-4 w-4" />
                <span>Copy Task ID</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-red-500" onClick={handleDelete}>
                <Trash2 className="mr-2 h-4 w-4" />
                Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </CardHeader>
        {task.dueDate && (
          <CardContent className="px-3 pb-2">
            <div className="text-muted-foreground flex items-center text-xs">
              <Calendar className="mr-1 h-3.5 w-3.5" />
              <span>{format(new Date(task.dueDate), "PP")}</span>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}

// FILE: src/features/widgets/api/useCreateWidget.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface CreateWidgetParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetData: any;
}

async function createWidget({
  workspaceId,
  projectId,
  dashboardId,
  widgetData,
}: CreateWidgetParams): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets`,
    widgetData
  );
  return data;
}

export function useCreateWidget(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: (widgetData: any) =>
      createWidget({ workspaceId, projectId, dashboardId, widgetData }),
    onSuccess: (newWidget) => {
      queryClient.setQueryData<any>(
        ["dashboard", dashboardId],
        (oldData: any) => {
          if (!oldData) return oldData;
          return {
            ...oldData,
            widgets: [...oldData.widgets, newWidget],
          };
        }
      );
    },
    onSettled: () => {
      queryClient.invalidateQueries({ queryKey: ["dashboard", dashboardId] });
    },
  });
}

// FILE: src/features/widgets/api/useDeleteWidget.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

interface DeleteParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetId: string;
}

async function deleteWidget({
  workspaceId,
  projectId,
  dashboardId,
  widgetId,
}: DeleteParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}`
  );
}

export function useDeleteWidget(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: (widgetId) =>
      deleteWidget({ workspaceId, projectId, dashboardId, widgetId }),
    onSuccess: () => {
      toast.success("Widget removed from dashboard.");
      queryClient.invalidateQueries({ queryKey: ["dashboard", dashboardId] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete widget", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/widgets/api/useGetWidgetData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWidgetData({
  workspaceId,
  projectId,
  dashboardId,
  widgetId,
}: any): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}/data`
  );
  return data;
}

export function useGetWidgetData(
  workspaceId: string,
  projectId: string,
  dashboardId: string,
  widgetId: string
) {
  return useQuery({
    queryKey: ["widgetData", widgetId],
    queryFn: () =>
      getWidgetData({ workspaceId, projectId, dashboardId, widgetId }),
    enabled: !!workspaceId && !!projectId && !!dashboardId && !!widgetId,
  });
}

// FILE: src/features/widgets/api/useUpdateWidget.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateWidgetParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetId: string;
  widgetData: any;
}

async function updateWidget(params: UpdateWidgetParams): Promise<any> {
  const { workspaceId, projectId, dashboardId, widgetId, widgetData } = params;
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}`,
    widgetData
  );
  return data;
}

export function useUpdateWidget() {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, UpdateWidgetParams>({
    mutationFn: updateWidget,
    onSuccess: (updatedWidget, variables) => {
      queryClient.setQueryData<any>(
        ["dashboard", variables.dashboardId],
        (oldData: any) => {
          if (!oldData) return oldData;
          return {
            ...oldData,
            widgets: oldData.widgets.map((w: any) =>
              w.id === updatedWidget.id ? updatedWidget : w
            ),
          };
        }
      );
    },
    onSettled: (_data, _error, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["dashboard", variables.dashboardId],
      });
    },
  });
}

// FILE: src/features/widgets/components/BurndownChartWidget.tsx
import {
  ChartContainer,
  LineChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Line,
  ResponsiveContainer,
} from "@/components/ui/recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";

export function BurndownChartWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );
  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <ChartContainer>
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={payload?.points}
          margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" fontSize={12} />
          <YAxis fontSize={12} />
          <Tooltip />
          <Line
            type="monotone"
            dataKey="ideal"
            stroke="#8884d8"
            strokeDasharray="5 5"
          />
          <Line type="monotone" dataKey="actual" stroke="#82ca9d" />
        </LineChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
}

// FILE: src/features/widgets/components/config-fields/BurndownChartConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { CalendarIcon } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

export function BurndownChartConfigFields() {
  const { control } = useFormContext();

  return (
    <div className="space-y-4">
      <FormField
        control={control}
        name="config.startDate"
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>Start Date</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-[240px] pl-3 text-left font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    {field.value ? (
                      format(field.value, "PPP")
                    ) : (
                      <span>Pick a date</span>
                    )}
                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={field.value}
                  onSelect={field.onChange}
                  disabled={(date) =>
                    date > new Date() || date < new Date("1900-01-01")
                  }
                  initialFocus
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name="config.endDate"
        render={({ field }) => (
          <FormItem className="flex flex-col">
            <FormLabel>End Date</FormLabel>
            <Popover>
              <PopoverTrigger asChild>
                <FormControl>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-[240px] pl-3 text-left font-normal",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    {field.value ? (
                      format(field.value, "PPP")
                    ) : (
                      <span>Pick a date</span>
                    )}
                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                  </Button>
                </FormControl>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={field.value}
                  onSelect={field.onChange}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
}

// FILE: src/features/widgets/components/config-fields/StatsCounterConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TaskStatus } from "@/types";

export function StatsCounterConfigFields() {
  const { control } = useFormContext();

  return (
    <div className="space-y-4">
      <FormField
        control={control}
        name="config.label"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Label</FormLabel>
            <FormControl>
              <Input placeholder="e.g., Open Tasks" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name="config.filter.status"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Task Status to Count</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select a status" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                {Object.values(TaskStatus).map((status) => (
                  <SelectItem key={status} value={status}>
                    {status}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
}

// FILE: src/features/widgets/components/config-fields/TaskListConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

export function TaskListConfigFields() {
  const { control } = useFormContext();

  return (
    <FormField
      control={control}
      name="config.limit"
      render={({ field }) => (
        <FormItem>
          <FormLabel>Number of Tasks to Show</FormLabel>
          <FormControl>
            <Input type="number" placeholder="e.g., 10" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/widgets/components/config-fields/TimeTrackingReportConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useParams } from "react-router-dom";
import { Check, ChevronsUpDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";

export function TimeTrackingReportConfigFields() {
  const { control } = useFormContext();
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const { data: membersData } = useGetProjectMembers(workspaceId!, projectId!);

  return (
    <FormField
      control={control}
      name="config.userIds"
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>Team Members (Optional)</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                className={cn(
                  "w-full justify-between",
                  !field.value?.length && "text-muted-foreground"
                )}
              >
                {field.value?.length
                  ? `${field.value.length} selected`
                  : "Select members..."}
                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput placeholder="Search members..." />
                <CommandList>
                  <CommandEmpty>No members found.</CommandEmpty>
                  <CommandGroup>
                    {membersData?.map((member: any) => (
                      <CommandItem
                        value={member.name}
                        key={member.userId}
                        onSelect={() => {
                          const selected = field.value || [];
                          const isSelected = selected.includes(member.userId);
                          field.onChange(
                            isSelected
                              ? selected.filter(
                                  (id: string) => id !== member.userId
                                )
                              : [...selected, member.userId]
                          );
                        }}
                      >
                        <Check
                          className={cn(
                            "mr-2 h-4 w-4",
                            field.value?.includes(member.userId)
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                        {member.name}
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/widgets/components/CreateWidgetDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useState } from "react";
import { PlusCircle } from "lucide-react";
import { CreateWidgetForm } from "./CreateWidgetForm";

interface CreateWidgetDialogProps {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
}

export function CreateWidgetDialog({
  workspaceId,
  projectId,
  dashboardId,
}: CreateWidgetDialogProps) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Add Widget
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Add a New Widget</DialogTitle>
          <DialogDescription>
            Select a widget type and configure it to visualize your data.
          </DialogDescription>
        </DialogHeader>
        <CreateWidgetForm
          workspaceId={workspaceId}
          projectId={projectId}
          dashboardId={dashboardId}
          onSuccess={() => setIsOpen(false)}
        />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/widgets/components/CreateWidgetForm.tsx
import { useState } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useCreateWidget } from "../api/useCreateWidget";
import { StatsCounterConfigFields } from "./config-fields/StatsCounterConfigFields";
import { TaskListConfigFields } from "./config-fields/TaskListConfigFields";
import { BurndownChartConfigFields } from "./config-fields/BurndownChartConfigFields";
import { TimeTrackingReportConfigFields } from "./config-fields/TimeTrackingReportConfigFields";
import { WidgetType } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const widgetSchema = z.object({
  title: z.string().min(1, "Widget title is required."),
  type: z.nativeEnum(WidgetType),
  config: z.any(),
  layout: z.object({
    x: z.number(),
    y: z.number(),
    w: z.number(),
    h: z.number(),
  }),
  dashboardId: z.string().uuid(),
});

type WidgetFormValues = z.infer<typeof widgetSchema>;

interface CreateWidgetFormProps {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  onSuccess?: () => void;
}

const configFieldsMap: Record<string, React.FC> = {
  STATS_COUNTER: StatsCounterConfigFields,
  TASK_LIST: TaskListConfigFields,
  BURNDOWN_CHART: BurndownChartConfigFields,
  TIME_TRACKING_REPORT: TimeTrackingReportConfigFields,
};
function getDefaultConfig(type: WidgetType) {
  switch (type) {
    case WidgetType.STATS_COUNTER:
      return { label: "", filter: {} };
    case WidgetType.TASK_LIST:
      return { limit: 10, filter: {} };
    case WidgetType.BURNDOWN_CHART:
      const today = new Date();
      const twoWeeksAgo = new Date(today);
      twoWeeksAgo.setDate(today.getDate() - 14);
      return { startDate: twoWeeksAgo, endDate: today, unit: "task_count" };
    case WidgetType.TIME_TRACKING_REPORT:
      return { userIds: [] };
    default:
      return {};
  }
}

export function CreateWidgetForm({
  workspaceId,
  projectId,
  dashboardId,
  onSuccess,
}: CreateWidgetFormProps) {
  const [step, setStep] = useState(1);
  const createMutation = useCreateWidget(workspaceId, projectId, dashboardId);

  const methods = useForm<WidgetFormValues>({
    resolver: zodResolver(widgetSchema),
    defaultValues: {
      title: "",
      type: WidgetType.STATS_COUNTER,
      config: getDefaultConfig(WidgetType.STATS_COUNTER),
      layout: { x: 0, y: 0, w: 4, h: 5 },
      dashboardId,
    },
  });
  const selectedType = methods.watch("type") as string;
  const ConfigFields = configFieldsMap[selectedType];
  function handleNext() {
    methods.trigger(["title", "type"]).then((isValid) => {
      if (isValid) {
        const currentType = methods.getValues("type") as WidgetType;
        methods.setValue("config", getDefaultConfig(currentType));
        setStep(2);
      }
    });
  }

  async function onSubmit(values: WidgetFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <FormProvider {...methods}>
      <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-6">
        {step === 1 && (
          <div className="space-y-4">
            <FormField
              control={methods.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Widget Title</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Open Tasks Counter" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={methods.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Widget Type</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a widget type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(WidgetType).map((type) => (
                        <SelectItem key={type} value={type}>
                          {type.replace(/_/g, " ")}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="button" onClick={handleNext} className="w-full">
              Next
            </Button>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-4">
            {ConfigFields && <ConfigFields />}
            <div className="flex justify-between pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => setStep(1)}
              >
                Back
              </Button>
              <Button type="submit" disabled={createMutation.isPending}>
                {createMutation.isPending ? "Adding..." : "Add Widget"}
              </Button>
            </div>
          </div>
        )}
      </form>
    </FormProvider>
  );
}

// FILE: src/features/widgets/components/StatsCounterWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";

export function StatsCounterWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );

  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <>
      <div className="text-4xl font-bold">{payload?.count ?? 0}</div>
      <p className="text-muted-foreground text-xs">{payload?.label}</p>
    </>
  );
}

// FILE: src/features/widgets/components/TaskListWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Badge } from "@/components/ui/badge";

export function TaskListWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );

  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <div className="space-y-2">
      {payload?.tasks?.length > 0 ? (
        payload.tasks.map((task: any) => (
          <div
            key={task.id}
            className="flex items-center justify-between text-sm"
          >
            <span className="truncate pr-2">{task.title}</span>
            <Badge variant="outline">{task.status}</Badge>
          </div>
        ))
      ) : (
        <p className="text-muted-foreground text-sm">
          No tasks match criteria.
        </p>
      )}
    </div>
  );
}

// FILE: src/features/widgets/components/TimeTrackingReportWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

export function TimeTrackingReportWidget({
  widget,
  workspaceId,
  projectId,
}: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );
  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Task</TableHead>
          <TableHead className="text-right">Logged</TableHead>
          <TableHead className="text-right">Estimated</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {payload?.rows?.map((row: any) => (
          <TableRow key={row.taskId}>
            <TableCell className="max-w-xs truncate font-medium">
              {row.taskTitle}
            </TableCell>
            <TableCell className="text-right">{row.timeLogged}m</TableCell>
            <TableCell className="text-right">{row.timeEstimate}m</TableCell>
          </TableRow>
        ))}
        <TableRow className="font-bold">
          <TableCell>Total</TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeLogged}m
          </TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeEstimate}m
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}

// FILE: src/features/widgets/components/WidgetRenderer.tsx
import { StatsCounterWidget } from "./StatsCounterWidget";
import { TaskListWidget } from "./TaskListWidget";
import { BurndownChartWidget } from "./BurndownChartWidget";
import { TimeTrackingReportWidget } from "./TimeTrackingReportWidget";
import { WidgetWrapper } from "./WidgetWrapper";

export function WidgetRenderer({ widget, workspaceId, projectId }: any) {
  const renderWidgetContent = () => {
    switch (widget.type) {
      case "STATS_COUNTER":
        return (
          <StatsCounterWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "TASK_LIST":
        return (
          <TaskListWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "BURNDOWN_CHART":
        return (
          <BurndownChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "TIME_TRACKING_REPORT":
        return (
          <TimeTrackingReportWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      default:
        return <div>Unknown widget type: {widget.type}</div>;
    }
  };

  return (
    <WidgetWrapper
      widget={widget}
      workspaceId={workspaceId}
      projectId={projectId}
    >
      {renderWidgetContent()}
    </WidgetWrapper>
  );
}

// FILE: src/features/widgets/components/WidgetWrapper.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Trash2 } from "lucide-react";
import { ReactNode } from "react";
import { useDeleteWidget } from "../api/useDeleteWidget";

interface WidgetWrapperProps {
  widget: any;
  workspaceId: string;
  projectId: string;
  children: ReactNode;
}

export function WidgetWrapper({
  widget,
  workspaceId,
  projectId,
  children,
}: WidgetWrapperProps) {
  const deleteMutation = useDeleteWidget(
    workspaceId,
    projectId,
    widget.dashboardId
  );

  const handleDelete = () => {
    if (window.confirm(`Delete widget "${widget.title}"?`)) {
      deleteMutation.mutate(widget.id);
    }
  };

  return (
    <Card className="h-full">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-base">{widget.title}</CardTitle>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem
              className="text-red-500"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
}

// FILE: src/features/workspaces/api/useCreateWorkspace.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

async function createWorkspace(newWorkspace: any): Promise<any> {
  const { data } = await api.post("/workspaces", newWorkspace);
  return data;
}

export function useCreateWorkspace() {
  const queryClient = useQueryClient();

  return useMutation<any, AxiosError, any>({
    mutationFn: createWorkspace,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["workspaces"] });
    },
  });
}

// FILE: src/features/workspaces/api/useDeleteWorkspace.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

async function deleteWorkspace(workspaceId: string): Promise<void> {
  await api.delete(`/workspaces/${workspaceId}`);
}

export function useDeleteWorkspace() {
  const queryClient = useQueryClient();
  return useMutation<void, AxiosError, string>({
    mutationFn: deleteWorkspace,
    onSuccess: () => {
      toast.success("Workspace deleted successfully.");
      queryClient.invalidateQueries({ queryKey: ["workspaces"] });
    },
    onError: (error: any) => {
      toast.error("Failed to delete workspace", {
        description:
          error.response?.data?.message || "An unexpected error occurred.",
      });
    },
  });
}

// FILE: src/features/workspaces/api/useGetWorkspace.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWorkspace(workspaceId: string): Promise<any> {
  const { data } = await api.get(`/workspaces/${workspaceId}`);
  return data;
}

export function useGetWorkspace(workspaceId: string) {
  return useQuery({
    queryKey: ["workspace", workspaceId],
    queryFn: () => getWorkspace(workspaceId),
    enabled: !!workspaceId,
  });
}

// FILE: src/features/workspaces/api/useGetWorkspaces.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWorkspaces(): Promise<any> {
  const { data } = await api.get("/workspaces");
  return data;
}

export function useGetWorkspaces() {
  return useQuery({
    queryKey: ["workspaces"],
    queryFn: getWorkspaces,
  });
}

// FILE: src/features/workspaces/api/useUpdateWorkspace.ts
import api from "@/lib/api";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AxiosError } from "axios";

interface UpdateParams {
  workspaceId: string;
  workspaceData: any;
}

async function updateWorkspace({
  workspaceId,
  workspaceData,
}: UpdateParams): Promise<any> {
  const { data } = await api.put(`/workspaces/${workspaceId}`, workspaceData);
  return data;
}

export function useUpdateWorkspace(workspaceId: string) {
  const queryClient = useQueryClient();
  return useMutation<any, AxiosError, any>({
    mutationFn: (workspaceData) =>
      updateWorkspace({ workspaceId, workspaceData }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["workspaces"] });
      queryClient.invalidateQueries({ queryKey: ["workspace", workspaceId] });
    },
  });
}

// FILE: src/features/workspaces/components/CreateWorkspaceDialog.tsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { CreateWorkspaceForm } from "./CreateWorkspaceForm";
import { useState } from "react";
import { PlusCircle } from "lucide-react";

export function CreateWorkspaceDialog() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Workspace
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create a new workspace</DialogTitle>
          <DialogDescription>
            Workspaces help you organize your projects and teams.
          </DialogDescription>
        </DialogHeader>
        <CreateWorkspaceForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/workspaces/components/CreateWorkspaceForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useCreateWorkspace } from "../api/useCreateWorkspace";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const workspaceSchema = z.object({
  name: z.string().min(2, "Workspace name must be at least 2 characters."),
  description: z.string().optional(),
});

type WorkspaceFormValues = z.infer<typeof workspaceSchema>;

interface CreateWorkspaceFormProps {
  onSuccess?: () => void;
}

export function CreateWorkspaceForm({ onSuccess }: CreateWorkspaceFormProps) {
  const createMutation = useCreateWorkspace();
  const form = useForm<WorkspaceFormValues>({
    resolver: zodResolver(workspaceSchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });
  async function onSubmit(values: WorkspaceFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Workspace Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g. Q1 Research Projects" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input
                  placeholder="A brief summary of this workspace"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {errorMessage && (
          <div className="text-sm font-medium text-red-500">{errorMessage}</div>
        )}
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Workspace"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/workspaces/components/EditWorkspaceDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useGetWorkspace } from "../api/useGetWorkspace";
import { EditWorkspaceForm } from "./EditWorkspaceForm";
import { Skeleton } from "@/components/ui/skeleton";

interface EditWorkspaceDialogProps {
  workspaceId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditWorkspaceDialog({
  workspaceId,
  isOpen,
  onOpenChange,
}: EditWorkspaceDialogProps) {
  const { data: workspaceData, isLoading } = useGetWorkspace(workspaceId!);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Workspace</DialogTitle>
          <DialogDescription>
            Make changes to your workspace here. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        {isLoading && workspaceId ? (
          <div className="space-y-4 py-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-9 w-24" />
          </div>
        ) : (
          workspaceData && (
            <EditWorkspaceForm
              workspace={workspaceData}
              onSuccess={() => onOpenChange(false)}
            />
          )
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/workspaces/components/EditWorkspaceForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useUpdateWorkspace } from "../api/useUpdateWorkspace";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const workspaceSchema = z.object({
  name: z.string().min(2, "Workspace name must be at least 2 characters."),
  description: z.string().optional(),
});

type WorkspaceFormValues = z.infer<typeof workspaceSchema>;

interface EditWorkspaceFormProps {
  workspace: any;
  onSuccess?: () => void;
}

export function EditWorkspaceForm({
  workspace,
  onSuccess,
}: EditWorkspaceFormProps) {
  const updateMutation = useUpdateWorkspace(workspace.id);
  const form = useForm<WorkspaceFormValues>({
    resolver: zodResolver(workspaceSchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });
  useEffect(() => {
    if (workspace) {
      form.reset({
        name: workspace.name,
        description: workspace.description || "",
      });
    }
  }, [workspace, form]);
  async function onSubmit(values: WorkspaceFormValues) {
    await updateMutation.mutateAsync(values, {
      onSuccess,
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Workspace Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description (Optional)</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={updateMutation.isPending}
        >
          {updateMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/workspaces/components/WorkspaceCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useDeleteWorkspace } from "../api/useDeleteWorkspace";

interface WorkspaceCardProps {
  workspace: any;
  onEdit: (workspaceId: string) => void;
}

export function WorkspaceCard({ workspace, onEdit }: WorkspaceCardProps) {
  const deleteMutation = useDeleteWorkspace();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${workspace.name}" workspace? This will delete all associated projects and tasks.`
      )
    ) {
      deleteMutation.mutate(workspace.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(workspace.id);
  };

  return (
    <Link to={`/workspaces/${workspace.id}/projects`} key={workspace.id}>
      <Card className="hover:border-primary flex h-full flex-col transition-colors">
        <CardHeader className="flex flex-row items-start justify-between">
          <div>
            <CardTitle>{workspace.name}</CardTitle>
            <CardDescription>{workspace.description}</CardDescription>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 p-0"
                onClick={(e) => e.preventDefault()}
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={handleEdit}>
                <Edit className="mr-2 h-4 w-4" />
                <span>Edit</span>
              </DropdownMenuItem>
              <DropdownMenuItem
                className="text-red-600 focus:text-red-600"
                onClick={handleDelete}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Delete</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </CardHeader>
        <CardContent className="flex-grow"></CardContent>
        <CardContent>
          <p className="text-muted-foreground text-sm">
            Created on: {new Date(workspace.createdAt).toLocaleDateString()}
          </p>
        </CardContent>
      </Card>
    </Link>
  );
}

// FILE: src/features/workspaces/components/WorkspaceList.tsx
import { useGetWorkspaces } from "../api/useGetWorkspaces";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { CreateWorkspaceDialog } from "./CreateWorkspaceDialog";
import { Blocks } from "lucide-react";
import { useState } from "react";
import { EditWorkspaceDialog } from "./EditWorkspaceDialog";
import { WorkspaceCard } from "./WorkspaceCard";

const WorkspaceListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function WorkspaceList() {
  const { data, isLoading, isError, error } = useGetWorkspaces();
  const [editingWorkspaceId, setEditingWorkspaceId] = useState<string | null>(
    null
  );

  if (isLoading) {
    return <WorkspaceListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Workspaces"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your workspaces. Please try again later."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Blocks className="text-primary h-10 w-10" />}
        title="No Workspaces Found"
        description="Get started by creating your first workspace to organize your projects."
        action={<CreateWorkspaceDialog />}
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((workspace: any) => (
          <WorkspaceCard
            key={workspace.id}
            workspace={workspace}
            onEdit={setEditingWorkspaceId}
          />
        ))}
      </div>
      <EditWorkspaceDialog
        workspaceId={editingWorkspaceId}
        isOpen={!!editingWorkspaceId}
        onOpenChange={(isOpen) => !isOpen && setEditingWorkspaceId(null)}
      />
    </>
  );
}

// FILE: src/hooks/useDebounce.ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

// FILE: src/hooks/useNotificationSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useNotificationSocket() {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket) return;

    const handleNewNotification = (event: any) => {
      console.log("New notification received:", event.payload);

      toast(event.payload.message, {
        description: `Severity: ${event.payload.severity}`,
      });

      queryClient.invalidateQueries({ queryKey: ["notifications"] });
    };

    socket.on("NEW_NOTIFICATION", handleNewNotification);

    return () => {
      socket.off("NEW_NOTIFICATION", handleNewNotification);
    };
  }, [socket, queryClient]);
}

// FILE: src/hooks/usePresence.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { usePresenceStore } from "@/store/presence";

export function usePresence(contextType: string, contextId: string) {
  const socket = useSocket();
  const { setMembers, addMember, removeMember } = usePresenceStore();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      setMembers([]);
      return;
    }

    const roomName = `context:${contextType}:${contextId}`;
    console.log(`Subscribing to presence in room: ${roomName}`);

    socket.emit("join_context", { contextType, contextId }, (response: any) => {
      if (response.success) {
        setMembers(response.data.members);
      }
    });

    const onUserJoined = (event: any) => {
      addMember(event.payload);
    };

    const onUserLeft = (event: any) => {
      removeMember(event.payload.socketId);
    };

    socket.on("USER_JOINED_CONTEXT", onUserJoined);
    socket.on("USER_LEFT_CONTEXT", onUserLeft);

    return () => {
      console.log(`Leaving presence in room: ${roomName}`);
      socket.emit("leave_context", { contextType, contextId });
      socket.off("USER_JOINED_CONTEXT", onUserJoined);
      socket.off("USER_LEFT_CONTEXT", onUserLeft);

      setMembers([]);
    };
  }, [socket, contextType, contextId, setMembers, addMember, removeMember]);
}

// FILE: src/hooks/useProjectSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useProjectSocket(projectId: string) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !projectId) {
      return;
    }

    const handleContextUpdate = (event: any) => {
      console.log("CONTEXT_ITEM_UPDATED received:", event);
      const { entityType, data } = event.payload;

      toast.info(`Real-time update: ${entityType} was modified.`);

      queryClient.invalidateQueries({ queryKey: ["tasks", projectId] });
      queryClient.invalidateQueries({ queryKey: ["epics", projectId] });
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });

      if (data?.id) {
        queryClient.invalidateQueries({ queryKey: ["task", data.id] });
      }
    };

    socket.on("CONTEXT_ITEM_UPDATED", handleContextUpdate);

    socket.emit("join_context", {
      contextType: "Project",
      contextId: projectId,
    });

    return () => {
      socket.emit("leave_context", {
        contextType: "Project",
        contextId: projectId,
      });
      socket.off("CONTEXT_ITEM_UPDATED", handleContextUpdate);
    };
  }, [socket, projectId, queryClient]);
}

// FILE: src/hooks/useSocket.ts
import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";
import { useAuthStore } from "@/store/auth";

export function useSocket() {
  const [socket, setSocket] = useState<Socket | null>(null);
  const accessToken = useAuthStore((state) => state.accessToken);

  useEffect(() => {
    if (!accessToken) {
      if (socket) {
        socket.disconnect();
        setSocket(null);
      }
      return;
    }

    const newSocket = io("http://localhost:3000", {
      auth: {
        token: accessToken,
      },
    });

    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, [accessToken]);

  return socket;
}

// FILE: src/hooks/useSocketSubscription.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";

type EventHandler = (event: any) => void;

export function useSocketSubscription(
  contextType: string,
  contextId: string,
  handlers: Record<string, EventHandler>
) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      return;
    }

    const roomName = `context:${contextType}:${contextId}`;
    console.log(`Joining room: ${roomName}`);
    socket.emit("join_context", { contextType, contextId });

    Object.entries(handlers).forEach(([eventName, handler]) => {
      socket.on(eventName, handler);
    });

    return () => {
      console.log(`Leaving room: ${roomName}`);
      socket.emit("leave_context", { contextType, contextId });

      Object.keys(handlers).forEach((eventName) => {
        socket.off(eventName);
      });
    };
  }, [socket, contextType, contextId, queryClient, handlers]);
}

// FILE: src/lib/api.ts
import axios, { InternalAxiosRequestConfig } from "axios";
import { useAuthStore } from "@/store/auth";

const api = axios.create({
  baseURL: "http://localhost:3000/api/v1",
  withCredentials: true,
});

api.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = useAuthStore.getState().accessToken;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    console.log("Axios Interceptor: Caught an error.", {
      url: originalRequest.url,
      status: error.response?.status,
    });

    const isAuthEndpoint =
      originalRequest.url?.includes("/auth/login") ||
      originalRequest.url?.includes("/auth/refresh-token");

    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !isAuthEndpoint
    ) {
      console.log(
        "Axios Interceptor: Intercepted 401. Attempting token refresh."
      );
      originalRequest._retry = true;
      try {
        const { data } = await api.post("/auth/refresh-token");
        const { accessToken } = data;
        useAuthStore.getState().setAccessToken(accessToken);
        originalRequest.headers.Authorization = `Bearer ${accessToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        console.error("Axios Interceptor: Token refresh failed.", refreshError);
        useAuthStore.getState().setAccessToken(null);
        console.error("Session expired. Please log in again.");
        return Promise.reject(refreshError);
      }
    }

    console.log(
      "Axios Interceptor: Error was not a 401 or was an auth endpoint. Rejecting promise."
    );
    return Promise.reject(error);
  }
);

export default api;

// FILE: src/lib/config.ts
const config = {
  apiBaseUrl: "http://localhost:3000/api/v1",
};

export default config;

// FILE: src/lib/icons.tsx
import {
  Briefcase,
  CheckSquare,
  FileText,
  User,
  type LucideIcon,
} from "lucide-react";

export const ICONS: Record<string, LucideIcon> = {
  Project: Briefcase,
  Task: CheckSquare,
  Publication: FileText,
  User: User,
  Default: FileText,
};

export function getIcon(typeName: string) {
  return ICONS[typeName] || ICONS.Default;
}

// FILE: src/lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// FILE: src/lib/zod.ts
import { z, ZodType } from "zod";

export const createPaginationSchema = (defaultLimit = 10) =>
  z.object({
    page: z.coerce.number().int().positive().optional().default(1),
    limit: z.coerce
      .number()
      .int()
      .positive()
      .max(100)
      .optional()
      .default(defaultLimit),
  });

export const createPaginatedResponseSchema = <T extends ZodType>(
  itemSchema: T
) =>
  z.object({
    data: z.array(itemSchema),
    total: z.number().int(),
    page: z.number().int(),
    limit: z.number().int(),
    totalPages: z.number().int(),
  });

export const createUuidParamSchema = (
  paramName: string,
  entityDisplayName: string
) =>
  z.object({
    [paramName]: z.string().uuid({
      message: `Invalid ${entityDisplayName} ID format. Expected UUID.`,
    }),
  });

// FILE: src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import { QueryProvider } from "./providers/QueryProvider.tsx";
import { AuthProvider } from "./providers/AuthProvider.tsx";
import { BrowserRouter } from "react-router-dom";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <QueryProvider>
      <BrowserRouter>
        <AuthProvider>
          <App />
        </AuthProvider>
      </BrowserRouter>
    </QueryProvider>
  </React.StrictMode>
);

// FILE: src/pages/AccountSettingsPage.tsx
import { ChangePasswordForm } from "@/features/security/components/ChangePasswordForm";
import { NotificationPreferencesForm } from "@/features/notifications/components/NotificationPreferencesForm";

export function AccountSettingsPage() {
  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <ChangePasswordForm />
      <NotificationPreferencesForm />
    </div>
  );
}

// FILE: src/pages/admin/AnnouncementListPage.tsx
import { CreateAnnouncementDialog } from "@/features/admin/announcements/components/CreateAnnouncementDialog";
import { AnnouncementList } from "@/features/admin/announcements/components/AnnouncementList";
import { BroadcastNotificationDialog } from "@/features/notifications/components/BroadcastNotificationDialog";

export function AnnouncementListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            System Communications
          </h1>
          <p className="text-muted-foreground">
            Create and manage announcements or send real-time broadcasts.
          </p>
        </div>
        <div className="flex items-center gap-2">
          <BroadcastNotificationDialog />
          <CreateAnnouncementDialog />
        </div>
      </div>
      <AnnouncementList />
    </div>
  );
}

// FILE: src/pages/admin/JobMonitoringPage.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { JobSystemStatus } from "@/features/admin/jobs/components/JobSystemStatus";
import { JobList } from "@/features/admin/jobs/components/JobList";
import { JobScheduleList } from "@/features/admin/jobs/components/JobScheduleList";
import { CreateJobScheduleDialog } from "@/features/admin/jobs/components/CreateJobScheduleDialog";

export function JobMonitoringPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Job Monitoring</h1>
        <p className="text-muted-foreground">
          Monitor and manage background jobs and schedules.
        </p>
      </div>

      <Tabs defaultValue="status" className="space-y-4">
        <TabsList>
          <TabsTrigger value="status">System Status</TabsTrigger>
          <TabsTrigger value="queue">Job Queue</TabsTrigger>
          <TabsTrigger value="schedules">Schedules</TabsTrigger>
        </TabsList>
        <TabsContent value="status" className="space-y-4">
          <JobSystemStatus />
        </TabsContent>
        <TabsContent value="queue" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Job Queue</CardTitle>
              <CardDescription>
                A list of all recent and pending background jobs.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <JobList />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="schedules" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Job Schedules</CardTitle>
                <CardDescription>
                  All recurring jobs defined in the system.
                </CardDescription>
              </div>
              <CreateJobScheduleDialog />
            </CardHeader>
            <CardContent>
              <JobScheduleList />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// FILE: src/pages/admin/PermissionListPage.tsx
import { PermissionList } from "@/features/admin/permissions/components/PermissionList";
import { CreatePermissionDialog } from "@/features/admin/permissions/components/CreatePermissionDialog";

export function PermissionListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            System Permissions
          </h1>
          <p className="text-muted-foreground">
            Manage all available permissions in the system.
          </p>
        </div>
        <CreatePermissionDialog />
      </div>
      <PermissionList />
    </div>
  );
}

// FILE: src/pages/admin/RoleListPage.tsx
import { RoleList } from "@/features/admin/roles/components/RoleList";
import { CreateRoleDialog } from "@/features/admin/roles/components/CreateRoleDialog";

export function RoleListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Role Management</h1>
          <p className="text-muted-foreground">
            View, create, and manage system roles and their permissions.
          </p>
        </div>
        <CreateRoleDialog />
      </div>
      <RoleList />
    </div>
  );
}

// FILE: src/pages/admin/SystemStatusPage.tsx
import { SystemStatusDashboard } from "@/features/admin/system-status/components/SystemStatusDashboard";

export function SystemStatusPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">System Status</h1>
        <p className="text-muted-foreground">
          A real-time overview of the application's health and core
          dependencies.
        </p>
      </div>
      <SystemStatusDashboard />
    </div>
  );
}

// FILE: src/pages/admin/UserListPage.tsx
import { UserList } from "@/features/admin/users/components/UserList";
import { CreateUserDialog } from "@/features/admin/users/components/CreateUserDialog";

export function UserListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground">View and manage system users.</p>
        </div>
        <CreateUserDialog />
      </div>
      <UserList />
    </div>
  );
}

// FILE: src/pages/admin/WorkflowListPage.tsx
import { CreateWorkflowDialog } from "@/features/admin/workflows/components/CreateWorkflowDialog";
import { WorkflowList } from "@/features/admin/workflows/components/WorkflowList";

export function WorkflowListPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Workflows</h1>
          <p className="text-muted-foreground">
            Automate tasks based on project events.
          </p>
        </div>
        <CreateWorkflowDialog />
      </div>
      <WorkflowList />
    </div>
  );
}

// FILE: src/pages/CrmPage.tsx
import { useState } from "react";
import { PersonList } from "@/features/crm/components/PersonList";
import { CreatePersonDialog } from "@/features/crm/components/CreatePersonDialog";
import { PersonDetailPanel } from "@/features/crm/components/PersonDetailPanel";

export function CrmPage() {
  const [selectedPersonId, setSelectedPersonId] = useState<string | null>(null);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">CRM</h1>
          <p className="text-muted-foreground">
            Manage all people in your organization.
          </p>
        </div>
        <CreatePersonDialog />
      </div>

      <PersonList onPersonSelect={setSelectedPersonId} />

      <PersonDetailPanel
        personId={selectedPersonId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedPersonId(null);
        }}
      />
    </div>
  );
}

// FILE: src/pages/Dashboard.tsx
export function DashboardPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight">
        Welcome to your Dashboard
      </h1>
      <p className="text-muted-foreground mt-2">
        This is your central hub. Select an option from the sidebar to get
        started.
      </p>
    </div>
  );
}

// FILE: src/pages/DashboardDetailPage.tsx
import { useParams } from "react-router-dom";
import GridLayout, { Layout } from "react-grid-layout";
import { useGetDashboard } from "@/features/dashboards/api/useGetDashboard";
import { WidgetRenderer } from "@/features/widgets/components/WidgetRenderer";
import "react-grid-layout/css/styles.css";
import "react-resizable/css/styles.css";
import { CreateWidgetDialog } from "@/features/widgets/components/CreateWidgetDialog";
import { useUpdateWidget } from "@/features/widgets/api/useUpdateWidget";

export function DashboardDetailPage() {
  const { workspaceId, projectId, dashboardId } = useParams<{
    workspaceId: string;
    projectId: string;
    dashboardId: string;
  }>();

  if (!workspaceId || !projectId || !dashboardId) {
    return <div>Missing ID parameter.</div>;
  }

  const { data: dashboardData, isLoading } = useGetDashboard(
    workspaceId,
    projectId,
    dashboardId
  );

  const updateWidgetMutation = useUpdateWidget();

  const handleLayoutChange = (newLayout: Layout[]) => {
    const originalLayout = dashboardData.widgets.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    }));

    for (const newPos of newLayout) {
      const originalPos = originalLayout.find((o: any) => o.i === newPos.i);

      if (
        originalPos &&
        (originalPos.x !== newPos.x ||
          originalPos.y !== newPos.y ||
          originalPos.w !== newPos.w ||
          originalPos.h !== newPos.h)
      ) {
        updateWidgetMutation.mutate({
          workspaceId,
          projectId,
          dashboardId,
          widgetId: newPos.i,
          widgetData: {
            layout: {
              x: newPos.x,
              y: newPos.y,
              w: newPos.w,
              h: newPos.h,
            },
          },
        });
      }
    }
  };

  if (isLoading) return <div>Loading Dashboard...</div>;
  if (!dashboardData) return <div>Dashboard not found.</div>;

  const layout =
    dashboardData.widgets?.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    })) || [];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            {dashboardData.name}
          </h1>
          <p className="text-muted-foreground">{dashboardData.description}</p>
        </div>
        <CreateWidgetDialog
          workspaceId={workspaceId}
          projectId={projectId}
          dashboardId={dashboardId}
        />
      </div>

      <GridLayout
        className="layout"
        layout={layout}
        cols={12}
        rowHeight={30}
        width={1200}
        isDraggable={true}
        isResizable={true}
        onLayoutChange={handleLayoutChange}
      >
        {dashboardData.widgets?.map((widget: any) => (
          <div key={widget.id}>
            <WidgetRenderer
              widget={widget}
              workspaceId={workspaceId}
              projectId={projectId}
            />
          </div>
        ))}
      </GridLayout>
    </div>
  );
}

// FILE: src/pages/ForgotPasswordPage.tsx
import { ForgotPasswordForm } from "@/features/auth/components/ForgotPasswordForm";

export function ForgotPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ForgotPasswordForm />
    </div>
  );
}

// FILE: src/pages/IntegrationCallbackPage.tsx
import { useEffect } from "react";
import { useSearchParams } from "react-router-dom";

export function IntegrationCallbackPage() {
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const status = searchParams.get("status");
    const message = searchParams.get("message");

    if (window.opener) {
      window.opener.postMessage(
        {
          source: "google-oauth-callback",
          status: status,
          message: message,
        },
        window.location.origin
      );

      window.close();
    }
  }, [searchParams]);

  return (
    <div className="flex h-screen w-full items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-xl font-semibold">Processing...</h1>
        <p className="text-muted-foreground">
          You can close this window if it does not close automatically.
        </p>
      </div>
    </div>
  );
}

// FILE: src/pages/IntegrationsPage.tsx
import { IntegrationList } from "@/features/integrations/components/IntegrationList";

export function IntegrationsPage() {
  return (
    <div className="space-y-4">
      <div>
        <h2 className="text-2xl font-semibold">Integrations</h2>
        <p className="text-muted-foreground">
          Connect your account to third-party services to enhance your workflow.
        </p>
      </div>
      <IntegrationList />
    </div>
  );
}

// FILE: src/pages/Login.tsx
import { LoginForm } from "@/features/auth/components/LoginForm";

export function LoginPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <LoginForm />
    </div>
  );
}

// FILE: src/pages/ProfilePage.tsx
import { ProfileForm } from "@/features/profile/components/ProfileForm";

export function ProfilePage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">My Profile</h1>
        <p className="text-muted-foreground">Update your personal details.</p>
      </div>
      <ProfileForm />
    </div>
  );
}

// FILE: src/pages/ProjectAccessControlPage.tsx
import { CreateProjectRoleDialog } from "@/features/project-roles/components/CreateProjectRoleDialog";
import { ProjectRoleList } from "@/features/project-roles/components/ProjectRoleList";
import { InviteProjectMember } from "@/features/projects/components/InviteProjectMember";
import { ProjectMemberList } from "@/features/projects/components/ProjectMemberList";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useParams } from "react-router-dom";

export function ProjectAccessControlPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;

  const { data: membersData } = useGetProjectMembers(workspaceId, projectId);
  const existingMemberIds = membersData?.map((m: any) => m.userId) || [];

  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Members</h2>
            <p className="text-muted-foreground">
              Users who have been granted access to this project.
            </p>
          </div>
        </div>
        <ProjectMemberList workspaceId={workspaceId} projectId={projectId} />
        <InviteProjectMember
          workspaceId={workspaceId}
          projectId={projectId}
          existingMemberIds={existingMemberIds}
        />
      </div>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Roles</h2>
            <p className="text-muted-foreground">
              Custom roles and permissions specific to this project.
            </p>
          </div>
          <CreateProjectRoleDialog
            workspaceId={workspaceId}
            projectId={projectId}
          />
        </div>
        <ProjectRoleList workspaceId={workspaceId} projectId={projectId} />
      </div>
    </div>
  );
}

// FILE: src/pages/ProjectCustomFieldsPage.tsx
import { CreateCustomFieldDialog } from "@/features/custom-fields/components/CreateCustomFieldDialog";
import { CustomFieldDefinitionList } from "@/features/custom-fields/components/CustomFieldDefinitionList";
import { useParams } from "react-router-dom";

export function ProjectCustomFieldsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold">Custom Fields</h2>
          <p className="text-muted-foreground">
            Add and manage custom data fields for tasks in this project.
          </p>
        </div>
        <CreateCustomFieldDialog
          workspaceId={workspaceId}
          projectId={projectId}
        />
      </div>
      <CustomFieldDefinitionList
        workspaceId={workspaceId}
        projectId={projectId}
      />
    </div>
  );
}

// FILE: src/pages/ProjectDetailPage.tsx
import { useParams, useSearchParams } from "react-router-dom";
import { useEffect, useMemo } from "react";
import { TaskDetailModal } from "@/features/tasks/components/TaskDetailModal";
import { useGetProjectViews } from "@/features/views/api/useGetProjectViews";
import { useProjectSocket } from "@/hooks/useProjectSocket";
import { usePresence } from "@/hooks/usePresence";
import { ErrorState } from "@/components/ui/error-state";
import { Skeleton } from "@/components/ui/skeleton";
import { ProjectDetailView } from "./ProjectDetailView";
import { useGetViewData } from "@/features/views/api/useGetViewData";
import { View } from "@/types";

export function ProjectDetailPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [searchParams, setSearchParams] = useSearchParams();
  const activeTabId = searchParams.get("view");
  const selectedTaskId = searchParams.get("taskId");

  const {
    data: viewsData,
    isLoading: isLoadingViews,
    isError: isViewsError,
  } = useGetProjectViews(workspaceId!, projectId!);

  const activeView = useMemo(
    () => (viewsData?.data || []).find((v: View) => v.id === activeTabId),
    [viewsData, activeTabId]
  );

  const viewDataQuery = {
    page: 1,
    limit: 100,
    includeSubtasks: false,
    sortBy: "orderInColumn" as const,
    sortOrder: "asc" as const,
  };

  const {
    data: viewData,
    isLoading: isLoadingViewData,
    isError: isViewDataError,
  } = useGetViewData(workspaceId!, projectId!, activeTabId, viewDataQuery, {
    enabled: !!activeView,
  });

  useProjectSocket(projectId!);
  usePresence("Project", projectId!);

  const handleTabChange = (newTab: string) => {
    setSearchParams((params) => {
      params.set("view", newTab);
      return params;
    });
  };

  useEffect(() => {
    if (!isLoadingViews && viewsData && !activeTabId) {
      const listTabView = viewsData.data?.find((v: any) => v.name === "List");
      const defaultViewId =
        listTabView?.id || viewsData.data?.[0]?.id || "dashboards";
      handleTabChange(defaultViewId);
    }
  }, [isLoadingViews, viewsData, activeTabId]);

  const handleTaskSelect = (taskId: string | null) => {
    setSearchParams((params) => {
      if (taskId) {
        params.set("taskId", taskId);
      } else {
        params.delete("taskId");
      }
      return params;
    });
  };

  if (!workspaceId || !projectId) {
    return <div>Invalid Project ID</div>;
  }

  if (isViewsError || isViewDataError) {
    return (
      <ErrorState
        title="Could not load project data"
        message="Please try again later."
      />
    );
  }

  const isLoading = isLoadingViews || (!!activeView && isLoadingViewData);

  if (isLoading || !activeTabId) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Skeleton className="h-10 w-[450px]" />
          <div className="flex items-center gap-2">
            <Skeleton className="h-10 w-10 rounded-full" />
            <Skeleton className="h-10 w-32" />
            <Skeleton className="h-10 w-10" />
          </div>
        </div>
        <Skeleton className="h-[600px] w-full" />
      </div>
    );
  }

  return (
    <>
      <ProjectDetailView
        views={viewsData?.data || []}
        tasks={viewData?.data || []}
        workspaceId={workspaceId}
        projectId={projectId}
        onTaskSelect={handleTaskSelect}
        activeTab={activeTabId}
        onTabChange={handleTabChange}
      />

      <TaskDetailModal
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={selectedTaskId}
        isOpen={!!selectedTaskId}
        onOpenChange={(isOpen) => {
          if (!isOpen) handleTaskSelect(null);
        }}
        onTaskSelect={handleTaskSelect}
      />
    </>
  );
}
// FILE: src/pages/ProjectDetailView.tsx
import { Link } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaskList } from "@/features/tasks/components/TaskList";
import { KanbanBoard } from "@/features/views/components/KanbanBoard";
import { DashboardList } from "@/features/dashboards/components/DashboardList";
import { EpicList } from "@/features/epics/components/EpicList";
import { ActiveUsers } from "@/components/layout/ActiveUsers";
import { Button } from "@/components/ui/button";
import { Settings } from "lucide-react";
import { CreateTaskDialog } from "@/features/tasks/components/CreateTaskDialog";
import { CreateDashboardDialog } from "@/features/dashboards/components/CreateDashboardDialog";
import { CreateEpicDialog } from "@/features/epics/components/CreateEpicDialog";
import { Task } from "@/features/tasks/task.types";
import { View } from "@/types";
import { ProjectActivityLog } from "@/features/activities/components/ProjectActivityLog";

interface ProjectDetailViewProps {
  views: View[];
  tasks: Task[];
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string | null) => void;
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function ProjectDetailView({
  views,
  tasks,
  workspaceId,
  projectId,
  onTaskSelect,
  activeTab,
  onTabChange,
}: ProjectDetailViewProps) {
  const renderActionDialog = () => {
    const currentView = views.find((v) => v.id === activeTab);
    const viewType = currentView?.type;

    if (viewType === "KANBAN" || viewType === "LIST") {
      return (
        <CreateTaskDialog workspaceId={workspaceId} projectId={projectId} />
      );
    }
    if (activeTab === "dashboards") {
      return (
        <CreateDashboardDialog
          workspaceId={workspaceId}
          projectId={projectId}
        />
      );
    }
    if (activeTab === "epics") {
      return (
        <CreateEpicDialog workspaceId={workspaceId} projectId={projectId} />
      );
    }
    return null;
  };

  return (
    <Tabs value={activeTab} onValueChange={onTabChange} className="space-y-4">
      <div className="flex items-center justify-between">
        <TabsList>
          {views.map((view) => (
            <TabsTrigger key={view.id} value={view.id}>
              {view.name}
            </TabsTrigger>
          ))}
          <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
          <TabsTrigger value="epics">Epics</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        <div className="flex items-center gap-2">
          <ActiveUsers />
          {renderActionDialog()}
          <Button variant="outline" asChild>
            <Link to="settings">
              <Settings className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>

      {views.map((view) => (
        <TabsContent key={view.id} value={view.id} className="mt-0 h-full">
          {view.type === "LIST" && (
            <TaskList
              workspaceId={workspaceId}
              projectId={projectId}
              tasks={tasks}
              onTaskSelect={onTaskSelect}
            />
          )}
          {view.type === "KANBAN" && (
            <KanbanBoard
              views={views}
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
        </TabsContent>
      ))}

      <TabsContent value="dashboards" className="mt-0 space-y-4">
        <DashboardList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="epics" className="mt-0">
        <EpicList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="activity" className="mt-0">
        <ProjectActivityLog workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>
    </Tabs>
  );
}
// FILE: src/pages/ProjectGeneralSettingsPage.tsx
import { useParams } from "react-router-dom";
import { useGetProject } from "@/features/projects/api/useGetProject";
import { EditProjectForm } from "@/features/projects/components/EditProjectForm";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

export function ProjectGeneralSettingsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  if (!workspaceId || !projectId) {
    return <div>Missing URL parameters.</div>;
  }

  const { data: projectData, isLoading } = useGetProject(
    workspaceId,
    projectId
  );

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/4" />
          <Skeleton className="mt-2 h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  if (!projectData) {
    return <div>Project not found.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>General Information</CardTitle>
        <CardDescription>
          Update the name and description of your project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <EditProjectForm project={projectData} />
      </CardContent>
    </Card>
  );
}

// FILE: src/pages/ProjectListPage.tsx
import { ProjectList } from "@/features/projects/components/ProjectList";
import { CreateProjectDialog } from "@/features/projects/components/CreateProjectDialog";
import { useParams } from "react-router-dom";

export function ProjectListPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">All Projects</h2>
          <p className="text-muted-foreground">
            A list of all projects within this workspace.
          </p>
        </div>
        <CreateProjectDialog workspaceId={workspaceId} />
      </div>
      <ProjectList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/ProjectSettingsPage.tsx
import { NavLink, Outlet, useLocation } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const settingsNavItems = [
  { to: "general", label: "General" },
  { to: "access", label: "Access Control" },
  { to: "custom-fields", label: "Custom Fields" },
];

export function ProjectSettingsPage() {
  const location = useLocation();
  const currentTab = location.pathname.split("/").pop() || "general";

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Project Settings</h1>
        <p className="text-muted-foreground">
          Manage general settings, access control, and more for your project.
        </p>
      </div>

      <Tabs defaultValue={currentTab} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to} end>
              <TabsTrigger value={item.to}>{item.label}</TabsTrigger>
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/pages/PublicationsPage.tsx
import { CreatePublicationDialog } from "@/features/publications/components/CreatePublicationDialog";
import { PublicationList } from "@/features/publications/components/PublicationList";

export function PublicationsPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Publications</h1>
          <p className="text-muted-foreground">
            Manage your organization's articles, papers, and other publications.
          </p>
        </div>
        <CreatePublicationDialog />
      </div>
      <PublicationList />
    </div>
  );
}

// FILE: src/pages/ResetPasswordPage.tsx
import { ResetPasswordForm } from "@/features/auth/components/ResetPasswordForm";

export function ResetPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ResetPasswordForm />
    </div>
  );
}

// FILE: src/pages/SettingsPage.tsx
import { NavLink, Outlet } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const settingsNavItems = [
  { to: "/settings/integrations", label: "Integrations" },
  { to: "/settings/security", label: "Security" },
];

export function SettingsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and integrations.
        </p>
      </div>

      <Tabs defaultValue={location.pathname} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to}>
              {({ isActive }) => (
                <TabsTrigger value={item.to} disabled={isActive}>
                  {item.label}
                </TabsTrigger>
              )}
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/pages/SetupPasswordPage.tsx
import { SetupPasswordForm } from "@/features/auth/components/SetupPasswordForm";

export function SetupPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <SetupPasswordForm />
    </div>
  );
}

// FILE: src/pages/TeamsPage.tsx
import { CreateTeamDialog } from "@/features/teams/components/CreateTeamDialog";
import { TeamList } from "@/features/teams/components/TeamList";
import { useParams } from "react-router-dom";

export function TeamsPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">All Teams</h2>
          <p className="text-muted-foreground">
            Manage teams within your workspace.
          </p>
        </div>
        <CreateTeamDialog workspaceId={workspaceId} />
      </div>

      <TeamList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/Workspaces.tsx
import { CreateWorkspaceDialog } from "@/features/workspaces/components/CreateWorkspaceDialog";
import { WorkspaceList } from "@/features/workspaces/components/WorkspaceList";

export function WorkspacesPage() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Workspaces</h1>
          <p className="text-muted-foreground">
            Select a workspace to view its projects.
          </p>
        </div>
        <CreateWorkspaceDialog />
      </div>

      <WorkspaceList />
    </div>
  );
}

// FILE: src/providers/AuthProvider.tsx
import { useAuthStore } from "@/store/auth";
import { ReactNode, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";

export function AuthProvider({ children }: { children: ReactNode }) {
  const accessToken = useAuthStore((state) => state.accessToken);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    if (!accessToken && location.pathname !== "/login") {
      navigate("/login", { replace: true });
    }
  }, [accessToken, navigate, location.pathname]);

  return <>{children}</>;
}

// FILE: src/providers/QueryProvider.tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactNode } from "react";

const queryClient = new QueryClient();

export function QueryProvider({ children }: { children: ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
}

// FILE: src/routes/AdminLayout.tsx
import { Outlet } from "react-router-dom";

export function AdminLayout() {
  return <Outlet />;
}

// FILE: src/routes/ProtectedLayout.tsx
import { Outlet } from "react-router-dom";
import { Header } from "@/components/layout/Header";
import { Sidebar } from "@/components/layout/Sidebar";
import { MainContent } from "@/components/layout/MainContent";
import { Toaster } from "@/components/ui/sonner";
import { useNotificationSocket } from "@/hooks/useNotificationSocket";
import { ActiveAnnouncements } from "@/features/announcements/components/ActiveAnnouncements";

export function ProtectedLayout() {
  useNotificationSocket();

  return (
    <div className="flex h-screen w-full bg-white">
      <Sidebar />
      <div className="flex flex-1 flex-col">
        <Header />
        <MainContent>
          <ActiveAnnouncements />
          <div className="mt-4">
            <Outlet />
          </div>
        </MainContent>
      </div>
      <Toaster />
    </div>
  );
}

// FILE: src/routes/WorkspaceLayout.tsx
import { NavLink, Outlet, useLocation, useParams } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useGetWorkspace } from "@/features/workspaces/api/useGetWorkspace";
import { Skeleton } from "@/components/ui/skeleton";

export function WorkspaceLayout() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const location = useLocation();
  const { data: workspace, isLoading } = useGetWorkspace(workspaceId!);

  const currentTab = location.pathname.split("/").pop() || "projects";

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        {isLoading ? (
          <div className="space-y-2">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-80" />
          </div>
        ) : (
          <div>
            <h1 className="text-3xl font-bold tracking-tight">
              {workspace?.name}
            </h1>
            <p className="text-muted-foreground">{workspace?.description}</p>
          </div>
        )}
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          <NavLink to={`/workspaces/${workspaceId}/projects`}>
            <TabsTrigger value="projects">Projects</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/teams`}>
            <TabsTrigger value="teams">Teams</TabsTrigger>
          </NavLink>
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/store/auth.ts
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";

interface AuthState {
  accessToken: string | null;
  setAccessToken: (token: string | null) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      accessToken: null,
      setAccessToken: (token) => set({ accessToken: token }),
    }),
    {
      name: "auth-storage",
      storage: createJSONStorage(() => localStorage),
    }
  )
);

// FILE: src/store/presence.ts
import { create } from "zustand";

interface PresenceState {
  members: any[];
  setMembers: (members: any[]) => void;
  addMember: (member: any) => void;
  removeMember: (socketId: string) => void;
}

export const usePresenceStore = create<PresenceState>((set) => ({
  members: [],
  setMembers: (members) => set({ members }),
  addMember: (member) =>
    set((state) => ({
      members: state.members.some((m) => m.socketId === member.socketId)
        ? state.members
        : [...state.members, member],
    })),
  removeMember: (socketId) =>
    set((state) => ({
      members: state.members.filter((m) => m.socketId !== socketId),
    })),
}));

// FILE: src/types/index.ts
export enum TaskStatus {
  TODO = "TODO",
  IN_PROGRESS = "IN_PROGRESS",
  IN_REVIEW = "IN_REVIEW",
  DONE = "DONE",
  BLOCKED = "BLOCKED",
  CANCELLED = "CANCELLED",
}

export enum TaskPriority {
  NONE = "NONE",
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  URGENT = "URGENT",
}

export enum EpicStatus {
  TODO = "TODO",
  IN_PROGRESS = "IN_PROGRESS",
  DONE = "DONE",
  ARCHIVED = "ARCHIVED",
}

export enum TaskLinkType {
  RELATES_TO = "RELATES_TO",
  BLOCKS = "BLOCKS",
  IS_BLOCKED_BY = "IS_BLOCKED_BY",
}

export enum ActivityActionType {
  TASK_CREATED = "TASK_CREATED",
  TASK_UPDATED = "TASK_UPDATED",
  TASK_DELETED = "TASK_DELETED",
  PROJECT_CREATED = "PROJECT_CREATED",
  PROJECT_UPDATED = "PROJECT_UPDATED",
  USER_JOINED = "USER_JOINED",
  COMMENT_ADDED = "COMMENT_ADDED",
}

export enum WorkflowActionType {
  UPDATE_TASK_STATUS = "UPDATE_TASK_STATUS",
  CREATE_TASK = "CREATE_TASK",
  SEND_NOTIFICATION = "SEND_NOTIFICATION",
  ASSIGN_USER = "ASSIGN_USER",
  ADD_COMMENT = "ADD_COMMENT",
}

export enum WidgetType {
  STATS_COUNTER = "STATS_COUNTER",
  TASK_LIST = "TASK_LIST",
  BURNDOWN_CHART = "BURNDOWN_CHART",
  TIME_TRACKING_REPORT = "TIME_TRACKING_REPORT",
  CHART = "CHART",
  TABLE = "TABLE",
}

export enum SocialProvider {
  GOOGLE = "GOOGLE",
  LINKEDIN = "LINKEDIN",
  TWITTER = "TWITTER",
  FACEBOOK = "FACEBOOK",
  NEXTCLOUD = "NEXTCLOUD",
  TELEGRAM = "TELEGRAM",
  GITHUB = "GITHUB",
  WEBSITE = "WEBSITE",
  OTHER = "OTHER",
}

export enum CustomFieldType {
  TEXT = "TEXT",
  NUMBER = "NUMBER",
  DATE = "DATE",
  SELECT = "SELECT",
}

export enum NotificationType {
  SYSTEM_BROADCAST = "SYSTEM_BROADCAST",
  TASK_ASSIGNMENT = "TASK_ASSIGNMENT",
  COMMENT_MENTION = "COMMENT_MENTION",
  PROJECT_INVITE = "PROJECT_INVITE",
}

export enum NotificationSeverity {
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  CRITICAL = "CRITICAL",
}

export enum ViewType {
  KANBAN = "KANBAN",
  LIST = "LIST",
  CALENDAR = "CALENDAR",
  GANTT = "GANTT",
}

export enum JobStatus {
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  CANCELLED = "CANCELLED",
}

export interface ViewColumn {
  id: string;
  name: string;
  order: number;
}

export interface View {
  id: string;
  name: string;
  type: ViewType;
  columns: ViewColumn[];
}

// FILE: src/vite-env.d.ts
/// <reference types="vite/client" />

// FILE: tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
};

// FILE: vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";
import path from "path";

// https://vite.dev/config/
export default defineConfig({
  plugins: [tailwindcss(), react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});
