
// FILE: eslint.config.js
import globals from "globals";
import pluginJs from "@typescript-eslint/eslint-plugin";
import parserTs from "@typescript-eslint/parser";
import pluginReactConfig from "eslint-plugin-react/configs/recommended.js";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReactRefresh from "eslint-plugin-react-refresh";
import configPrettier from "eslint-config-prettier";

export default [
  {
    files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"],
    languageOptions: {
      parser: parserTs,
      parserOptions: {
        ecmaFeatures: { jsx: true },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    plugins: {
      "@typescript-eslint": pluginJs,
      "react-hooks": pluginReactHooks,
      "react-refresh": pluginReactRefresh,
    },
    rules: {
      ...pluginJs.configs["eslint-recommended"].rules,
      ...pluginJs.configs["recommended"].rules,
      ...pluginReactConfig.rules,
      ...pluginReactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
    },
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  configPrettier,
];

// FILE: src/App.tsx
// FILE: src/App.tsx
import { Routes, Route, Navigate } from "react-router-dom";
import { ProtectedLayout } from "./routes/ProtectedLayout";
import { WorkspaceLayout } from "./routes/WorkspaceLayout";
import { LoginPage } from "./pages/Login";
import { DashboardPage } from "./pages/Dashboard";
import { WorkspacesPage } from "./pages/Workspaces";
import { ProjectListPage } from "./pages/ProjectListPage";
import { ProjectDetailPage } from "./pages/ProjectDetailPage";
import { AdminLayout } from "./routes/AdminLayout";
import { UserListPage } from "./pages/admin/UserListPage";
import { RoleListPage } from "./pages/admin/RoleListPage";
import { PermissionListPage } from "./pages/admin/PermissionListPage";
import { AnnouncementListPage } from "./pages/admin/AnnouncementListPage";
import { ProfilePage } from "./pages/ProfilePage";
import { DashboardDetailPage } from "./pages/DashboardDetailPage";
import { WorkflowListPage } from "./pages/admin/WorkflowListPage";
import { SettingsPage } from "./pages/SettingsPage";
import { IntegrationsPage } from "./pages/IntegrationsPage";
import { PublicationsPage } from "./pages/PublicationsPage";
import { TeamsPage } from "./pages/TeamsPage";
import { AccountSettingsPage } from "./pages/AccountSettingsPage";
import { IntegrationCallbackPage } from "./pages/IntegrationCallbackPage";
import { ProjectSettingsPage } from "./pages/ProjectSettingsPage";
import { ProjectAccessControlPage } from "./pages/ProjectAccessControlPage";
import { ProjectCustomFieldsPage } from "./pages/ProjectCustomFieldsPage";
import { ProjectTaskTypesPage } from "./pages/ProjectTaskTypesPage";
import { ProjectViewsPage } from "./pages/ProjectViewsPage";
import { ForgotPasswordPage } from "./pages/ForgotPasswordPage";
import { ResetPasswordPage } from "./pages/ResetPasswordPage";
import { SetupPasswordPage } from "./pages/SetupPasswordPage";
import { ErrorBoundary } from "./components/ui/ErrorBoundary";
import { ProjectGeneralSettingsPage } from "./pages/ProjectGeneralSettingsPage";
import { JobMonitoringPage } from "./pages/admin/JobMonitoringPage";
import { SystemStatusPage } from "./pages/admin/SystemStatusPage";
import { CrmPage } from "./pages/CrmPage";
import { MyTasksPage } from "./pages/MyTasksPage";
import { WorkspaceDashboardListPage } from "./pages/WorkspaceDashboardListPage";
import { KnowledgeBasePage } from "./pages/KnowledgeBasePage";

function App() {
  return (
    <ErrorBoundary>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/forgot-password" element={<ForgotPasswordPage />} />
        <Route path="/reset-password" element={<ResetPasswordPage />} />
        <Route path="/setup-password" element={<SetupPasswordPage />} />

        <Route
          path="/integrations/callback"
          element={<IntegrationCallbackPage />}
        />

        <Route path="/" element={<ProtectedLayout />}>
          <Route index element={<Navigate to="/dashboard" replace />} />
          <Route path="dashboard" element={<DashboardPage />} />
          <Route path="my-tasks" element={<MyTasksPage />} />{" "}
          <Route path="workspaces" element={<WorkspacesPage />} />
          <Route path="publications" element={<PublicationsPage />} />
          <Route path="crm" element={<CrmPage />} />
          <Route path="workspaces/:workspaceId" element={<WorkspaceLayout />}>
            <Route index element={<Navigate to="projects" replace />} />
            <Route path="projects" element={<ProjectListPage />} />
            <Route path="teams" element={<TeamsPage />} />
            <Route path="dashboards" element={<WorkspaceDashboardListPage />} />
            <Route path="knowledge-bases" element={<KnowledgeBasePage />} />
          </Route>
          <Route
            path="workspaces/:workspaceId/projects/:projectId"
            element={
              <ErrorBoundary>
                <ProjectDetailPage />
              </ErrorBoundary>
            }
          />
          <Route
            path="workspaces/:workspaceId/dashboards/:dashboardId"
            element={<DashboardDetailPage />}
          />
          <Route
            path="workspaces/:workspaceId/projects/:projectId/settings"
            element={<ProjectSettingsPage />}
          >
            <Route index element={<Navigate to="general" replace />} />
            <Route path="general" element={<ProjectGeneralSettingsPage />} />
            <Route path="access" element={<ProjectAccessControlPage />} />
            <Route path="custom-fields" element={<ProjectCustomFieldsPage />} />
            <Route path="task-types" element={<ProjectTaskTypesPage />} />
            <Route path="views" element={<ProjectViewsPage />} />
          </Route>
          <Route
            path="workspaces/:workspaceId/projects/:projectId/:dashboardId"
            element={<DashboardDetailPage />}
          />
          <Route path="profile" element={<ProfilePage />} />
          <Route path="settings" element={<SettingsPage />}>
            <Route index element={<Navigate to="integrations" replace />} />
            <Route path="integrations" element={<IntegrationsPage />} />
            <Route path="security" element={<AccountSettingsPage />} />
          </Route>
          <Route path="admin" element={<AdminLayout />}>
            <Route index element={<Navigate to="/admin/users" replace />} />
            <Route path="users" element={<UserListPage />} />
            <Route path="roles" element={<RoleListPage />} />
            <Route path="permissions" element={<PermissionListPage />} />
            <Route path="workflows" element={<WorkflowListPage />} />
            <Route path="announcements" element={<AnnouncementListPage />} />
            <Route path="jobs" element={<JobMonitoringPage />} />
            <Route path="system" element={<SystemStatusPage />} />
          </Route>
        </Route>
      </Routes>
    </ErrorBoundary>
  );
}

export default App;

// FILE: src/components/form/FormFields.tsx
// FILE: src/components/form/FormFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { CalendarIcon, Check, ChevronsUpDown } from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { MultiSelect } from "@/components/ui/MultiSelect";
import { ComponentProps } from "react";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Badge } from "@/components/ui/badge";
import { AssigneeSelector } from "@/features/tasks/components/AssigneeSelector";
import { TaskTypeSelector } from "@/features/task-types/components/TaskTypeSelector";

interface FormInputProps extends ComponentProps<typeof Input> {
  name: string;
  label: string;
}

export function FormInput({ name, label, ...props }: FormInputProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input {...field} {...props} value={field.value ?? ""} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormTextareaProps extends ComponentProps<typeof Textarea> {
  name: string;
  label: string;
}

export function FormTextarea({ name, label, ...props }: FormTextareaProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Textarea {...field} {...props} value={field.value ?? ""} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormSelectProps extends ComponentProps<typeof Select> {
  name: string;
  label: string;
  placeholder: string;
  options: { value: string; label: string }[];
}

export function FormSelect({
  name,
  label,
  placeholder,
  options,
  ...props
}: FormSelectProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <Select
            onValueChange={field.onChange}
            defaultValue={field.value}
            {...props}
          >
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder={placeholder} />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {options.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormDatePickerProps {
  name: string;
  label: string;
}

export function FormDatePicker({ name, label }: FormDatePickerProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant={"outline"}
                  className={cn(
                    "w-full pl-3 text-left font-normal",
                    !field.value && "text-muted-foreground"
                  )}
                >
                  {field.value ? (
                    format(field.value, "PPP")
                  ) : (
                    <span>Pick a date</span>
                  )}
                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={field.value || undefined}
                onSelect={field.onChange}
                disabled={(date) =>
                  date > new Date() || date < new Date("1900-01-01")
                }
                initialFocus
              />
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormRichTextEditorProps {
  name: string;
  label: string;
  description?: string;
}

export function FormRichTextEditor({
  name,
  label,
  description,
}: FormRichTextEditorProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <RichTextEditor
              value={field.value ?? ""}
              onChange={field.onChange}
            />
          </FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormMultiSelectProps {
  name: string;
  label: string;
  placeholder: string;
  options: any[];
}

export function FormMultiSelect({
  name,
  label,
  placeholder,
  options,
}: FormMultiSelectProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <MultiSelect
            options={options}
            selected={field.value ?? []}
            onChange={field.onChange}
            placeholder={placeholder}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormSwitchProps extends ComponentProps<typeof Switch> {
  name: string;
  label: string;
  description?: string;
}

export function FormSwitch({ name, label, description }: FormSwitchProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
          <div className="space-y-0.5">
            <FormLabel>{label}</FormLabel>
            {description && <FormDescription>{description}</FormDescription>}
          </div>
          <FormControl>
            <Switch checked={field.value} onCheckedChange={field.onChange} />
          </FormControl>
        </FormItem>
      )}
    />
  );
}

interface FormMultiSelectPopoverProps {
  name: string;
  label: string;
  placeholder: string;
  options: { id: string; name: string }[];
}

export function FormMultiSelectPopover({
  name,
  label,
  placeholder,
  options,
}: FormMultiSelectPopoverProps) {
  const { control, setValue, watch } = useFormContext();
  const selectedValues = watch(name) || [];
  const selectedItems =
    options.filter((opt) => selectedValues.includes(opt.id)) || [];

  return (
    <FormField
      control={control}
      name={name}
      render={() => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant="outline"
                  role="combobox"
                  className={cn(
                    "w-full justify-between",
                    !selectedItems.length && "text-muted-foreground"
                  )}
                >
                  <div className="flex flex-wrap items-center gap-1">
                    {selectedItems.length > 0 ? (
                      selectedItems.map((item) => (
                        <Badge variant="secondary" key={item.id}>
                          {item.name}
                        </Badge>
                      ))
                    ) : (
                      <span>{placeholder}</span>
                    )}
                  </div>
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput placeholder="Search..." />
                <CommandList>
                  <CommandEmpty>No results found.</CommandEmpty>
                  <CommandGroup>
                    {options.map((option) => {
                      const isSelected = selectedValues.includes(option.id);
                      return (
                        <CommandItem
                          value={option.name}
                          key={option.id}
                          onSelect={() => {
                            if (isSelected) {
                              setValue(
                                name,
                                selectedValues.filter(
                                  (id: string) => id !== option.id
                                )
                              );
                            } else {
                              setValue(name, [...selectedValues, option.id]);
                            }
                          }}
                        >
                          <Check
                            className={cn(
                              "mr-2 h-4 w-4",
                              isSelected ? "opacity-100" : "opacity-0"
                            )}
                          />
                          {option.name}
                        </CommandItem>
                      );
                    })}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormAssigneeSelectorProps {
  name: string;
  label: string;
  projectId?: string;
  workspaceId?: string;
}

export function FormAssigneeSelector({
  name,
  label,
  projectId,
  workspaceId,
}: FormAssigneeSelectorProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <AssigneeSelector
            projectId={projectId}
            workspaceId={workspaceId}
            selectedIds={field.value}
            onSelectionChange={field.onChange}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormTaskTypeSelectorProps {
  name: string;
  label: string;
  workspaceId: string;
  projectId: string;
}

export function FormTaskTypeSelector({
  name,
  label,
  workspaceId,
  projectId,
}: FormTaskTypeSelectorProps) {
  const { control } = useFormContext();

  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <TaskTypeSelector
            workspaceId={workspaceId}
            projectId={projectId}
            value={field.value}
            onValueChange={field.onChange}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/components/layout/ActiveUsers.tsx
import { usePresenceStore } from "@/store/presence";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { getAbsoluteUrl } from "@/lib/utils";

interface Member {
  socketId: string;
  user: {
    name?: string;
    avatarUrl?: string;
  };
}

export function ActiveUsers() {
  const members = usePresenceStore(
    (state: { members: Member[] }) => state.members
  );
  return (
    <TooltipProvider>
      <div className="flex items-center -space-x-2">
        {members.map((member: Member) => (
          <Tooltip key={member.socketId}>
            <TooltipTrigger asChild>
              <Avatar className="h-7 w-7 border-2 border-white">
                <AvatarImage
                  src={getAbsoluteUrl(member.user.avatarUrl)}
                  alt={member.user.name}
                  className="h-full w-full object-cover"
                />
                <AvatarFallback>{member.user.name?.charAt(0)}</AvatarFallback>
              </Avatar>
            </TooltipTrigger>
            <TooltipContent>
              <p>{member.user.name}</p>
            </TooltipContent>
          </Tooltip>
        ))}
      </div>
    </TooltipProvider>
  );
}

// FILE: src/components/layout/Header.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useGetProfile } from "@/features/profile/api/useGetProfile";
import { useLogout } from "@/features/auth/api/useLogout";
import { LogOut, User, Search, Settings } from "lucide-react";
import { Link } from "react-router-dom";
import { SearchDialog } from "@/features/search/components/SearchDialog";
import { NotificationBell } from "@/features/notifications/components/NotificationBell";
import { useState } from "react";
import { getAbsoluteUrl } from "@/lib/utils";

export function Header() {
  const { data: user, isLoading } = useGetProfile();
  const logoutMutation = useLogout();
  const [isSearchOpen, setIsSearchOpen] = useState(false);

  const handleLogout = () => {
    logoutMutation.mutate(undefined);
  };

  return (
    <>
      <header className="flex h-16 items-center border-b bg-white px-6">
        <div className="flex-1"></div>
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 rounded-full"
            onClick={() => setIsSearchOpen(true)}
          >
            <Search className="h-5 w-5" />
          </Button>
          <NotificationBell />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                {isLoading ? (
                  <div className="h-8 w-8 animate-pulse rounded-full bg-gray-200"></div>
                ) : (
                  <Avatar className="h-8 w-8">
                    <AvatarImage
                      src={getAbsoluteUrl(user?.avatarUrl)}
                      alt={user?.name}
                      className="h-full w-full object-cover"
                    />
                    <AvatarFallback>{user?.name?.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm leading-none font-medium">
                    {user?.name}
                  </p>
                  <p className="text-muted-foreground text-xs leading-none">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link to="/profile">
                  <User className="mr-2 h-4 w-4" />
                  <span>Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link to="/settings/integrations">
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Settings</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                disabled={logoutMutation.isPending}
              >
                <LogOut className="mr-2 h-4 w-4" />
                <span>
                  {logoutMutation.isPending ? "Logging out..." : "Log out"}
                </span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <SearchDialog isOpen={isSearchOpen} onOpenChange={setIsSearchOpen} />
    </>
  );
}

// FILE: src/components/layout/MainContent.tsx
import { ReactNode } from "react";

interface MainContentProps {
  children: ReactNode;
}

export function MainContent({ children }: MainContentProps) {
  return <main className="flex-1 overflow-auto p-6">{children}</main>;
}

// FILE: src/components/layout/Sidebar.tsx
// FILE: src/components/layout/Sidebar.tsx
import { NavLink, useLocation } from "react-router-dom";
import {
  LayoutDashboard,
  FolderKanban,
  Wrench,
  FileText,
  ChevronDown,
  Users,
  Shield,
  Lock,
  Zap,
  Megaphone,
  Clock,
  Activity,
  Contact,
  CheckSquare,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";

const mainNavItems = [
  { to: "/dashboard", icon: LayoutDashboard, label: "Dashboard" },
  { to: "/my-tasks", icon: CheckSquare, label: "My Tasks" },
  { to: "/workspaces", icon: FolderKanban, label: "Workspaces" },
  { to: "/publications", icon: FileText, label: "Publications" },
  { to: "/crm", icon: Contact, label: "CRM" },
];

const adminNavItems = [
  { to: "/admin/users", icon: Users, label: "Users" },
  { to: "/admin/roles", icon: Shield, label: "Roles" },
  { to: "/admin/permissions", icon: Lock, label: "Permissions" },
  { to: "/admin/workflows", icon: Zap, label: "Workflows" },
  { to: "/admin/announcements", icon: Megaphone, label: "Announcements" },
  { to: "/admin/jobs", icon: Clock, label: "Jobs & Queues" },
  { to: "/admin/system", icon: Activity, label: "System Status" },
];

export function Sidebar() {
  const location = useLocation();
  const isAdminPath = location.pathname.startsWith("/admin");
  const [isAdminOpen, setIsAdminOpen] = useState(isAdminPath);

  return (
    <aside className="hidden w-64 flex-col border-r bg-gray-100/40 p-4 lg:flex">
      <h1 className="mb-8 text-2xl font-bold">AutoNomos</h1>
      <nav className="flex flex-col gap-1">
        {mainNavItems.map((item) => (
          <NavLink
            key={item.to}
            to={item.to}
            className={({ isActive }) =>
              cn(
                "text-muted-foreground hover:text-primary flex items-center gap-3 rounded-lg px-3 py-2 text-base font-medium transition-all",
                isActive && "bg-muted text-primary"
              )
            }
          >
            <item.icon className="h-4 w-4" />
            {item.label}
          </NavLink>
        ))}

        <div>
          <button
            onClick={() => setIsAdminOpen(!isAdminOpen)}
            className={cn(
              "text-muted-foreground hover:text-primary flex w-full items-center justify-between gap-3 rounded-lg px-3 py-2 text-base font-medium transition-all",
              isAdminPath && "bg-muted text-primary"
            )}
          >
            <div className="flex items-center gap-3">
              <Wrench className="h-4 w-4" />
              <span>Admin</span>
            </div>
            <ChevronDown
              className={cn(
                "h-4 w-4 transition-transform",
                isAdminOpen && "rotate-180"
              )}
            />
          </button>
          {isAdminOpen && (
            <div className="mt-1 space-y-1 pl-6">
              {adminNavItems.map((item) => (
                <NavLink
                  key={item.to}
                  to={item.to}
                  className={({ isActive }) =>
                    cn(
                      "text-muted-foreground hover:text-primary flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-normal transition-all",
                      isActive && "text-primary"
                    )
                  }
                >
                  <item.icon className="h-4 w-4" />
                  {item.label}
                </NavLink>
              ))}
            </div>
          )}
        </div>
      </nav>
    </aside>
  );
}

// FILE: src/components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

// FILE: src/components/ui/avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

// FILE: src/components/ui/badge.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

// FILE: src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

// FILE: src/components/ui/calendar.tsx
import * as React from "react"
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react"
import { DayButton, DayPicker, getDefaultClassNames } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = "label",
  buttonVariant = "ghost",
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>["variant"]
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        "bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent",
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString("default", { month: "short" }),
        ...formatters,
      }}
      classNames={{
        root: cn("w-fit", defaultClassNames.root),
        months: cn(
          "flex gap-4 flex-col md:flex-row relative",
          defaultClassNames.months
        ),
        month: cn("flex flex-col w-full gap-4", defaultClassNames.month),
        nav: cn(
          "flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between",
          defaultClassNames.nav
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_previous
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          "size-(--cell-size) aria-disabled:opacity-50 p-0 select-none",
          defaultClassNames.button_next
        ),
        month_caption: cn(
          "flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)",
          defaultClassNames.month_caption
        ),
        dropdowns: cn(
          "w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5",
          defaultClassNames.dropdowns
        ),
        dropdown_root: cn(
          "relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md",
          defaultClassNames.dropdown_root
        ),
        dropdown: cn(
          "absolute bg-popover inset-0 opacity-0",
          defaultClassNames.dropdown
        ),
        caption_label: cn(
          "select-none font-medium",
          captionLayout === "label"
            ? "text-sm"
            : "rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5",
          defaultClassNames.caption_label
        ),
        table: "w-full border-collapse",
        weekdays: cn("flex", defaultClassNames.weekdays),
        weekday: cn(
          "text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none",
          defaultClassNames.weekday
        ),
        week: cn("flex w-full mt-2", defaultClassNames.week),
        week_number_header: cn(
          "select-none w-(--cell-size)",
          defaultClassNames.week_number_header
        ),
        week_number: cn(
          "text-[0.8rem] select-none text-muted-foreground",
          defaultClassNames.week_number
        ),
        day: cn(
          "relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none",
          defaultClassNames.day
        ),
        range_start: cn(
          "rounded-l-md bg-accent",
          defaultClassNames.range_start
        ),
        range_middle: cn("rounded-none", defaultClassNames.range_middle),
        range_end: cn("rounded-r-md bg-accent", defaultClassNames.range_end),
        today: cn(
          "bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none",
          defaultClassNames.today
        ),
        outside: cn(
          "text-muted-foreground aria-selected:text-muted-foreground",
          defaultClassNames.outside
        ),
        disabled: cn(
          "text-muted-foreground opacity-50",
          defaultClassNames.disabled
        ),
        hidden: cn("invisible", defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === "left") {
            return (
              <ChevronLeftIcon className={cn("size-4", className)} {...props} />
            )
          }

          if (orientation === "right") {
            return (
              <ChevronRightIcon
                className={cn("size-4", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn("size-4", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        "data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }

// FILE: src/components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

// FILE: src/components/ui/checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }

// FILE: src/components/ui/command.tsx
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn("overflow-hidden p-0", className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

// FILE: src/components/ui/DataTable.tsx
import { useState, createContext, useContext, ReactNode } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardFooter } from "@/components/ui/card";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { Checkbox } from "@/components/ui/checkbox";

export interface ColumnDef<T> {
  accessorKey: keyof T | string;
  header: string;
  cell: (row: T) => ReactNode;
}

interface DataTableContextType {
  selectedIds: string[];
  toggleRow: (id: string) => void;
  toggleSelectAll: (data: any[]) => void;
  isAllSelected: (data: any[]) => boolean;
}

const DataTableContext = createContext<DataTableContextType | undefined>(
  undefined
);
const useDataTable = () => {
  const context = useContext(DataTableContext);
  if (!context) {
    throw new Error("useDataTable must be used within a DataTableProvider");
  }
  return context;
};
export const useDataTableRowSelection = (id: string) => {
  const { selectedIds, toggleRow } = useDataTable();
  return {
    isSelected: selectedIds.includes(id),
    onSelectChange: () => toggleRow(id),
  };
};
interface DataTableProps<T> {
  data: T[];
  columns: ColumnDef<T>[];
  pagination?: {
    page: number;
    totalPages: number;
    handlePageChange: (newPage: number) => void;
  };
  bulkActions?: (selectedIds: string[]) => ReactNode;
}

function DataTableProvider({ children }: { children: ReactNode }) {
  const [selectedIds, setSelectedIds] = useState<string[]>([]);
  const toggleRow = (id: string) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]
    );
  };

  const toggleSelectAll = (data: any[]) => {
    if (selectedIds.length === data.length) {
      setSelectedIds([]);
    } else {
      setSelectedIds(data.map((item) => item.id));
    }
  };
  const isAllSelected = (data: any[]) =>
    data.length > 0 && selectedIds.length === data.length;
  return (
    <DataTableContext.Provider
      value={{ selectedIds, toggleRow, toggleSelectAll, isAllSelected }}
    >
      {children}
    </DataTableContext.Provider>
  );
}

export function DataTable<T extends { id: string }>({
  data,
  columns,
  pagination,
  bulkActions,
}: DataTableProps<T>) {
  const { selectedIds, toggleRow, toggleSelectAll, isAllSelected } =
    useDataTable();
  return (
    <div className="space-y-4">
      {bulkActions && selectedIds.length > 0 && (
        <div className="flex items-center gap-2">
          {bulkActions(selectedIds)}
        </div>
      )}
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox
                  checked={isAllSelected(data)}
                  onCheckedChange={() => toggleSelectAll(data)}
                />
              </TableHead>
              {columns.map((column) => (
                <TableHead key={column.header}>{column.header}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.length > 0 ? (
              data.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={selectedIds.includes(row.id) && "selected"}
                >
                  <TableCell>
                    <Checkbox
                      checked={selectedIds.includes(row.id)}
                      onCheckedChange={() => toggleRow(row.id)}
                    />
                  </TableCell>
                  {columns.map((column) => (
                    <TableCell key={`${row.id}-${column.header}`}>
                      {column.cell(row)}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length + 1}
                  className="h-24 text-center"
                >
                  No results found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        {pagination && pagination.totalPages > 1 && (
          <CardFooter className="pt-4">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      pagination.handlePageChange(pagination.page - 1);
                    }}
                    isActive={pagination.page > 1}
                  />
                </PaginationItem>
                {[...Array(pagination.totalPages)].map((_, i) => (
                  <PaginationItem key={i}>
                    <PaginationLink
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        pagination.handlePageChange(i + 1);
                      }}
                      isActive={pagination.page === i + 1}
                    >
                      {i + 1}
                    </PaginationLink>
                  </PaginationItem>
                ))}
                <PaginationItem>
                  <PaginationNext
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      pagination.handlePageChange(pagination.page + 1);
                    }}
                    isActive={pagination.page < pagination.totalPages}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </CardFooter>
        )}
      </Card>
    </div>
  );
}

export function DataTableWrapper({ children }: { children: ReactNode }) {
  return <DataTableProvider>{children}</DataTableProvider>;
}

// FILE: src/components/ui/dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

// FILE: src/components/ui/drawer.tsx
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "bg-background fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border",
        className
      )}
      {...props}
    >
      <div className="bg-muted mx-auto mt-4 h-2 w-[100px] rounded-full" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg leading-none font-semibold tracking-tight",
      className
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-muted-foreground text-sm", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};

// FILE: src/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}

// FILE: src/components/ui/EditableField.tsx
import { useState, useRef, useEffect, KeyboardEvent } from "react";
import { Input } from "./input";
import { Textarea } from "./textarea";
import { cn } from "@/lib/utils";
import { RichTextEditor } from "./RichTextEditor";
import { RichTextOutput } from "./RichTextOutput";

interface EditableFieldProps {
  initialValue: string;
  onSave: (newValue: string) => void;
  placeholder?: string;
  className?: string;
  as?: "input" | "textarea" | "richtext";
}

const isRichTextEmpty = (html: string | null | undefined): boolean => {
  if (!html) return true;
  const cleaned = html.replace(/<p><\/p>/g, "").trim();
  return cleaned.length === 0;
};

export function EditableField({
  initialValue,
  onSave,
  placeholder,
  className,
  as = "input",
}: EditableFieldProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [value, setValue] = useState(initialValue || "");
  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isEditing]);

  const handleSave = () => {
    if (value !== initialValue) {
      onSave(value);
    }
    setIsEditing(false);
  };

  const handleKeyDown = (
    e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    if (e.key === "Enter" && as === "input") {
      e.preventDefault();
      handleSave();
    } else if (e.key === "Escape") {
      setValue(initialValue || "");
      setIsEditing(false);
    }
  };

  if (isEditing) {
    if (as === "richtext") {
      return (
        <RichTextEditor value={value} onChange={setValue} onBlur={handleSave} />
      );
    }

    const Component = as === "input" ? Input : Textarea;
    return (
      <Component
        ref={inputRef as any}
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleSave}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        className={className}
      />
    );
  }

  if (as === "richtext") {
    return (
      <div
        onClick={() => setIsEditing(true)}
        className={cn(
          "border-input ring-offset-background min-h-[123px] w-full cursor-pointer rounded-md border bg-transparent px-3 py-2 text-sm",
          "hover:bg-muted",
          className
        )}
      >
        {!isRichTextEmpty(value) ? (
          <RichTextOutput html={value} />
        ) : (
          <p className="text-muted-foreground">{placeholder}</p>
        )}
      </div>
    );
  }

  return (
    <div
      onClick={() => setIsEditing(true)}
      className={cn(
        "border-input min-h-[40px] w-full cursor-pointer rounded-md border bg-transparent px-3 py-2 text-sm",
        "hover:bg-muted",
        className
      )}
    >
      {value || <span className="text-muted-foreground">{placeholder}</span>}
    </div>
  );
}

// FILE: src/components/ui/empty-state.tsx
import { ReactNode } from "react";

interface EmptyStateProps {
  icon: ReactNode;
  title: string;
  description: string;
  action?: ReactNode;
}

export function EmptyState({
  icon,
  title,
  description,
  action,
}: EmptyStateProps) {
  return (
    <div className="flex h-full flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
      <div className="bg-primary/10 flex h-16 w-16 items-center justify-center rounded-full">
        {icon}
      </div>
      <h2 className="mt-6 text-xl font-semibold">{title}</h2>
      <p className="text-muted-foreground mt-2 text-center text-sm">
        {description}
      </p>
      {action && <div className="mt-6">{action}</div>}
    </div>
  );
}

// FILE: src/components/ui/EntityCard.tsx
// FILE: src/components/ui/EntityCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { Link } from "react-router-dom";
import { LucideIcon } from "lucide-react";

interface EntityCardProps {
  title: string;
  description?: string;
  linkTo?: string;
  onEdit: (e: React.MouseEvent) => void;
  onDelete: (e: React.MouseEvent) => void;
  deleteDisabled?: boolean;
  icon?: LucideIcon;
  children: React.ReactNode;
}

export function EntityCard({
  title,
  description,
  linkTo,
  onEdit,
  onDelete,
  deleteDisabled,
  icon: Icon,
  children,
}: EntityCardProps) {
  const cardContent = (
    <Card className="hover:border-primary flex h-full flex-col transition-colors">
      <CardHeader className="flex flex-row items-start justify-between">
        <div className="flex items-center gap-3">
          {Icon && <Icon className="h-6 w-6 text-gray-400" />}
          <div className="flex-1">
            <CardTitle>{title}</CardTitle>
            {description && <CardDescription>{description}</CardDescription>}
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 shrink-0 p-0"
              onClick={(e) => e.preventDefault()}
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={onEdit}>
              <Edit className="mr-2 h-4 w-4" />
              <span>Edit</span>
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-600 focus:text-red-600"
              onClick={onDelete}
              disabled={deleteDisabled}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              <span>Delete</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="flex-grow">{children}</CardContent>
    </Card>
  );

  if (linkTo) {
    return <Link to={linkTo}>{cardContent}</Link>;
  }

  return cardContent;
}

// FILE: src/components/ui/error-state.tsx
import { AlertTriangle } from "lucide-react";

interface ErrorStateProps {
  title: string;
  message: string;
}

export function ErrorState({ title, message }: ErrorStateProps) {
  return (
    <div className="flex h-full flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
      <div className="bg-destructive/10 flex h-16 w-16 items-center justify-center rounded-full">
        <AlertTriangle className="text-destructive h-8 w-8" />
      </div>
      <h2 className="mt-6 text-xl font-semibold">{title}</h2>
      <p className="text-muted-foreground mt-2 text-sm">{message}</p>
    </div>
  );
}

// FILE: src/components/ui/ErrorBoundary.tsx
import { Component, ErrorInfo, ReactNode } from "react";
import { Button } from "./button";
import { AlertTriangle } from "lucide-react";

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("ErrorBoundary caught an error:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      return (
        <div className="flex min-h-[400px] w-full flex-col items-center justify-center space-y-4 rounded-lg border border-red-200 bg-red-50 p-8">
          <AlertTriangle className="h-12 w-12 text-red-500" />
          <div className="space-y-2 text-center">
            <h2 className="text-xl font-semibold text-red-900">
              Something went wrong
            </h2>
            <p className="text-red-700">
              {this.state.error?.message || "An unexpected error occurred"}
            </p>
          </div>
          <Button
            onClick={() => this.setState({ hasError: false, error: undefined })}
            variant="outline"
            className="border-red-300 text-red-700 hover:bg-red-100"
          >
            Try again
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
}

// FILE: src/components/ui/form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

// FILE: src/components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

// FILE: src/components/ui/label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

// FILE: src/components/ui/MentionList.tsx
// FILE: src/components/ui/MentionList.tsx
import {
  forwardRef,
  useEffect,
  useImperativeHandle,
  useState,
  ForwardedRef,
} from "react";
import { cn } from "@/lib/utils";

interface MentionListProps {
  items: { id: string; label: string }[];
  command: (item: { id: string; label: string }) => void;
}

interface MentionListRef {
  onKeyDown: (props: { event: KeyboardEvent }) => boolean;
}

export const MentionList = forwardRef(
  (props: MentionListProps, ref: ForwardedRef<MentionListRef>) => {
    const [selectedIndex, setSelectedIndex] = useState(0);

    const selectItem = (index: number) => {
      const item = props.items[index];
      if (item) {
        props.command({ id: item.id, label: item.label });
      }
    };

    const upHandler = () => {
      setSelectedIndex(
        (selectedIndex + props.items.length - 1) % props.items.length
      );
    };

    const downHandler = () => {
      setSelectedIndex((selectedIndex + 1) % props.items.length);
    };

    const enterHandler = () => {
      selectItem(selectedIndex);
    };

    useEffect(() => setSelectedIndex(0), [props.items]);

    useImperativeHandle(ref, () => ({
      onKeyDown: ({ event }: { event: KeyboardEvent }) => {
        if (event.key === "ArrowUp") {
          upHandler();
          return true;
        }
        if (event.key === "ArrowDown") {
          downHandler();
          return true;
        }
        if (event.key === "Enter") {
          enterHandler();
          return true;
        }
        return false;
      },
    }));

    return (
      <div className="bg-popover text-popover-foreground z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md">
        {props.items.length ? (
          props.items.map((item: any, index: number) => (
            <button
              className={cn(
                "focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default items-center rounded-sm px-2 py-1.5 text-sm transition-colors outline-none select-none",
                index === selectedIndex && "bg-accent text-accent-foreground"
              )}
              key={index}
              onClick={() => selectItem(index)}
            >
              {item.label}
            </button>
          ))
        ) : (
          <div className="p-2 text-sm">No result</div>
        )}
      </div>
    );
  }
);

MentionList.displayName = "MentionList";

// FILE: src/components/ui/MultiSelect.tsx
import * as React from "react";
import { X } from "lucide-react";

import { Badge } from "@/components/ui/badge";
import { CommandItem, CommandList } from "@/components/ui/command";
import { Command as CommandPrimitive } from "cmdk";

type Skill = {
  id: string;
  name: string;
};

interface MultiSelectProps {
  options: Skill[];
  selected: string[];
  onChange: (value: string[]) => void;
  placeholder?: string;
  className?: string;
}

export function MultiSelect({
  options,
  selected,
  onChange,
  className,
  ...props
}: MultiSelectProps) {
  const [open, setOpen] = React.useState(false);

  const handleUnselect = (value: string) => {
    onChange(selected.filter((s) => s !== value));
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    const input = e.target as HTMLInputElement;
    if (e.key === "Backspace" || e.key === "Delete") {
      if (input.value === "") {
        e.preventDefault();
        const newSelected = [...selected];
        newSelected.pop();
        onChange(newSelected);
      }
    }

    if (e.key === "Escape") {
      input.blur();
    }
  };

  const selectedSkills = options.filter((option) =>
    selected.includes(option.id)
  );

  return (
    <div className="relative">
      <CommandPrimitive
        onKeyDown={handleKeyDown}
        className="overflow-visible bg-transparent"
      >
        <div className="group border-input ring-offset-background focus-within:ring-ring rounded-md border px-3 py-2 text-sm focus-within:ring-2 focus-within:ring-offset-2">
          <div className="flex flex-wrap gap-1">
            {selectedSkills.map((option) => {
              return (
                <Badge key={option.id} variant="secondary">
                  {option.name}
                  <button
                    className="ring-offset-background focus:ring-ring ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2"
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        handleUnselect(option.id);
                      }
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                    }}
                    onClick={() => handleUnselect(option.id)}
                  >
                    <X className="text-muted-foreground hover:text-foreground h-3 w-3" />
                  </button>
                </Badge>
              );
            })}
            <CommandPrimitive.Input
              placeholder={props.placeholder || "Select..."}
              className="placeholder:text-muted-foreground ml-2 flex-1 bg-transparent outline-none"
              onFocus={() => setOpen(true)}
              onBlur={() => setOpen(false)}
            />
          </div>
        </div>
        {open && options.length > 0 && (
          <div className="bg-popover text-popover-foreground animate-in absolute top-full z-10 mt-2 w-full rounded-md border shadow-md outline-none">
            <CommandList>
              {options
                .filter((option) => !selected.includes(option.id))
                .map((option) => (
                  <CommandItem
                    key={option.id}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                    }}
                    onSelect={() => {
                      onChange([...selected, option.id]);
                    }}
                    className={"cursor-pointer"}
                  >
                    {option.name}
                  </CommandItem>
                ))}
            </CommandList>
          </div>
        )}
      </CommandPrimitive>
    </div>
  );
}

// FILE: src/components/ui/pagination.tsx
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}

function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">

function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

// FILE: src/components/ui/popover.tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

// FILE: src/components/ui/progress.tsx
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  );
}

export { Progress };

// FILE: src/components/ui/recharts.tsx
"use client";

import * as React from "react";
import {
  Line,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
  CartesianGrid,
  BarChart,
  Bar,
} from "recharts";
import { cn } from "@/lib/utils";

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "flex aspect-video w-full items-center justify-center [&>div]:size-full",
      className
    )}
    {...props}
  />
));
ChartContainer.displayName = "ChartContainer";

export {
  ChartContainer,
  LineChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
  CartesianGrid,
  Line,
  BarChart,
  Bar,
};

// FILE: src/components/ui/ResourceCrudDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import React, { useState } from "react";
import { QueryKey } from "@tanstack/react-query";

const DialogFormContent = ({
  isEditMode,
  resourceId,
  resourcePath,
  resourceKey,
  form: FormComponent,
  formProps,
  onSuccess,
  children,
}: {
  isEditMode: boolean;
  resourceId: string | null;
  resourcePath: string;
  resourceKey: QueryKey;
  form: React.ComponentType<any>;
  formProps?: Record<string, any>;
  onSuccess: () => void;
  children?: (data: any) => React.ReactNode;
}) => {
  const resource = useApiResource(resourcePath, resourceKey);
  const { data, isLoading } = resource.useGetOne(
    isEditMode ? resourceId : null
  );

  if (isEditMode && isLoading) {
    return (
      <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
        <div className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-9 w-24" />
        </div>
        <div className="space-y-4">
          <Skeleton className="h-6 w-1/3" />
          <Skeleton className="h-24 w-full" />
        </div>
      </div>
    );
  }

  if (isEditMode && !data) {
    return null;
  }

  const formContent = (
    <FormComponent
      initialData={isEditMode ? data : undefined}
      onSuccess={onSuccess}
      {...formProps}
    />
  );

  if (children && isEditMode && data) {
    return (
      <div className="grid grid-cols-1 gap-8 py-4 md:grid-cols-2">
        {formContent}
        {children(data)}
      </div>
    );
  }

  return formContent;
};

interface ResourceCrudDialogProps {
  trigger?: React.ReactNode;
  title: string;
  description: string;
  form: React.ComponentType<any>;
  formProps?: Record<string, any>;
  resourcePath: string;
  resourceKey: QueryKey;
  resourceId?: string | null;
  isOpen?: boolean;
  onOpenChange?: (isOpen: boolean) => void;
  children?: (data: any) => React.ReactNode;
  dialogClassName?: string;
}

export function ResourceCrudDialog({
  trigger,
  title,
  description,
  form: FormComponent,
  formProps,
  resourcePath,
  resourceKey,
  resourceId,
  isOpen: externalIsOpen,
  onOpenChange: externalOnOpenChange,
  children,
  dialogClassName,
}: ResourceCrudDialogProps) {
  const [internalIsOpen, setInternalIsOpen] = useState(false);
  const isControlled =
    externalIsOpen !== undefined && externalOnOpenChange !== undefined;

  const isOpen = isControlled ? externalIsOpen : internalIsOpen;
  const onOpenChange = isControlled ? externalOnOpenChange : setInternalIsOpen;

  const isEditMode = !!resourceId;

  const handleSuccess = () => {
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}
      <DialogContent className={dialogClassName}>
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>
        {isOpen && (
          <DialogFormContent
            isEditMode={isEditMode}
            resourceId={resourceId ?? null}
            resourcePath={resourcePath}
            resourceKey={resourceKey}
            form={FormComponent}
            formProps={formProps}
            onSuccess={handleSuccess}
            children={children}
          />
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/components/ui/RichTextEditor.tsx
// FILE: src/components/ui/RichTextEditor.tsx
import { useEditor, EditorContent, Editor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Link from "@tiptap/extension-link";
import Mention from "@tiptap/extension-mention";
import {
  Bold,
  Italic,
  List,
  ListOrdered,
  Heading1,
  Heading2,
  Heading3,
  Quote,
  Link2,
  Smile,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Toggle } from "./toggle";
import { Separator } from "./separator";
import { Popover, PopoverContent, PopoverTrigger } from "./popover";
import Picker, { EmojiClickData } from "emoji-picker-react";
import { useCallback, useEffect } from "react";
import { suggestion } from "./mention-suggestion";

interface RichTextEditorProps {
  value: string;
  onChange: (value: string) => void;
  className?: string;
  onBlur?: () => void;
  workspaceId?: string;
  projectId?: string;
}

function EditorToolbar({ editor }: { editor: Editor | null }) {
  if (!editor) {
    return null;
  }

  const setLink = useCallback(() => {
    const previousUrl = editor.getAttributes("link").href;
    const url = window.prompt("URL", previousUrl);

    if (url === null) {
      return;
    }

    if (url === "") {
      editor.chain().focus().extendMarkRange("link").unsetLink().run();
      return;
    }

    editor.chain().focus().extendMarkRange("link").setLink({ href: url }).run();
  }, [editor]);

  const handleEmojiClick = (emojiClickData: EmojiClickData) => {
    editor.chain().focus().insertContent(emojiClickData.emoji).run();
  };

  return (
    <div className="border-input flex flex-wrap items-center gap-1 rounded-t-md border border-b-0 bg-transparent p-1">
      <Toggle
        size="sm"
        pressed={editor.isActive("bold")}
        onPressedChange={() => editor.chain().focus().toggleBold().run()}
      >
        <Bold className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("italic")}
        onPressedChange={() => editor.chain().focus().toggleItalic().run()}
      >
        <Italic className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 1 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 1 }).run()
        }
      >
        <Heading1 className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 2 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 2 }).run()
        }
      >
        <Heading2 className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 3 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 3 }).run()
        }
      >
        <Heading3 className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("bulletList")}
        onPressedChange={() => editor.chain().focus().toggleBulletList().run()}
      >
        <List className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("orderedList")}
        onPressedChange={() => editor.chain().focus().toggleOrderedList().run()}
      >
        <ListOrdered className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("blockquote")}
        onPressedChange={() => editor.chain().focus().toggleBlockquote().run()}
      >
        <Quote className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("link")}
        onPressedChange={setLink}
      >
        <Link2 className="h-4 w-4" />
      </Toggle>
      <Popover>
        <PopoverTrigger asChild>
          <Toggle size="sm">
            <Smile className="h-4 w-4" />
          </Toggle>
        </PopoverTrigger>
        <PopoverContent className="w-full border-none bg-transparent p-0 shadow-none">
          <Picker onEmojiClick={handleEmojiClick} />
        </PopoverContent>
      </Popover>
    </div>
  );
}

export function RichTextEditor({
  value,
  onChange,
  className,
  onBlur,
  workspaceId,
  projectId,
}: RichTextEditorProps) {
  const editor = useEditor({
    extensions: [
      StarterKit,
      Link.configure({
        openOnClick: false,
        autolink: true,
      }),
      Mention.configure({
        HTMLAttributes: {
          class: "mention",
        },
        suggestion: suggestion(workspaceId, projectId),
      }),
    ],
    content: value,
    onUpdate({ editor }) {
      onChange(editor.getHTML());
    },
    onBlur() {
      onBlur?.();
    },
    editorProps: {
      attributes: {
        class: cn(
          "min-h-[150px] w-full rounded-md rounded-t-none border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 prose prose-sm max-w-none dark:prose-invert",
          className
        ),
      },
    },
  });

  useEffect(() => {
    if (editor && value !== editor.getHTML()) {
      editor.commands.setContent(value);
    }
  }, [editor, value]);

  return (
    <div>
      <EditorToolbar editor={editor} />
      <EditorContent editor={editor} />
    </div>
  );
}

// FILE: src/components/ui/RichTextOutput.tsx
import DOMPurify from "dompurify";

interface RichTextOutputProps {
  html: string;
  className?: string;
}

export function RichTextOutput({ html, className }: RichTextOutputProps) {
  const sanitizedHtml = DOMPurify.sanitize(html);

  return (
    <div
      className={className}
      dangerouslySetInnerHTML={{ __html: sanitizedHtml }}
    />
  );
}

// FILE: src/components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

// FILE: src/components/ui/select.tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

// FILE: src/components/ui/separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

// FILE: src/components/ui/sheet.tsx
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

// FILE: src/components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

// FILE: src/components/ui/sonner.tsx
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }

// FILE: src/components/ui/switch.tsx
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }

// FILE: src/components/ui/table.tsx
import * as React from "react";

import { cn } from "@/lib/utils";

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  );
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  );
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};

// FILE: src/components/ui/tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }

// FILE: src/components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

// FILE: src/components/ui/toggle-group.tsx
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }

// FILE: src/components/ui/toggle.tsx
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }

// FILE: src/components/ui/tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

// FILE: src/features/activities/components/ProjectActivityLog.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Activity, MessageSquarePlus, SquarePlus, Trash2 } from "lucide-react";

const activityIconMap: Record<string, React.ElementType> = {
  TASK_CREATED: SquarePlus,
  TASK_UPDATED: Activity,
  TASK_DELETED: Trash2,
  COMMENT_CREATED: MessageSquarePlus,
  DEFAULT: Activity,
};
function formatActivityDetails(activity: any): string {
  const actorName = activity.actor.name;
  switch (activity.actionType) {
    case "TASK_CREATED":
      return `${actorName} created task "${activity.details.title}"`;
    case "TASK_DELETED":
      return `${actorName} deleted task "${activity.details.title}"`;
    case "COMMENT_CREATED":
      return `${actorName} commented on a task: "${activity.details.content.substring(
        0,
        50
      )}..."`;
    case "TASK_UPDATED":
      return `${actorName} updated task "${activity.details.title}"`;
    default:
      return `${actorName} performed action: ${activity.actionType}`;
  }
}

export function ProjectActivityLog({ workspaceId, projectId }: any) {
  const activityResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/activities`,
    ["activities", projectId]
  );
  const { data, isLoading, isError } = activityResource.useGetAll({
    limit: 50,
  });
  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="flex items-center gap-4">
            <Skeleton className="h-8 w-8 rounded-full" />
            <Skeleton className="h-4 w-full" />
          </div>
        ))}
      </div>
    );
  }

  if (isError) return <div>Failed to load project activity.</div>;
  return (
    <Card>
      <CardHeader>
        <CardTitle>Activity Feed</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {data?.data && data.data.length > 0 ? (
          data.data.map((activity: any) => {
            const Icon =
              activityIconMap[activity.actionType] || activityIconMap.DEFAULT;
            return (
              <div key={activity.id} className="flex items-start gap-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100">
                  <Icon className="h-4 w-4 text-gray-500" />
                </div>
                <div className="flex-grow">
                  <p className="text-sm">{formatActivityDetails(activity)}</p>
                  <p className="text-muted-foreground text-xs">
                    {new Date(activity.createdAt).toLocaleString("en-US")}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <p className="text-muted-foreground text-center text-sm">
            No activity recorded in this project yet.
          </p>
        )}
      </CardContent>
    </Card>
  );
}

// FILE: src/features/admin/announcements/components/AnnouncementForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormRichTextEditor,
  FormSelect,
  FormSwitch,
} from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
interface AnnouncementFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function AnnouncementForm({
  initialData,
  onSuccess,
}: AnnouncementFormProps) {
  const announcementResource = useApiResource("announcements", [
    "announcements",
  ]);
  const isEditMode = !!initialData;
  const createMutation = announcementResource.useCreate();
  const updateMutation = announcementResource.useUpdate();

  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<any>({
    defaultValues: {
      title: "",
      content: "",
      status: "DRAFT",
      severity: "INFO",
      isPinned: false,
    },
  });
  useEffect(() => {
    if (isEditMode) {
      methods.reset({
        ...initialData,
        content: initialData.content?.message || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: any) {
    const finalValues = {
      ...values,
      content: { message: values.content },
    };
    if (isEditMode) {
      await updateMutation.mutate(
        { id: initialData.id, data: finalValues },
        { onSuccess }
      );
    } else {
      await createMutation.mutate(finalValues, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  const statusOptions = [
    { value: "DRAFT", label: "Draft" },
    { value: "PUBLISHED", label: "Published" },
    { value: "ARCHIVED", label: "Archived" },
  ];
  const severityOptions = [
    { value: "INFO", label: "Info" },
    { value: "LOW", label: "Low" },
    { value: "MEDIUM", label: "Medium" },
    { value: "HIGH", label: "High" },
    { value: "CRITICAL", label: "Critical" },
  ];
  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="title"
            label="Title"
            placeholder="e.g., System Maintenance"
          />
          <FormRichTextEditor
            name="content"
            label="Content"
            description="This content will be displayed to users."
          />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="status"
              label="Status"
              placeholder="Select status"
              options={statusOptions}
            />
            <FormSelect
              name="severity"
              label="Severity"
              placeholder="Select severity"
              options={severityOptions}
            />
          </div>
          <FormSwitch
            name="isPinned"
            label="Pin Announcement"
            description="Pinned announcements will appear at the top."
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Announcement"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/admin/announcements/components/AnnouncementList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2, Edit } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/ui/DataTable";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { AnnouncementForm } from "./AnnouncementForm";
export function AnnouncementList() {
  const [page, setPage] = useState(1);
  const [editingId, setEditingId] = useState<string | null>(null);
  const announcementResource = useApiResource("announcements", [
    "announcements",
  ]);
  const { data, isLoading, isError } = announcementResource.useGetAll({
    page,
    limit: 10,
  });
  const deleteMutation = announcementResource.useDelete();

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "title",
      header: "Title",
      cell: (announcement) => (
        <span className="font-medium">{announcement.title}</span>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: (announcement) => (
        <Badge variant="outline">{announcement.status}</Badge>
      ),
    },
    {
      accessorKey: "severity",
      header: "Severity",
      cell: (announcement) => (
        <Badge variant="secondary">{announcement.severity}</Badge>
      ),
    },
    {
      accessorKey: "isPinned",
      header: "Pinned",
      cell: (announcement) => (announcement.isPinned ? "Yes" : "No"),
    },
    {
      accessorKey: "publishedAt",
      header: "Published",
      cell: (announcement) =>
        announcement.publishedAt
          ? new Date(announcement.publishedAt).toLocaleDateString("en-US")
          : "N/A",
    },
    {
      accessorKey: "actions",
      header: "Actions",
      cell: (announcement) => (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => setEditingId(announcement.id)}>
                <Edit className="mr-2 h-4 w-4" /> Edit
              </DropdownMenuItem>
              <DropdownMenuItem
                className="text-red-600"
                onClick={() => {
                  if (
                    window.confirm(
                      `Delete announcement "${announcement.title}"?`
                    )
                  ) {
                    deleteMutation.mutate(announcement.id);
                  }
                }}
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      ),
    },
  ];

  if (isLoading) return <div>Loading announcements...</div>;
  if (isError) return <div>Error loading announcements.</div>;
  return (
    <>
      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Delete ${selectedIds.length} selected announcements?`
                  )
                ) {
                  deleteMutation.mutate(selectedIds);
                }
              }}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete ({selectedIds.length})
            </Button>
          )}
        />
      </DataTableWrapper>

      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        trigger={<></>}
        title="Edit Announcement"
        description="Make changes to the announcement details."
        form={AnnouncementForm}
        resourcePath="announcements"
        resourceKey={["announcements"]}
        resourceId={editingId}
      />
    </>
  );
}

// FILE: src/features/admin/jobs/api/useGetJobSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getJobSystemStatus(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/status");
  return data;
}

export function useGetJobSystemStatus() {
  return useQuery({
    queryKey: ["jobSystemStatus"],
    queryFn: getJobSystemStatus,
    refetchInterval: 5000,
  });
}

async function getQueueStats(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/queue-stats");
  return data;
}

export function useGetQueueStats() {
  return useQuery({
    queryKey: ["queueStats"],
    queryFn: getQueueStats,
    refetchInterval: 5000,
  });
}

// FILE: src/features/admin/jobs/api/useGetJobTypes.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getJobTypes(): Promise<any> {
  const { data } = await api.get("/admin/jobs/system/job-types");
  return data;
}

export function useGetJobTypes() {
  return useQuery({
    queryKey: ["jobTypes"],
    queryFn: getJobTypes,
    staleTime: Infinity,
  });
}

// FILE: src/features/admin/jobs/api/useJobActions.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function retryJob(jobId: string): Promise<any> {
  const { data } = await api.post(`/admin/jobs/${jobId}/retry`);
  return data;
}

export function useRetryJob() {
  return useApiMutation({
    mutationFn: retryJob,
    successMessage: (data) => `Job sent for retry. Job ID: ${data.job.id}`,
    invalidateQueries: (data) => [["jobs"], ["job", data.job.id]],
  });
}

async function cancelJob(jobId: string): Promise<any> {
  const { data } = await api.post(`/admin/jobs/${jobId}/cancel`);
  return data;
}

export function useCancelJob() {
  return useApiMutation({
    mutationFn: cancelJob,
    successMessage: (data) => `Job cancelled. Job ID: ${data.job.id}`,
    invalidateQueries: (data) => [["jobs"], ["job", data.job.id]],
  });
}

// FILE: src/features/admin/jobs/api/useTriggerJobSchedule.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function triggerJobSchedule(
  scheduleId: string
): Promise<{ jobId: string }> {
  const { data } = await api.post(
    `/admin/jobs/schedules/${scheduleId}/trigger`
  );
  return data;
}

export function useTriggerJobSchedule() {
  return useApiMutation({
    mutationFn: triggerJobSchedule,
    successMessage: (data) =>
      `Job schedule triggered. New Job ID: ${data.jobId}`,
  });
}

// FILE: src/features/admin/jobs/components/CreateJobScheduleForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { z } from "zod";
import { useApiResource } from "@/hooks/useApiResource";
import { useGetJobTypes } from "../api/useGetJobTypes";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
const JobScheduleFormSchema = z.object({
  name: z.string().min(1, "Schedule name is required."),
  jobType: z.string().min(1, "Job type is required."),
  cronExpression: z.string().min(1, "A valid CRON expression is required."),
  payload: z.string(),
  isActive: z.boolean(),
});
type JobScheduleFormValues = {
  name: string;
  jobType: string;
  cronExpression: string;
  payload: string;
  isActive: boolean;
};
interface CreateJobScheduleFormProps {
  onSuccess?: () => void;
}

export function CreateJobScheduleForm({
  onSuccess,
}: CreateJobScheduleFormProps) {
  const jobScheduleResource = useApiResource("admin/jobs/schedules", [
    "jobSchedules",
  ]);
  const createMutation = jobScheduleResource.useCreate();
  const { data: jobTypesData, isLoading: isLoadingJobTypes } = useGetJobTypes();
  const form = useForm<JobScheduleFormValues>({
    resolver: zodResolver(JobScheduleFormSchema),
    defaultValues: {
      name: "",
      jobType: "",
      cronExpression: "",
      payload: "",
      isActive: true,
    },
  });
  async function onSubmit(values: JobScheduleFormValues) {
    let parsedPayload = {};
    if (values.payload && values.payload.trim()) {
      try {
        parsedPayload = JSON.parse(values.payload);
      } catch (e) {
        form.setError("payload", {
          type: "manual",
          message: "Payload must be valid JSON",
        });
        return;
      }
    }

    const submitData = {
      ...values,
      payload: parsedPayload,
    };
    await createMutation.mutateAsync(submitData, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Schedule Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Daily Cleanup" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="jobType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Job Type</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger disabled={isLoadingJobTypes}>
                    <SelectValue placeholder="Select a job type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {jobTypesData?.jobTypes.map((jobType: any) => (
                    <SelectItem key={jobType.type} value={jobType.type}>
                      {jobType.type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="cronExpression"
          render={({ field }) => (
            <FormItem>
              <FormLabel>CRON Expression</FormLabel>
              <FormControl>
                <Input placeholder="e.g., 0 2 * * *" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="payload"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Payload (JSON)</FormLabel>
              <FormControl>
                <Textarea placeholder='{ "days": 7 }' {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="isActive"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
              <FormLabel>Active</FormLabel>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Schedule"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/jobs/components/JobList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { useRetryJob, useCancelJob } from "../api/useJobActions";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MoreHorizontal,
  RefreshCw,
  XCircle,
  Clock,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { JobStatus } from "@/types";
import { Job } from "@/lib/schemas";

const statusVariantMap: Record<
  JobStatus,
  "default" | "secondary" | "destructive" | "outline"
> = {
  [JobStatus.PENDING]: "outline",
  [JobStatus.RUNNING]: "default",
  [JobStatus.COMPLETED]: "secondary",
  [JobStatus.FAILED]: "destructive",
  [JobStatus.CANCELLED]: "destructive",
};
const statusIconMap: Record<JobStatus, React.ElementType> = {
  [JobStatus.PENDING]: Clock,
  [JobStatus.RUNNING]: RefreshCw,
  [JobStatus.COMPLETED]: CheckCircle,
  [JobStatus.FAILED]: AlertCircle,
  [JobStatus.CANCELLED]: XCircle,
};
export function JobList() {
  const jobResource = useApiResource("admin/jobs", ["jobs"]);
  const [page] = useState(1);
  const { data, isLoading, isError } = jobResource.useGetAll({
    page,
    limit: 20,
  });
  const retryMutation = useRetryJob();
  const cancelMutation = useCancelJob();

  if (isLoading) return <div>Loading jobs...</div>;
  if (isError) return <div>Error loading jobs.</div>;
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Status</TableHead>
          <TableHead>Type</TableHead>
          <TableHead>Attempts</TableHead>
          <TableHead>Created At</TableHead>
          <TableHead className="w-[50px] text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {data && data.data && data.data.length > 0 ? (
          data.data.map((job: Job) => {
            const StatusIcon = statusIconMap[job.status];
            return (
              <TableRow key={job.id}>
                <TableCell>
                  <Badge variant={statusVariantMap[job.status]}>
                    <StatusIcon className="mr-2 h-4 w-4" />
                    {job.status}
                  </Badge>
                </TableCell>
                <TableCell className="font-mono text-xs">{job.type}</TableCell>
                <TableCell>
                  {job.attempts} / {job.maxAttempts}
                </TableCell>
                <TableCell>
                  {new Date(job.createdAt).toLocaleString("en-US")}
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem
                        onClick={() => retryMutation.mutate(job.id)}
                        disabled={
                          job.status === "RUNNING" || job.status === "PENDING"
                        }
                      >
                        <RefreshCw className="mr-2 h-4 w-4" /> Retry
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => cancelMutation.mutate(job.id)}
                        disabled={
                          job.status !== "RUNNING" && job.status !== "PENDING"
                        }
                      >
                        <XCircle className="mr-2 h-4 w-4" /> Cancel
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            );
          })
        ) : (
          <TableRow>
            <TableCell colSpan={5} className="h-24 text-center">
              No jobs found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}

// FILE: src/features/admin/jobs/components/JobScheduleList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
export function JobScheduleList() {
  const jobScheduleResource = useApiResource("admin/jobs/schedules", [
    "jobSchedules",
  ]);
  const [page] = useState(1);
  const { data, isLoading, isError } = jobScheduleResource.useGetAll({
    page,
    limit: 20,
  });
  const updateMutation = jobScheduleResource.useUpdate();
  const deleteMutation = jobScheduleResource.useDelete();

  if (isLoading) return <div>Loading schedules...</div>;
  if (isError) return <div>Error loading schedules.</div>;
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Name</TableHead>
          <TableHead>Cron Expression</TableHead>
          <TableHead>Job Type</TableHead>
          <TableHead>Next Run</TableHead>
          <TableHead>Active</TableHead>
          <TableHead className="text-right">Actions</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {data && data.data && data.data.length > 0 ? (
          data.data.map((schedule: any) => (
            <TableRow key={schedule.id}>
              <TableCell className="font-medium">{schedule.name}</TableCell>
              <TableCell className="font-mono text-xs">
                {schedule.cronExpression}
              </TableCell>
              <TableCell className="font-mono text-xs">
                {schedule.jobType}
              </TableCell>
              <TableCell>
                {schedule.nextRunAt
                  ? new Date(schedule.nextRunAt).toLocaleString("en-US")
                  : "N/A"}
              </TableCell>
              <TableCell>
                <Switch
                  checked={schedule.isActive}
                  onCheckedChange={(isActive) =>
                    updateMutation.mutate({
                      id: schedule.id,
                      data: { isActive },
                    })
                  }
                />
              </TableCell>
              <TableCell className="text-right">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => deleteMutation.mutate(schedule.id)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </TableCell>
            </TableRow>
          ))
        ) : (
          <TableRow>
            <TableCell colSpan={6} className="h-24 text-center">
              No job schedules found.
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
}

// FILE: src/features/admin/jobs/components/JobSystemStatus.tsx
import {
  useGetJobSystemStatus,
  useGetQueueStats,
} from "../api/useGetJobSystemStatus";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
const StatCard = ({
  title,
  value,
  isLoading,
}: {
  title: string;
  value: React.ReactNode;
  isLoading: boolean;
}) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {isLoading ? (
        <Skeleton className="h-8 w-1/2" />
      ) : (
        <div className="text-2xl font-bold">{value}</div>
      )}
    </CardContent>
  </Card>
);
export function JobSystemStatus() {
  const { data: statusData, isLoading: isLoadingStatus } =
    useGetJobSystemStatus();
  const { data: queueData, isLoading: isLoadingQueue } = useGetQueueStats();

  const processorStatus = statusData?.processor;
  const schedulerStatus = statusData?.scheduler;
  const queueStats = queueData?.totalJobs;

  const isProcessorOk =
    processorStatus &&
    processorStatus.isProcessing &&
    processorStatus.consecutiveFailures < 5;
  return (
    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
      <StatCard
        title="Processor Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={isProcessorOk ? "default" : "destructive"}>
            {isProcessorOk ? "Running" : "Error"}
          </Badge>
        }
      />
      <StatCard
        title="Scheduler Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={schedulerStatus?.isRunning ? "default" : "outline"}>
            {schedulerStatus?.isRunning ? "Running" : "Stopped"}
          </Badge>
        }
      />
      <StatCard
        title="Jobs Running"
        isLoading={isLoadingStatus}
        value={processorStatus?.runningJobs ?? "N/A"}
      />
      <StatCard
        title="Jobs Pending"
        isLoading={isLoadingQueue}
        value={queueStats?.pending ?? "N/A"}
      />
    </div>
  );
}

// FILE: src/features/admin/PermissionListPage.tsx
import { PermissionList } from "@/features/admin/permissions/components/PermissionList";

export function PermissionListPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          System Permissions
        </h1>
        <p className="text-muted-foreground">
          A read-only list of all available permissions in the system.
        </p>
      </div>
      <PermissionList />
    </div>
  );
}

// FILE: src/features/admin/permissions/components/PermissionForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormRichTextEditor } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { descriptionSchema, requiredStringSchema } from "@/lib/schemas";

const permissionSchema = z.object({
  action: requiredStringSchema("Action"),
  subject: requiredStringSchema("Subject"),
  description: descriptionSchema,
});
type PermissionFormValues = z.infer<typeof permissionSchema>;

interface PermissionFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function PermissionForm({
  initialData,
  onSuccess,
}: PermissionFormProps) {
  const permissionResource = useApiResource("admin/permissions", [
    "permissions",
  ]);
  const createMutation = permissionResource.useCreate();
  const updateMutation = permissionResource.useUpdate();
  const isEditMode = !!initialData;
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<PermissionFormValues>({
    resolver: zodResolver(permissionSchema),
    defaultValues: {
      action: "",
      subject: "",
      description: "",
    },
  });
  useEffect(() => {
    if (initialData) {
      methods.reset(initialData);
    }
  }, [initialData, methods]);
  async function onSubmit(values: PermissionFormValues) {
    if (isEditMode) {
      await updateMutation.mutate(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutate(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="action"
            label="Action"
            placeholder="e.g., manage, create, read"
          />
          <FormInput
            name="subject"
            label="Subject"
            placeholder="e.g., Project, Task, User"
          />
          <FormRichTextEditor name="description" label="Description" />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Permission"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/admin/permissions/components/PermissionList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/ui/DataTable";

export function PermissionList() {
  const [page, setPage] = useState(1);
  const permissionResource = useApiResource("admin/permissions", [
    "permissions",
  ]);
  const { data, isLoading, isError } = permissionResource.useGetAll({
    page,
    limit: 15,
  });
  const deleteMutation = permissionResource.useDelete();

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "action",
      header: "Action",
      cell: (permission) => (
        <span className="font-mono">{permission.action}</span>
      ),
    },
    {
      accessorKey: "subject",
      header: "Subject",
      cell: (permission) => (
        <span className="font-mono">{permission.subject}</span>
      ),
    },
    {
      accessorKey: "description",
      header: "Description",
      cell: (permission) => permission.description,
    },
    {
      accessorKey: "actions",
      header: "Actions",
      cell: (permission) => (
        <div className="text-right">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                className="text-red-600"
                onClick={() => {
                  if (
                    window.confirm(
                      `Delete permission "${permission.action} on ${permission.subject}"?`
                    )
                  ) {
                    deleteMutation.mutate(permission.id);
                  }
                }}
              >
                <Trash2 className="mr-2 h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      ),
    },
  ];

  if (isLoading) return <div>Loading permissions...</div>;
  if (isError) return <div>Error loading permissions.</div>;
  return (
    <DataTableWrapper>
      <DataTable
        columns={columns}
        data={data?.data || []}
        pagination={{
          page: data?.page || 1,
          totalPages: data?.totalPages || 1,
          handlePageChange,
        }}
        bulkActions={(selectedIds) => (
          <Button
            variant="destructive"
            onClick={() => {
              if (
                window.confirm(
                  `Delete ${selectedIds.length} selected permissions?`
                )
              ) {
                deleteMutation.mutate(selectedIds, {
                  onSuccess: () => {},
                });
              }
            }}
            disabled={deleteMutation.isPending}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete ({selectedIds.length})
          </Button>
        )}
      />
    </DataTableWrapper>
  );
}

// FILE: src/features/admin/RoleListPage.tsx
import { RoleList } from "@/features/admin/roles/components/RoleList";

export function RoleListPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Role Management</h1>
        <p className="text-muted-foreground">
          View system roles and their assigned permissions.
        </p>
      </div>
      <RoleList />
    </div>
  );
}

// FILE: src/features/admin/roles/api/useAssignPermissionToRole.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function assignPermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.post(`/admin/roles/${roleId}/permissions`, {
    permissionId,
  });
  return data;
}

export function useAssignPermissionToRole(roleId: string) {
  return useApiMutation({
    mutationFn: (permissionId: string) =>
      assignPermission({ roleId, permissionId }),
    successMessage: "Permission assigned to role.",
    invalidateQueries: [["roles"], ["role", roleId]],
  });
}
// FILE: src/features/admin/roles/api/useRevokePermissionFromRole.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function revokePermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.delete(
    `/admin/roles/${roleId}/permissions/${permissionId}`
  );
  return data;
}

export function useRevokePermissionFromRole(roleId: string) {
  return useApiMutation({
    mutationFn: (permissionId: string) =>
      revokePermission({ roleId, permissionId }),
    successMessage: "Permission revoked from role.",
    invalidateQueries: [["roles"], ["role", roleId]],
  });
}
// FILE: src/features/admin/roles/components/ManageRolePermissions.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useAssignPermissionToRole } from "../api/useAssignPermissionToRole";
import { useRevokePermissionFromRole } from "../api/useRevokePermissionFromRole";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, ChevronsUpDown, XIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";

export function ManageRolePermissions({ role }: { role: any }) {
  const permissionResource = useApiResource("admin/permissions", [
    "permissions",
  ]);
  const { data: permissionsData, isLoading } = permissionResource.useGetAll({
    limit: 100,
  });
  const assignMutation = useAssignPermissionToRole(role.id);
  const revokeMutation = useRevokePermissionFromRole(role.id);
  const [popoverOpen, setPopoverOpen] = useState(false);

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));
  const availablePermissions =
    permissionsData?.data?.filter(
      (permission: any) => !rolePermissionIds.has(permission.id)
    ) || [];

  return (
    <div className="space-y-2">
      <h4 className="font-semibold">Permissions</h4>
      <div className="flex min-h-[60px] flex-wrap items-center gap-1 rounded-md border p-2">
        {role.permissions.length > 0 ? (
          role.permissions.map((permission: any) => (
            <Badge key={permission.id} variant="secondary">
              {permission.action} on {permission.subject}
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => revokeMutation.mutate(permission.id)}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="text-muted-foreground px-2 text-sm">
            No permissions assigned.
          </p>
        )}
      </div>

      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            className="w-full justify-between"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Add a permission..."}
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search permissions..." />
            <CommandList>
              <CommandEmpty>No permissions found.</CommandEmpty>
              <CommandGroup>
                {availablePermissions.map((permission: any) => (
                  <CommandItem
                    key={permission.id}
                    value={`${permission.action} ${permission.subject}`}
                    onSelect={() => {
                      assignMutation.mutate(permission.id);
                      setPopoverOpen(false);
                    }}
                  >
                    <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                    {permission.action} on {permission.subject}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  );
}

// FILE: src/features/admin/roles/components/RoleCard.tsx
import { Badge } from "@/components/ui/badge";
import { useApiResource } from "@/hooks/useApiResource";
import { EntityCard } from "@/components/ui/EntityCard";

interface RoleCardProps {
  role: any;
  onEdit: (roleId: string) => void;
}

export function RoleCard({ role, onEdit }: RoleCardProps) {
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const deleteMutation = roleResource.useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${role.name}" role? This action cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(role.id);
  };

  return (
    <EntityCard
      title={role.name}
      description={role.description || "No description."}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
    >
      <div className="space-y-2">
        <div className="flex flex-wrap items-center gap-1">
          <span className="text-sm font-semibold">Permissions:</span>
          {role.permissions?.length > 0 ? (
            role.permissions.map((p: any) => (
              <Badge variant="outline" key={p.id}>
                {p.action} on {p.subject}
              </Badge>
            ))
          ) : (
            <span className="text-muted-foreground text-sm">None</span>
          )}
        </div>
      </div>
    </EntityCard>
  );
}

// FILE: src/features/admin/roles/components/RoleForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const roleSchema = z.object({
  name: nameSchema("Role"),
  description: descriptionSchema,
});
type RoleFormValues = z.infer<typeof roleSchema>;

interface RoleFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function RoleForm({ initialData, onSuccess }: RoleFormProps) {
  const isEditMode = !!initialData;
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const createMutation = roleResource.useCreate();
  const updateMutation = roleResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<RoleFormValues>({
    resolver: zodResolver(roleSchema),
    defaultValues: { name: "", description: "" },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);

  async function onSubmit(values: RoleFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Role Name"
            placeholder="e.g., Content Manager"
          />
          <FormInput
            name="description"
            label="Description"
            placeholder="What this role can do"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? isEditMode
                ? "Saving..."
                : "Creating..."
              : isEditMode
                ? "Save Changes"
                : "Create Role"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/admin/roles/components/RoleList.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { RoleCard } from "./RoleCard";
import { RoleForm } from "./RoleForm";
import { ManageRolePermissions } from "./ManageRolePermissions";

export function RoleList() {
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const { data, isLoading, isError } = roleResource.useGetAll();
  const [editingRoleId, setEditingRoleId] = useState<string | null>(null);

  if (isLoading) return <div>Loading roles...</div>;
  if (isError) return <div>Error loading roles.</div>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2">
        {data?.data?.map((role: any) => (
          <RoleCard key={role.id} role={role} onEdit={setEditingRoleId} />
        ))}
      </div>
      <ResourceCrudDialog
        resourceId={editingRoleId}
        resourcePath="admin/roles"
        resourceKey={["roles"]}
        title="Edit Role"
        description="Update role details and manage assigned permissions."
        form={RoleForm}
        isOpen={!!editingRoleId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setEditingRoleId(null);
        }}
        dialogClassName="sm:max-w-4xl"
      >
        {(role: any) => <ManageRolePermissions role={role} />}
      </ResourceCrudDialog>
    </>
  );
}

// FILE: src/features/admin/system-status/api/useGetSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getSystemStatus(): Promise<any> {
  const { data } = await api.get("/status");
  return data;
}

export function useGetSystemStatus() {
  return useQuery({
    queryKey: ["systemStatus"],
    queryFn: getSystemStatus,

    refetchInterval: 15000,
  });
}

// FILE: src/features/admin/system-status/components/SystemStatusDashboard.tsx
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";
import { useGetSystemStatus } from "../api/useGetSystemStatus";
const StatusBadge = ({
  status,
}: {
  status: "ok" | "degraded" | "down" | string;
}) => {
  const variant =
    status === "ok"
      ? "default"
      : status === "degraded"
        ? "secondary"
        : "destructive";
  return <Badge variant={variant}>{status}</Badge>;
};
export function SystemStatusDashboard() {
  const { data, isLoading, isError, error } = useGetSystemStatus();
  if (isLoading) {
    return <Skeleton className="h-64 w-full" />;
  }

  if (isError) {
    return (
      <div className="text-destructive">
        Failed to load system status: {error.message}
      </div>
    );
  }

  const { status, timestamp, version, metrics, dependencies } = data;
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Overall Status</span>
            <StatusBadge status={status} />
          </CardTitle>
          <CardDescription>
            Last checked: {new Date(timestamp).toLocaleString("en-US")}
          </CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 gap-4 text-sm md:grid-cols-3">
          <div>
            <strong>Version:</strong> {version.release}
          </div>
          <div>
            <strong>Commit:</strong> {version.commit.substring(0, 7)}
          </div>
          <div>
            <strong>Uptime:</strong> {metrics.uptime}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Dependencies</CardTitle>
          <CardDescription>
            Status of core application dependencies.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Service</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Response Time</TableHead>
                <TableHead>Details</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {Object.entries(dependencies).map(
                ([name, depStatus]: [string, any]) => (
                  <TableRow key={name}>
                    <TableCell className="font-medium capitalize">
                      {name}
                    </TableCell>
                    <TableCell>
                      <StatusBadge status={depStatus.status} />
                    </TableCell>
                    <TableCell>{depStatus.responseTime}</TableCell>
                    <TableCell className="text-muted-foreground text-xs">
                      {depStatus.message || "OK"}
                    </TableCell>
                  </TableRow>
                )
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

// FILE: src/features/admin/UserListPage.tsx
import { UserList } from "@/features/admin/users/components/UserList";
import { Button } from "@/components/ui/button";
import { UserPlus } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateUserForm } from "@/features/admin/users/components/CreateUserForm";

export function UserListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground">View and manage system users.</p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <UserPlus className="mr-2 h-4 w-4" />
              New User
            </Button>
          }
          title="Create New User"
          description="Fill out the form below to create a new user account. An invitation email will be sent for them to set their password."
          form={CreateUserForm}
          resourcePath="admin/users"
          resourceKey={["users"]}
        />
      </div>
      <UserList />
    </div>
  );
}

// FILE: src/features/admin/users/api/useAdminUploadAvatar.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function uploadAvatar(userId: string, formData: FormData): Promise<any> {
  const { data } = await api.patch(`/admin/users/${userId}/avatar`, formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
  return data;
}

export function useAdminUploadAvatar(userId: string) {
  return useApiMutation({
    mutationFn: (formData: FormData) => uploadAvatar(userId, formData),
    successMessage: "Avatar updated successfully!",
    invalidateQueries: [["users"], ["user", userId]],
  });
}

// FILE: src/features/admin/users/api/useHardDeleteUser.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function hardDeleteUser(userId: string): Promise<void> {
  await api.delete(`/admin/users/${userId}/hard`);
}

export function useHardDeleteUser() {
  return useApiMutation({
    mutationFn: hardDeleteUser,
    successMessage: "User permanently deleted.",
    invalidateQueries: [["users"]],
  });
}
// FILE: src/features/admin/users/api/useSetUserStatus.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface SetStatusParams {
  userId: string;
  isActive: boolean;
}

async function setUserStatus({
  userId,
  isActive,
}: SetStatusParams): Promise<any> {
  const { data } = await api.patch(`/admin/users/${userId}/status`, {
    isActive,
  });
  return data;
}

export function useSetUserStatus() {
  return useApiMutation<any, SetStatusParams>({
    mutationFn: setUserStatus,
    invalidateQueries: (data) => [["users"], ["user", data.id]],
  });
}
// FILE: src/features/admin/users/components/CreateUserForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormMultiSelectPopover,
} from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
const createUserSchema = z.object({
  person: z.object({
    firstName: z.string().min(1, "First name is required."),
    lastName: z.string().min(1, "Last name is required."),
    email: z.string().email("A valid email is required."),
  }),
  roles: z.array(z.string()).optional(),
});
type CreateUserFormValues = z.infer<typeof createUserSchema>;

interface CreateUserFormProps {
  onSuccess?: () => void;
}

export function CreateUserForm({ onSuccess }: CreateUserFormProps) {
  const userResource = useApiResource("admin/users", ["users"]);
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const createMutation = userResource.useCreate();
  const { data: rolesData } = roleResource.useGetAll();
  const methods = useForm<CreateUserFormValues>({
    resolver: zodResolver(createUserSchema),
    defaultValues: {
      person: {
        firstName: "",
        lastName: "",
        email: "",
      },
      roles: [],
    },
  });
  async function onSubmit(values: CreateUserFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;
  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="person.firstName"
            label="First Name"
            placeholder="John"
          />
          <FormInput
            name="person.lastName"
            label="Last Name"
            placeholder="Doe"
          />
          <FormInput
            name="person.email"
            label="Email Address"
            placeholder="name@example.com"
          />
          <FormMultiSelectPopover
            name="roles"
            label="Roles"
            placeholder="Select roles"
            options={rolesData?.data || []}
          />

          {errorMessage && (
            <div className="text-sm font-medium text-red-500">
              {errorMessage}
            </div>
          )}
          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending
              ? "Sending Invite..."
              : "Create and Invite User"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/admin/users/components/ManageUserRoles.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { XIcon } from "lucide-react";
import { useState } from "react";
interface ManageUserRolesProps {
  user: any;
}

export function ManageUserRoles({ user }: ManageUserRolesProps) {
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const [selectedRole, setSelectedRole] = useState("");
  const { data: rolesData, isLoading: isLoadingRoles } =
    roleResource.useGetAll();

  const assignRoleMutation = useApiMutation({
    mutationFn: (roleId: string) =>
      api.post(`/admin/users/${user.id}/roles`, { roleId }),
    successMessage: "Role assigned successfully.",
    invalidateQueries: [["users"], ["user", user.id]],
  });

  const removeRoleMutation = useApiMutation({
    mutationFn: (roleId: string) =>
      api.delete(`/admin/users/${user.id}/roles/${roleId}`),
    successMessage: "Role removed successfully.",
    invalidateQueries: [["users"], ["user", user.id]],
  });

  const availableRoles =
    rolesData?.data.filter((role: any) => !user.roles.includes(role.name)) ||
    [];
  const handleAssignRole = () => {
    if (selectedRole) {
      assignRoleMutation.mutate(selectedRole, {
        onSuccess: () => setSelectedRole(""),
      });
    }
  };

  return (
    <div className="space-y-4 rounded-lg border p-4">
      <h4 className="font-semibold">User Roles</h4>
      <div className="flex flex-wrap gap-2">
        {user.roles.length > 0 ? (
          user.roles.map((roleName: string) => (
            <Badge key={roleName} variant="secondary" className="pr-1">
              <span>{roleName}</span>
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => {
                  const role = rolesData?.data.find(
                    (r: any) => r.name === roleName
                  );
                  if (role) removeRoleMutation.mutate(role.id);
                }}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="text-muted-foreground text-sm">No roles assigned.</p>
        )}
      </div>

      <div className="flex items-center gap-2">
        <Select
          value={selectedRole}
          onValueChange={setSelectedRole}
          disabled={availableRoles.length === 0}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a role to add" />
          </SelectTrigger>
          <SelectContent>
            {isLoadingRoles ? (
              <SelectItem value="loading" disabled>
                Loading roles...
              </SelectItem>
            ) : (
              availableRoles.map((role: any) => (
                <SelectItem key={role.id} value={role.id}>
                  {role.name}
                </SelectItem>
              ))
            )}
          </SelectContent>
        </Select>
        <Button
          onClick={handleAssignRole}
          disabled={!selectedRole || assignRoleMutation.isPending}
          size="sm"
        >
          {assignRoleMutation.isPending ? "Adding..." : "Add Role"}
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/admin/users/components/UserForm.tsx
import { useForm, useFieldArray } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect, useMemo } from "react";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { CalendarIcon, Trash2 } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { cn, formatDateForServer, parseServerDate } from "@/lib/utils";
import { format } from "date-fns";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { SocialProvider } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { MultiSelect } from "@/components/ui/MultiSelect";
import { useGetSkills } from "@/features/skills/api/useGetSkills";
import { phoneNumberSchema, socialLinkSchema } from "@/lib/schemas";
import { useUpdateProfile } from "@/features/profile/api/useUpdateProfile";

const userFormSchema = z.object({
  firstName: z.string().min(1, "First name is required."),
  lastName: z.string().min(1, "Last name is required."),
  email: z.string().email(),
  biography: z.string().optional().nullable(),
  phoneNumber: phoneNumberSchema,
  birthday: z.date().nullable().optional(),
  socialLinks: z.array(socialLinkSchema).optional(),
  skillIds: z.array(z.string().uuid()).optional(),
});
type UserFormValues = z.infer<typeof userFormSchema>;

interface UserFormProps {
  user: any;
  onSuccess?: () => void;
  isSelfProfile?: boolean;
}

export function UserForm({
  user,
  onSuccess,
  isSelfProfile = false,
}: UserFormProps) {
  const adminUpdateMutation = useApiResource("admin/users", [
    "users",
  ]).useUpdate();
  const selfUpdateMutation = useUpdateProfile();
  const updateMutation = isSelfProfile
    ? selfUpdateMutation
    : adminUpdateMutation;

  const { data: skillsData, isLoading: isLoadingSkills } = useGetSkills();

  const form = useForm<UserFormValues>({
    resolver: zodResolver(userFormSchema),
  });
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "socialLinks",
  });
  const formData = useMemo(() => {
    if (!user) return null;
    return {
      firstName: user.firstName || "",
      lastName: user.lastName || "",
      email: user.email || "",
      biography: user.biography || "",
      phoneNumber: user.phoneNumber || "",
      birthday: parseServerDate(user.birthday),
      socialLinks: user.socialLinks || [],
      skillIds: user.skills?.map((s: any) => s.id) || [],
    };
  }, [user]);
  useEffect(() => {
    if (formData) {
      form.reset(formData);
    }
  }, [formData, form]);
  const onSubmit = (values: UserFormValues) => {
    const { email, birthday, ...submissionData } = values;
    const formattedData = {
      ...submissionData,
      birthday: formatDateForServer(birthday),
    };
    if (!isSelfProfile) {
      (formattedData as any).email = email;
    }
    const mutationPayload = isSelfProfile
      ? formattedData
      : { id: user.id, data: formattedData };

    updateMutation.mutate(mutationPayload, { onSuccess });
  };
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="w-full space-y-8">
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          <FormField
            control={form.control}
            name="firstName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>First Name</FormLabel>
                <FormControl>
                  <Input placeholder="Your first name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lastName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Last Name</FormLabel>
                <FormControl>
                  <Input placeholder="Your last name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address</FormLabel>
              <FormControl>
                <Input
                  readOnly={isSelfProfile}
                  disabled={isSelfProfile}
                  {...field}
                />
              </FormControl>
              {isSelfProfile && (
                <FormDescription>
                  Your email address cannot be changed from this page.
                </FormDescription>
              )}
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="biography"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Biography</FormLabel>
              <FormControl>
                <RichTextEditor
                  value={field.value ?? ""}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Phone Number</FormLabel>
                <FormControl>
                  <Input
                    placeholder="+1 (555) 123-4567"
                    {...field}
                    value={field.value ?? ""}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="birthday"
            render={({ field }) => (
              <FormItem className="flex flex-col">
                <FormLabel>Date of Birth</FormLabel>
                <Popover>
                  <PopoverTrigger asChild>
                    <FormControl>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full pl-3 text-left font-normal",
                          !field.value && "text-muted-foreground"
                        )}
                      >
                        {field.value ? (
                          format(field.value, "PPP")
                        ) : (
                          <span>Pick a date</span>
                        )}
                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={field.value || undefined}
                      onSelect={field.onChange}
                      disabled={(date) =>
                        date > new Date() || date < new Date("1900-01-01")
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="skillIds"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Skills</FormLabel>
              <MultiSelect
                options={skillsData || []}
                selected={field.value ?? []}
                onChange={field.onChange}
                placeholder={
                  isLoadingSkills ? "Loading skills..." : "Select skills..."
                }
              />
              <FormMessage />
            </FormItem>
          )}
        />

        <div>
          <FormLabel>Social Links</FormLabel>
          <div className="mt-2 space-y-4">
            {fields.map((field, index) => (
              <div key={field.id} className="flex items-center gap-2">
                <FormField
                  control={form.control}
                  name={`socialLinks.${index}.provider`}
                  render={({ field }) => (
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger className="w-[150px]">
                          <SelectValue placeholder="Provider" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {Object.values(SocialProvider).map((p) => (
                          <SelectItem key={p} value={p}>
                            {p}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  )}
                />
                <FormField
                  control={form.control}
                  name={`socialLinks.${index}.url`}
                  render={({ field }) => (
                    <Input
                      {...field}
                      placeholder="https://example.com/username"
                      className="flex-grow"
                    />
                  )}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  onClick={() => remove(index)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </div>
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() =>
                append({ provider: SocialProvider.WEBSITE, url: "" })
              }
            >
              Add Social Link
            </Button>
          </div>
        </div>

        <Button type="submit" disabled={updateMutation.isPending}>
          {updateMutation.isPending ? "Saving..." : "Save Changes"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/admin/users/components/UserList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/ui/DataTable";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { MoreHorizontal, Edit, ShieldAlert } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import { useSetUserStatus } from "../api/useSetUserStatus";
import { useHardDeleteUser } from "../api/useHardDeleteUser";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { UserForm } from "./UserForm";
import { ManageUserRoles } from "./ManageUserRoles";
import { ProfileAvatar } from "@/features/profile/components/ProfileAvatar";
import { Card, CardContent } from "@/components/ui/card";

const UserActionsCell = ({
  user,
  onEdit,
}: {
  user: any;
  onEdit: (id: string) => void;
}) => {
  const userResource = useApiResource("admin/users", ["users"]);
  const deleteUserMutation = userResource.useDelete();
  const hardDeleteUserMutation = useHardDeleteUser();

  const handleDelete = (isHard: boolean) => {
    const action = isHard ? "permanently delete" : "deactivate";
    if (
      window.confirm(`Are you sure you want to ${action} user: ${user.name}?`)
    ) {
      if (isHard) {
        hardDeleteUserMutation.mutate(user.id);
      } else {
        deleteUserMutation.mutate(user.id);
      }
    }
  };
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-8 w-8 p-0">
          <span className="sr-only">Open menu</span>
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuLabel>Actions</DropdownMenuLabel>
        <DropdownMenuItem onClick={() => onEdit(user.id)}>
          <Edit className="mr-2 h-4 w-4" />
          <span>Edit User & Roles</span>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="text-amber-600 focus:text-amber-600"
          onClick={() => handleDelete(false)}
          disabled={deleteUserMutation.isPending}
        >
          <Trash2 className="mr-2 h-4 w-4" />
          <span>Deactivate (Soft Delete)</span>
        </DropdownMenuItem>
        <DropdownMenuItem
          className="text-red-600 focus:text-red-600"
          onClick={() => handleDelete(true)}
          disabled={hardDeleteUserMutation.isPending}
        >
          <ShieldAlert className="mr-2 h-4 w-4" />
          <span>Hard Delete</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};
export function UserList() {
  const [page, setPage] = useState(1);
  const [editingUserId, setEditingUserId] = useState<string | null>(null);
  const userResource = useApiResource("admin/users", ["users"]);
  const deleteMutation = userResource.useDelete();
  const setUserStatusMutation = useSetUserStatus();
  const { data, isLoading, isError } = userResource.useGetAll({
    page,
    limit: 10,
  });
  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "name",
      header: "Name",
      cell: (user) => (
        <div className="flex items-center gap-3">
          <Avatar className="h-9 w-9">
            <AvatarImage src={getAbsoluteUrl(user.avatarUrl)} alt={user.name} />
            <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <span className="font-semibold">{user.name}</span>
        </div>
      ),
    },
    {
      accessorKey: "email",
      header: "Email",
      cell: (user) => user.email,
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: (user) => (
        <div className="flex items-center gap-2">
          <Switch
            checked={user.isActive}
            onCheckedChange={(isActive) =>
              setUserStatusMutation.mutate({ userId: user.id, isActive })
            }
          />
          <Badge
            variant={user.isActive ? "default" : "destructive"}
            className={cn(user.isActive ? "bg-green-500" : "")}
          >
            {user.isActive ? "Active" : "Inactive"}
          </Badge>
        </div>
      ),
    },
    {
      accessorKey: "roles",
      header: "Roles",
      cell: (user) => (
        <div className="flex flex-wrap gap-1">
          {user.roles.map((role: string) => (
            <Badge key={role} variant="secondary">
              {role}
            </Badge>
          ))}
        </div>
      ),
    },
    {
      accessorKey: "createdAt",
      header: "Created At",
      cell: (user) => new Date(user.createdAt).toLocaleDateString("en-US"),
    },
    {
      accessorKey: "actions",
      header: "Actions",
      cell: (user) => <UserActionsCell user={user} onEdit={setEditingUserId} />,
    },
  ];
  if (isLoading) return <div>Loading users...</div>;
  if (isError) return <div>Error loading users.</div>;
  return (
    <>
      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Deactivate ${selectedIds.length} selected users?`
                  )
                ) {
                  deleteMutation.mutate(selectedIds);
                }
              }}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Deactivate ({selectedIds.length})
            </Button>
          )}
        />
      </DataTableWrapper>

      <ResourceCrudDialog
        resourceId={editingUserId}
        resourcePath="admin/users"
        resourceKey={["users"]}
        title="Edit User Profile"
        description="Modify user details and manage their roles."
        form={UserForm}
        formProps={{ isSelfProfile: false }}
        isOpen={!!editingUserId}
        onOpenChange={(isOpen) => !isOpen && setEditingUserId(null)}
        dialogClassName="flex h-full max-h-[90vh] flex-col sm:max-w-5xl"
      >
        {(user) => (
          <div className="space-y-6 lg:col-span-1">
            <Card>
              <CardContent className="flex flex-col items-center pt-8">
                <ProfileAvatar user={user} isSelfProfile={false} />
                <h2 className="mt-4 text-2xl font-semibold">{user?.name}</h2>
                <p className="text-muted-foreground">
                  {user?.roles.join(", ")}
                </p>
              </CardContent>
            </Card>
            <ManageUserRoles user={user} />
          </div>
        )}
      </ResourceCrudDialog>
    </>
  );
}

// FILE: src/features/admin/workflows/api/useGetWorkflowRuns.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getWorkflowRuns(workflowId: string, query: any): Promise<any> {
  const { data } = await api.get(`/admin/workflows/${workflowId}/runs`, {
    params: query,
  });
  return data;
}

export function useGetWorkflowRuns(workflowId: string, query: any) {
  return useQuery<any>({
    queryKey: ["workflow-runs", workflowId, query],
    queryFn: () => getWorkflowRuns(workflowId, query),
    enabled: !!workflowId,
  });
}

// FILE: src/features/admin/workflows/api/useToggleWorkflow.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface ToggleParams {
  workflowId: string;
  enabled: boolean;
}

async function toggleWorkflow({
  workflowId,
  enabled,
}: ToggleParams): Promise<any> {
  const { data } = await api.post(`/admin/workflows/${workflowId}/toggle`, {
    enabled,
  });
  return data;
}

export function useToggleWorkflow() {
  return useApiMutation<any, ToggleParams>({
    mutationFn: toggleWorkflow,
    invalidateQueries: [["workflows"]],
  });
}

// FILE: src/features/admin/workflows/components/action-fields/AddCommentFields.tsx
// FILE: src/features/admin/workflows/components/action-fields/AddCommentFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function AddCommentActionFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.content`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Comment Content</FormLabel>
          <FormControl>
            <Textarea
              placeholder="Enter the comment to add to the task..."
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/action-fields/AssignTaskFields.tsx
// FILE: src/features/admin/workflows/components/action-fields/AssignTaskFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function AssignTaskActionFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.userId`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>User ID to Assign</FormLabel>
          <FormControl>
            <Input
              placeholder="Enter the UUID of the user to assign"
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/action-fields/CreateTaskFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function CreateTaskFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.title`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Task Title</FormLabel>
          <FormControl>
            <Input placeholder="Enter the title for the new task" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/action-fields/SendEmailBrevoFields.tsx
// FILE: src/features/admin/workflows/components/action-fields/SendEmailBrevoFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function SendEmailBrevoFields({ control, index }: ActionFieldProps) {
  return (
    <div className="space-y-4">
      <FormField
        control={control}
        name={`actions.${index}.config.templateId`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Brevo Template ID</FormLabel>
            <FormControl>
              <Input
                type="number"
                placeholder="e.g., 4"
                {...field}
                onChange={(e) => field.onChange(parseInt(e.target.value, 10))}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name={`actions.${index}.config.to`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Recipients (JSON)</FormLabel>
            <FormControl>
              <Textarea
                placeholder={`[{"email": "test@example.com", "name": "Test User"}]`}
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
}

// FILE: src/features/admin/workflows/components/action-fields/SendTelegramMessageFields.tsx
// FILE: src/features/admin/workflows/components/action-fields/SendTelegramMessageFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function SendTelegramMessageFields({
  control,
  index,
}: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.message`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Message</FormLabel>
          <FormControl>
            <Textarea
              placeholder="Enter the message to send. Markdown is supported."
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/action-fields/UpdateTaskStatusFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TaskStatus } from "@/types";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function UpdateTaskStatusFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.status`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>New Status</FormLabel>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder="Select a new status" />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {Object.values(TaskStatus).map((status) => (
                <SelectItem key={status} value={status}>
                  {status}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/admin/workflows/components/ActionRepeater.tsx
// FILE: src/features/admin/workflows/components/ActionRepeater.tsx
import { Control, useWatch } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { WorkflowActionType } from "@/types";
import { UpdateTaskStatusFields } from "./action-fields/UpdateTaskStatusFields";
import { CreateTaskFields } from "./action-fields/CreateTaskFields";
import { AddCommentActionFields } from "./action-fields/AddCommentFields";
import { AssignTaskActionFields } from "./action-fields/AssignTaskFields";
import { SendEmailBrevoFields } from "./action-fields/SendEmailBrevoFields";
import { SendTelegramMessageFields } from "./action-fields/SendTelegramMessageFields";

interface ActionRepeaterProps {
  control: Control<any>;
  index: number;
  remove: (index: number) => void;
}

const actionFieldComponents: Record<string, React.FC<any>> = {
  UPDATE_TASK_STATUS: UpdateTaskStatusFields,
  CREATE_TASK: CreateTaskFields,
  ADD_COMMENT: AddCommentActionFields,
  ASSIGN_TASK: AssignTaskActionFields,
  SEND_EMAIL_BREVO: SendEmailBrevoFields,
  SEND_TELEGRAM_MESSAGE: SendTelegramMessageFields,
};

export function ActionRepeater({
  control,
  index,
  remove,
}: ActionRepeaterProps) {
  const actionType = useWatch({
    control,
    name: `actions.${index}.type`,
  });

  const SpecificFields = actionFieldComponents[actionType as string];

  return (
    <div className="flex items-start gap-4 rounded-md border bg-slate-50 p-4">
      <div className="flex-grow space-y-4">
        <FormField
          control={control}
          name={`actions.${index}.type`}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Action</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an action" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(WorkflowActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </FormItem>
          )}
        />
        {SpecificFields && <SpecificFields control={control} index={index} />}
      </div>
      <Button
        type="button"
        variant="ghost"
        size="icon"
        onClick={() => remove(index)}
        className="mt-8 shrink-0"
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowForm.tsx
import { useForm, useFieldArray } from "react-hook-form";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ActivityActionType, TaskStatus, WorkflowActionType } from "@/types";
import { useApiResource } from "@/hooks/useApiResource";
import { ActionRepeater } from "./ActionRepeater";
import { PlusCircle } from "lucide-react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const createTaskConfigSchema = z.object({
  title: z.string().min(1),
});

const updateTaskStatusConfigSchema = z.object({
  status: z.enum(Object.values(TaskStatus) as [string, ...string[]]),
});

export const AddCommentActionConfigSchema = z.object({
  content: z.string().min(1),
});
export const AssignTaskActionConfigSchema = z.object({
  userId: z.string().uuid(),
});

export const SendTelegramMessageActionConfigSchema = z.object({
  message: z.string().min(1),
});
export const SendEmailBrevoActionConfigSchema = z.object({
  templateId: z.number().int().positive(),
  to: z.array(z.object({ email: z.string().email(), name: z.string() })),
  params: z.record(z.string(), z.unknown()).optional(),
});

const workflowActionSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal(WorkflowActionType.CREATE_TASK),
    config: createTaskConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.UPDATE_TASK_STATUS),
    config: updateTaskStatusConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.ADD_COMMENT),
    config: AddCommentActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.ASSIGN_TASK),
    config: AssignTaskActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.SEND_TELEGRAM_MESSAGE),
    config: SendTelegramMessageActionConfigSchema,
    order: z.number().int().min(0),
  }),

  z.object({
    type: z.literal(WorkflowActionType.SEND_EMAIL_BREVO),
    config: SendEmailBrevoActionConfigSchema,
    order: z.number().int().min(0),
  }),
]);

const workflowSchema = z.object({
  name: z.string().min(1, "Workflow name is required."),
  description: z.string().optional(),
  triggerType: z.nativeEnum(ActivityActionType),
  enabled: z.boolean(),
  actions: z.array(workflowActionSchema),
});
type WorkflowFormValues = z.infer<typeof workflowSchema>;

interface WorkflowFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function WorkflowForm({ initialData, onSuccess }: WorkflowFormProps) {
  const workflowResource = useApiResource("admin/workflows", ["workflows"]);
  const isEditMode = !!initialData;
  const createMutation = workflowResource.useCreate();
  const updateMutation = workflowResource.useUpdate();

  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<WorkflowFormValues>({
    resolver: zodResolver(workflowSchema),
    defaultValues: {
      name: "",
      description: "",
      triggerType: ActivityActionType.TASK_CREATED,
      enabled: true,
      actions: [],
    },
  });

  useEffect(() => {
    if (isEditMode) {
      methods.reset({
        ...initialData,
        description: initialData.description ?? "",
      });
    }
  }, [initialData, isEditMode, methods]);

  const { fields, append, remove } = useFieldArray({
    control: methods.control,
    name: "actions",
  });

  async function onSubmit(values: WorkflowFormValues) {
    const finalValues = {
      ...values,
      actions: values.actions.map((action: any, index: any) => ({
        ...action,
        order: index,
      })),
    };

    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: finalValues },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(finalValues, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <Form {...methods}>
      <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={methods.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Workflow Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Notify on Task Creation" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={methods.control}
          name="triggerType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>When this happens...</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a trigger event" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(ActivityActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <div>
          <h3 className="mb-2 text-sm font-medium">Do this...</h3>
          <div className="space-y-4 rounded-md border p-4">
            {fields.map((field, index) => (
              <ActionRepeater
                key={field.id}
                control={methods.control}
                index={index}
                remove={remove}
              />
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() =>
                append({
                  type: WorkflowActionType.UPDATE_TASK_STATUS,
                  config: { status: TaskStatus.IN_PROGRESS },
                  order: fields.length,
                } as any)
              }
            >
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Action
            </Button>
          </div>
          <FormField
            control={methods.control}
            name="actions"
            render={() => <FormMessage />}
          />
        </div>

        <Button type="submit" className="w-full" disabled={mutation.isPending}>
          {mutation.isPending
            ? "Saving..."
            : isEditMode
              ? "Save Changes"
              : "Create Workflow"}
        </Button>
      </form>
    </Form>
  );
}
// FILE: src/features/admin/workflows/components/WorkflowList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Edit, Eye, Trash2, MoreHorizontal } from "lucide-react";
import { WorkflowRunsDialog } from "./WorkflowRunsDialog";
import { useToggleWorkflow } from "../api/useToggleWorkflow";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { WorkflowForm } from "./WorkflowForm";

export function WorkflowList() {
  const workflowResource = useApiResource("admin/workflows", ["workflows"]);
  const { data, isLoading, isError } = workflowResource.useGetAll();
  const [editingWorkflowId, setEditingWorkflowId] = useState<string | null>(
    null
  );
  const [viewingRunsFor, setViewingRunsFor] = useState<any | null>(null);
  const toggleMutation = useToggleWorkflow();
  const deleteMutation = workflowResource.useDelete();

  if (isLoading) return <div>Loading workflows...</div>;
  if (isError) return <div>Error loading workflows.</div>;
  const handleDelete = (workflow: any) => {
    if (
      window.confirm(
        `Delete workflow "${workflow.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(workflow.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {data?.data.map((workflow: any) => (
          <Card key={workflow.id}>
            <CardHeader>
              <div className="flex items-start justify-between">
                <CardTitle>{workflow.name}</CardTitle>
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2">
                    <span className="text-muted-foreground text-sm">
                      {workflow.enabled ? "Enabled" : "Disabled"}
                    </span>
                    <Switch
                      checked={workflow.enabled}
                      onCheckedChange={(enabled) =>
                        toggleMutation.mutate({
                          workflowId: workflow.id,
                          enabled,
                        })
                      }
                    />
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 p-0"
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        onClick={() => setEditingWorkflowId(workflow.id)}
                      >
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setViewingRunsFor(workflow)}
                      >
                        <Eye className="mr-2 h-4 w-4" />
                        View Runs
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-500"
                        onClick={() => handleDelete(workflow)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-2">
              <p className="text-muted-foreground text-sm">
                {workflow.description}
              </p>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Trigger:</span>
                <Badge variant="outline">{workflow.triggerType}</Badge>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Actions:</span>
                <div className="flex flex-wrap gap-1">
                  {workflow.actions.map((action: any) => (
                    <Badge variant="secondary" key={action.id}>
                      {action.type}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingWorkflowId}
        onOpenChange={(isOpen) => !isOpen && setEditingWorkflowId(null)}
        resourceId={editingWorkflowId}
        resourcePath="admin/workflows"
        resourceKey={["workflows"]}
        title="Edit Workflow"
        description="Modify the workflow's trigger and actions."
        form={WorkflowForm}
        dialogClassName="sm:max-w-[600px]"
      />
      <WorkflowRunsDialog
        isOpen={!!viewingRunsFor}
        workflowId={viewingRunsFor?.id ?? null}
        workflowName={viewingRunsFor?.name ?? ""}
        onOpenChange={(isOpen) => {
          if (!isOpen) {
            setViewingRunsFor(null);
          }
        }}
      />
    </>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunDetail.tsx
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
interface WorkflowRunDetailProps {
  run: any | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-500",
  FAILED: "bg-red-500",
  RUNNING: "bg-blue-500",
};
export function WorkflowRunDetail({
  run,
  isOpen,
  onOpenChange,
}: WorkflowRunDetailProps) {
  if (!run) return null;
  return (
    <Drawer open={isOpen} onOpenChange={onOpenChange}>
      <DrawerContent>
        <div className="mx-auto w-full max-w-2xl">
          <DrawerHeader>
            <div className="flex items-center justify-between">
              <DrawerTitle>Workflow Run: {run.id}</DrawerTitle>
              <Badge className={cn(statusColors[run.status])}>
                {run.status}
              </Badge>
            </div>
            <DrawerDescription>
              Ran at: {new Date(run.startedAt).toLocaleString("en-US")}
            </DrawerDescription>
          </DrawerHeader>
          <div className="grid grid-cols-2 gap-4 px-4 pb-4">
            <div className="space-y-2">
              <h4 className="font-semibold">Trigger Context</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.context, null, 2)}
                </pre>
              </ScrollArea>
            </div>
            <div className="space-y-2">
              <h4 className="font-semibold">Execution Logs</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.logs, null, 2)}
                </pre>
              </ScrollArea>
            </div>
          </div>
        </div>
      </DrawerContent>
    </Drawer>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunList.tsx
import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { useGetWorkflowRuns } from "../api/useGetWorkflowRuns";
import { WorkflowRunDetail } from "./WorkflowRunDetail";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-100 text-green-800",
  FAILED: "bg-red-100 text-red-800",
  RUNNING: "bg-blue-100 text-blue-800",
};
export function WorkflowRunList({ workflowId }: { workflowId: string }) {
  const [selectedRun, setSelectedRun] = useState<any | null>(null);
  const { data, isLoading, isError } = useGetWorkflowRuns(workflowId, {
    page: 1,
    limit: 50,
  });
  if (isLoading) return <div>Loading run history...</div>;
  if (isError) return <div>Error loading run history.</div>;
  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Status</TableHead>
              <TableHead>Started At</TableHead>
              <TableHead>Completed At</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data?.data.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  This workflow has not been run yet.
                </TableCell>
              </TableRow>
            ) : (
              data?.data.map((run: any) => (
                <TableRow key={run.id}>
                  <TableCell>
                    <Badge
                      className={cn(statusColors[run.status])}
                      variant="outline"
                    >
                      {run.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {new Date(run.startedAt).toLocaleString("en-US")}
                  </TableCell>
                  <TableCell>
                    {run.completedAt
                      ? new Date(run.completedAt).toLocaleString("en-US")
                      : "N/A"}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedRun(run)}
                    >
                      View Details
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      <WorkflowRunDetail
        isOpen={!!selectedRun}
        run={selectedRun}
        onOpenChange={(isOpen) => !isOpen && setSelectedRun(null)}
      />
    </>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunsDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { WorkflowRunList } from "./WorkflowRunList";

interface WorkflowRunsDialogProps {
  workflowId: string | null;
  workflowName: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function WorkflowRunsDialog({
  workflowId,
  workflowName,
  isOpen,
  onOpenChange,
}: WorkflowRunsDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Run History: {workflowName}</DialogTitle>
          <DialogDescription>
            A log of all executions for this workflow.
          </DialogDescription>
        </DialogHeader>
        {workflowId && <WorkflowRunList workflowId={workflowId} />}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/announcements/api/useGetActiveAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getActiveAnnouncements(): Promise<any[]> {
  const { data } = await api.get("/announcements/active");
  return data;
}

export function useGetActiveAnnouncements() {
  return useQuery({
    queryKey: ["activeAnnouncements"],
    queryFn: getActiveAnnouncements,

    staleTime: 1000 * 60 * 5,
  });
}

// FILE: src/features/announcements/api/useGetAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getAnnouncements(query: any): Promise<any> {
  const { data } = await api.get("/announcements", { params: query });
  return data;
}

export function useGetAnnouncements(query: any) {
  return useQuery({
    queryKey: ["announcements", query],
    queryFn: () => getAnnouncements(query),
  });
}

async function getAnnouncement(id: string): Promise<any> {
  const { data } = await api.get(`/announcements/${id}`);
  return data;
}

export function useGetAnnouncement(id: string | null) {
  return useQuery<any>({
    queryKey: ["announcement", id],
    queryFn: () => getAnnouncement(id!),

    enabled: !!id,
  });
}

// FILE: src/features/announcements/components/ActiveAnnouncements.tsx
import { useState } from "react";
import { useGetActiveAnnouncements } from "../api/useGetActiveAnnouncements";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Megaphone, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { RichTextOutput } from "@/components/ui/RichTextOutput";
export function ActiveAnnouncements() {
  const { data: announcements, isLoading } = useGetActiveAnnouncements();
  const [dismissedIds, setDismissedIds] = useState<string[]>([]);
  if (isLoading || !announcements || announcements.length === 0) {
    return null;
  }

  const handleDismiss = (id: string) => {
    setDismissedIds((prev) => [...prev, id]);
  };
  const announcementsToShow = announcements.filter(
    (ann) => !dismissedIds.includes(ann.id)
  );
  if (announcementsToShow.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      {announcementsToShow.map((ann) => (
        <Alert key={ann.id}>
          <Megaphone className="h-4 w-4" />
          <div className="flex-grow">
            <AlertTitle className="flex items-center justify-between">
              <span>{ann.title}</span>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => handleDismiss(ann.id)}
              >
                <X className="h-4 w-4" />
              </Button>
            </AlertTitle>
            <AlertDescription>
              {ann.content?.message ? (
                <RichTextOutput html={ann.content.message} />
              ) : (
                "This announcement does not have a detailed message."
              )}
            </AlertDescription>
          </div>
        </Alert>
      ))}
    </div>
  );
}

// FILE: src/features/auth/api/useForgotPassword.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function forgotPassword(email: string): Promise<{ message: string }> {
  const { data } = await api.post("/auth/forgot-password", { email });
  return data;
}

export function useForgotPassword() {
  return useApiMutation<{ message: string }, string>({
    mutationFn: forgotPassword,
    successMessage: (data) => data.message,
  });
}

// FILE: src/features/auth/api/useLogin.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

async function login(credentials: any): Promise<any> {
  const { data } = await api.post("/auth/login", credentials);
  return data;
}

export function useLogin() {
  const navigate = useNavigate();
  const { setAccessToken } = useAuthStore();
  return useApiMutation({
    mutationFn: login,
    onSuccess: (data) => {
      setAccessToken(data.accessToken);
      navigate("/dashboard", { replace: true });
    },
  });
}

// FILE: src/features/auth/api/useLogout.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useQueryClient } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

async function logoutUser() {
  return api.post("/auth/logout");
}

export function useLogout() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);
  return useApiMutation({
    mutationFn: logoutUser,
    successMessage: "You have been successfully logged out.",
    onSuccess: () => {
      queryClient.clear();
      setAccessToken(null);
      navigate("/login", { replace: true });
    },
    errorMessage:
      "Could not contact the server, but you have been logged out locally.",
  });
}

// FILE: src/features/auth/api/useResetPassword.ts
import api from "@/lib/api";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";
interface ResetPasswordData {
  token: string;
  newPassword: string;
}

async function resetPassword(
  resetData: ResetPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("/auth/reset-password", resetData);
  return data;
}

export function useResetPassword() {
  const navigate = useNavigate();
  return useApiMutation({
    mutationFn: resetPassword,
    successMessage: (data) => data.message,
    onSuccess: () => {
      navigate("/login");
    },
  });
}

// FILE: src/features/auth/api/useSetupPassword.ts
import api from "@/lib/api";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";
interface SetupPasswordData {
  token: string;
  newPassword: string;
}

async function setupPassword(
  setupData: SetupPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("/auth/setup-password", setupData);
  return data;
}

export function useSetupPassword() {
  const navigate = useNavigate();
  return useApiMutation({
    mutationFn: setupPassword,
    successMessage: (data) => data.message,
    onSuccess: () => {
      navigate("/login");
    },
  });
}

// FILE: src/features/auth/api/useVerifyResetToken.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function verifyResetToken(token: string): Promise<{ message: string }> {
  const { data } = await api.get(`/auth/reset-password/${token}`);
  return data;
}

export function useVerifyResetToken(token: string | null) {
  return useQuery({
    queryKey: ["verifyResetToken", token],
    queryFn: () => verifyResetToken(token!),
    enabled: !!token,
    retry: false,
    staleTime: Infinity,
    gcTime: Infinity,
  });
}

// FILE: src/features/auth/components/ForgotPasswordForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useForgotPassword } from "../api/useForgotPassword";
import { Link } from "react-router-dom";
const forgotPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
});

type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>;
export function ForgotPasswordForm() {
  const forgotPasswordMutation = useForgotPassword();

  const methods = useForm<ForgotPasswordFormValues>({
    resolver: zodResolver(forgotPasswordSchema),
    defaultValues: { email: "" },
  });
  function onSubmit(values: ForgotPasswordFormValues) {
    forgotPasswordMutation.mutate(values.email);
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Forgot Password?</h1>
        <p className="text-muted-foreground">
          Enter your email and we'll send you a link to reset it.
        </p>
      </div>
      <FormProvider {...methods}>
        <Form {...methods}>
          <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
            <FormInput
              name="email"
              label="Email"
              placeholder="name@example.com"
            />
            <Button
              type="submit"
              className="w-full"
              disabled={forgotPasswordMutation.isPending}
            >
              {forgotPasswordMutation.isPending
                ? "Sending..."
                : "Send Reset Link"}
            </Button>
          </form>
        </Form>
      </FormProvider>
      <div className="mt-4 text-center text-sm">
        <Link to="/login" className="hover:text-primary underline">
          Back to login
        </Link>
      </div>
    </div>
  );
}

// FILE: src/features/auth/components/LoginForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form, FormLabel } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useLogin } from "../api/useLogin";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Link } from "react-router-dom";

const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
  password: z.string().min(1, "Password is required."),
});
type LoginFormValues = z.infer<typeof loginSchema>;

export function LoginForm() {
  const loginMutation = useLogin();
  const methods = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });
  function onSubmit(values: LoginFormValues) {
    loginMutation.mutate(values);
  }

  const getErrorMessage = () => {
    if (!loginMutation.isError || !loginMutation.error) {
      return null;
    }
    const error = loginMutation.error as AxiosError<{ message?: string }>;
    return error.response?.data?.message || "An unexpected error occurred.";
  };

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome Back</h1>
        <p className="text-muted-foreground">
          Enter your credentials to sign in
        </p>
      </div>
      <FormProvider {...methods}>
        <Form {...methods}>
          <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
            <FormInput
              name="email"
              label="Email"
              placeholder="name@example.com"
            />
            <div>
              <div className="flex items-center justify-between">
                <FormLabel>Password</FormLabel>
                <Link
                  to="/forgot-password"
                  className="text-primary text-sm font-medium hover:underline"
                >
                  Forgot Password?
                </Link>
              </div>
              <FormInput
                name="password"
                label=""
                type="password"
                placeholder="••••••••"
                className="mt-2"
              />
            </div>

            {loginMutation.isError && (
              <div className="text-sm font-medium text-red-500">
                {getErrorMessage()}
              </div>
            )}
            <Button
              type="submit"
              className="w-full"
              disabled={loginMutation.isPending}
            >
              {loginMutation.isPending ? "Signing in..." : "Sign In"}
            </Button>
          </form>
        </Form>
      </FormProvider>
    </div>
  );
}

// FILE: src/features/auth/components/ResetPasswordForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useResetPassword } from "../api/useResetPassword";
import { Link, useSearchParams } from "react-router-dom";
import { useEffect } from "react";
import { useVerifyResetToken } from "../api/useVerifyResetToken";
import { Skeleton } from "@/components/ui/skeleton";
const resetPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });
type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>;

export function ResetPasswordForm() {
  const resetPasswordMutation = useResetPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  const { isLoading: isVerifying, isError: isVerificationError } =
    useVerifyResetToken(token);
  const methods = useForm<ResetPasswordFormValues>({
    resolver: zodResolver(resetPasswordSchema),
    defaultValues: {
      token: token || "",
      newPassword: "",
      confirmPassword: "",
    },
  });
  useEffect(() => {
    if (token) {
      methods.setValue("token", token);
    }
  }, [token, methods]);
  function onSubmit(values: ResetPasswordFormValues) {
    resetPasswordMutation.mutate(values);
  }

  if (isVerifying) {
    return (
      <div className="w-full max-w-sm space-y-4">
        <Skeleton className="h-8 w-3/4" />
        <Skeleton className="h-10 w-full" />
        <Skeleton className="h-10 w-full" />
        <Skeleton className="h-10 w-full" />
      </div>
    );
  }

  if (!token || isVerificationError) {
    return (
      <div className="w-full max-w-sm text-center">
        <h2 className="text-destructive text-2xl font-bold">Invalid Token</h2>
        <p className="text-muted-foreground mt-2">
          This password reset link is invalid or has expired.
        </p>
        <Button asChild className="mt-4">
          <Link to="/forgot-password">Request a new link</Link>
        </Button>
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Reset Your Password</h1>
        <p className="text-muted-foreground">
          Enter and confirm your new password.
        </p>
      </div>
      <FormProvider {...methods}>
        <Form {...methods}>
          <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
            <FormInput
              name="newPassword"
              label="New Password"
              type="password"
              placeholder="••••••••"
            />
            <FormInput
              name="confirmPassword"
              label="Confirm New Password"
              type="password"
              placeholder="••••••••"
            />
            <Button
              type="submit"
              className="w-full"
              disabled={resetPasswordMutation.isPending}
            >
              {resetPasswordMutation.isPending
                ? "Resetting..."
                : "Reset Password"}
            </Button>
          </form>
        </Form>
      </FormProvider>
    </div>
  );
}

// FILE: src/features/auth/components/SetupPasswordForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useSetupPassword } from "../api/useSetupPassword";
import { useSearchParams } from "react-router-dom";
import { useEffect } from "react";

const setupPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });
type SetupPasswordFormValues = z.infer<typeof setupPasswordSchema>;

export function SetupPasswordForm() {
  const setupPasswordMutation = useSetupPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  const methods = useForm<SetupPasswordFormValues>({
    resolver: zodResolver(setupPasswordSchema),
    defaultValues: {
      token: token || "",
      newPassword: "",
      confirmPassword: "",
    },
  });
  useEffect(() => {
    if (token) {
      methods.setValue("token", token);
    }
  }, [token, methods]);
  function onSubmit(values: SetupPasswordFormValues) {
    setupPasswordMutation.mutate(values);
  }

  if (!token) {
    return (
      <div className="text-center text-red-500">
        Invalid or missing invitation token. Please contact an administrator.
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome!</h1>
        <p className="text-muted-foreground">
          Set up your password to activate your account.
        </p>
      </div>
      <FormProvider {...methods}>
        <Form {...methods}>
          <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
            <FormInput
              name="newPassword"
              label="New Password"
              type="password"
              placeholder="••••••••"
            />
            <FormInput
              name="confirmPassword"
              label="Confirm New Password"
              type="password"
              placeholder="••••••••"
            />
            <Button
              type="submit"
              className="w-full"
              disabled={setupPasswordMutation.isPending}
            >
              {setupPasswordMutation.isPending
                ? "Setting Password..."
                : "Set Password & Login"}
            </Button>
          </form>
        </Form>
      </FormProvider>
    </div>
  );
}

// FILE: src/features/comments/api/useGetComments.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getComments(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
): Promise<any> {
  const url =
    projectId && workspaceId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments`
      : `/tasks/${taskId}/comments`;
  const { data } = await api.get(url);
  return data;
}

export function useGetComments(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useQuery({
    queryKey: ["comments", taskId],
    queryFn: () => getComments(workspaceId, projectId, taskId),
    enabled: !!taskId,
  });
}

// FILE: src/features/comments/components/CommentItem.tsx
import { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { EditableField } from "@/components/ui/EditableField";
import { RichTextOutput } from "@/components/ui/RichTextOutput";
import { getAbsoluteUrl } from "@/lib/utils";
interface CommentItemProps {
  comment: any;
  workspaceId: string;
  projectId: string;
  taskId: string;
}

export function CommentItem({
  comment,
  workspaceId,
  projectId,
  taskId,
}: CommentItemProps) {
  const [isEditing, setIsEditing] = useState(false);
  const getUrl = (commentId?: string) => {
    const base =
      projectId && workspaceId
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments`
        : `/tasks/${taskId}/comments`;
    return commentId ? `${base}/${commentId}` : base;
  };
  const updateCommentMutation = useApiMutation({
    mutationFn: (data: { commentId: string; content: string }) =>
      api.put(getUrl(data.commentId), { content: data.content }),
    successMessage: "Comment updated.",
    invalidateQueries: [["comments", taskId]],
  });
  const deleteCommentMutation = useApiMutation({
    mutationFn: (commentId: string) => api.delete(getUrl(commentId)),
    successMessage: "Comment deleted.",
    invalidateQueries: [["comments", taskId]],
  });
  const handleSave = (newContent: string) => {
    updateCommentMutation.mutate(
      { commentId: comment.id, content: newContent },
      {
        onSuccess: () => setIsEditing(false),
      }
    );
  };

  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this comment?")) {
      deleteCommentMutation.mutate(comment.id);
    }
  };

  const canEdit = true;

  return (
    <div className="flex items-start gap-3">
      <Avatar className="h-8 w-8">
        <AvatarImage src={getAbsoluteUrl(comment.author.avatarUrl)} />
        <AvatarFallback>{comment.author.name?.charAt(0)}</AvatarFallback>
      </Avatar>
      <div className="w-full">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm font-semibold">{comment.author.name}</span>
            <span className="text-muted-foreground text-xs">
              {new Date(comment.createdAt).toLocaleString("en-US")}
            </span>
          </div>
          {canEdit && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="h-6 w-6">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem onClick={() => setIsEditing(true)}>
                  <Edit className="mr-2 h-4 w-4" />
                  Edit
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="text-red-500"
                  onClick={handleDelete}
                  disabled={deleteCommentMutation.isPending}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>
        <div className="mt-1 rounded-md bg-gray-100 p-2 text-sm">
          {isEditing ? (
            <EditableField
              initialValue={comment.content}
              onSave={handleSave}
              as="richtext"
            />
          ) : (
            <RichTextOutput
              html={comment.content}
              className="prose prose-sm max-w-none"
            />
          )}
        </div>
      </div>
    </div>
  );
}

// FILE: src/features/comments/components/CommentSection.tsx
// FILE: src/features/comments/components/CommentSection.tsx
import { Button } from "@/components/ui/button";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { useGetComments } from "../api/useGetComments";
import { useState, useCallback } from "react";
import { useSocketSubscription } from "@/hooks/useSocketSubscription";
import { useQueryClient } from "@tanstack/react-query";
import { CommentItem } from "./CommentItem";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
export function CommentSection({ workspaceId, projectId, taskId }: any) {
  const queryClient = useQueryClient();
  const { data: commentsData, isLoading } = useGetComments(
    workspaceId,
    projectId,
    taskId
  );
  const getUrl = () =>
    projectId && workspaceId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/comments`
      : `/tasks/${taskId}/comments`;

  const addCommentMutation = useApiMutation({
    mutationFn: (content: string) => api.post(getUrl(), { content }),
    successMessage: "Comment posted.",
    invalidateQueries: [["comments", taskId]],
  });
  const [newComment, setNewComment] = useState("");
  const handleCommentUpdate = useCallback(
    (event: any) => {
      const { action, comment } = event.payload;
      queryClient.setQueryData(["comments", taskId], (oldData: any) => {
        if (!oldData) return oldData;
        let newComments;
        if (action === "created") {
          newComments = [comment, ...oldData.data];
        } else {
          newComments = oldData.data;
        }
        return { ...oldData, data: newComments };
      });
    },
    [queryClient, taskId]
  );
  useSocketSubscription("Project", projectId, {
    COMMENT_UPDATED: handleCommentUpdate,
  });
  const isCommentEmpty = () => {
    if (!newComment) return true;
    const cleaned = newComment.replace(/<p><\/p>/g, "").trim();
    return cleaned.length === 0;
  };

  const handleAddComment = () => {
    if (!isCommentEmpty()) {
      addCommentMutation.mutate(newComment, {
        onSuccess: () => setNewComment(""),
      });
    }
  };

  if (isLoading) return <div>Loading comments...</div>;

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Comments</h3>
      <div className="space-y-4">
        {commentsData?.data?.map((comment: any) => (
          <CommentItem
            key={comment.id}
            comment={comment}
            workspaceId={workspaceId}
            projectId={projectId}
            taskId={taskId}
          />
        ))}
      </div>
      <div className="space-y-2">
        <RichTextEditor
          value={newComment}
          onChange={setNewComment}
          projectId={projectId}
          workspaceId={workspaceId}
        />
        <Button
          onClick={handleAddComment}
          disabled={addCommentMutation.isPending || isCommentEmpty()}
        >
          {addCommentMutation.isPending ? "Posting..." : "Post Comment"}
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/crm/api/useGetCompanies.ts
// FILE: src/features/crm/api/useGetCompanies.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getCompanies(query?: any): Promise<any> {
  const { data } = await api.get("/companies", { params: query });
  return data;
}

export function useGetCompanies(query?: any) {
  return useQuery({
    queryKey: ["companies", query],
    queryFn: () => getCompanies(query),
  });
}

// FILE: src/features/crm/api/useManageCompanyPeople.ts
// FILE: src/features/crm/api/useManageCompanyPeople.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface AddPersonParams {
  companyId: string;
  personId: string;
  role?: string;
}

async function addPersonToCompany({
  companyId,
  personId,
  role,
}: AddPersonParams) {
  const { data } = await api.post(`/companies/${companyId}/people`, {
    personId,
    role,
  });
  return data;
}

interface RemovePersonParams {
  companyId: string;
  personId: string;
}

async function removePersonFromCompany({
  companyId,
  personId,
}: RemovePersonParams) {
  const { data } = await api.delete(
    `/companies/${companyId}/people/${personId}`
  );
  return data;
}

export function useManageCompanyPeople(companyId: string) {
  const addPersonMutation = useApiMutation<
    any,
    Omit<AddPersonParams, "companyId">
  >({
    mutationFn: (params) => addPersonToCompany({ companyId, ...params }),
    successMessage: "Person added to company.",
    invalidateQueries: [["companies"], ["company", companyId], ["people"]],
  });

  const removePersonMutation = useApiMutation<any, string>({
    mutationFn: (personId) => removePersonFromCompany({ companyId, personId }),
    successMessage: "Person removed from company.",
    invalidateQueries: [["companies"], ["company", companyId], ["people"]],
  });

  return {
    addPerson: addPersonMutation.mutate,
    removePerson: removePersonMutation.mutate,
    isLoading: addPersonMutation.isPending || removePersonMutation.isPending,
  };
}

// FILE: src/features/crm/components/CompanyCard.tsx
// FILE: src/features/crm/components/CompanyCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

interface CompanyCardProps {
  company: any;
  onSelect: () => void;
}

export function CompanyCard({ company, onSelect }: CompanyCardProps) {
  return (
    <Card
      className="hover:border-primary cursor-pointer transition-colors"
      onClick={onSelect}
    >
      <CardHeader className="flex flex-row items-center gap-4">
        <Avatar className="h-12 w-12">
          <AvatarFallback>{company.name?.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <CardTitle className="text-base">{company.name}</CardTitle>
          <CardDescription className="text-xs">
            {company.domain}
          </CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-muted-foreground truncate text-sm">
          {company.description || "No description."}
        </p>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/crm/components/CompanyDetailContent.tsx
// FILE: src/features/crm/components/CompanyDetailContent.tsx
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Globe } from "lucide-react";
import { RichTextOutput } from "@/components/ui/RichTextOutput";
import { Company } from "../crm.types";
import { ManageCompanyPeople } from "./ManageCompanyPeople";

function InfoItem({
  icon: Icon,
  label,
  value,
  href,
}: {
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  href?: string;
}) {
  if (!value) return null;
  const content = (
    <div className="flex items-start gap-4">
      <Icon className="text-muted-foreground mt-1 h-5 w-5 flex-shrink-0" />
      <div className="flex-1">
        <p className="text-sm font-medium">{value}</p>
        <p className="text-muted-foreground text-xs">{label}</p>
      </div>
    </div>
  );
  if (href) {
    return (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="hover:bg-accent block rounded-md p-2 transition-colors"
      >
        {content}
      </a>
    );
  }

  return <div className="p-2">{content}</div>;
}

export function CompanyDetailContent({ company }: { company: Company }) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center space-y-2 text-center">
        <Avatar className="h-24 w-24 border">
          <AvatarFallback className="text-4xl">
            {company.name?.charAt(0)}
          </AvatarFallback>
        </Avatar>
        <div>
          <h2 className="text-2xl font-bold">{company.name}</h2>
          <p className="text-muted-foreground text-sm">{company.domain}</p>
        </div>
      </div>

      <hr />

      {company.description && (
        <>
          <div className="space-y-2 px-2">
            <h3 className="text-muted-foreground text-sm font-semibold">
              About
            </h3>
            <div className="prose prose-sm dark:prose-invert max-w-none">
              <RichTextOutput html={company.description} />
            </div>
          </div>
          <hr />
        </>
      )}

      <div className="space-y-4">
        <h3 className="text-muted-foreground px-2 text-sm font-semibold">
          Details
        </h3>
        <div className="space-y-1">
          <InfoItem
            icon={Globe}
            label="Website"
            value={company.domain}
            href={company.domain ? `https://${company.domain}` : undefined}
          />
        </div>
      </div>
      <hr />

      <div className="px-2">
        <ManageCompanyPeople company={company} />
      </div>
    </div>
  );
}

// FILE: src/features/crm/components/CompanyDetailPanel.tsx
// FILE: src/features/crm/components/CompanyDetailPanel.tsx
import { Sheet, SheetContent, SheetFooter } from "@/components/ui/sheet";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CompanyForm } from "./CompanyForm";
import { CompanyDetailContent } from "./CompanyDetailContent";

interface CompanyDetailPanelProps {
  companyId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex flex-col items-center gap-4 pt-4">
      <Skeleton className="h-24 w-24 rounded-full" />
      <div className="w-full space-y-2">
        <Skeleton className="mx-auto h-7 w-48" />
        <Skeleton className="mx-auto h-4 w-32" />
      </div>
    </div>
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-20 w-full" />
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-12 w-full" />
  </div>
);
export function CompanyDetailPanel({
  companyId,
  onOpenChange,
}: CompanyDetailPanelProps) {
  const companyResource = useApiResource("companies", ["companies"]);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const { data: company, isLoading } = companyResource.useGetOne(companyId);
  const deleteMutation = companyResource.useDelete();
  const handleDelete = () => {
    if (
      company &&
      window.confirm(`Are you sure you want to delete ${company.name}?`)
    ) {
      deleteMutation.mutate(company.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <>
      <Sheet open={!!companyId} onOpenChange={onOpenChange}>
        <SheetContent className="flex w-full flex-col p-0 sm:max-w-lg">
          {isLoading ? (
            <PanelSkeleton />
          ) : company ? (
            <>
              <div className="flex-1 overflow-y-auto p-6">
                <CompanyDetailContent company={company} />
              </div>
              <SheetFooter className="bg-background mt-auto border-t p-4">
                <div className="flex w-full justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditDialogOpen(true)}
                  >
                    <Edit className="mr-2 h-4 w-4" /> Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                    disabled={deleteMutation.isPending}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    {deleteMutation.isPending ? "Deleting..." : "Delete"}
                  </Button>
                </div>
              </SheetFooter>
            </>
          ) : (
            <div className="flex h-full items-center justify-center">
              <p>Could not load company details.</p>
            </div>
          )}
        </SheetContent>
      </Sheet>
      <ResourceCrudDialog
        isOpen={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        title="Edit Company"
        description="Make changes to the company's details."
        form={CompanyForm}
        resourcePath="companies"
        resourceKey={["companies"]}
        resourceId={company?.id}
      />
    </>
  );
}

// FILE: src/features/crm/components/CompanyForm.tsx
// FILE: src/features/crm/components/CompanyForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const companySchema = z.object({
  name: nameSchema("Company name"),
  description: descriptionSchema,
  domain: z.string().optional().nullable(),
});
type CompanyFormValues = z.infer<typeof companySchema>;

interface CompanyFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function CompanyForm({ initialData, onSuccess }: CompanyFormProps) {
  const companyResource = useApiResource("companies", ["companies"]);
  const isEditMode = !!initialData;
  const createMutation = companyResource.useCreate();
  const updateMutation = companyResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<CompanyFormValues>({
    resolver: zodResolver(companySchema),
    defaultValues: initialData || {
      name: "",
      description: "",
      domain: "",
    },
  });
  useEffect(() => {
    if (initialData) {
      methods.reset(initialData);
    }
  }, [initialData, methods]);
  async function onSubmit(values: CompanyFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput name="name" label="Company Name" placeholder="Acme Inc." />
          <FormInput
            name="domain"
            label="Website Domain (Optional)"
            placeholder="acme.com"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short summary of the company"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Company"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/crm/components/ManageCompanyPeople.tsx
// FILE: src/features/crm/components/ManageCompanyPeople.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useManageCompanyPeople } from "../api/useManageCompanyPeople";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Check, UserPlus, XIcon } from "lucide-react";
import { getAbsoluteUrl } from "@/lib/utils";
import { Company } from "../crm.types";

interface ManageCompanyPeopleProps {
  company: Company;
}

export function ManageCompanyPeople({ company }: ManageCompanyPeopleProps) {
  const { data: peopleData, isLoading: isLoadingPeople } = useApiResource(
    "people",
    ["people"]
  ).useGetAll({ limit: 1000 });
  const {
    addPerson,
    removePerson,
    isLoading: isMutating,
  } = useManageCompanyPeople(company.id);

  const memberIds = new Set(company.people.map((p) => p.id));
  const availablePeople =
    peopleData?.data.filter((person: any) => !memberIds.has(person.id)) || [];

  return (
    <div className="space-y-4">
      <div>
        <h4 className="font-semibold">Team Members</h4>
        <div className="mt-2 space-y-2">
          {company.people.length > 0 ? (
            company.people.map((person) => (
              <div
                key={person.id}
                className="flex items-center justify-between"
              >
                <div className="flex items-center gap-2">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={getAbsoluteUrl(person.avatarUrl)} />
                    <AvatarFallback>
                      {person.firstName?.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <p className="text-sm font-medium">{`${person.firstName} ${person.lastName}`}</p>
                    <p className="text-muted-foreground text-xs">
                      {person.roleInCompany || "Member"}
                    </p>
                  </div>
                </div>
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={() => removePerson(person.id)}
                  disabled={isMutating}
                >
                  <XIcon className="h-4 w-4" />
                </Button>
              </div>
            ))
          ) : (
            <p className="text-muted-foreground text-sm">
              No people linked to this company.
            </p>
          )}
        </div>
      </div>

      <div>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className="w-full"
              disabled={isLoadingPeople}
            >
              <UserPlus className="mr-2 h-4 w-4" />
              Add Person
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
            <Command>
              <CommandInput placeholder="Search people..." />
              <CommandList>
                <CommandEmpty>No people found.</CommandEmpty>
                <CommandGroup>
                  {availablePeople.map((person: any) => (
                    <CommandItem
                      value={`${person.firstName} ${person.lastName}`}
                      key={person.id}
                      onSelect={() => {
                        addPerson({ personId: person.id });
                      }}
                    >
                      <Check className="mr-2 h-4 w-4 opacity-0" />
                      {`${person.firstName} ${person.lastName}`}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/crm/components/PersonCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { getAbsoluteUrl } from "@/lib/utils";
interface PersonCardProps {
  person: any;
  onSelect: () => void;
}

export function PersonCard({ person, onSelect }: PersonCardProps) {
  return (
    <Card
      className="hover:border-primary cursor-pointer transition-colors"
      onClick={onSelect}
    >
      <CardHeader className="flex flex-row items-center gap-4">
        <Avatar className="h-12 w-12">
          <AvatarImage
            src={getAbsoluteUrl(person.avatarUrl)}
            alt={person.name}
          />
          <AvatarFallback>{person.name?.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <CardTitle className="text-base">{person.name}</CardTitle>
          <CardDescription className="text-xs">{person.email}</CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-wrap gap-1">
          {person.roles.map((role: string) => (
            <Badge key={role} variant="secondary">
              {role}
            </Badge>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/crm/components/PersonDetailContent.tsx
// FILE: src/features/crm/components/PersonDetailContent.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  Cake,
  ExternalLink,
  Github,
  Globe,
  Linkedin,
  Mail,
  Phone,
  Twitter,
  Building2,
} from "lucide-react";
import { format } from "date-fns";
import { RichTextOutput } from "@/components/ui/RichTextOutput";
import { getAbsoluteUrl } from "@/lib/utils";

const socialIcons: Record<string, React.ElementType> = {
  LINKEDIN: Linkedin,
  TWITTER: Twitter,
  GITHUB: Github,
  WEBSITE: Globe,
  OTHER: ExternalLink,
};

function InfoItem({
  icon: Icon,
  label,
  value,
  href,
}: {
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  href?: string;
}) {
  if (!value) return null;
  const content = (
    <div className="flex items-start gap-4">
      <Icon className="text-muted-foreground mt-1 h-5 w-5 flex-shrink-0" />
      <div className="flex-1">
        <p className="text-sm font-medium">{value}</p>
        <p className="text-muted-foreground text-xs">{label}</p>
      </div>
    </div>
  );
  if (href) {
    return (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="hover:bg-accent block rounded-md p-2 transition-colors"
      >
        {content}
      </a>
    );
  }

  return <div className="p-2">{content}</div>;
}

export function PersonDetailContent({ person }: { person: any }) {
  const name = `${person.firstName} ${person.lastName}`;
  const roles = person.roles?.join(", ") || "Contact";

  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center space-y-2 text-center">
        <Avatar className="h-24 w-24 border">
          <AvatarImage
            src={getAbsoluteUrl(person.avatarUrl)}
            alt={name}
            className="h-full w-full object-cover"
          />
          <AvatarFallback className="text-4xl">
            {name?.charAt(0)}
          </AvatarFallback>
        </Avatar>
        <div>
          <h2 className="text-2xl font-bold">{name}</h2>
          <p className="text-muted-foreground text-sm">{roles}</p>
        </div>
      </div>

      <hr />

      <div className="space-y-4">
        <h3 className="text-muted-foreground px-2 text-sm font-semibold">
          Contact Information
        </h3>
        <div className="space-y-1">
          <InfoItem
            icon={Mail}
            label="Email"
            value={person.email}
            href={person.email ? `mailto:${person.email}` : undefined}
          />
          <InfoItem
            icon={Phone}
            label="Phone"
            value={person.phoneNumber}
            href={person.phoneNumber ? `tel:${person.phoneNumber}` : undefined}
          />
          <InfoItem
            icon={Cake}
            label="Birthday"
            value={person.birthday && format(new Date(person.birthday), "PPP")}
          />
        </div>
      </div>

      {person.companies?.length > 0 && (
        <>
          <hr />
          <div className="space-y-4">
            <h3 className="text-muted-foreground px-2 text-sm font-semibold">
              Companies
            </h3>
            <div className="space-y-1">
              {person.companies.map((link: any) => (
                <InfoItem
                  key={link.companyId}
                  icon={Building2}
                  label={link.role || "Member"}
                  value={link.company.name}
                />
              ))}
            </div>
          </div>
        </>
      )}

      {person.biography && (
        <>
          <hr />
          <div className="space-y-2 px-2">
            <h3 className="text-muted-foreground text-sm font-semibold">
              Biography
            </h3>
            <div className="prose prose-sm dark:prose-invert max-w-none">
              <RichTextOutput html={person.biography} />
            </div>
          </div>
        </>
      )}

      {person.socialLinks?.length > 0 && (
        <>
          <hr />
          <div className="space-y-4">
            <h3 className="text-muted-foreground px-2 text-sm font-semibold">
              On the Web
            </h3>
            <div className="space-y-1">
              {person.socialLinks.map((link: any) => {
                const Icon = socialIcons[link.provider] || ExternalLink;
                return (
                  <InfoItem
                    key={link.id}
                    icon={Icon}
                    label={link.provider}
                    value={<span className="truncate">{link.url}</span>}
                    href={link.url}
                  />
                );
              })}
            </div>
          </div>
        </>
      )}

      {person.skills?.length > 0 && (
        <>
          <hr />
          <div className="space-y-2 px-2">
            <h3 className="text-muted-foreground text-sm font-semibold">
              Skills
            </h3>
            <div className="flex flex-wrap gap-2 pt-2">
              {person.skills.map((skill: any) => (
                <Badge key={skill.id} variant="secondary">
                  {skill.name}
                </Badge>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
}

// FILE: src/features/crm/components/PersonDetailPanel.tsx
import { Sheet, SheetContent, SheetFooter } from "@/components/ui/sheet";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import { PersonDetailContent } from "./PersonDetailContent";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { PersonForm } from "./PersonForm";

interface PersonDetailPanelProps {
  personId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex flex-col items-center gap-4 pt-4">
      <Skeleton className="h-24 w-24 rounded-full" />
      <div className="w-full space-y-2">
        <Skeleton className="mx-auto h-7 w-48" />
        <Skeleton className="mx-auto h-4 w-32" />
      </div>
    </div>
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-20 w-full" />
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-12 w-full" />
  </div>
);
export function PersonDetailPanel({
  personId,
  onOpenChange,
}: PersonDetailPanelProps) {
  const personResource = useApiResource("people", ["people"]);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const { data: person, isLoading } = personResource.useGetOne(personId);
  const deleteMutation = personResource.useDelete();
  const handleDelete = () => {
    if (
      person &&
      window.confirm(`Are you sure you want to delete ${person.name}?`)
    ) {
      deleteMutation.mutate(person.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <>
      <Sheet open={!!personId} onOpenChange={onOpenChange}>
        <SheetContent className="flex w-full flex-col p-0 sm:max-w-lg">
          {isLoading ? (
            <PanelSkeleton />
          ) : person ? (
            <>
              <div className="flex-1 overflow-y-auto p-6">
                <PersonDetailContent person={person} />
              </div>
              <SheetFooter className="bg-background mt-auto border-t p-4">
                <div className="flex w-full justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditDialogOpen(true)}
                  >
                    <Edit className="mr-2 h-4 w-4" /> Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                    disabled={deleteMutation.isPending}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    {deleteMutation.isPending ? "Deleting..." : "Delete"}
                  </Button>
                </div>
              </SheetFooter>
            </>
          ) : (
            <div className="flex h-full items-center justify-center">
              <p>Could not load person details.</p>
            </div>
          )}
        </SheetContent>
      </Sheet>
      <ResourceCrudDialog
        isOpen={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        title="Edit Person"
        description="Make changes to the person's details."
        form={PersonForm}
        resourcePath="people"
        resourceKey={["people"]}
        resourceId={person?.id}
      />
    </>
  );
}

// FILE: src/features/crm/components/PersonForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { requiredStringSchema } from "@/lib/schemas";

const personSchema = z.object({
  firstName: requiredStringSchema("First name"),
  lastName: requiredStringSchema("Last name"),
  email: z
    .string()
    .email("A valid email is required.")
    .optional()
    .or(z.literal("")),
});
type PersonFormValues = z.infer<typeof personSchema>;

interface PersonFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function PersonForm({ initialData, onSuccess }: PersonFormProps) {
  const personResource = useApiResource("people", ["people"]);
  const isEditMode = !!initialData;
  const createMutation = personResource.useCreate();
  const updateMutation = personResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<PersonFormValues>({
    resolver: zodResolver(personSchema),
    defaultValues: initialData || {
      firstName: "",
      lastName: "",
      email: "",
    },
  });
  useEffect(() => {
    if (initialData) {
      methods.reset(initialData);
    }
  }, [initialData, methods]);
  async function onSubmit(values: PersonFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput name="firstName" label="First Name" placeholder="John" />
          <FormInput name="lastName" label="Last Name" placeholder="Doe" />
          <FormInput
            name="email"
            label="Email Address (Optional)"
            placeholder="name@example.com"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Person"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/crm/components/PersonList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { useDebounce } from "@/hooks/useDebounce";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { EmptyState } from "@/components/ui/empty-state";
import { Contact, Trash2 } from "lucide-react";
import {
  DataTable,
  ColumnDef,
  DataTableWrapper,
} from "@/components/ui/DataTable";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { cn, getAbsoluteUrl } from "@/lib/utils";

interface PersonListProps {
  onPersonSelect: (personId: string) => void;
}

const PersonListSkeleton = () => (
  <div className="space-y-2">
    {Array.from({ length: 8 }).map((_, i) => (
      <Skeleton key={i} className="h-12 w-full rounded-lg" />
    ))}
  </div>
);
export function PersonList({ onPersonSelect }: PersonListProps) {
  const personResource = useApiResource("people", ["people"]);
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const debouncedSearchTerm = useDebounce(searchTerm, 300);
  const deleteMutation = personResource.useDelete();
  const { data, isLoading, isError } = personResource.useGetAll({
    search: debouncedSearchTerm,
    page,
    limit: 10,
  });
  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "name",
      header: "Name",
      cell: (person) => (
        <div
          className="flex cursor-pointer items-center gap-3"
          onClick={() => onPersonSelect(person.id)}
        >
          <Avatar className="h-9 w-9">
            <AvatarImage
              src={getAbsoluteUrl(person.avatarUrl)}
              alt={`${person.firstName} ${person.lastName}`}
              className="h-full w-full object-cover"
            />
            <AvatarFallback>{person.firstName?.charAt(0)}</AvatarFallback>
          </Avatar>
          <span className="font-medium">{`${person.firstName} ${person.lastName}`}</span>
        </div>
      ),
    },
    {
      accessorKey: "email",
      header: "Email",
      cell: (person) => (
        <div onClick={() => onPersonSelect(person.id)}>{person.email}</div>
      ),
    },
    {
      accessorKey: "roles",
      header: "Roles",
      cell: (person) => (
        <div
          className="flex flex-wrap gap-1"
          onClick={() => onPersonSelect(person.id)}
        >
          {person.roles.map((role: string) => (
            <Badge key={role} variant="secondary">
              {role}
            </Badge>
          ))}
        </div>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: (person) => (
        <div onClick={() => onPersonSelect(person.id)}>
          <Badge
            variant={person.isActive ? "default" : "destructive"}
            className={cn(
              "pointer-events-none",
              person.isActive ? "bg-green-500" : ""
            )}
          >
            {person.isActive ? "Active" : "Inactive"}
          </Badge>
        </div>
      ),
    },
  ];
  if (isLoading) return <PersonListSkeleton />;

  if (!isLoading && (!data || data.data.length === 0)) {
    return (
      <EmptyState
        icon={<Contact />}
        title="No People Found"
        description="No one matches your search criteria, or no people have been added yet."
      />
    );
  }

  if (isError) return <div>Error loading people.</div>;

  return (
    <div className="space-y-4">
      <Input
        placeholder="Search by name or email..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="max-w-sm"
      />

      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Delete ${selectedIds.length} selected people? This may include users and cannot be undone.`
                  )
                ) {
                  deleteMutation.mutate(selectedIds);
                }
              }}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete ({selectedIds.length})
            </Button>
          )}
        />
      </DataTableWrapper>
    </div>
  );
}

// FILE: src/features/crm/crm.types.ts
// FILE: src/features/crm/crm.types.ts
import { z } from "zod";

export const PersonInCompanySchema = z.object({
  id: z.string().uuid(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().email().nullable(),
  avatarUrl: z.string().url().nullable(),
  roleInCompany: z.string().nullable(),
});

export const CompanySchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  description: z.string().nullable(),
  domain: z.string().nullable(),
  logoUrl: z.string().url().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  people: z.array(PersonInCompanySchema),
});
export type Company = z.infer<typeof CompanySchema>;

// FILE: src/features/custom-fields/components/CustomFieldDefinitionForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormSelect,
  FormTextarea,
} from "@/components/form/FormFields";
import { CustomFieldType } from "@/types";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";

interface FormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CustomFieldDefinitionForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: FormProps) {
  const isEditMode = !!initialData;
  const customFieldResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    ["customFieldDefinitions", projectId]
  );
  const createMutation = customFieldResource.useCreate();
  const updateMutation = customFieldResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<any>({
    defaultValues: {
      name: "",
      type: CustomFieldType.TEXT,
      options: { values: [] },
    },
  });
  const selectedType = methods.watch("type");

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        ...initialData,
        options: {
          values: initialData.options?.values || [],
        },
      });
    }
  }, [initialData, isEditMode, methods]);
  const onSubmit = (values: any) => {
    const basePayload: { name: string; type: string; options?: any } = {
      name: values.name,
      type: values.type,
    };
    if (values.type === "SELECT") {
      basePayload.options = {
        values:
          typeof values.options.values === "string"
            ? values.options.values
                .split(",")
                .map((s: string) => s.trim())
                .filter(Boolean)
            : values.options.values,
      };
    }

    if (isEditMode) {
      updateMutation.mutate(
        { id: initialData.id, data: basePayload },
        { onSuccess }
      );
    } else {
      createMutation.mutate(basePayload, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  };

  const fieldTypeOptions = Object.values(CustomFieldType).map((type) => ({
    value: type,
    label: type,
  }));
  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Field Name"
            placeholder="e.g., Story Points"
          />
          <FormSelect
            name="type"
            label="Field Type"
            placeholder="Select a field type"
            options={fieldTypeOptions}
            disabled={isEditMode}
          />

          {selectedType === "SELECT" && (
            <FormTextarea
              name="options.values"
              label="Options"
              placeholder="Enter comma-separated values, e.g., Low, Medium, High"
              value={
                Array.isArray(methods.watch("options.values"))
                  ? methods.watch("options.values").join(", ")
                  : methods.watch("options.values")
              }
            />
          )}
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Field"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/custom-fields/components/CustomFieldDefinitionList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CustomFieldDefinitionForm } from "./CustomFieldDefinitionForm";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

export function CustomFieldDefinitionList({
  workspaceId,
  projectId,
}: ListProps) {
  const customFieldResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    ["customFieldDefinitions", projectId]
  );
  const { data: fieldsData, isLoading } = customFieldResource.useGetAll();
  const deleteMutation = customFieldResource.useDelete();
  const [editingFieldId, setEditingFieldId] = useState<string | null>(null);
  const handleDelete = (field: any) => {
    if (
      window.confirm(`Delete custom field "${field.name}"? This is permanent.`)
    ) {
      deleteMutation.mutate(field.id);
    }
  };

  if (isLoading) return <div>Loading custom fields...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Type</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {fieldsData?.data && fieldsData.data.length > 0 ? (
              fieldsData.data.map((field: any) => (
                <TableRow key={field.id}>
                  <TableCell className="font-medium">{field.name}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{field.type}</Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem
                          onClick={() => setEditingFieldId(field.id)}
                        >
                          <Edit className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          className="text-red-500"
                          onClick={() => handleDelete(field)}
                          disabled={deleteMutation.isPending}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={3} className="h-24 text-center">
                  No custom fields defined for this project.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <ResourceCrudDialog
        isOpen={!!editingFieldId}
        onOpenChange={(isOpen) => !isOpen && setEditingFieldId(null)}
        resourceId={editingFieldId}
        resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/custom-fields`}
        resourceKey={["customFieldDefinitions", projectId]}
        title="Edit Custom Field"
        description="Change the name or options for this custom field. The type cannot be changed after creation."
        form={CustomFieldDefinitionForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}

// FILE: src/features/dashboards/components/CreateDashboardForm.tsx
// FILE: src/features/dashboards/components/CreateDashboardForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const dashboardSchema = z.object({
  name: nameSchema("Dashboard"),
  description: descriptionSchema,
});
type DashboardFormValues = z.infer<typeof dashboardSchema>;

interface DashboardFormProps {
  workspaceId: string;
  projectId?: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CreateDashboardForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: DashboardFormProps) {
  const isEditMode = !!initialData;

  const resourceUrl = projectId
    ? `/workspaces/${workspaceId}/projects/${projectId}/dashboards`
    : `/workspaces/${workspaceId}/dashboards`;
  const resourceKey = projectId
    ? ["dashboards", projectId]
    : ["dashboards", workspaceId];

  const dashboardResource = useApiResource(resourceUrl, resourceKey);

  const createMutation = dashboardResource.useCreate();
  const updateMutation = dashboardResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<DashboardFormValues>({
    resolver: zodResolver(dashboardSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: DashboardFormValues) {
    const payload = {
      ...values,
      ...(projectId ? { projectId } : { workspaceId }),
    };

    if (isEditMode) {
      await updateMutation.mutateAsync(
        {
          id: initialData.id,
          data: { name: values.name, description: values.description },
        },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(payload, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Dashboard Name"
            placeholder="e.g. Q3 Metrics"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A summary of what this dashboard tracks"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Dashboard"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/dashboards/components/DashboardCard.tsx
// FILE: src/features/dashboards/components/DashboardCard.tsx
import {
  Card,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useApiResource } from "@/hooks/useApiResource";

interface DashboardCardProps {
  dashboard: any;
  onEdit: (dashboardId: string) => void;
}

export function DashboardCard({ dashboard, onEdit }: DashboardCardProps) {
  const resourceUrl = dashboard.projectId
    ? `/workspaces/${dashboard.workspaceId}/projects/${dashboard.projectId}/dashboards`
    : `/workspaces/${dashboard.workspaceId}/dashboards`;

  const resourceKey = dashboard.projectId
    ? ["dashboards", dashboard.projectId]
    : ["dashboards", dashboard.workspaceId];

  const dashboardResource = useApiResource(resourceUrl, resourceKey);

  const deleteMutation = dashboardResource.useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${dashboard.name}" dashboard?`
      )
    ) {
      deleteMutation.mutate(dashboard.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(dashboard.id);
  };

  const dashboardUrl = dashboard.projectId
    ? `/workspaces/${dashboard.workspaceId}/projects/${dashboard.projectId}/${dashboard.id}`
    : `/workspaces/${dashboard.workspaceId}/dashboards/${dashboard.id}`;

  return (
    <Link to={dashboardUrl}>
      <Card className="hover:border-primary transition-colors">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <CardTitle>{dashboard.name}</CardTitle>
              <CardDescription>
                {dashboard.description || "No description provided."}
              </CardDescription>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 flex-shrink-0 p-0"
                  onClick={(e) => e.preventDefault()}
                >
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={handleEdit}>
                  <Edit className="mr-2 h-4 w-4" />
                  <span>Edit</span>
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="text-red-600 focus:text-red-600"
                  onClick={handleDelete}
                  disabled={deleteMutation.isPending}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  <span>Delete</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>
      </Card>
    </Link>
  );
}

// FILE: src/features/dashboards/components/DashboardList.tsx
// FILE: src/features/dashboards/components/DashboardList.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { DashboardCard } from "./DashboardCard";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateDashboardForm } from "./CreateDashboardForm";

export function DashboardList({
  workspaceId,
  projectId,
}: {
  workspaceId: string;
  projectId?: string;
}) {
  const resourceUrl = projectId
    ? `/workspaces/${workspaceId}/projects/${projectId}/dashboards`
    : `/workspaces/${workspaceId}/dashboards`;
  const resourceKey = projectId
    ? ["dashboards", projectId]
    : ["dashboards", workspaceId];

  const dashboardResource = useApiResource(resourceUrl, resourceKey);

  const { data, isLoading, isError } = dashboardResource.useGetAll();
  const [editingDashboardId, setEditingDashboardId] = useState<string | null>(
    null
  );

  if (isLoading) return <div>Loading dashboards...</div>;
  if (isError) return <div>Error loading dashboards.</div>;
  if (!data || data.data.length === 0) {
    return <p>No dashboards have been created yet. Create one to begin!</p>;
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((dashboard: any) => (
          <DashboardCard
            dashboard={{ ...dashboard, workspaceId, projectId }}
            key={dashboard.id}
            onEdit={setEditingDashboardId}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingDashboardId}
        onOpenChange={(isOpen) => !isOpen && setEditingDashboardId(null)}
        resourceId={editingDashboardId}
        resourcePath={resourceUrl}
        resourceKey={resourceKey}
        title="Edit Dashboard"
        description="Make changes to your dashboard here. Click save when you're done."
        form={CreateDashboardForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}

// FILE: src/features/epics/components/CreateEpicForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormRichTextEditor } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { EpicStatus } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const epicSchema = z.object({
  name: nameSchema("Epic", 3),
  description: descriptionSchema,
  status: z.nativeEnum(EpicStatus),
});
type EpicFormValues = z.infer<typeof epicSchema>;

interface CreateEpicFormProps {
  workspaceId: string;
  projectId: string;
  onSuccess?: () => void;
}

export function CreateEpicForm({
  workspaceId,
  projectId,
  onSuccess,
}: CreateEpicFormProps) {
  const epicResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`,
    ["epics", projectId]
  );
  const createMutation = epicResource.useCreate();

  const methods = useForm<EpicFormValues>({
    resolver: zodResolver(epicSchema),
    defaultValues: {
      name: "",
      description: "",
      status: EpicStatus.TODO,
    },
  });
  async function onSubmit(values: EpicFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Epic Name"
            placeholder="e.g., 2025 Marketing Campaign"
          />
          <FormRichTextEditor name="description" label="Description" />
          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending ? "Creating..." : "Create Epic"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/epics/components/EpicList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Edit, Trash2 } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateEpicForm } from "./CreateEpicForm";

export function EpicList({ workspaceId, projectId }: any) {
  const epicResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`,
    ["epics", projectId]
  );
  const { data, isLoading, isError } = epicResource.useGetAll();
  const deleteMutation = epicResource.useDelete();
  const [editingEpicId, setEditingEpicId] = useState<string | null>(null);
  if (isLoading) return <div>Loading epics...</div>;
  if (isError) return <div>Error loading epics.</div>;
  const handleDelete = (epic: any) => {
    if (
      window.confirm(`Are you sure you want to delete the epic "${epic.name}"?`)
    ) {
      deleteMutation.mutate(epic.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {data && data.data && data.data.length > 0 ? (
          data.data.map((epic: any) => (
            <Card key={epic.id}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div>
                    <CardTitle>{epic.name}</CardTitle>
                    <CardDescription className="mt-1">
                      {epic.description || "No description."}
                    </CardDescription>
                  </div>
                  <div className="flex gap-1">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setEditingEpicId(epic.id)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleDelete(epic)}
                    >
                      <Trash2 className="text-destructive h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-muted-foreground">
                    Status: {epic.status}
                  </span>
                  <div className="flex w-1/3 items-center gap-2">
                    <Progress value={epic.progress} className="h-2" />
                    <span className="text-muted-foreground w-12 text-right">
                      {epic.progress}%
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : (
          <p>No epics found for this project.</p>
        )}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingEpicId}
        onOpenChange={(isOpen) => !isOpen && setEditingEpicId(null)}
        resourceId={editingEpicId}
        resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/epics`}
        resourceKey={["epics", projectId]}
        title="Edit Epic"
        description="Make changes to your epic's details."
        form={CreateEpicForm}
      />
    </>
  );
}

// FILE: src/features/knowledge-base/api/useManageKnowledgeBase.ts
// FILE: src/features/knowledge-base/api/useManageKnowledgeBase.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageKnowledgeBase(workspaceId: string) {
  const resource = useApiResource(
    `/workspaces/${workspaceId}/knowledge-bases`,
    ["knowledgeBases", workspaceId]
  );
  return resource;
}
// FILE: src/features/knowledge-base/components/KnowledgeBaseCard.tsx
// FILE: src/features/knowledge-base/components/KnowledgeBaseCard.tsx
import { EntityCard } from "@/components/ui/EntityCard";
import { useManageKnowledgeBase } from "../api/useManageKnowledgeBase";
import { BookOpen } from "lucide-react";

interface KnowledgeBaseCardProps {
  knowledgeBase: any;
  onEdit: () => void;
}

export function KnowledgeBaseCard({
  knowledgeBase,
  onEdit,
}: KnowledgeBaseCardProps) {
  const { useDelete } = useManageKnowledgeBase(knowledgeBase.workspaceId);
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete "${knowledgeBase.name}"? This will delete all associated pages.`
      )
    ) {
      deleteMutation.mutate(knowledgeBase.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit();
  };

  // Link to a future detail page
  // const linkTo = `/workspaces/${knowledgeBase.workspaceId}/knowledge-bases/${knowledgeBase.id}`;

  return (
    <EntityCard
      title={knowledgeBase.name}
      description={knowledgeBase.description || "No description."}
      // linkTo={linkTo}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
      icon={BookOpen}
    >
      <></>
    </EntityCard>
  );
}

// FILE: src/features/knowledge-base/components/KnowledgeBaseForm.tsx
// FILE: src/features/knowledge-base/components/KnowledgeBaseForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useManageKnowledgeBase } from "../api/useManageKnowledgeBase";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const kbSchema = z.object({
  name: nameSchema("Knowledge base"),
  description: descriptionSchema,
});
type KBFormValues = z.infer<typeof kbSchema>;

interface KBFormProps {
  workspaceId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function KnowledgeBaseForm({
  workspaceId,
  initialData,
  onSuccess,
}: KBFormProps) {
  const isEditMode = !!initialData;
  const kbResource = useManageKnowledgeBase(workspaceId);
  const createMutation = kbResource.useCreate();
  const updateMutation = kbResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<KBFormValues>({
    resolver: zodResolver(kbSchema),
    defaultValues: { name: "", description: "" },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);

  async function onSubmit(values: KBFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Knowledge Base Name"
            placeholder="e.g., Internal Documentation"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short summary of this knowledge base"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Knowledge Base"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/knowledge-base/components/KnowledgeBaseList.tsx
// FILE: src/features/knowledge-base/components/KnowledgeBaseList.tsx
import { useManageKnowledgeBase } from "../api/useManageKnowledgeBase";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { BookOpen } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { KnowledgeBaseCard } from "./KnowledgeBaseCard";
import { KnowledgeBaseForm } from "./KnowledgeBaseForm";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function KnowledgeBaseList({ workspaceId }: { workspaceId: string }) {
  const kbResource = useManageKnowledgeBase(workspaceId);
  const { data, isLoading, isError, error } = kbResource.useGetAll();
  const [editingId, setEditingId] = useState<string | null>(null);

  if (isLoading) {
    return <ListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Knowledge Bases"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your knowledge bases."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<BookOpen className="text-primary h-10 w-10" />}
        title="No Knowledge Bases Found"
        description="Get started by creating your first knowledge base using the button above."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((kb: any) => (
          <KnowledgeBaseCard
            key={kb.id}
            knowledgeBase={kb}
            onEdit={() => setEditingId(kb.id)}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Knowledge Base"
        description="Make changes to your knowledge base here."
        form={KnowledgeBaseForm}
        formProps={{ workspaceId }}
        resourcePath={`/workspaces/${workspaceId}/knowledge-bases`}
        resourceKey={["knowledgeBases", workspaceId]}
        resourceId={editingId}
      />
    </>
  );
}

// FILE: src/features/notifications/api/useBroadcastNotification.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function broadcastNotification(notificationData: any): Promise<any> {
  const { data } = await api.post("/notifications/broadcast", notificationData);
  return data;
}

export function useBroadcastNotification() {
  return useApiMutation({
    mutationFn: broadcastNotification,
    successMessage: (data) => `Broadcast sent to ${data.count} user(s).`,
  });
}

// FILE: src/features/notifications/api/useGetNotificationPreferences.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getNotificationPreferences(): Promise<any> {
  const { data } = await api.get("/notifications/preferences");
  return data;
}

export function useGetNotificationPreferences() {
  return useQuery({
    queryKey: ["notificationPreferences"],
    queryFn: getNotificationPreferences,
  });
}

// FILE: src/features/notifications/api/useGetNotifications.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getNotifications(query?: { limit?: number }): Promise<any> {
  const { data } = await api.get("/notifications", { params: query });
  return data;
}

export function useGetNotifications(limit = 10) {
  return useQuery({
    queryKey: ["notifications"],
    queryFn: () => getNotifications({ limit }),
  });
}

// FILE: src/features/notifications/api/useMarkAllNotificationsAsRead.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function markAllAsRead(): Promise<any> {
  const { data } = await api.post("/notifications/mark-all-as-read");
  return data;
}

export function useMarkAllNotificationsAsRead() {
  return useApiMutation({
    mutationFn: markAllAsRead,
    invalidateQueries: [["notifications"]],
  });
}

// FILE: src/features/notifications/api/useMarkNotificationAsRead.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function markAsRead(notificationId: string): Promise<any> {
  const { data } = await api.patch(`/notifications/${notificationId}/read`);
  return data;
}

export function useMarkNotificationAsRead() {
  return useApiMutation({
    mutationFn: markAsRead,
    invalidateQueries: [["notifications"]],
  });
}

// FILE: src/features/notifications/api/useUpdateNotificationPreferences.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function updateNotificationPreferences(
  preferencesData: any
): Promise<any> {
  const { data } = await api.put("/notifications/preferences", preferencesData);
  return data;
}

export function useUpdateNotificationPreferences() {
  return useApiMutation({
    mutationFn: updateNotificationPreferences,
    successMessage: "Notification preferences updated.",
    invalidateQueries: [["notificationPreferences"]],
  });
}

// FILE: src/features/notifications/components/BroadcastNotificationDialog.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Megaphone } from "lucide-react";
import { BroadcastNotificationForm } from "./BroadcastNotificationForm";
export function BroadcastNotificationDialog() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Megaphone className="mr-2 h-4 w-4" />
          Broadcast Notification
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send a Broadcast Notification</DialogTitle>
          <DialogDescription>
            This message will be sent as a real-time notification to all active
            users.
          </DialogDescription>
        </DialogHeader>
        <BroadcastNotificationForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/notifications/components/BroadcastNotificationForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { NotificationSeverity, NotificationType } from "@/types";
import { useBroadcastNotification } from "../api/useBroadcastNotification";

const broadcastSchema = z.object({
  message: z.string().min(1, "Message is required."),
  severity: z.nativeEnum(NotificationSeverity),
  type: z.nativeEnum(NotificationType),
});
type BroadcastFormValues = z.infer<typeof broadcastSchema>;

interface BroadcastFormProps {
  onSuccess?: () => void;
}

export function BroadcastNotificationForm({ onSuccess }: BroadcastFormProps) {
  const broadcastMutation = useBroadcastNotification();
  const form = useForm<BroadcastFormValues>({
    resolver: zodResolver(broadcastSchema),
    defaultValues: {
      message: "",
      severity: NotificationSeverity.MEDIUM,
      type: NotificationType.SYSTEM_BROADCAST,
    },
  });
  async function onSubmit(values: BroadcastFormValues) {
    await broadcastMutation.mutateAsync(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Broadcast Message</FormLabel>
              <FormControl>
                <RichTextEditor value={field.value} onChange={field.onChange} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="severity"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Severity</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(NotificationSeverity).map((s) => (
                      <SelectItem key={s} value={s}>
                        {s}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Type</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {Object.values(NotificationType).map((t) => (
                      <SelectItem key={t} value={t}>
                        {t.replace(/_/g, " ")}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <Button
          type="submit"
          className="w-full"
          disabled={broadcastMutation.isPending}
        >
          {broadcastMutation.isPending ? "Sending..." : "Send Broadcast"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/notifications/components/NotificationBell.tsx
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { BellIcon } from "lucide-react";
import { useGetNotifications } from "../api/useGetNotifications";
import { NotificationItem } from "./NotificationItem";
import { useMarkAllNotificationsAsRead } from "../api/useMarkAllNotificationsAsRead";
import { Skeleton } from "@/components/ui/skeleton";
export function NotificationBell() {
  const { data, isLoading } = useGetNotifications();
  const markAllReadMutation = useMarkAllNotificationsAsRead();
  const unreadCount = data?.unreadCount ?? 0;

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="relative h-8 w-8 rounded-full"
        >
          <BellIcon className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute top-0 right-0 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs text-white">
              {unreadCount}
            </span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between border-b p-3">
          <h4 className="font-medium">Notifications</h4>
          <Button
            variant="link"
            size="sm"
            className="h-auto p-0"
            onClick={() => markAllReadMutation.mutate(undefined)}
            disabled={markAllReadMutation.isPending || unreadCount === 0}
          >
            Mark all as read
          </Button>
        </div>
        <div className="max-h-96 overflow-y-auto">
          {isLoading ? (
            <div className="space-y-3 p-4">
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
            </div>
          ) : data?.data?.length > 0 ? (
            data.data.map((notification: any) => (
              <NotificationItem
                key={notification.id}
                notification={notification}
              />
            ))
          ) : (
            <p className="text-muted-foreground p-4 text-center text-sm">
              You're all caught up!
            </p>
          )}
        </div>
      </PopoverContent>
    </Popover>
  );
}

// FILE: src/features/notifications/components/NotificationItem.tsx
import { useMarkNotificationAsRead } from "../api/useMarkNotificationAsRead";
import { cn } from "@/lib/utils";
import { RichTextOutput } from "@/components/ui/RichTextOutput";
export function NotificationItem({ notification }: { notification: any }) {
  const markAsReadMutation = useMarkNotificationAsRead();
  const handleClick = () => {
    if (!notification.isRead) {
      markAsReadMutation.mutate(notification.id);
    }
  };

  return (
    <div
      className={cn(
        "hover:bg-accent flex cursor-pointer items-start gap-3 p-3",
        !notification.isRead && "bg-blue-50 dark:bg-blue-900/20"
      )}
      onClick={handleClick}
    >
      {!notification.isRead && (
        <span className="mt-1 block h-2 w-2 rounded-full bg-blue-500" />
      )}
      <div className={cn("grid gap-1", notification.isRead && "pl-5")}>
        <RichTextOutput
          html={notification.message}
          className="text-sm font-medium"
        />
        <p className="text-muted-foreground text-sm">
          {new Date(notification.createdAt).toLocaleString("en-US")}
        </p>
      </div>
    </div>
  );
}

// FILE: src/features/notifications/components/NotificationPreferencesForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { useGetNotificationPreferences } from "../api/useGetNotificationPreferences";
import { useUpdateNotificationPreferences } from "../api/useUpdateNotificationPreferences";
import { useEffect } from "react";
import { Skeleton } from "@/components/ui/skeleton";

const notificationTypes = [
  "SYSTEM_BROADCAST",
  "TASK_ASSIGNMENT",
  "COMMENT_MENTION",
  "PROJECT_INVITE",
];
const emailFrequencies = ["NONE", "DAILY", "WEEKLY", "IMMEDIATELY"];

const preferencesSchema = z.object({
  preferences: z.record(
    z.string(),
    z.object({
      inApp: z.boolean().optional(),
      email: z.boolean().optional(),
    })
  ),
  emailDigestFrequency: z.enum(["NONE", "DAILY", "WEEKLY", "IMMEDIATELY"]),
});
type PreferencesFormValues = z.infer<typeof preferencesSchema>;

export function NotificationPreferencesForm() {
  const { data, isLoading } = useGetNotificationPreferences();
  const updateMutation = useUpdateNotificationPreferences();

  const form = useForm<PreferencesFormValues>({
    resolver: zodResolver(preferencesSchema),
  });
  useEffect(() => {
    if (data) {
      form.reset({
        preferences: data.preferences || {},
        emailDigestFrequency: data.emailDigestFrequency || "DAILY",
      });
    }
  }, [data, form]);
  function onSubmit(values: PreferencesFormValues) {
    updateMutation.mutate(values);
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/2" />
          <Skeleton className="mt-2 h-4 w-3/4" />
        </CardHeader>
        <CardContent className="space-y-6">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Notification Preferences</CardTitle>
        <CardDescription>
          Manage how and when you are notified about activity.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {notificationTypes.map((type) => (
              <FormField
                key={type}
                control={form.control}
                name={`preferences.${type}.inApp`}
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel className="text-base capitalize">
                        {type.replace(/_/g, " ").toLowerCase()}
                      </FormLabel>
                      <FormDescription>
                        Receive in-app notifications for this event.
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            ))}
            <FormField
              control={form.control}
              name="emailDigestFrequency"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Digest Frequency</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select email frequency" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {emailFrequencies.map((freq) => (
                        <SelectItem key={freq} value={freq}>
                          {freq.charAt(0) + freq.slice(1).toLowerCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    Choose how often you want to receive email summaries.
                  </FormDescription>
                </FormItem>
              )}
            />
            <Button type="submit" disabled={updateMutation.isPending}>
              {updateMutation.isPending ? "Saving..." : "Save Preferences"}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/profile/api/useGetProfile.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getProfile(): Promise<any> {
  const { data } = await api.get("/users/me");
  return data;
}

export function useGetProfile() {
  return useQuery({
    queryKey: ["profile"],
    queryFn: getProfile,
  });
}

// FILE: src/features/profile/api/useUpdateProfile.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function updateProfile(profileData: any): Promise<any> {
  const { data } = await api.put("/users/me/profile", profileData);

  return data;
}

export function useUpdateProfile() {
  return useApiMutation({
    mutationFn: updateProfile,
    successMessage: "Profile updated successfully!",
    invalidateQueries: [["profile"]],
  });
}

// FILE: src/features/profile/api/useUploadAvatar.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function uploadAvatar(formData: FormData): Promise<any> {
  const { data } = await api.patch("/users/me/avatar", formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
  return data;
}

export function useUploadAvatar() {
  return useApiMutation({
    mutationFn: uploadAvatar,
    successMessage: "Avatar updated successfully!",
    invalidateQueries: [["profile"]],
  });
}

// FILE: src/features/profile/components/ProfileAvatar.tsx
import { useState, useRef } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { useUploadAvatar } from "../api/useUploadAvatar";
import { Camera, Link as LinkIcon, Trash2 } from "lucide-react";
import { toast } from "sonner";
import { getAbsoluteUrl } from "@/lib/utils";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useUpdateProfile } from "../api/useUpdateProfile";
import { useAdminUploadAvatar } from "@/features/admin/users/api/useAdminUploadAvatar";
import { useApiResource } from "@/hooks/useApiResource";
interface ProfileAvatarProps {
  user: any;
  isSelfProfile?: boolean;
}

export function ProfileAvatar({
  user,
  isSelfProfile = true,
}: ProfileAvatarProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const selfUploadMutation = useUploadAvatar();
  const adminUploadMutation = useAdminUploadAvatar(user.id);
  const uploadAvatarMutation = isSelfProfile
    ? selfUploadMutation
    : adminUploadMutation;

  const selfUpdateMutation = useUpdateProfile();
  const adminUpdateMutation = useApiResource("admin/users", [
    "users",
  ]).useUpdate();
  const updateProfileMutation = isSelfProfile
    ? selfUpdateMutation
    : adminUpdateMutation;

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const allowedTypes = [
        "image/png",
        "image/jpeg",
        "image/jpg",
        "image/gif",
      ];
      if (!allowedTypes.includes(file.type)) {
        toast.error("Please select a valid image file (PNG, JPEG, or GIF)");
        return;
      }
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        toast.error("File size must be less than 5MB");
        return;
      }
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result as string);
        const formData = new FormData();
        formData.append("file", file);
        uploadAvatarMutation.mutate(formData, {
          onSuccess: () => setPreview(null),
          onError: () => setPreview(null),
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleRemoveAvatar = () => {
    const payload = isSelfProfile
      ? { avatarUrl: null }
      : { id: user.id, data: { avatarUrl: null } };
    updateProfileMutation.mutate(payload);
  };

  const handleLinkAvatar = () => {
    const url = window.prompt("Enter the URL of the image:");
    if (url) {
      try {
        new URL(url);
        const payload = isSelfProfile
          ? { avatarUrl: url }
          : { id: user.id, data: { avatarUrl: url } };
        updateProfileMutation.mutate(payload);
      } catch (e) {
        toast.error("Invalid URL provided.");
      }
    }
  };

  const avatarSrc = preview || getAbsoluteUrl(user?.avatarUrl);
  return (
    <div className="relative">
      <Avatar className="h-32 w-32">
        <AvatarImage
          src={avatarSrc}
          alt={user?.name}
          className="h-full w-full object-cover"
        />
        <AvatarFallback className="text-4xl">
          {user?.name?.charAt(0)}
        </AvatarFallback>
      </Avatar>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept="image/png,image/jpeg,image/jpg,image/gif"
      />
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            size="icon"
            className="absolute right-1 bottom-1 h-8 w-8 rounded-full"
            disabled={
              uploadAvatarMutation.isPending || updateProfileMutation.isPending
            }
          >
            <Camera className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={() => fileInputRef.current?.click()}>
            <Camera className="mr-2 h-4 w-4" />
            <span>Upload Photo</span>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleLinkAvatar}>
            <LinkIcon className="mr-2 h-4 w-4" />
            <span>Use Image URL</span>
          </DropdownMenuItem>
          {user?.avatarUrl && (
            <>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleRemoveAvatar}
                className="text-red-500 focus:text-red-500"
              >
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Remove Photo</span>
              </DropdownMenuItem>
            </>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}

// FILE: src/features/project-roles/components/CreateProjectRoleForm.tsx
// FILE: src/features/project-roles/components/CreateProjectRoleForm.tsx
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useApiResource } from "@/hooks/useApiResource";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema } from "@/lib/schemas";

const projectRoleSchema = z.object({
  name: nameSchema("Role"),
});
type ProjectRoleFormValues = z.infer<typeof projectRoleSchema>;

interface CreateProjectRoleFormProps {
  workspaceId: string;
  projectId: string;
  onSuccess?: () => void;
}

export function CreateProjectRoleForm({
  workspaceId,
  projectId,
  onSuccess,
}: CreateProjectRoleFormProps) {
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );
  const createMutation = projectRoleResource.useCreate();

  const form = useForm<ProjectRoleFormValues>({
    resolver: zodResolver(projectRoleSchema),
    defaultValues: { name: "" },
  });
  async function onSubmit(values: ProjectRoleFormValues) {
    createMutation.mutate(values, {
      onSuccess: () => {
        form.reset();
        onSuccess?.();
      },
    });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Role Name</FormLabel>
              <FormControl>
                <Input placeholder="e.g., Contributor" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button
          type="submit"
          className="w-full"
          disabled={createMutation.isPending}
        >
          {createMutation.isPending ? "Creating..." : "Create Role"}
        </Button>
      </form>
    </Form>
  );
}

// FILE: src/features/project-roles/components/EditProjectRoleDialog.tsx
// FILE: src/features/project-roles/components/EditProjectRoleDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

interface EditProjectRoleDialogProps {
  role: any | null;
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditProjectRoleDialog({
  role,
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditProjectRoleDialogProps) {
  const permissionResource = useApiResource("admin/permissions", [
    "permissions",
  ]);
  const { data: permissionsData, isLoading: isLoadingPermissions } =
    permissionResource.useGetAll({ limit: 100 });
  const assignMutation = useApiMutation({
    mutationFn: (permissionId: string) =>
      api.post(
        `/workspaces/${workspaceId}/projects/${projectId}/roles/${role?.id}/permissions`,
        { permissionId }
      ),
    invalidateQueries: [["projectRoles", projectId]],
  });
  const revokeMutation = useApiMutation({
    mutationFn: (permissionId: string) =>
      api.delete(
        `/workspaces/${workspaceId}/projects/${projectId}/roles/${role?.id}/permissions/${permissionId}`
      ),
    invalidateQueries: [["projectRoles", projectId]],
  });
  if (!isOpen || !role) return null;

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));
  const handlePermissionToggle = (permissionId: string, isChecked: boolean) => {
    if (isChecked) {
      assignMutation.mutate(permissionId);
    } else {
      revokeMutation.mutate(permissionId);
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Edit Role: {role.name}</DialogTitle>
          <DialogDescription>
            Manage the permissions assigned to this project-specific role.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <h4 className="font-semibold">Permissions</h4>
          {isLoadingPermissions ? (
            <p>Loading permissions...</p>
          ) : (
            <div className="grid h-96 overflow-y-auto rounded-md border p-4 sm:grid-cols-2">
              {permissionsData?.data.map((permission: any) => (
                <div key={permission.id} className="flex items-center gap-2">
                  <Checkbox
                    id={`perm-${permission.id}`}
                    checked={rolePermissionIds.has(permission.id)}
                    onCheckedChange={(checked) =>
                      handlePermissionToggle(permission.id, !!checked)
                    }
                  />
                  <label
                    htmlFor={`perm-${permission.id}`}
                    className="text-sm font-medium"
                  >
                    {permission.action} on {permission.subject}
                  </label>
                </div>
              ))}
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/project-roles/components/ProjectRoleList.tsx
// FILE: src/features/project-roles/components/ProjectRoleList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Edit, Trash2 } from "lucide-react";
import { EditProjectRoleDialog } from "./EditProjectRoleDialog";
interface Props {
  workspaceId: string;
  projectId: string;
}

export function ProjectRoleList({ workspaceId, projectId }: Props) {
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );
  const { data: rolesData, isLoading } = projectRoleResource.useGetAll();
  const deleteMutation = projectRoleResource.useDelete();
  const [editingRole, setEditingRole] = useState<any | null>(null);
  if (isLoading) return <div>Loading Project Roles...</div>;

  const handleDelete = (role: any) => {
    if (
      window.confirm(
        `Delete project role "${role.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {rolesData?.data.map((role: any) => (
          <Card key={role.id}>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>{role.name}</CardTitle>
              <div className="flex items-center gap-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setEditingRole(role)}
                >
                  <Edit className="mr-2 h-4 w-4" /> Manage Permissions
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => handleDelete(role)}
                >
                  <Trash2 className="text-destructive h-4 w-4" />
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-1">
                {role.permissions?.length > 0 ? (
                  role.permissions.map((p: any) => (
                    <Badge variant="secondary" key={p.id}>
                      {p.action} on {p.subject}
                    </Badge>
                  ))
                ) : (
                  <span className="text-muted-foreground text-sm">
                    No permissions assigned.
                  </span>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <EditProjectRoleDialog
        role={editingRole}
        workspaceId={workspaceId}
        projectId={projectId}
        isOpen={!!editingRole}
        onOpenChange={(isOpen) => !isOpen && setEditingRole(null)}
      />
    </>
  );
}

// FILE: src/features/projects/api/useGetProjectMembers.ts
// FILE: src/features/projects/api/useGetProjectMembers.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjectMembers(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/members`
  );
  return data;
}

export function useGetProjectMembers(
  workspaceId: string,
  projectId: string,
  options: { enabled?: boolean } = { enabled: true }
) {
  return useQuery({
    queryKey: ["projectMembers", projectId],
    queryFn: () => getProjectMembers(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId && !!options.enabled,
  });
}

// FILE: src/features/projects/components/InviteProjectMember.tsx
// FILE: src/features/projects/components/InviteProjectMember.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ChevronsUpDown } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { Switch } from "@/components/ui/switch";
import { FormLabel } from "@/components/ui/form";

interface InviteProjectMemberProps {
  workspaceId: string;
  projectId: string;
  existingMemberIds: string[];
}

export function InviteProjectMember({
  workspaceId,
  projectId,
  existingMemberIds,
}: InviteProjectMemberProps) {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [selectedRoleId, setSelectedRoleId] = useState<string | null>(null);
  const [isGuest, setIsGuest] = useState(false);
  const [selectedTeamId, setSelectedTeamId] = useState<string | null>(null);
  const [userSearch, setUserSearch] = useState("");

  const userResource = useApiResource("admin/users", ["users"]);
  const teamResource = useApiResource(`/workspaces/${workspaceId}/teams`, [
    "teams",
    workspaceId,
  ]);
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );

  const { data: usersData, isLoading: isLoadingUsers } = userResource.useGetAll(
    {
      search: userSearch,
      limit: 1000,
    }
  );
  const { data: rolesData, isLoading: isLoadingRoles } =
    projectRoleResource.useGetAll();
  const { data: teamsData, isLoading: isLoadingTeams } =
    teamResource.useGetAll();

  const addMemberMutation = useApiMutation<
    any,
    { userId: string; roleId: string; isGuest: boolean }
  >({
    mutationFn: async ({ userId, roleId, isGuest }) => {
      const { data } = await api.post(
        `/workspaces/${workspaceId}/projects/${projectId}/members`,
        { userId, roleId, isGuest }
      );
      return data;
    },
    successMessage: "Member added to project.",
    invalidateQueries: [["projectMembers", projectId]],
  });

  const addTeamMutation = useApiMutation<
    any,
    { teamId: string; roleId: string; isGuest: boolean }
  >({
    mutationFn: async ({ teamId, roleId, isGuest }) => {
      const { data } = await api.post(
        `/workspaces/${workspaceId}/projects/${projectId}/members/team`,
        { teamId, roleId, isGuest }
      );
      return data;
    },
    successMessage: (data) => `${data.count} member(s) added to the project.`,
    invalidateQueries: [["projectMembers", projectId]],
  });

  const availableUsers =
    usersData?.data.filter((u: any) => !existingMemberIds.includes(u.id)) || [];

  const handleInviteUser = () => {
    if (selectedUserId && selectedRoleId) {
      addMemberMutation.mutate(
        { userId: selectedUserId, roleId: selectedRoleId, isGuest },
        {
          onSuccess: () => {
            setSelectedUserId(null);
            setUserSearch("");
          },
        }
      );
    }
  };

  const handleInviteTeam = () => {
    if (selectedTeamId && selectedRoleId) {
      addTeamMutation.mutate(
        { teamId: selectedTeamId, roleId: selectedRoleId, isGuest },
        {
          onSuccess: () => {
            setSelectedTeamId(null);
          },
        }
      );
    }
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle>Invite to Project</CardTitle>
        <CardDescription>
          Add individual users or entire teams to this project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="user">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="user">Invite User</TabsTrigger>
            <TabsTrigger value="team">Invite Team</TabsTrigger>
          </TabsList>
          <TabsContent value="user" className="mt-4 space-y-4">
            <div className="space-y-2">
              <Label>User</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    className="w-full justify-between"
                  >
                    {selectedUserId
                      ? usersData?.data.find(
                          (u: any) => u.id === selectedUserId
                        )?.name
                      : "Select a user"}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                  <Command>
                    <CommandInput
                      placeholder="Search by name or email..."
                      onValueChange={setUserSearch}
                    />
                    <CommandList>
                      {isLoadingUsers && <CommandItem>Loading...</CommandItem>}
                      <CommandEmpty>No users found.</CommandEmpty>
                      <CommandGroup>
                        {availableUsers.map((user: any) => (
                          <CommandItem
                            value={user.name}
                            key={user.id}
                            onSelect={() => setSelectedUserId(user.id)}
                          >
                            {user.name} ({user.email})
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>
            <div className="space-y-2">
              <Label>Role</Label>
              <Select
                onValueChange={setSelectedRoleId}
                disabled={isLoadingRoles}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a role" />
                </SelectTrigger>
                <SelectContent>
                  {rolesData?.data.map((role: any) => (
                    <SelectItem key={role.id} value={role.id}>
                      {role.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="is-guest-user"
                checked={isGuest}
                onCheckedChange={setIsGuest}
              />
              <FormLabel htmlFor="is-guest-user">Add as guest</FormLabel>
            </div>
            <Button
              onClick={handleInviteUser}
              disabled={
                !selectedUserId ||
                !selectedRoleId ||
                addMemberMutation.isPending
              }
              className="w-full"
            >
              {addMemberMutation.isPending ? "Inviting..." : "Invite User"}
            </Button>
          </TabsContent>
          <TabsContent value="team" className="mt-4 space-y-4">
            <div className="space-y-2">
              <Label>Team</Label>
              <Select
                onValueChange={setSelectedTeamId}
                disabled={isLoadingTeams}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a team" />
                </SelectTrigger>
                <SelectContent>
                  {teamsData?.data.map((team: any) => (
                    <SelectItem key={team.id} value={team.id}>
                      {team.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Role</Label>
              <Select
                onValueChange={setSelectedRoleId}
                disabled={isLoadingRoles}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Assign a role to all team members" />
                </SelectTrigger>
                <SelectContent>
                  {rolesData?.data.map((role: any) => (
                    <SelectItem key={role.id} value={role.id}>
                      {role.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="is-guest-team"
                checked={isGuest}
                onCheckedChange={setIsGuest}
              />
              <FormLabel htmlFor="is-guest-team">Add as guests</FormLabel>
            </div>
            <Button
              onClick={handleInviteTeam}
              disabled={
                !selectedTeamId || !selectedRoleId || addTeamMutation.isPending
              }
              className="w-full"
            >
              {addTeamMutation.isPending ? "Adding Team..." : "Invite Team"}
            </Button>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/projects/components/ProjectCard.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { getIcon } from "@/lib/icons";
import { EntityCard } from "@/components/ui/EntityCard";
import { CardContent } from "@/components/ui/card";

interface ProjectCardProps {
  project: any;
  onEdit: (projectId: string) => void;
}

export function ProjectCard({ project, onEdit }: ProjectCardProps) {
  const projectResource = useApiResource(
    `/workspaces/${project.workspaceId}/projects`,
    ["projects", project.workspaceId]
  );
  const deleteMutation = projectResource.useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${project.name}" project? This action is permanent.`
      )
    ) {
      deleteMutation.mutate(project.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(project.id);
  };

  const projectUrl = `/workspaces/${project.workspaceId}/projects/${project.id}`;
  const Icon = getIcon(project.icon);

  return (
    <EntityCard
      title={project.name}
      description={project.description}
      linkTo={projectUrl}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
      icon={Icon}
    >
      <CardContent>
        <div className="text-muted-foreground flex justify-between text-sm">
          <span>Status: {project.status}</span>
          <span>
            Created: {new Date(project.createdAt).toLocaleDateString("en-US")}
          </span>
        </div>
      </CardContent>
    </EntityCard>
  );
}

// FILE: src/features/projects/components/ProjectForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useCreateView } from "@/features/views/api/useCreateView";
import { toast } from "sonner";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const projectSchema = z.object({
  name: nameSchema("Project"),
  description: descriptionSchema,
});
type ProjectFormValues = z.infer<typeof projectSchema>;

interface ProjectFormProps {
  workspaceId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function ProjectForm({
  workspaceId,
  initialData,
  onSuccess,
}: ProjectFormProps) {
  const isEditMode = !!initialData;
  const projectResource = useApiResource(
    `/workspaces/${workspaceId}/projects`,
    ["projects", workspaceId]
  );
  const createProjectMutation = projectResource.useCreate();
  const updateMutation = projectResource.useUpdate();
  const createViewMutation = useCreateView(workspaceId);

  const methods = useForm<ProjectFormValues>({
    resolver: zodResolver(projectSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: ProjectFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      createProjectMutation.mutate(values, {
        onSuccess: async (newProject) => {
          toast.success(
            `Project "${newProject.name}" created. Setting up default views...`
          );
          const listPromise = createViewMutation.mutateAsync({
            viewData: { name: "List", type: "LIST" },
            projectId: newProject.id,
          });
          const kanbanPromise = createViewMutation.mutateAsync({
            viewData: {
              name: "Kanban",
              type: "KANBAN",
              columns: [
                { name: "To Do" },
                { name: "In Progress" },
                { name: "In Review" },
                { name: "Done" },
              ],
            },
            projectId: newProject.id,
          });
          await Promise.all([listPromise, kanbanPromise]);
          toast.success("Default views created.");
          onSuccess?.();
        },
      });
    }
  }

  const mutation = isEditMode ? updateMutation : createProjectMutation;
  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Project Name"
            placeholder="e.g. Annual Report Analysis"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short description of the project's goals"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? isEditMode
                ? "Saving..."
                : "Creating..."
              : isEditMode
                ? "Save Changes"
                : "Create Project"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/projects/components/ProjectList.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { ProjectCard } from "./ProjectCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { FolderKanban } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { ProjectForm } from "./ProjectForm";
const ProjectListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function ProjectList({ workspaceId }: { workspaceId: string }) {
  const projectResource = useApiResource(
    `/workspaces/${workspaceId}/projects`,
    ["projects", workspaceId]
  );
  const { data, isLoading, isError, error } = projectResource.useGetAll();
  const [editingProjectId, setEditingProjectId] = useState<string | null>(null);
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (isLoading) {
    return <ProjectListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Projects"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching projects for this workspace."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<FolderKanban className="text-primary h-10 w-10" />}
        title="This workspace has no projects yet."
        description="Create the first project in this workspace to get started."
        action={
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Project
              </Button>
            }
            title="Create a new project"
            description="Projects live inside workspaces and contain your tasks."
            form={ProjectForm}
            formProps={{ workspaceId }}
            resourcePath={`/workspaces/${workspaceId}/projects`}
            resourceKey={["projects", workspaceId]}
          />
        }
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((project: any) => (
          <ProjectCard
            project={project}
            key={project.id}
            onEdit={setEditingProjectId}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingProjectId}
        onOpenChange={(isOpen) => !isOpen && setEditingProjectId(null)}
        trigger={<></>}
        title="Edit Project"
        description="Make changes to your project here. Click save when you're done."
        form={ProjectForm}
        formProps={{ workspaceId }}
        resourcePath={`/workspaces/${workspaceId}/projects`}
        resourceKey={["projects", workspaceId]}
        resourceId={editingProjectId}
      />
    </>
  );
}

// FILE: src/features/projects/components/ProjectMemberList.tsx
// FILE: src/features/projects/components/ProjectMemberList.tsx
import { useGetProjectMembers } from "../api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card } from "@/components/ui/card";
import { getAbsoluteUrl } from "@/lib/utils";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

interface ProjectMemberListProps {
  workspaceId: string;
  projectId: string;
}

export function ProjectMemberList({
  workspaceId,
  projectId,
}: ProjectMemberListProps) {
  const { data: membersData, isLoading: isLoadingMembers } =
    useGetProjectMembers(workspaceId, projectId);
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );
  const { data: rolesData, isLoading: isLoadingRoles } =
    projectRoleResource.useGetAll();

  const invalidateQueries = [["projectMembers", projectId]];

  const removeMemberMutation = useApiMutation<void, string>({
    mutationFn: async (userId) => {
      await api.delete(
        `/workspaces/${workspaceId}/projects/${projectId}/members/${userId}`
      );
    },
    successMessage: "Member removed from project.",
    invalidateQueries,
  });

  const updateMemberMutation = useApiMutation<
    any,
    { userId: string; roleId: string }
  >({
    mutationFn: async ({ userId, roleId }) => {
      const { data } = await api.patch(
        `/workspaces/${workspaceId}/projects/${projectId}/members/${userId}`,
        { roleId }
      );
      return data;
    },
    successMessage: "Project member's role has been updated.",
    invalidateQueries,
  });

  const handleDelete = (member: any) => {
    if (window.confirm(`Remove ${member.name} from this project?`)) {
      removeMemberMutation.mutate(member.userId);
    }
  };

  const handleRoleChange = (userId: string, roleId: string) => {
    updateMemberMutation.mutate({ userId, roleId });
  };

  if (isLoadingMembers || isLoadingRoles) return <div>Loading members...</div>;

  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Member</TableHead>
            <TableHead>Role</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {membersData?.length > 0 ? (
            membersData.map((member: any) => (
              <TableRow key={member.userId}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <Avatar className="h-8 w-8">
                      <AvatarImage
                        src={getAbsoluteUrl(member.avatarUrl)}
                        alt={member.name}
                        className="h-full w-full object-cover"
                      />
                      <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="font-medium">{member.name}</span>
                  </div>
                </TableCell>
                <TableCell>
                  <Select
                    value={member.roleId}
                    onValueChange={(newRoleId) =>
                      handleRoleChange(member.userId, newRoleId)
                    }
                  >
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select a role" />
                    </SelectTrigger>
                    <SelectContent>
                      {rolesData?.data.map((role: any) => (
                        <SelectItem key={role.id} value={role.id}>
                          {role.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => handleDelete(member)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Remove from Project
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={3} className="h-24 text-center">
                No members have been added to this project yet.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </Card>
  );
}

// FILE: src/features/publications/components/CreatePublicationForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { useApiResource } from "@/hooks/useApiResource";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormRichTextEditor,
  FormMultiSelectPopover,
} from "@/components/form/FormFields";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
const publicationSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters."),
  excerpt: z.string().optional(),
  authorIds: z.array(z.string().uuid()),
  status: z.enum(["DRAFT", "PUBLISHED", "ARCHIVED"]),
});
type PublicationFormValues = z.infer<typeof publicationSchema>;

interface PublicationFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function CreatePublicationForm({
  initialData,
  onSuccess,
}: PublicationFormProps) {
  const publicationResource = useApiResource("publications", ["publications"]);
  const userResource = useApiResource("admin/users", ["users"]);
  const isEditMode = !!initialData;
  const createMutation = publicationResource.useCreate();
  const updateMutation = publicationResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const { data: usersData } = userResource.useGetAll({});

  const methods = useForm<PublicationFormValues>({
    resolver: zodResolver(publicationSchema),
    defaultValues: {
      title: "",
      excerpt: "",
      authorIds: [],
      status: "DRAFT",
    },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        ...initialData,
        authorIds: initialData.authors?.map((a: any) => a.id) || [],
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: PublicationFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="title"
            label="Title"
            placeholder="The Future of AI in Research..."
          />
          <FormRichTextEditor name="excerpt" label="Excerpt (Optional)" />
          <FormMultiSelectPopover
            name="authorIds"
            label="Authors"
            placeholder="Select authors..."
            options={usersData?.data || []}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Publication"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/publications/components/PublicationCard.tsx
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import { useApiResource } from "@/hooks/useApiResource";

interface PublicationCardProps {
  publication: any;
  onEdit: (publication: any) => void;
}

const statusVariantMap: Record<
  string,
  "default" | "outline" | "secondary" | "destructive"
> = {
  DRAFT: "secondary",
  PUBLISHED: "default",
  ARCHIVED: "outline",
};
export function PublicationCard({ publication, onEdit }: PublicationCardProps) {
  const publicationResource = useApiResource("publications", ["publications"]);
  const deleteMutation = publicationResource.useDelete();
  const handleDelete = () => {
    if (window.confirm(`Delete publication "${publication.title}"?`)) {
      deleteMutation.mutate(publication.id);
    }
  };

  return (
    <Card className="flex flex-col">
      <CardHeader className="flex-row items-start justify-between">
        <div className="flex-grow">
          <CardTitle>{publication.title}</CardTitle>
          <CardDescription>
            {publication.excerpt || "No excerpt provided."}
          </CardDescription>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8 flex-shrink-0"
            >
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => onEdit(publication)}>
              <Edit className="mr-2 h-4 w-4" /> Edit
            </DropdownMenuItem>
            <DropdownMenuItem
              className="text-red-600 focus:text-red-600"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardFooter className="flex justify-between">
        <div className="flex flex-wrap gap-1">
          {publication.authors.map((author: any) => (
            <Badge key={author.id} variant="secondary" className="font-normal">
              {author.name}
            </Badge>
          ))}
        </div>
        <Badge variant={statusVariantMap[publication.status]}>
          {publication.status}
        </Badge>
      </CardFooter>
    </Card>
  );
}

// FILE: src/features/publications/components/PublicationList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { PublicationCard } from "./PublicationCard";
import { Skeleton } from "@/components/ui/skeleton";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreatePublicationForm } from "./CreatePublicationForm";
const PublicationListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 6 }).map((_, i) => (
      <div key={i} className="flex flex-col space-y-3">
        <Skeleton className="h-[125px] w-full rounded-xl" />
        <div className="space-y-2">
          <Skeleton className="h-4 w-3/4" />
          <Skeleton className="h-4 w-1/2" />
        </div>
      </div>
    ))}
  </div>
);
export function PublicationList() {
  const publicationResource = useApiResource("publications", ["publications"]);
  const { data, isLoading, isError } = publicationResource.useGetAll({
    page: 1,
    limit: 12,
  });
  const [editingPublication, setEditingPublication] = useState<any | null>(
    null
  );

  if (isLoading) return <PublicationListSkeleton />;
  if (isError) return <div>Failed to load publications.</div>;
  if (!data || data.data.length === 0) return <div>No publications found.</div>;
  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((pub: any) => (
          <PublicationCard
            key={pub.id}
            publication={pub}
            onEdit={setEditingPublication}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingPublication}
        onOpenChange={(isOpen) => !isOpen && setEditingPublication(null)}
        trigger={<></>}
        title="Edit Publication"
        description="Make changes to the publication details."
        form={CreatePublicationForm}
        resourcePath="publications"
        resourceKey={["publications"]}
        resourceId={editingPublication?.id}
      />
    </>
  );
}

// FILE: src/features/reporting/components/VelocityChart.tsx
// FILE: src/features/reporting/components/VelocityChart.tsx
import {
  ChartContainer,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Bar,
  ResponsiveContainer,
} from "@/components/ui/recharts";
import { Sprint } from "@/features/sprints/sprint.types";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

interface VelocityChartProps {
  sprints: Sprint[];
}

export function VelocityChart({ sprints }: VelocityChartProps) {
  const chartData = sprints
    .filter(
      (sprint) =>
        sprint.status === "COMPLETED" && sprint.completedStoryPoints != null
    )
    .map((sprint) => ({
      name: sprint.name,
      Velocity: sprint.completedStoryPoints,
    }));

  if (chartData.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Team Velocity</CardTitle>
          <CardDescription>
            Complete sprints with story points to see your team's velocity over
            time.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-muted-foreground flex h-[200px] items-center justify-center">
            Not enough data to display chart.
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Team Velocity</CardTitle>
        <CardDescription>
          Story points completed in each sprint.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ChartContainer className="h-[200px] w-full">
          <ResponsiveContainer>
            <BarChart
              data={chartData}
              margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="name"
                fontSize={12}
                tickLine={false}
                axisLine={false}
              />
              <YAxis fontSize={12} tickLine={false} axisLine={false} />
              <Tooltip
                cursor={{ fill: "hsl(var(--muted))" }}
                contentStyle={{
                  backgroundColor: "hsl(var(--popover))",
                  borderColor: "hsl(var(--border))",
                }}
              />
              <Bar
                dataKey="Velocity"
                fill="hsl(var(--primary))"
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/search/api/useSearch.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

interface SearchQuery {
  q: string;
  limit?: number;
  type?: "project" | "task" | "publication" | "report" | "user";
}

async function performSearch(query: SearchQuery): Promise<any> {
  const { data } = await api.get("/search", { params: query });
  return data;
}

export function useSearch(searchTerm: string, limit = 5) {
  return useQuery({
    queryKey: ["search", searchTerm],
    queryFn: () => performSearch({ q: searchTerm, limit }),

    enabled: searchTerm.length > 1,
  });
}

// FILE: src/features/search/components/SearchDialog.tsx
import { useEffect, useState } from "react";
import {
  CommandDialog,
  CommandEmpty,
  CommandInput,
  CommandList,
} from "@/components/ui/command";
import { useDebounce } from "@/hooks/useDebounce";
import { useSearch } from "../api/useSearch";
import { SearchResultGroup } from "./SearchResultGroup";
interface SearchDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function SearchDialog({ isOpen, onOpenChange }: SearchDialogProps) {
  const [query, setQuery] = useState("");
  const debouncedQuery = useDebounce(query, 300);
  const { data: results, isLoading } = useSearch(debouncedQuery);

  useEffect(() => {
    if (!isOpen) {
      setQuery("");
    }
  }, [isOpen]);
  return (
    <CommandDialog open={isOpen} onOpenChange={onOpenChange}>
      <CommandInput
        placeholder="Search for projects, tasks, users..."
        value={query}
        onValueChange={setQuery}
      />
      <CommandList>
        {isLoading && <div className="p-4 text-sm">Searching...</div>}
        {!isLoading && !results && debouncedQuery.length > 1 && (
          <CommandEmpty>No results found.</CommandEmpty>
        )}
        {results && (
          <>
            <SearchResultGroup heading="Projects" results={results.projects} />
            <SearchResultGroup heading="Tasks" results={results.tasks} />
            <SearchResultGroup
              heading="Publications"
              results={results.publications}
            />
            <SearchResultGroup heading="Users" results={results.users} />
          </>
        )}
      </CommandList>
    </CommandDialog>
  );
}

// FILE: src/features/search/components/SearchResultGroup.tsx
import { CommandGroup, CommandSeparator } from "@/components/ui/command";
import { SearchResultItem } from "./SearchResultItem";
export function SearchResultGroup({
  heading,
  results,
}: {
  heading: string;
  results: any[];
}) {
  if (results.length === 0) {
    return null;
  }

  return (
    <>
      <CommandGroup heading={heading}>
        {results.map((item) => (
          <SearchResultItem item={item} key={`${item.__typename}-${item.id}`} />
        ))}
      </CommandGroup>
      <CommandSeparator />
    </>
  );
}

// FILE: src/features/search/components/SearchResultItem.tsx
import { CommandItem } from "@/components/ui/command";
import { getIcon } from "@/lib/icons";
import { useNavigate } from "react-router-dom";
export function SearchResultItem({ item }: { item: any }) {
  const navigate = useNavigate();
  const getLink = () => {
    switch (item.__typename) {
      case "Project":
        return `/workspaces/DUMMY_WS_ID/projects/${item.id}`;
      case "Task":
        return `/workspaces/DUMMY_WS_ID/projects/${item.projectId}/tasks/${item.id}`;
      case "User":
        return `/profile/${item.id}`;
      default:
        return "/";
    }
  };
  const handleSelect = () => {
    const url = getLink().replace("DUMMY_WS_ID", "1");
    navigate(url);
  };

  const Icon = getIcon(item.__typename);
  return (
    <CommandItem
      key={item.id}
      onSelect={handleSelect}
      value={item.name || item.title}
    >
      <Icon className="mr-2 h-4 w-4" />
      <span>{item.name || item.title}</span>
    </CommandItem>
  );
}

// FILE: src/features/security/api/useChangePassword.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useQueryClient } from "@tanstack/react-query";
async function changePassword(passwordData: any): Promise<any> {
  const { data } = await api.post("/users/me/change-password", passwordData);
  return data;
}

export function useChangePassword() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);
  return useApiMutation({
    mutationFn: changePassword,
    successMessage:
      "Password changed successfully. For your security, you have been logged out.",
    onSuccess: () => {
      queryClient.clear();
      setAccessToken(null);
      navigate("/login", { replace: true });
    },
  });
}

// FILE: src/features/security/components/ChangePasswordForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { useChangePassword } from "../api/useChangePassword";

const changePasswordSchema = z
  .object({
    currentPassword: z.string().min(1, "Current password is required."),
    newPassword: z
      .string()
      .min(8, "New password must be at least 8 characters long."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "New passwords do not match.",
    path: ["confirmPassword"],
  });
type ChangePasswordFormValues = z.infer<typeof changePasswordSchema>;

export function ChangePasswordForm() {
  const changePasswordMutation = useChangePassword();
  const methods = useForm<ChangePasswordFormValues>({
    resolver: zodResolver(changePasswordSchema),
    defaultValues: {
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    },
  });
  function onSubmit(values: ChangePasswordFormValues) {
    changePasswordMutation.mutate(values);
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          For your security, we recommend choosing a strong password that you
          don't use elsewhere.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <FormProvider {...methods}>
          <Form {...methods}>
            <form
              onSubmit={methods.handleSubmit(onSubmit)}
              className="space-y-4"
            >
              <FormInput
                name="currentPassword"
                label="Current Password"
                type="password"
              />
              <FormInput
                name="newPassword"
                label="New Password"
                type="password"
              />
              <FormInput
                name="confirmPassword"
                label="Confirm New Password"
                type="password"
              />
              <Button type="submit" disabled={changePasswordMutation.isPending}>
                {changePasswordMutation.isPending
                  ? "Changing Password..."
                  : "Change Password"}
              </Button>
            </form>
          </Form>
        </FormProvider>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/skills/api/useGetSkills.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getSkills(): Promise<any[]> {
  const { data } = await api.get("/skills");
  return data;
}

export function useGetSkills() {
  return useQuery({
    queryKey: ["skills"],
    queryFn: getSkills,
    staleTime: Infinity,
  });
}

// FILE: src/features/sprints/api/useManageSprints.ts
// FILE: src/features/sprints/api/useManageSprints.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageSprints(workspaceId: string, projectId: string) {
  const sprintResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/sprints`,
    ["sprints", projectId]
  );
  return sprintResource;
}

// FILE: src/features/sprints/components/CreateSprintForm.tsx
// FILE: src/features/sprints/components/CreateSprintForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormDatePicker } from "@/components/form/FormFields";
import { useManageSprints } from "../api/useManageSprints";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { CreateSprintDtoSchema } from "../sprint.types";

type SprintFormValues = z.infer<typeof CreateSprintDtoSchema>;

interface CreateSprintFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CreateSprintForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: CreateSprintFormProps) {
  const isEditMode = !!initialData;
  const sprintResource = useManageSprints(workspaceId, projectId);
  const createMutation = sprintResource.useCreate();
  const updateMutation = sprintResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<SprintFormValues>({
    resolver: zodResolver(CreateSprintDtoSchema),
    defaultValues: {
      name: "",
      goal: "",
      startDate: null,
      endDate: null,
      projectId,
    },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        ...initialData,
        startDate: initialData.startDate
          ? new Date(initialData.startDate)
          : null,
        endDate: initialData.endDate ? new Date(initialData.endDate) : null,
      });
    }
  }, [initialData, isEditMode, methods]);

  async function onSubmit(values: SprintFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Sprint Name"
            placeholder="e.g., October Sprint #1"
          />
          <FormInput
            name="goal"
            label="Sprint Goal (Optional)"
            placeholder="What is the main objective of this sprint?"
          />
          <div className="grid grid-cols-2 gap-4">
            <FormDatePicker name="startDate" label="Start Date" />
            <FormDatePicker name="endDate" label="End Date" />
          </div>
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Sprint"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/sprints/components/ProjectDetailView.tsx
// FILE: src/features/views/components/ProjectDetailView.tsx
import { Link } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaskList } from "@/features/tasks/components/TaskList";
import { KanbanBoard } from "@/features/views/components/KanbanBoard";
import { BacklogView } from "@/features/views/components/BacklogView";
import { DashboardList } from "@/features/dashboards/components/DashboardList";
import { EpicList } from "@/features/epics/components/EpicList";
import { SprintBoardView } from "@/features/sprints/components/SprintBoardView";
import { ActiveUsers } from "@/components/layout/ActiveUsers";
import { Button } from "@/components/ui/button";
import { Settings, CheckSquare, PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/tasks/components/CreateTaskForm";
import { CreateDashboardForm } from "@/features/dashboards/components/CreateDashboardForm";
import { CreateEpicForm } from "@/features/epics/components/CreateEpicForm";
import { Task } from "@/features/tasks/task.types";
import { View } from "@/types";
import { ProjectActivityLog } from "@/features/activities/components/ProjectActivityLog";
import { EmptyState } from "@/components/ui/empty-state";
import { useState } from "react";

interface ProjectDetailViewProps {
  views: View[];
  tasks: Task[];
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string | null) => void;
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function ProjectDetailView({
  views,
  tasks,
  workspaceId,
  projectId,
  onTaskSelect,
  activeTab,
  onTabChange,
}: ProjectDetailViewProps) {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const renderActionDialog = () => {
    const currentView = views.find((v) => v.id === activeTab);
    const viewType = currentView?.type;

    if (
      viewType === "KANBAN" ||
      viewType === "LIST" ||
      viewType === "BACKLOG"
    ) {
      return (
        <ResourceCrudDialog
          trigger={
            <Button>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Task
            </Button>
          }
          title="Create a new task"
          description="Fill in the details below to add a new task."
          form={CreateTaskForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
          resourceKey={["tasks", projectId]}
        />
      );
    }
    if (activeTab === "dashboards") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Dashboard
            </Button>
          }
          title="Create New Dashboard"
          description="Dashboards contain widgets to visualize your project data."
          form={CreateDashboardForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/dashboards`}
          resourceKey={["dashboards", projectId]}
        />
      );
    }
    if (activeTab === "epics") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Epic
            </Button>
          }
          title="Create New Epic"
          description="Epics are large bodies of work that can be broken down into a number of smaller tasks."
          form={CreateEpicForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/epics`}
          resourceKey={["epics", projectId]}
        />
      );
    }
    return null;
  };

  const projectTaskEmptyState = (
    <EmptyState
      icon={<CheckSquare className="text-primary h-10 w-10" />}
      title="No tasks yet"
      description="Create the first task in this project to get started."
      action={
        <ResourceCrudDialog
          trigger={
            <Button>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Task
            </Button>
          }
          title="Create a new task"
          description="Fill in the details below to add a new task."
          form={CreateTaskForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
          resourceKey={["tasks", projectId]}
        />
      }
    />
  );
  return (
    <Tabs value={activeTab} onValueChange={onTabChange} className="space-y-4">
      <div className="flex items-center justify-between">
        <TabsList>
          {views.map((view) => (
            <TabsTrigger key={view.id} value={view.id}>
              {view.name}
            </TabsTrigger>
          ))}
          <TabsTrigger value="sprints">Sprints</TabsTrigger>
          <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
          <TabsTrigger value="epics">Epics</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        <div className="flex items-center gap-2">
          <ActiveUsers />
          {renderActionDialog()}
          <Button variant="outline" asChild>
            <Link to="settings">
              <Settings className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>

      {views.map((view) => (
        <TabsContent key={view.id} value={view.id} className="mt-0 h-full">
          {view.type === "LIST" && (
            <TaskList
              apiUrl={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
              queryKey={["tasks", projectId]}
              tasks={tasks}
              onTaskSelect={onTaskSelect}
              emptyState={projectTaskEmptyState}
            />
          )}
          {view.type === "KANBAN" && (
            <KanbanBoard
              views={views}
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
          {view.type === "BACKLOG" && (
            <BacklogView
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
        </TabsContent>
      ))}

      <TabsContent value="sprints" className="mt-0">
        <SprintBoardView
          workspaceId={workspaceId}
          projectId={projectId}
          views={views}
          tasks={tasks}
          onTaskSelect={onTaskSelect}
        />
      </TabsContent>

      <TabsContent value="dashboards" className="mt-0 space-y-4">
        <DashboardList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="epics" className="mt-0">
        <EpicList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="activity" className="mt-0">
        <ProjectActivityLog workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>
    </Tabs>
  );
}

// FILE: src/features/sprints/components/SprintBoardView.tsx
// FILE: src/features/sprints/components/SprintBoardView.tsx
import { useState, useMemo } from "react";
import { useManageSprints } from "../api/useManageSprints";
import { KanbanBoard } from "@/features/views/components/KanbanBoard";
import { SprintList } from "./SprintList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateSprintForm } from "./CreateSprintForm";
import { EmptyState } from "@/components/ui/empty-state";
import { SprintStatus } from "@/types";
import { View } from "@/types";
import { Task } from "@/features/tasks/task.types";
import { VelocityChart } from "@/features/reporting/components/VelocityChart";

interface SprintBoardViewProps {
  workspaceId: string;
  projectId: string;
  views: View[];
  tasks: Task[];
  onTaskSelect: (taskId: string | null) => void;
}

export function SprintBoardView({
  workspaceId,
  projectId,
  views,
  tasks,
  onTaskSelect,
}: SprintBoardViewProps) {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const sprintResource = useManageSprints(workspaceId, projectId);
  const { data: sprintsData, isLoading } = sprintResource.useGetAll();
  const updateMutation = sprintResource.useUpdate();

  const activeSprint = useMemo(
    () => sprintsData?.data?.find((s: any) => s.status === SprintStatus.ACTIVE),
    [sprintsData]
  );

  const completedSprints = useMemo(
    () =>
      sprintsData?.data?.filter(
        (s: any) => s.status === SprintStatus.COMPLETED
      ) || [],
    [sprintsData]
  );

  const activeSprintTasks = useMemo(
    () => tasks.filter((task) => task.sprintId === activeSprint?.id),
    [tasks, activeSprint]
  );

  const handleStartSprint = (sprintId: string) => {
    if (activeSprint) {
      alert(
        "An active sprint is already in progress. Please complete it first."
      );
      return;
    }
    updateMutation.mutate({
      id: sprintId,
      data: { status: SprintStatus.ACTIVE },
    });
  };

  const handleCompleteSprint = (sprintId: string) => {
    updateMutation.mutate({
      id: sprintId,
      data: { status: SprintStatus.COMPLETED },
    });
  };

  if (isLoading) {
    return <div>Loading sprints...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Sprints</h2>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Sprint
            </Button>
          }
          title="Create a New Sprint"
          description="Organize your work into time-boxed sprints."
          form={CreateSprintForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={""}
          resourceKey={[]}
        />
      </div>

      <VelocityChart sprints={completedSprints} />

      {activeSprint ? (
        <div className="rounded-lg border p-4">
          <div className="mb-4 flex items-center justify-between">
            <div>
              <h3 className="text-xl font-semibold">{activeSprint.name}</h3>
              <p className="text-muted-foreground">{activeSprint.goal}</p>
            </div>
            <Button onClick={() => handleCompleteSprint(activeSprint.id)}>
              Complete Sprint
            </Button>
          </div>
          <div className="h-[60vh]">
            <KanbanBoard
              workspaceId={workspaceId}
              projectId={projectId}
              views={views}
              tasks={activeSprintTasks}
              onTaskSelect={onTaskSelect}
            />
          </div>
        </div>
      ) : (
        <EmptyState
          icon={<PlusCircle className="h-10 w-10" />}
          title="No Active Sprint"
          description="Start a planned sprint or create a new one to begin."
        />
      )}

      <SprintList
        sprints={sprintsData?.data || []}
        onStartSprint={handleStartSprint}
        onCompleteSprint={handleCompleteSprint}
      />
    </div>
  );
}

// FILE: src/features/sprints/components/SprintList.tsx
// FILE: src/features/sprints/components/SprintList.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Sprint } from "../sprint.types";
import { SprintStatus } from "@/types";

interface SprintListProps {
  sprints: Sprint[];
  onStartSprint: (sprintId: string) => void;
  onCompleteSprint: (sprintId: string) => void;
}

export function SprintList({
  sprints,
  onStartSprint,
  onCompleteSprint,
}: SprintListProps) {
  const plannedSprints = sprints.filter(
    (s) => s.status === SprintStatus.PLANNING
  );
  const completedSprints = sprints.filter(
    (s) => s.status === SprintStatus.COMPLETED
  );

  return (
    <div className="space-y-4">
      {plannedSprints.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Planned Sprints</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            {plannedSprints.map((sprint) => (
              <div
                key={sprint.id}
                className="flex items-center justify-between rounded-md border p-2"
              >
                <span>{sprint.name}</span>
                <Button size="sm" onClick={() => onStartSprint(sprint.id)}>
                  Start Sprint
                </Button>
              </div>
            ))}
          </CardContent>
        </Card>
      )}
      {completedSprints.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Completed Sprints</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            {completedSprints.map((sprint) => (
              <div
                key={sprint.id}
                className="flex items-center justify-between rounded-md border p-2"
              >
                <span>{sprint.name}</span>
                <span className="text-muted-foreground text-sm">
                  Completed on {new Date(sprint.updatedAt).toLocaleDateString()}
                </span>
              </div>
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  );
}

// FILE: src/features/sprints/sprint.types.ts
// FILE: src/features/sprints/sprint.types.ts
import { z } from "zod";
import { SprintStatus } from "@/types";
import {
  createPaginationSchema,
  createPaginatedResponseSchema,
  createUuidParamSchema,
} from "@/lib/zod";

export const SprintIdParamsSchema = createUuidParamSchema("sprintId", "Sprint");

export const SprintSchema = z.object({
  __typename: z.literal("Sprint"),
  id: z.string().uuid(),
  name: z.string(),
  goal: z.string().nullable(),
  startDate: z.date().nullable(),
  endDate: z.date().nullable(),
  status: z.nativeEnum(SprintStatus),
  completedStoryPoints: z.number().int().nullable().optional(),
  projectId: z.string().uuid(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type Sprint = z.infer<typeof SprintSchema>;

export const CreateSprintDtoSchema = z.object({
  name: z.string().min(1, "Sprint name is required."),
  goal: z.string().optional().nullable(),
  startDate: z.date().optional().nullable(),
  endDate: z.date().optional().nullable(),
  projectId: z.string().uuid(),
});
export type CreateSprintDto = z.infer<typeof CreateSprintDtoSchema>;

export const UpdateSprintDtoSchema = CreateSprintDtoSchema.omit({
  projectId: true,
}).partial();
export type UpdateSprintDto = z.infer<typeof UpdateSprintDtoSchema>;

export const ListSprintsQuerySchema = createPaginationSchema().extend({
  status: z.nativeEnum(SprintStatus).optional(),
});
export type ListSprintsQuery = z.infer<typeof ListSprintsQuerySchema>;

export const PaginatedSprintsResponseSchema =
  createPaginatedResponseSchema(SprintSchema);

// FILE: src/features/task-templates/api/useInstantiateTaskTemplate.ts
// FILE: src/features/task-templates/api/useInstantiateTaskTemplate.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface InstantiateParams {
  workspaceId: string;
  projectId: string;
  templateId: string;
}

async function instantiateTemplate({
  workspaceId,
  projectId,
  templateId,
}: InstantiateParams): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/task-templates/${templateId}/instantiate`
  );
  return data;
}

export function useInstantiateTaskTemplate(
  workspaceId: string,
  projectId: string
) {
  return useApiMutation({
    mutationFn: (templateId: string) =>
      instantiateTemplate({ workspaceId, projectId, templateId }),
    successMessage: "Task created from template.",
    invalidateQueries: [["tasks", projectId]],
  });
}

// FILE: src/features/task-templates/api/useManageTaskTemplates.ts
// FILE: src/features/task-templates/api/useManageTaskTemplates.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageTaskTemplates(workspaceId: string, projectId: string) {
  const resource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/task-templates`,
    ["taskTemplates", projectId]
  );
  return resource;
}

// FILE: src/features/task-templates/components/CreateTemplateFromTaskDialog.tsx
// FILE: src/features/task-templates/components/CreateTemplateFromTaskDialog.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useManageTaskTemplates } from "../api/useManageTaskTemplates";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { Task } from "@/features/tasks/task.types";

const formSchema = z.object({
  name: z.string().min(1, "Template name is required."),
});
type FormValues = z.infer<typeof formSchema>;

interface CreateTemplateFromTaskDialogProps {
  workspaceId: string;
  projectId: string;
  task: Task;
  onSuccess?: () => void;
}

export function CreateTemplateFromTaskForm({
  workspaceId,
  projectId,
  task,
  onSuccess,
}: CreateTemplateFromTaskDialogProps) {
  const { useCreate } = useManageTaskTemplates(workspaceId, projectId);
  const createMutation = useCreate();

  const methods = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { name: task.title },
  });

  useEffect(() => {
    methods.reset({ name: `Template: ${task.title}` });
  }, [task, methods]);

  function onSubmit(values: FormValues) {
    const {
      id,
      createdAt,
      updatedAt,
      projectId: pId,
      workspaceId: wId,
      ...templateData
    } = task;

    createMutation.mutate({ name: values.name, templateData }, { onSuccess });
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Template Name"
            placeholder="Enter a name for the template"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending ? "Saving..." : "Save Template"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/task-templates/components/TemplateSelectorDialog.tsx
// FILE: src/features/task-templates/components/TemplateSelectorDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { useManageTaskTemplates } from "../api/useManageTaskTemplates";
import { useInstantiateTaskTemplate } from "../api/useInstantiateTaskTemplate";
import { Skeleton } from "@/components/ui/skeleton";

interface TemplateSelectorDialogProps {
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function TemplateSelectorDialog({
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: TemplateSelectorDialogProps) {
  const { data: templatesData, isLoading } = useManageTaskTemplates(
    workspaceId,
    projectId
  ).useGetAll();
  const instantiateMutation = useInstantiateTaskTemplate(
    workspaceId,
    projectId
  );

  const handleSelect = (templateId: string) => {
    instantiateMutation.mutate(templateId, {
      onSuccess: () => {
        onOpenChange(false);
      },
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create Task from Template</DialogTitle>
          <DialogDescription>
            Select a template to create a new task with pre-filled information.
          </DialogDescription>
        </DialogHeader>
        <Command>
          <CommandInput placeholder="Search templates..." />
          <CommandList>
            {isLoading && (
              <div className="space-y-2 p-4">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
              </div>
            )}
            <CommandEmpty>No templates found.</CommandEmpty>
            <CommandGroup>
              {templatesData?.data?.map((template: any) => (
                <CommandItem
                  key={template.id}
                  value={template.name}
                  onSelect={() => handleSelect(template.id)}
                  disabled={instantiateMutation.isPending}
                >
                  {template.name}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/task-templates/task-template.types.ts
// FILE: src/features/task-templates/task-template.types.ts
import { z } from "zod";
import { createUuidParamSchema } from "@/lib/zod";
import { UpdateTaskDtoSchema } from "@/features/tasks/task.types";

export const TaskTemplateIdParamsSchema = createUuidParamSchema(
  "templateId",
  "Task Template"
);

export const TaskTemplateSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  description: z.string().nullable(),
  projectId: z.string().uuid(),
  templateData: z.any(), // Represents the JSON data for the task
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type TaskTemplate = z.infer<typeof TaskTemplateSchema>;

export const CreateTaskTemplateDtoSchema = z.object({
  name: z.string().min(1, "Template name is required."),
  description: z.string().optional().nullable(),
  templateData: UpdateTaskDtoSchema.extend({
    title: z.string().optional(), // Title is part of the template, not separate
  }),
});

export type CreateTaskTemplateDto = z.infer<typeof CreateTaskTemplateDtoSchema>;

// FILE: src/features/task-types/api/useManageTaskTypes.ts
// FILE: src/features/task-types/api/useManageTaskTypes.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageTaskTypes(workspaceId: string, projectId: string) {
  const resource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/task-types`,
    ["taskTypes", projectId]
  );
  return resource;
}

// FILE: src/features/task-types/components/TaskTypeForm.tsx
// FILE: src/features/task-types/components/TaskTypeForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { CreateTaskTypeDtoSchema } from "../task-type.types";

type TaskTypeFormValues = z.infer<typeof CreateTaskTypeDtoSchema>;

interface TaskTypeFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function TaskTypeForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: TaskTypeFormProps) {
  const isEditMode = !!initialData;
  const { useCreate, useUpdate } = useManageTaskTypes(workspaceId, projectId);
  const createMutation = useCreate();
  const updateMutation = useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<TaskTypeFormValues>({
    resolver: zodResolver(CreateTaskTypeDtoSchema),
    defaultValues: {
      name: "",
      icon: "",
      color: "",
    },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset(initialData);
    }
  }, [initialData, isEditMode, methods]);

  async function onSubmit(values: TaskTypeFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Type Name"
            placeholder="e.g., Bug, Story, Spike"
          />
          <FormInput
            name="icon"
            label="Icon (Optional)"
            placeholder="e.g., Bug, Flame, Lightbulb"
          />
          <FormInput
            name="color"
            label="Color (Optional)"
            placeholder="e.g., #ff0000, blue.500"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Type"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/task-types/components/TaskTypeList.tsx
// FILE: src/features/task-types/components/TaskTypeList.tsx
import { useState } from "react";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MoreHorizontal, Edit, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { TaskTypeForm } from "./TaskTypeForm";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

export function TaskTypeList({ workspaceId, projectId }: ListProps) {
  const { useGetAll, useDelete } = useManageTaskTypes(workspaceId, projectId);
  const { data: typesData, isLoading } = useGetAll();
  const deleteMutation = useDelete();
  const [editingTypeId, setEditingTypeId] = useState<string | null>(null);
  const handleDelete = (type: any) => {
    if (window.confirm(`Delete task type "${type.name}"? This is permanent.`)) {
      deleteMutation.mutate(type.id);
    }
  };

  if (isLoading) return <div>Loading custom task types...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Icon</TableHead>
              <TableHead>Color</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {typesData?.data && typesData.data.length > 0 ? (
              typesData.data.map((type: any) => (
                <TableRow key={type.id}>
                  <TableCell className="font-medium">{type.name}</TableCell>
                  <TableCell>{type.icon}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <div
                        className="h-4 w-4 rounded-full"
                        style={{
                          backgroundColor: type.color || "transparent",
                          border: "1px solid #ccc",
                        }}
                      />
                      <span>{type.color}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem
                          onClick={() => setEditingTypeId(type.id)}
                        >
                          <Edit className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          className="text-red-500"
                          onClick={() => handleDelete(type)}
                          disabled={deleteMutation.isPending}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  No custom task types defined for this project.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <ResourceCrudDialog
        isOpen={!!editingTypeId}
        onOpenChange={(isOpen) => !isOpen && setEditingTypeId(null)}
        resourceId={editingTypeId}
        resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/task-types`}
        resourceKey={["taskTypes", projectId]}
        title="Edit Task Type"
        description="Change the name, icon, or color for this task type."
        form={TaskTypeForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}

// FILE: src/features/task-types/components/TaskTypeSelector.tsx
// FILE: src/features/task-types/components/TaskTypeSelector.tsx
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import { TaskType } from "../task-type.types";

interface TaskTypeSelectorProps {
  workspaceId: string;
  projectId: string;
  value: string | null;
  onValueChange: (value: string) => void;
  disabled?: boolean;
}

export function TaskTypeSelector({
  workspaceId,
  projectId,
  value,
  onValueChange,
  disabled,
}: TaskTypeSelectorProps) {
  const { data: typesData, isLoading } = useManageTaskTypes(
    workspaceId,
    projectId
  ).useGetAll();

  return (
    <Select
      value={value ?? ""}
      onValueChange={onValueChange}
      disabled={disabled || isLoading}
    >
      <SelectTrigger>
        <SelectValue placeholder="Select a type..." />
      </SelectTrigger>
      <SelectContent>
        {isLoading ? (
          <SelectItem value="loading" disabled>
            Loading types...
          </SelectItem>
        ) : (
          typesData?.data?.map((type: TaskType) => (
            <SelectItem key={type.id} value={type.id}>
              {type.name}
            </SelectItem>
          ))
        )}
      </SelectContent>
    </Select>
  );
}

// FILE: src/features/task-types/task-type.types.ts
// FILE: src/features/task-types/task-type.types.ts
import { z } from "zod";
import { createUuidParamSchema } from "@/lib/zod";

export const TaskTypeIdParamsSchema = createUuidParamSchema(
  "taskTypeId",
  "Task Type"
);

export const TaskTypeSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  icon: z.string().nullable(),
  color: z.string().nullable(),
  projectId: z.string().uuid(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type TaskType = z.infer<typeof TaskTypeSchema>;

export const CreateTaskTypeDtoSchema = z.object({
  name: z.string().min(1, "Type name is required."),
  icon: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
});
export type CreateTaskTypeDto = z.infer<typeof CreateTaskTypeDtoSchema>;

export const UpdateTaskTypeDtoSchema = CreateTaskTypeDtoSchema.partial();
export type UpdateTaskTypeDto = z.infer<typeof UpdateTaskTypeDtoSchema>;

// FILE: src/features/tasks/api/useAttachDocument.ts
// FILE: src/features/tasks/api/useAttachDocument.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface AttachDocumentParams {
  workspaceId?: string;
  projectId?: string;
  taskId: string;
  formData: FormData;
}

async function attachDocument({
  workspaceId,
  projectId,
  taskId,
  formData,
}: AttachDocumentParams): Promise<any> {
  const url =
    projectId && workspaceId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/documents`
      : `/tasks/${taskId}/documents`;

  const { data } = await api.post(url, formData, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return data;
}

export function useAttachDocument(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (formData: FormData) =>
      attachDocument({ workspaceId, projectId, taskId, formData }),
    successMessage: "Document attached successfully.",
    invalidateQueries: [["task", taskId]],
  });
}

// FILE: src/features/tasks/api/useDetachDocument.ts
// FILE: src/features/tasks/api/useDetachDocument.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { DocumentType } from "@/types";

interface DetachDocumentParams {
  workspaceId?: string;
  projectId?: string;
  taskId: string;
  documentId: string;
  type: DocumentType;
}

async function detachDocument({
  workspaceId,
  projectId,
  taskId,
  documentId,
  type,
}: DetachDocumentParams): Promise<void> {
  const url =
    projectId && workspaceId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/documents/${documentId}/${type}`
      : `/tasks/${taskId}/documents/${documentId}/${type}`;
  await api.delete(url);
}

export function useDetachDocument(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (params: { documentId: string; type: DocumentType }) =>
      detachDocument({ workspaceId, projectId, taskId, ...params }),
    successMessage: "Document detached successfully.",
    invalidateQueries: [["task", taskId]],
  });
}

// FILE: src/features/tasks/api/useMoveTask.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { TaskStatus } from "@/types";
import { Task } from "../task.types";
import { useQueryClient, QueryKey } from "@tanstack/react-query";
import { toast } from "sonner";

interface MoveTaskParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  targetColumnId: string;
  orderInColumn: number;
  newStatus: TaskStatus | null;
}

async function moveTask(params: MoveTaskParams): Promise<any> {
  const { workspaceId, projectId, taskId, targetColumnId, orderInColumn } =
    params;
  const { data } = await api.patch(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/move`,
    { targetColumnId, orderInColumn }
  );
  return data;
}

const updateTaskInTree = (
  tasks: Task[],
  taskId: string,
  updates: Partial<Task>
): Task[] => {
  return tasks.map((task) => {
    if (task.id === taskId) {
      return { ...task, ...updates };
    }
    if (task.subtasks && task.subtasks.length > 0) {
      return {
        ...task,
        subtasks: updateTaskInTree(task.subtasks, taskId, updates),
      };
    }
    return task;
  });
};

type MoveTaskContext =
  | {
      previousData: Map<QueryKey, any>;
    }
  | undefined;

export function useMoveTask(projectId: string) {
  const queryClient = useQueryClient();

  return useApiMutation<Task, MoveTaskParams, MoveTaskContext>({
    mutationFn: moveTask,
    onMutate: async (variables) => {
      const { taskId, targetColumnId, orderInColumn, newStatus } = variables;
      const queryKeyPrefix = ["projects", projectId, "tasks", "view"];

      await queryClient.cancelQueries({
        queryKey: queryKeyPrefix,
        exact: false,
      });

      const queries = queryClient
        .getQueryCache()
        .findAll({ queryKey: queryKeyPrefix });

      const previousData = new Map<QueryKey, any>();
      queries.forEach((query) => {
        previousData.set(query.queryKey, query.state.data);
      });

      for (const [queryKey, oldData] of previousData.entries()) {
        if (!oldData || !oldData.data) continue;

        const originalTask = oldData.data.find((t: Task) => t.id === taskId);

        const updatedData = {
          ...oldData,
          data: updateTaskInTree(oldData.data, taskId, {
            boardColumnId: targetColumnId,
            orderInColumn,
            status: newStatus ?? originalTask?.status,
          }),
        };
        queryClient.setQueryData(queryKey, updatedData);
      }

      return { previousData };
    },
    onError: (_err, _variables, context) => {
      if (context?.previousData) {
        context.previousData.forEach((data: any, queryKey: QueryKey) => {
          queryClient.setQueryData(queryKey, data);
        });
        toast.error("Failed to move task. Reverting changes.");
      }
    },
    onSettled: () => {
      const queryKeyPrefix = ["projects", projectId, "tasks", "view"];
      queryClient.invalidateQueries({ queryKey: queryKeyPrefix, exact: false });
    },
  });
}

// FILE: src/features/tasks/api/useUpdateMyTask.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { Task } from "../task.types";
import { useQueryClient, QueryKey } from "@tanstack/react-query";
import { toast } from "sonner";

interface UpdateMyTaskParams {
  taskId: string;
  workspaceId?: string | null;
  projectId?: string | null;
  taskData: Partial<Task>;
}

async function updateMyTask({
  taskId,
  workspaceId,
  projectId,
  taskData,
}: UpdateMyTaskParams): Promise<Task> {
  const url =
    workspaceId && projectId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`
      : `/tasks/${taskId}`;
  const { data } = await api.put(url, taskData);
  return data;
}

type UpdateMyTaskContext = {
  previousData: Map<QueryKey, any>;
};

export function useUpdateMyTask() {
  const queryClient = useQueryClient();
  return useApiMutation<Task, UpdateMyTaskParams, UpdateMyTaskContext>({
    mutationFn: updateMyTask,
    onMutate: async (variables) => {
      const { taskId, taskData } = variables;
      const queryKeyPrefix = ["myTasks"];

      await queryClient.cancelQueries({
        queryKey: queryKeyPrefix,
        exact: false,
      });

      const queries = queryClient
        .getQueryCache()
        .findAll({ queryKey: queryKeyPrefix });

      const previousData = new Map<QueryKey, any>();
      queries.forEach((query) => {
        previousData.set(query.queryKey, query.state.data);
      });

      for (const [queryKey, oldData] of previousData.entries()) {
        if (!oldData || !oldData.data) continue;

        const updatedData = {
          ...oldData,
          data: oldData.data.map((task: Task) =>
            task.id === taskId ? { ...task, ...taskData } : task
          ),
        };
        queryClient.setQueryData(queryKey, updatedData);
      }

      return { previousData };
    },
    onError: (_err, _variables, context) => {
      if (context?.previousData) {
        context.previousData.forEach((data, queryKey) => {
          queryClient.setQueryData(queryKey, data);
        });
        toast.error("Failed to update task. Reverting changes.");
      }
    },
    onSettled: (_data, _error, variables) => {
      queryClient.invalidateQueries({ queryKey: ["myTasks"] });
      if (variables.projectId) {
        queryClient.invalidateQueries({
          queryKey: ["projects", variables.projectId, "tasks"],
        });
      }
      queryClient.invalidateQueries({ queryKey: ["task", variables.taskId] });
    },
  });
}
// FILE: src/features/tasks/api/useUpdateTaskCustomValues.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface UpdateValuesParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  updates: { fieldId: string; value: any }[];
}

async function updateTaskCustomValues({
  workspaceId,
  projectId,
  taskId,
  updates,
}: UpdateValuesParams): Promise<any> {
  const { data } = await api.patch(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/custom-fields`,
    { updates }
  );
  return data;
}

export function useUpdateTaskCustomValues(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (updates: { fieldId: string; value: any }[]) =>
      updateTaskCustomValues({ workspaceId, projectId, taskId, updates }),
    invalidateQueries: [
      ["task", taskId],
      ["tasks", projectId],
    ],
  });
}
// FILE: src/features/tasks/components/AssigneeSelector.tsx
import { useMemo, useState } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, UserPlus, X } from "lucide-react";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAbsoluteUrl } from "@/lib/utils";
import { FormControl } from "@/components/ui/form";

interface AssigneeSelectorProps {
  projectId?: string | null;
  workspaceId?: string;
  selectedIds: string[];
  onSelectionChange: (newIds: string[]) => void;
}

type SelectableUser = {
  id: string;
  name: string;
  avatarUrl: string | null;
};

export function AssigneeSelector({
  projectId,
  workspaceId,
  selectedIds,
  onSelectionChange,
}: AssigneeSelectorProps) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { data: projectMembersData, isLoading: isLoadingProjectMembers } =
    useGetProjectMembers(workspaceId!, projectId!, { enabled: !!projectId });

  const userResource = useApiResource("admin/users", ["users"]);
  const { data: allUsersData, isLoading: isLoadingAllUsers } =
    userResource.useGetAll({
      limit: 1000,
      enabled: !projectId,
    });

  const isLoading = isLoadingProjectMembers || isLoadingAllUsers;

  const availableUsers: SelectableUser[] = useMemo(() => {
    if (projectId) {
      return (
        projectMembersData?.map((member: any) => ({
          id: member.userId,
          name: member.name,
          avatarUrl: member.avatarUrl,
        })) || []
      );
    }
    return (
      allUsersData?.data?.map((user: any) => ({
        id: user.id,
        name: user.name,
        avatarUrl: user.avatarUrl,
      })) || []
    );
  }, [projectId, projectMembersData, allUsersData]);

  const selectedUsers = useMemo(
    () => availableUsers.filter((user) => selectedIds.includes(user.id)) || [],
    [availableUsers, selectedIds]
  );

  const unassignedUsers = useMemo(
    () => availableUsers.filter((user) => !selectedIds.includes(user.id)),
    [availableUsers, selectedIds]
  );

  const handleSelect = (userId: string) => {
    onSelectionChange([...selectedIds, userId]);
    setPopoverOpen(false);
  };

  const handleRemove = (userId: string) => {
    onSelectionChange(selectedIds.filter((id) => id !== userId));
  };

  return (
    <FormControl>
      <div className="border-input flex min-h-9 flex-wrap items-center gap-2 rounded-md border p-1">
        {selectedUsers.map((user) => (
          <Badge
            key={user.id}
            variant="secondary"
            className="flex items-center gap-2 rounded-full bg-gray-100 py-0.5 pr-2 pl-0.5"
          >
            <Avatar className="h-5 w-5">
              <AvatarImage
                src={getAbsoluteUrl(user.avatarUrl)}
                alt={user.name}
              />
              <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="text-sm font-normal">{user.name}</span>
            <Button
              size="icon"
              variant="ghost"
              type="button"
              className="ml-1 h-4 w-4 rounded-full"
              onClick={() => handleRemove(user.id)}
            >
              <X className="text-muted-foreground hover:text-primary h-3 w-3" />
            </Button>
          </Badge>
        ))}

        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              disabled={isLoading}
            >
              <UserPlus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[200px] p-0">
            <Command>
              <CommandInput placeholder="Assign user..." />
              <CommandList>
                <CommandEmpty>No available users found.</CommandEmpty>
                <CommandGroup>
                  {unassignedUsers.map((user: SelectableUser) => (
                    <CommandItem
                      key={user.id}
                      value={user.name}
                      onSelect={() => handleSelect(user.id)}
                      className="flex items-center"
                    >
                      <Avatar className="mr-2 h-5 w-5">
                        <AvatarImage
                          src={getAbsoluteUrl(user.avatarUrl)}
                          alt={user.name}
                        />
                        <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <span className="flex-1 truncate">{user.name}</span>
                      <Check
                        className={cn(
                          "ml-auto h-4 w-4",
                          selectedIds.includes(user.id)
                            ? "opacity-100"
                            : "opacity-0"
                        )}
                      />
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </FormControl>
  );
}

// FILE: src/features/tasks/components/ChecklistItem.tsx
// FILE: src/features/tasks/components/ChecklistItem.tsx
import { useState } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { ChecklistItem as ChecklistItemType } from "../task.types";

interface ChecklistItemProps {
  item: ChecklistItemType;
  onUpdate: (id: string, updates: Partial<ChecklistItemType>) => void;
  onRemove: (id: string) => void;
}

export function ChecklistItem({
  item,
  onUpdate,
  onRemove,
}: ChecklistItemProps) {
  const [text, setText] = useState(item.text);
  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setText(e.target.value);
  };

  const handleBlur = () => {
    if (text.trim() === "") {
      onRemove(item.id);
    } else if (text !== item.text) {
      onUpdate(item.id, { text });
    }
  };

  return (
    <div className="group flex items-center gap-2">
      <Checkbox
        checked={item.completed}
        onCheckedChange={(checked) =>
          onUpdate(item.id, { completed: !!checked })
        }
      />
      <Input
        value={text}
        onChange={handleTextChange}
        onBlur={handleBlur}
        className={`h-8 flex-grow ${item.completed ? "text-muted-foreground line-through" : ""}`}
      />
      <Button
        variant="ghost"
        size="icon"
        className="h-8 w-8 opacity-0 group-hover:opacity-100"
        onClick={() => onRemove(item.id)}
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}

// FILE: src/features/tasks/components/CreateTaskForm.tsx
// FILE: src/features/tasks/components/CreateTaskForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormRichTextEditor,
  FormSelect,
  FormDatePicker,
  FormAssigneeSelector,
  FormTaskTypeSelector,
} from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useGetProfile } from "@/features/profile/api/useGetProfile";
import { AxiosError } from "axios";
import { TaskStatus, TaskPriority } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";

const taskSchema = z.object({
  title: z.string().min(1, "Title is required."),
  description: z.string().optional(),
  status: z.nativeEnum(TaskStatus),
  priority: z.nativeEnum(TaskPriority),
  taskTypeId: z.string().uuid().nullable().optional(),
  epicId: z.string().nullable().optional(),
  parentId: z.string().nullable().optional(),
  boardColumnId: z.string().uuid().optional().nullable(),
  dueDate: z.date().optional().nullable(),
  assigneeIds: z
    .array(z.string().uuid())
    .min(1, "At least one assignee is required."),
});

type TaskFormValues = z.infer<typeof taskSchema>;

interface CreateTaskFormProps {
  workspaceId?: string;
  projectId?: string;
  parentId?: string | null;
  onSuccess?: () => void;
  defaultValues?: Partial<TaskFormValues>;
}

export function CreateTaskForm({
  workspaceId,
  projectId,
  parentId = null,
  onSuccess,
  defaultValues,
}: CreateTaskFormProps) {
  const taskResource = useApiResource(
    projectId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
      : "/tasks",
    projectId ? ["tasks", projectId] : ["myTasks"]
  );
  const epicResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`,
    ["epics", projectId]
  );

  const createMutation = taskResource.useCreate();
  const { data: epicsData, isLoading: isLoadingEpics } =
    epicResource.useGetAll();
  const { data: profileData } = useGetProfile();
  const methods = useForm<TaskFormValues>({
    resolver: zodResolver(taskSchema),
    defaultValues: {
      title: "",
      description: "",
      status: TaskStatus.TODO,
      priority: TaskPriority.NONE,
      taskTypeId: null,
      epicId: null,
      parentId: parentId,
      boardColumnId: null,
      dueDate: null,
      assigneeIds: [],
      ...defaultValues,
    },
  });

  useEffect(() => {
    if (profileData && !methods.getValues("assigneeIds")?.length) {
      methods.setValue("assigneeIds", [profileData.id]);
    }
  }, [profileData, methods]);
  async function onSubmit(values: TaskFormValues) {
    const submitData: Partial<TaskFormValues> = { ...values };
    if (!submitData.boardColumnId) delete submitData.boardColumnId;
    if (!submitData.epicId) delete submitData.epicId;
    if (!submitData.parentId) delete submitData.parentId;
    if (!submitData.taskTypeId) delete submitData.taskTypeId;

    await createMutation.mutate(submitData, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;
  const statusOptions = Object.values(TaskStatus).map((s) => ({
    value: s,
    label: s,
  }));
  const priorityOptions = Object.values(TaskPriority).map((p) => ({
    value: p,
    label: p,
  }));
  const epicOptions =
    epicsData?.data?.map((epic: any) => ({
      value: epic.id,
      label: epic.name,
    })) || [];

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="title"
            label="Title"
            placeholder="e.g. Draft Q3 financial report"
          />
          {projectId && workspaceId && (
            <FormTaskTypeSelector
              name="taskTypeId"
              label="Task Type"
              workspaceId={workspaceId}
              projectId={projectId}
            />
          )}
          <FormAssigneeSelector
            name="assigneeIds"
            label="Assignees"
            projectId={projectId}
            workspaceId={workspaceId}
          />
          <FormRichTextEditor name="description" label="Description" />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="status"
              label="Status"
              placeholder="Set status"
              options={statusOptions}
            />
            <FormSelect
              name="priority"
              label="Priority"
              placeholder="Set priority"
              options={priorityOptions}
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            {projectId && (
              <FormSelect
                name="epicId"
                label="Epic (Optional)"
                placeholder={isLoadingEpics ? "Loading..." : "Select an epic"}
                options={epicOptions}
              />
            )}
            <FormDatePicker name="dueDate" label="Due Date (Optional)" />
          </div>

          {errorMessage && (
            <div className="text-sm font-medium text-red-500">
              {errorMessage}
            </div>
          )}

          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending ? "Creating Task..." : "Create Task"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/tasks/components/MyTasksKanbanBoard.tsx
import { useState, useMemo } from "react";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  DragStartEvent,
  PointerSensor,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { Task } from "../task.types";
import { TaskStatus } from "@/types";
import { KanbanColumn } from "@/features/views/components/KanbanColumn";
import { KanbanTaskCard } from "@/features/views/components/KanbanTaskCard";
import { useUpdateMyTask } from "../api/useUpdateMyTask";

interface MyTasksKanbanBoardProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

const KANBAN_COLUMNS = [
  { id: "col-todo", name: "To Do", status: TaskStatus.TODO },
  {
    id: "col-in-progress",
    name: "In Progress",
    status: TaskStatus.IN_PROGRESS,
  },
  { id: "col-in-review", name: "In Review", status: TaskStatus.IN_REVIEW },
  { id: "col-done", name: "Done", status: TaskStatus.DONE },
];

export function MyTasksKanbanBoard({
  tasks,
  onTaskSelect,
}: MyTasksKanbanBoardProps) {
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const updateTaskMutation = useUpdateMyTask();

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const tasksByColumn = useMemo(() => {
    const grouped: Record<string, Task[]> = {};
    KANBAN_COLUMNS.forEach((col) => (grouped[col.id] = []));

    tasks.forEach((task) => {
      const column = KANBAN_COLUMNS.find((col) => col.status === task.status);
      if (column) {
        grouped[column.id].push(task);
      }
    });
    return grouped;
  }, [tasks]);

  const onDragStart = (event: DragStartEvent) => {
    const task = tasks.find((t) => t.id === event.active.id);
    if (task) setActiveTask(task);
  };

  const onDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;

    if (!over || active.id === over.id) return;

    const task = tasks.find((t) => t.id === active.id);
    if (!task) return;

    const targetColumnId =
      over.data.current?.sortable?.containerId?.toString() ??
      over.id.toString();
    const targetColumn = KANBAN_COLUMNS.find(
      (col) => col.id === targetColumnId
    );

    if (targetColumn && task.status !== targetColumn.status) {
      updateTaskMutation.mutate({
        taskId: task.id,
        workspaceId: task.workspaceId,
        projectId: task.projectId,
        taskData: { status: targetColumn.status },
      });
    }
  };

  return (
    <DndContext
      sensors={sensors}
      onDragStart={onDragStart}
      onDragEnd={onDragEnd}
    >
      <div className="flex h-full gap-4 overflow-x-auto p-1">
        {KANBAN_COLUMNS.map((col) => (
          <KanbanColumn
            key={col.id}
            column={col}
            tasks={tasksByColumn[col.id] || []}
            onTaskSelect={onTaskSelect}
          />
        ))}
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}

// FILE: src/features/tasks/components/RecurrenceSelector.tsx
// FILE: src/features/tasks/components/RecurrenceSelector.tsx
import { useState, useEffect } from "react";
import { RRule, rrulestr, Options } from "rrule";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Repeat } from "lucide-react";

interface RecurrenceSelectorProps {
  value: string | null;
  onSave: (rruleString: string | null) => void;
}

const frequencies = [
  { value: RRule.DAILY, label: "Daily" },
  { value: RRule.WEEKLY, label: "Weekly" },
  { value: RRule.MONTHLY, label: "Monthly" },
  { value: RRule.YEARLY, label: "Yearly" },
];

const weekdays = [
  { value: RRule.MO, label: "M" },
  { value: RRule.TU, label: "T" },
  { value: RRule.WE, label: "W" },
  { value: RRule.TH, label: "T" },
  { value: RRule.FR, label: "F" },
  { value: RRule.SA, label: "S" },
  { value: RRule.SU, label: "S" },
];

export function RecurrenceSelector({ value, onSave }: RecurrenceSelectorProps) {
  const [options, setOptions] = useState<Partial<Options>>({});
  const [ruleText, setRuleText] = useState("Does not repeat");
  const [popoverOpen, setPopoverOpen] = useState(false);

  useEffect(() => {
    if (value) {
      try {
        const rule = rrulestr(value);
        setOptions(rule.options);
        setRuleText(rule.toText());
      } catch (e) {
        console.error("Error parsing RRULE string:", e);
        setRuleText("Invalid rule");
      }
    } else {
      setOptions({});
      setRuleText("Does not repeat");
    }
  }, [value]);

  const handleSave = () => {
    if (Object.keys(options).length === 0 || options.freq === undefined) {
      onSave(null);
    } else {
      const rule = new RRule({ dtstart: new Date(), ...options });
      onSave(rule.toString());
    }
    setPopoverOpen(false);
  };

  const handleClear = () => {
    setOptions({});
    onSave(null);
    setPopoverOpen(false);
  };

  const freq = options.freq ?? RRule.DAILY;

  const byweekdayValue = options.byweekday
    ? (Array.isArray(options.byweekday)
        ? options.byweekday
        : [options.byweekday]
      ).map((day) => day.toString())
    : [];

  return (
    <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
      <PopoverTrigger asChild>
        <Button variant="outline" className="w-full justify-start font-normal">
          <Repeat className="mr-2 h-4 w-4" />
          <span className="truncate">{ruleText}</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80">
        <div className="grid gap-4">
          <div className="space-y-2">
            <h4 className="leading-none font-medium">Recurrence</h4>
            <p className="text-muted-foreground text-sm">
              Set how often this task should repeat.
            </p>
          </div>
          <div className="grid gap-2">
            <div className="grid grid-cols-3 items-center gap-4">
              <Label htmlFor="freq">Repeats</Label>
              <Select
                value={freq?.toString()}
                onValueChange={(val) =>
                  setOptions({ ...options, freq: parseInt(val) })
                }
              >
                <SelectTrigger id="freq" className="col-span-2 h-8">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {frequencies.map((f) => (
                    <SelectItem key={f.value} value={f.value.toString()}>
                      {f.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {freq === RRule.WEEKLY && (
              <div className="grid grid-cols-3 items-center gap-4">
                <Label>On</Label>
                <ToggleGroup
                  type="multiple"
                  variant="outline"
                  className="col-span-2 justify-start"
                  value={byweekdayValue}
                  onValueChange={(days) =>
                    setOptions({ ...options, byweekday: days.map(Number) })
                  }
                >
                  {weekdays.map((day) => (
                    <ToggleGroupItem
                      key={day.value.weekday}
                      value={String(day.value.weekday)}
                      className="h-8 w-8"
                    >
                      {day.label}
                    </ToggleGroupItem>
                  ))}
                </ToggleGroup>
              </div>
            )}
            <div className="grid grid-cols-3 items-center gap-4">
              <Label htmlFor="interval">Interval</Label>
              <Input
                id="interval"
                type="number"
                defaultValue={options.interval || 1}
                onChange={(e) =>
                  setOptions({
                    ...options,
                    interval: parseInt(e.target.value) || 1,
                  })
                }
                className="col-span-2 h-8"
              />
            </div>
          </div>
          <div className="flex justify-end gap-2">
            <Button variant="ghost" size="sm" onClick={handleClear}>
              Clear
            </Button>
            <Button size="sm" onClick={handleSave}>
              Set
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}

// FILE: src/features/tasks/components/SubtaskItem.tsx
import { Badge } from "@/components/ui/badge";
import {
  CheckCircle2,
  Circle,
  CircleDashed,
  CircleSlash,
  Eye,
  OctagonAlert,
} from "lucide-react";
import { TaskStatus } from "@/types";
import React from "react";
import { Task } from "../task.types";

interface SubtaskItemProps {
  task: Task;
  onTaskSelect: (taskId: string) => void;
}

const statusIconMap: Record<TaskStatus, React.ElementType> = {
  [TaskStatus.TODO]: Circle,
  [TaskStatus.IN_PROGRESS]: CircleDashed,
  [TaskStatus.IN_REVIEW]: Eye,
  [TaskStatus.DONE]: CheckCircle2,
  [TaskStatus.BLOCKED]: OctagonAlert,
  [TaskStatus.CANCELLED]: CircleSlash,
};

const statusColorMap: Record<TaskStatus, string> = {
  [TaskStatus.TODO]: "text-gray-500",
  [TaskStatus.IN_PROGRESS]: "text-blue-500",
  [TaskStatus.IN_REVIEW]: "text-purple-500",
  [TaskStatus.DONE]: "text-green-500",
  [TaskStatus.BLOCKED]: "text-red-500",
  [TaskStatus.CANCELLED]: "text-gray-400",
};

export function SubtaskItem({ task, onTaskSelect }: SubtaskItemProps) {
  const handleClick = () => {
    onTaskSelect(task.id);
  };
  const Icon = statusIconMap[task.status] || Circle;
  const isStruckThrough =
    task.status === TaskStatus.CANCELLED || task.status === TaskStatus.DONE;

  return (
    <div
      className="hover:bg-accent flex cursor-pointer items-center gap-3 rounded-md p-2"
      onClick={handleClick}
    >
      <Icon
        className={`h-4 w-4 flex-shrink-0 ${statusColorMap[task.status]}`}
      />
      <span
        className={`flex-grow truncate text-sm ${
          isStruckThrough ? "text-muted-foreground line-through" : ""
        }`}
      >
        {task.title}
      </span>
      <Badge variant="outline" className="text-xs">
        {task.priority}
      </Badge>
    </div>
  );
}

// FILE: src/features/tasks/components/SubtaskList.tsx
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { SubtaskItem } from "./SubtaskItem";

interface SubtaskListProps {
  task: any;
  onAddSubtask: () => void;
  onTaskSelect: (taskId: string) => void;
}

export function SubtaskList({
  task,
  onAddSubtask,
  onTaskSelect,
}: SubtaskListProps) {
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Sub-tasks</h3>
        <Button variant="ghost" size="sm" onClick={onAddSubtask}>
          <Plus className="mr-1 h-4 w-4" /> Add Sub-task
        </Button>
      </div>
      <div className="space-y-1 rounded-md border p-2">
        {task.subtasks?.length > 0 ? (
          task.subtasks.map((subtask: any) => (
            <SubtaskItem
              key={subtask.id}
              task={subtask}
              onTaskSelect={onTaskSelect}
            />
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No sub-tasks yet.
          </p>
        )}
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskAssignees.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import { Check, UserPlus, X } from "lucide-react";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { useMemo, useState } from "react";
import { Badge } from "@/components/ui/badge";
export function TaskAssignees({ task }: any) {
  const [popoverOpen, setPopoverOpen] = useState(false);

  const isProjectTask = !!task.projectId;
  const workspaceId = task.workspaceId;
  const projectId = task.projectId;

  const assignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees`
        : `/tasks/${task.id}/assignees`;
      return api.post(url, { userId });
    },
    successMessage: "User assigned to task.",
    invalidateQueries: [["task", task.id], ["myTasks"]],
  });

  const unassignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees/${userId}`
        : `/tasks/${task.id}/assignees/${userId}`;
      return api.delete(url);
    },
    successMessage: "User unassigned from task.",
    invalidateQueries: [["task", task.id], ["myTasks"]],
  });

  const { data: projectMembersData, isLoading: isLoadingProjectMembers } =
    useGetProjectMembers(workspaceId!, projectId!, { enabled: isProjectTask });
  const { data: allUsersData, isLoading: isLoadingAllUsers } = useApiResource(
    "admin/users",
    ["users"]
  ).useGetAll({
    limit: 1000,
    enabled: !isProjectTask,
  });
  const isLoading = isLoadingProjectMembers || isLoadingAllUsers;

  const availableUsers = useMemo(() => {
    if (isProjectTask) {
      return (
        projectMembersData?.map((member: any) => ({
          id: member.userId,
          name: member.name,
          avatarUrl: member.avatarUrl,
        })) || []
      );
    }

    return (
      allUsersData?.data?.map((user: any) => ({
        id: user.id,
        name: user.name,
        avatarUrl: user.avatarUrl,
      })) || []
    );
  }, [isProjectTask, projectMembersData, allUsersData]);
  const assignedIds = new Set(task.assignees.map((a: any) => a.id));

  const handleSelect = (userId: string) => {
    assignMutation.mutate(userId, {
      onSuccess: () => {
        setPopoverOpen(false);
      },
    });
  };

  return (
    <div>
      <h3 className="mb-2 text-sm font-semibold">Assignees</h3>
      <div className="flex flex-wrap items-center gap-2">
        {task.assignees.map((assignee: any) => (
          <Badge
            key={assignee.id}
            variant="secondary"
            className="flex items-center gap-2 rounded-full bg-gray-100 py-0.5 pr-2 pl-0.5"
          >
            <Avatar className="h-5 w-5">
              <AvatarImage
                src={getAbsoluteUrl(assignee.avatarUrl)}
                alt={assignee.name}
              />
              <AvatarFallback>{assignee.name?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="text-sm font-normal">{assignee.name}</span>
            <Button
              size="icon"
              variant="ghost"
              className="ml-1 h-4 w-4 rounded-full"
              onClick={() => unassignMutation.mutate(assignee.id)}
              disabled={unassignMutation.isPending}
            >
              <X className="text-muted-foreground hover:text-primary h-3 w-3" />
            </Button>
          </Badge>
        ))}

        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              disabled={isLoading}
            >
              <UserPlus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[200px] p-0">
            <Command>
              <CommandInput placeholder="Assign user..." />
              <CommandList>
                <CommandEmpty>No available users found.</CommandEmpty>
                <CommandGroup>
                  {availableUsers
                    .filter((user: any) => !assignedIds.has(user.id))
                    .map((user: any) => (
                      <CommandItem
                        key={user.id}
                        value={user.name}
                        onSelect={() => handleSelect(user.id)}
                        className="flex items-center"
                      >
                        <Avatar className="mr-2 h-5 w-5">
                          <AvatarImage
                            src={getAbsoluteUrl(user.avatarUrl)}
                            alt={user.name}
                          />
                          <AvatarFallback>
                            {user.name?.charAt(0)}
                          </AvatarFallback>
                        </Avatar>
                        <span className="flex-1 truncate">{user.name}</span>
                        <Check
                          className={cn(
                            "ml-auto h-4 w-4",
                            assignedIds.has(user.id)
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                      </CommandItem>
                    ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskChecklist.tsx
// FILE: src/features/tasks/components/TaskChecklist.tsx
import { useState, useEffect } from "react";
import { v4 as uuidv4 } from "uuid";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { ChecklistItem } from "./ChecklistItem";
import { ChecklistItem as ChecklistItemType } from "../task.types";

interface TaskChecklistProps {
  initialItems: ChecklistItemType[];
  onSave: (items: ChecklistItemType[]) => void;
}

export function TaskChecklist({ initialItems, onSave }: TaskChecklistProps) {
  const [items, setItems] = useState<ChecklistItemType[]>(initialItems || []);

  useEffect(() => {
    setItems(initialItems || []);
  }, [initialItems]);

  const handleAddItem = () => {
    const newItem: ChecklistItemType = {
      id: uuidv4(),
      text: "",
      completed: false,
    };
    const newItems = [...items, newItem];
    setItems(newItems);
  };

  const handleUpdateItem = (
    id: string,
    updates: Partial<ChecklistItemType>
  ) => {
    const newItems = items.map((item) =>
      item.id === id ? { ...item, ...updates } : item
    );
    setItems(newItems);
    onSave(newItems);
  };

  const handleRemoveItem = (id: string) => {
    const newItems = items.filter((item) => item.id !== id);
    setItems(newItems);
    onSave(newItems);
  };

  const completedCount = items.filter((item) => item.completed).length;
  const progress = items.length > 0 ? (completedCount / items.length) * 100 : 0;

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Checklist</h3>
        {items.length > 0 && (
          <span className="text-muted-foreground text-xs">
            {completedCount} / {items.length}
          </span>
        )}
      </div>
      {items.length > 0 && <Progress value={progress} className="h-2" />}
      <div className="space-y-2">
        {items.map((item) => (
          <ChecklistItem
            key={item.id}
            item={item}
            onUpdate={handleUpdateItem}
            onRemove={handleRemoveItem}
          />
        ))}
      </div>
      <Button variant="outline" size="sm" onClick={handleAddItem}>
        <Plus className="mr-2 h-4 w-4" />
        Add item
      </Button>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskCustomFields.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useUpdateTaskCustomValues } from "../api/useUpdateTaskCustomValues";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Label } from "@/components/ui/label";
import { Calendar as CalendarIcon } from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { format } from "date-fns";

export function TaskCustomFields({ task, workspaceId, projectId }: any) {
  const { data: definitionsData, isLoading } = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    ["customFieldDefinitions", projectId]
  ).useGetAll();

  const { mutate: updateValues } = useUpdateTaskCustomValues(
    workspaceId,
    projectId,
    task.id
  );

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
    );
  }

  if (!definitionsData || definitionsData.data.length === 0) {
    return null;
  }

  const handleUpdate = (fieldId: string, value: any) => {
    updateValues([{ fieldId, value }]);
  };

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Custom Fields</h3>
      <div className="space-y-4">
        {definitionsData.data.map((def: any) => {
          const currentValue =
            task.customFields.find((cf: any) => cf.fieldId === def.id)?.value ??
            "";

          return (
            <div key={def.id}>
              <Label className="text-muted-foreground text-xs">
                {def.name}
              </Label>
              {def.type === "TEXT" && (
                <Input
                  defaultValue={currentValue}
                  onBlur={(e) => handleUpdate(def.id, e.target.value)}
                />
              )}
              {def.type === "NUMBER" && (
                <Input
                  type="number"
                  defaultValue={currentValue}
                  onBlur={(e) =>
                    handleUpdate(def.id, parseFloat(e.target.value))
                  }
                />
              )}
              {def.type === "DATE" && (
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !currentValue && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {currentValue ? (
                        format(new Date(currentValue), "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={
                        currentValue ? new Date(currentValue) : undefined
                      }
                      onSelect={(date) =>
                        handleUpdate(def.id, date?.toISOString())
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              )}
              {def.type === "SELECT" && (
                <Select
                  defaultValue={currentValue}
                  onValueChange={(value) => handleUpdate(def.id, value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={`Select ${def.name}`} />
                  </SelectTrigger>
                  <SelectContent>
                    {def.options?.values?.map((option: string) => (
                      <SelectItem key={option} value={option}>
                        {option}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskDetailBody.tsx
// FILE: src/features/tasks/components/TaskDetailBody.tsx
import { RichTextEditor } from "@/components/ui/RichTextEditor";
import { CommentSection } from "@/features/comments/components/CommentSection";
import { SubtaskList } from "./SubtaskList";
import { useState, useEffect } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/tasks/components/CreateTaskForm";
import { TaskLinks } from "./TaskLinks";
import { TaskChecklist } from "./TaskChecklist";
import { ChecklistItem } from "../task.types";

export function TaskDetailBody({
  task,
  workspaceId,
  projectId,
  onSave,
  onTaskSelect,
}: any) {
  const [isSubtaskDialogOpen, setIsSubtaskDialogOpen] = useState(false);
  const [description, setDescription] = useState(task.description || "");

  useEffect(() => {
    setDescription(task.description || "");
  }, [task.description]);

  const handleChecklistSave = (items: ChecklistItem[]) => {
    onSave("checklist", items);
  };

  return (
    <div className="col-span-2 space-y-6 border-r pr-6">
      <RichTextEditor
        value={description}
        onChange={setDescription}
        onBlur={() => {
          if (description !== task.description) {
            onSave("description", description);
          }
        }}
        workspaceId={workspaceId}
        projectId={projectId}
      />

      <TaskChecklist
        initialItems={task.checklist || []}
        onSave={handleChecklistSave}
      />

      <SubtaskList
        task={task}
        onAddSubtask={() => setIsSubtaskDialogOpen(true)}
        onTaskSelect={onTaskSelect}
      />

      <TaskLinks task={task} workspaceId={workspaceId} projectId={projectId} />

      <CommentSection
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={task.id}
      />

      <ResourceCrudDialog
        isOpen={isSubtaskDialogOpen}
        onOpenChange={setIsSubtaskDialogOpen}
        title="Create Sub-task"
        description="Fill in the details below to add a new sub-task."
        form={CreateTaskForm}
        formProps={{
          workspaceId,
          projectId,
          parentId: task.id,
        }}
        resourcePath={
          projectId
            ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
            : "/tasks"
        }
        resourceKey={projectId ? ["tasks", projectId] : ["myTasks"]}
      />
    </div>
  );
}

// FILE: src/features/tasks/components/TaskDetailModal.tsx
// FILE: src/features/tasks/components/TaskDetailModal.tsx
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { EditableField } from "@/components/ui/EditableField";
import { useApiResource } from "@/hooks/useApiResource";
import { TaskDetailBody } from "./TaskDetailBody";
import {
  TaskDetailSidebar,
  TaskDetailSidebarSkeleton,
} from "./TaskDetailSidebar";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { CornerUpLeft } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface TaskDetailModalProps {
  taskId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onTaskSelect: (taskId: string | null) => void;
}

export function TaskDetailModal({
  taskId,
  isOpen,
  onOpenChange,
  onTaskSelect,
}: TaskDetailModalProps) {
  const { data: task, isLoading } = useApiResource("tasks", [
    "task",
    taskId,
  ]).useGetOne(taskId);

  const taskResource = useApiResource(
    task?.projectId
      ? `/workspaces/${task.workspaceId}/projects/${task.projectId}/tasks`
      : "/tasks",
    task?.projectId ? ["tasks", task.projectId] : ["myTasks"]
  );
  const updateTaskMutation = taskResource.useUpdate();

  const handleSave = (field: string, value: any) => {
    if (taskId) {
      updateTaskMutation.mutate({ id: taskId, data: { [field]: value } });
    }
  };

  const renderContent = () => {
    if (isLoading || !task) {
      return (
        <>
          <div className="pr-6">
            <Skeleton className="h-8 w-3/4" />
          </div>
          <div className="flex-1 overflow-y-auto py-4">
            <div className="grid grid-cols-3 gap-6">
              <div className="col-span-2 space-y-6 border-r pr-6">
                <Skeleton className="h-32 w-full" />
                <Skeleton className="h-4 w-1/4" />
                <Skeleton className="h-24 w-full" />
              </div>
              <TaskDetailSidebarSkeleton />
            </div>
          </div>
        </>
      );
    }

    return (
      <>
        <DialogTitle className="flex items-center gap-2 pr-6">
          {task.parentId && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 flex-shrink-0"
                    onClick={() => onTaskSelect(task.parentId)}
                  >
                    <CornerUpLeft className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Go to parent task</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
          <EditableField
            key={task.id}
            initialValue={task.title}
            onSave={(newTitle) => handleSave("title", newTitle)}
            className="text-2xl font-bold"
            placeholder="Task Title"
          />
        </DialogTitle>
        <DialogDescription className="text-muted-foreground pr-6 text-xs">
          Task ID: {task.id}
        </DialogDescription>
        <div className="flex-1 overflow-y-auto py-4">
          <div className="grid grid-cols-3 gap-6">
            <TaskDetailBody
              task={task}
              workspaceId={task.workspaceId}
              projectId={task.projectId}
              onSave={handleSave}
              onTaskSelect={onTaskSelect}
            />
            <TaskDetailSidebar
              task={task}
              workspaceId={task.workspaceId}
              projectId={task.projectId}
            />
          </div>
        </div>
      </>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="flex max-h-[90vh] flex-col sm:max-w-4xl">
        {renderContent()}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/features/tasks/components/TaskDetailSidebar.tsx
// FILE: src/features/tasks/components/TaskDetailSidebar.tsx
import { TaskAssignees } from "./TaskAssignees";
import { TimeLogSection } from "@/features/timelogs/components/TimeLogSection";
import { Skeleton } from "@/components/ui/skeleton";
import { TaskCustomFields } from "./TaskCustomFields";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useApiResource } from "@/hooks/useApiResource";
import { TaskStatus, TaskPriority } from "@/types";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { Calendar as CalendarIcon, X } from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { TaskDocuments } from "./TaskDocuments";
import { EditableField } from "@/components/ui/EditableField";
import { RecurrenceSelector } from "./RecurrenceSelector";
import { TaskTypeSelector } from "@/features/task-types/components/TaskTypeSelector";

export function TaskDetailSidebar({ task, workspaceId, projectId }: any) {
  const taskResource = useApiResource(
    projectId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
      : "/tasks",
    projectId ? ["tasks", projectId] : ["myTasks"]
  );
  const updateTaskMutation = taskResource.useUpdate();

  const handleUpdate = (
    field:
      | "status"
      | "priority"
      | "dueDate"
      | "storyPoints"
      | "recurrenceRule"
      | "taskTypeId",
    value: string | null | number
  ) => {
    updateTaskMutation.mutate({ id: task.id, data: { [field]: value } });
  };

  return (
    <div className="col-span-1 space-y-6 pr-1">
      <div>
        <h3 className="mb-2 text-sm font-semibold">Status</h3>
        <Select
          value={task.status}
          onValueChange={(value) => handleUpdate("status", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set status" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskStatus).map((s) => (
              <SelectItem key={s} value={s}>
                {s}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      {projectId && workspaceId && (
        <div>
          <h3 className="mb-2 text-sm font-semibold">Task Type</h3>
          <TaskTypeSelector
            workspaceId={workspaceId}
            projectId={projectId}
            value={task.taskTypeId}
            onValueChange={(value) => handleUpdate("taskTypeId", value)}
          />
        </div>
      )}
      <div>
        <h3 className="mb-2 text-sm font-semibold">Priority</h3>
        <Select
          value={task.priority}
          onValueChange={(value) => handleUpdate("priority", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set priority" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskPriority).map((p) => (
              <SelectItem key={p} value={p}>
                {p}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Story Points</h3>
        <EditableField
          initialValue={task.storyPoints?.toString() || ""}
          onSave={(value) =>
            handleUpdate(
              "storyPoints",
              value === "" ? null : parseInt(value, 10)
            )
          }
          placeholder="Set points"
        />
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Recurrence</h3>
        <RecurrenceSelector
          value={task.recurrenceRule}
          onSave={(value) => handleUpdate("recurrenceRule", value)}
        />
      </div>

      <div>
        <h3 className="mb-2 text-sm font-semibold">Due Date</h3>
        <div className="flex items-center gap-1">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "flex-grow justify-start text-left font-normal",
                  !task.dueDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {task.dueDate ? (
                  format(new Date(task.dueDate), "PPP")
                ) : (
                  <span>Pick a date</span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={task.dueDate ? new Date(task.dueDate) : undefined}
                onSelect={(date) =>
                  handleUpdate("dueDate", date?.toISOString() ?? null)
                }
              />
            </PopoverContent>
          </Popover>
          {task.dueDate && (
            <Button
              variant="ghost"
              size="icon"
              className="h-9 w-9 flex-shrink-0"
              onClick={() => handleUpdate("dueDate", null)}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
      </div>
      <TaskAssignees task={task} />
      <TaskCustomFields
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TaskDocuments
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TimeLogSection
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={task.id}
      />
    </div>
  );
}

export function TaskDetailSidebarSkeleton() {
  return (
    <div className="col-span-1 space-y-6">
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-7 w-24 rounded-full" />
          <Skeleton className="h-7 w-7 rounded-full" />
        </div>
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-10 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-8 w-1/2" />
        <Skeleton className="h-10 w-full" />
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskDocuments.tsx
// FILE: src/features/tasks/components/TaskDocuments.tsx
import { useMemo, useRef } from "react";
import { DocumentType } from "@/types";
import { Task } from "../task.types";
import { Button } from "@/components/ui/button";
import { Paperclip, Upload, Trash2, FileText } from "lucide-react";
import { useAttachDocument } from "../api/useAttachDocument";
import { useDetachDocument } from "../api/useDetachDocument";
import { toast } from "sonner";
import { getAbsoluteUrl } from "@/lib/utils";

const MAX_FILE_SIZE = 5 * 1024 * 1024;

function DocumentItem({
  doc,
  task,
  onDetach,
}: {
  doc: any;
  task: Task;
  onDetach: (documentId: string, type: DocumentType) => void;
}) {
  const isPropagated = doc.taskId !== task.id;
  return (
    <div className="hover:bg-accent/50 flex items-center justify-between rounded-md p-2 text-sm">
      <a
        href={getAbsoluteUrl(doc.url)}
        target="_blank"
        rel="noopener noreferrer"
        className="flex min-w-0 items-center gap-2"
      >
        <FileText className="h-4 w-4 flex-shrink-0" />
        <span className="truncate" title={doc.title}>
          {doc.title}
        </span>
        {isPropagated && (
          <span className="text-muted-foreground text-xs">(from subtask)</span>
        )}
      </a>
      {!isPropagated && (
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onDetach(doc.documentId, doc.type)}
        >
          <Trash2 className="h-3 w-3" />
        </Button>
      )}
    </div>
  );
}

function DocumentList({
  title,
  docs,
  task,
  onDetach,
}: {
  title: string;
  docs: any[];
  task: Task;
  onDetach: (documentId: string, type: DocumentType) => void;
}) {
  return (
    <div>
      <h4 className="mb-1 text-xs font-semibold text-gray-500 uppercase">
        {title} ({docs.length})
      </h4>
      <div className="space-y-1 rounded-md border p-1">
        {docs.length > 0 ? (
          docs.map((doc: any) => (
            <DocumentItem
              key={`${doc.documentId}-${doc.type}`}
              doc={doc}
              task={task}
              onDetach={onDetach}
            />
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No documents attached.
          </p>
        )}
      </div>
    </div>
  );
}

export function TaskDocuments({
  task,
  workspaceId,
  projectId,
}: {
  task: Task;
  workspaceId?: string;
  projectId?: string;
}) {
  const attachMutation = useAttachDocument(workspaceId, projectId, task.id);
  const detachMutation = useDetachDocument(workspaceId, projectId, task.id);
  const inputRef = useRef<HTMLInputElement>(null);
  const outputRef = useRef<HTMLInputElement>(null);

  const allDocs = useMemo(() => {
    const collectedDocs = new Map();
    function collect(currentTask: Task) {
      currentTask.documents?.forEach((doc: any) => {
        const key = `${doc.documentId}-${doc.type}`;
        if (!collectedDocs.has(key)) {
          collectedDocs.set(key, { ...doc, taskId: currentTask.id });
        }
      });
      currentTask.subtasks?.forEach(collect);
    }
    collect(task);
    return Array.from(collectedDocs.values());
  }, [task]);

  const inputDocs = allDocs.filter((d) => d.type === DocumentType.INPUT);
  const outputDocs = allDocs.filter((d) => d.type === DocumentType.OUTPUT);

  const handleFileChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    type: DocumentType
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.size > MAX_FILE_SIZE) {
      toast.error("File size cannot exceed 5MB.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("type", type);
    attachMutation.mutate(formData);

    event.target.value = "";
  };

  const handleDetach = (documentId: string, type: DocumentType) => {
    detachMutation.mutate({ documentId, type });
  };

  return (
    <div className="space-y-4">
      <input
        type="file"
        ref={inputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, DocumentType.INPUT)}
      />
      <input
        type="file"
        ref={outputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, DocumentType.OUTPUT)}
      />
      <h3 className="text-sm font-semibold">Documents</h3>
      <div className="space-y-4">
        <DocumentList
          title="Inputs"
          docs={inputDocs}
          task={task}
          onDetach={handleDetach}
        />
        <Button
          variant="outline"
          size="sm"
          className="w-full"
          onClick={() => inputRef.current?.click()}
          disabled={attachMutation.isPending}
        >
          <Upload className="mr-2 h-4 w-4" /> Attach Input
        </Button>
        <DocumentList
          title="Outputs"
          docs={outputDocs}
          task={task}
          onDetach={handleDetach}
        />
        <Button
          variant="outline"
          size="sm"
          className="w-full"
          onClick={() => outputRef.current?.click()}
          disabled={attachMutation.isPending}
        >
          <Paperclip className="mr-2 h-4 w-4" /> Attach Output
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskLinks.tsx
// FILE: src/features/tasks/components/TaskLinks.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Link2, Trash2 } from "lucide-react";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { TaskLinkType } from "@/types";

export function TaskLinks({ task, workspaceId, projectId }: any) {
  const [targetTaskId, setTargetTaskId] = useState("");
  const [linkType, setLinkType] = useState<TaskLinkType>(
    TaskLinkType.RELATES_TO
  );

  const getUrl = (subpath: string) => {
    return projectId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/${subpath}`
      : `/tasks/${task.id}/${subpath}`;
  };

  const addLinkMutation = useApiMutation({
    mutationFn: (linkData: any) => api.post(getUrl("links"), linkData),
    successMessage: "Task linked successfully.",
    invalidateQueries: [["task", task.id]],
  });

  const removeLinkMutation = useApiMutation({
    mutationFn: (linkId: string) => api.delete(getUrl(`links/${linkId}`)),
    successMessage: "Task link removed.",
    invalidateQueries: [["task", task.id]],
  });

  const handleAddLink = (e: React.FormEvent) => {
    e.preventDefault();
    if (!targetTaskId.trim()) return;
    addLinkMutation.mutate(
      { targetTaskId, type: linkType },
      { onSuccess: () => setTargetTaskId("") }
    );
  };

  return (
    <div className="space-y-2">
      <h3 className="text-sm font-semibold">Linked Tasks</h3>
      <div className="space-y-1 rounded-md border p-2">
        {task.links?.length > 0 ? (
          task.links.map((link: any) => (
            <div
              key={link.id}
              className="hover:bg-accent flex items-center justify-between p-2 text-sm"
            >
              <div className="flex items-center gap-2">
                <Link2 className="h-3 w-3" />
                <span className="font-medium">
                  {link.type.replace(/_/g, " ")}:
                </span>
                <span className="text-muted-foreground truncate">
                  {link.targetTask.title}
                </span>
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => removeLinkMutation.mutate(link.id)}
              >
                <Trash2 className="h-3 w-3" />
              </Button>
            </div>
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No linked tasks.
          </p>
        )}
      </div>
      <form onSubmit={handleAddLink} className="flex gap-2">
        <Input
          placeholder="Paste Task ID to link"
          value={targetTaskId}
          onChange={(e) => setTargetTaskId(e.target.value)}
        />
        <Select
          value={linkType}
          onValueChange={(value) => setLinkType(value as TaskLinkType)}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskLinkType).map((type) => (
              <SelectItem key={type} value={type}>
                {type.replace(/_/g, " ")}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Button type="submit" disabled={addLinkMutation.isPending}>
          Link
        </Button>
      </form>
    </div>
  );
}

// FILE: src/features/tasks/components/TaskList.tsx
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/ui/DataTable";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { useApiResource } from "@/hooks/useApiResource";
import { Task } from "../task.types";
import { TaskStatus, TaskPriority } from "@/types";
import { format } from "date-fns";
import { toast } from "sonner";
import { MoreHorizontal, Edit, Copy, Trash2 } from "lucide-react";

interface TaskListProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  pagination?: {
    page: number;
    totalPages: number;
    handlePageChange: (newPage: number) => void;
  };
  emptyState: React.ReactNode;
  apiUrl: string;
  queryKey: string[];
}

export function TaskList({
  tasks,
  onTaskSelect,
  pagination,
  emptyState,
  apiUrl,
  queryKey,
}: TaskListProps) {
  const taskResource = useApiResource(apiUrl, queryKey);
  const deleteMutation = taskResource.useDelete();
  const updateTaskMutation = taskResource.useUpdate();

  if (tasks.length === 0) {
    return <>{emptyState}</>;
  }

  const columns: ColumnDef<Task>[] = [
    {
      accessorKey: "title",
      header: "Title",
      cell: (task) => (
        <span
          className="cursor-pointer hover:underline"
          onClick={() => onTaskSelect(task.id)}
        >
          {task.title}
        </span>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: (task) => (
        <Select
          defaultValue={task.status}
          onValueChange={(newStatus) =>
            updateTaskMutation.mutate({
              id: task.id,
              data: { status: newStatus },
            })
          }
        >
          <SelectTrigger className="w-[140px]">
            <SelectValue placeholder="Set status" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskStatus).map((s) => (
              <SelectItem key={s} value={s}>
                {s}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      ),
    },
    {
      accessorKey: "priority",
      header: "Priority",
      cell: (task) => (
        <Select
          defaultValue={task.priority}
          onValueChange={(newPriority) =>
            updateTaskMutation.mutate({
              id: task.id,
              data: { priority: newPriority },
            })
          }
        >
          <SelectTrigger className="w-[120px]">
            <SelectValue placeholder="Set priority" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskPriority).map((p) => (
              <SelectItem key={p} value={p}>
                {p}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      ),
    },
    {
      accessorKey: "dueDate",
      header: "Due Date",
      cell: (task) =>
        task.dueDate ? format(new Date(task.dueDate), "PPP") : "None",
    },
    {
      accessorKey: "actions",
      header: "Actions",
      cell: (task) => (
        <div className="text-right" onClick={(e) => e.stopPropagation()}>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={() => onTaskSelect(task.id)}>
                <Edit className="mr-2 h-4 w-4" />
                <span>View / Edit Details</span>
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => {
                  navigator.clipboard.writeText(task.id);
                  toast.success("Task ID copied to clipboard.");
                }}
              >
                <Copy className="mr-2 h-4 w-4" />
                <span>Copy Task ID</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                className="text-red-600"
                onClick={() => {
                  if (window.confirm(`Delete task: "${task.title}"?`)) {
                    deleteMutation.mutate(task.id);
                  }
                }}
              >
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Delete Task</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      ),
    },
  ];

  return (
    <DataTableWrapper>
      <DataTable
        columns={columns}
        data={tasks}
        pagination={pagination}
        bulkActions={(selectedIds) => (
          <Button
            variant="destructive"
            onClick={() => {
              if (
                window.confirm(
                  `Delete ${selectedIds.length} selected tasks? This cannot be undone.`
                )
              ) {
                deleteMutation.mutate(selectedIds);
              }
            }}
            disabled={deleteMutation.isPending}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete ({selectedIds.length})
          </Button>
        )}
      />
    </DataTableWrapper>
  );
}

// FILE: src/features/tasks/task.types.ts
// FILE: src/features/tasks/task.types.ts
import { z, type ZodType } from "zod";
import {
  TaskStatus,
  TaskPriority,
  TaskLinkType,
  CustomFieldType,
  DocumentType,
} from "@/types";
import {
  createPaginationSchema,
  createPaginatedResponseSchema,
  createUuidParamSchema,
} from "@/lib/zod";
import { TaskTypeSchema } from "../task-types/task-type.types";

export const ProjectIdParamsSchema = createUuidParamSchema(
  "projectId",
  "Project"
);
export type ProjectIdParams = z.infer<typeof ProjectIdParamsSchema>;

export const TaskIdParamsSchema = createUuidParamSchema("taskId", "Task");
export type TaskIdParams = z.infer<typeof TaskIdParamsSchema>;

export const TaskLinkIdParamsSchema = TaskIdParamsSchema.extend({
  linkId: z.string().uuid(),
});
export interface TaskLinkIdParams {
  taskId: string;
  linkId: string;
}

export const TaskDocumentParamsSchema = TaskIdParamsSchema.extend({
  documentId: z.string().uuid(),
  type: z.nativeEnum(DocumentType),
});
export type TaskDocumentParams = z.infer<typeof TaskDocumentParamsSchema>;

export const TaskAssigneeParamsSchema = TaskIdParamsSchema.extend({
  userId: z.string().uuid(),
});
export interface TaskAssigneeParams {
  taskId: string;
  userId: string;
}

const TaskAssigneeSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  avatarUrl: z.string().url().nullable(),
});

const TaskLinkSchema = z.object({
  id: z.string().uuid(),
  type: z.nativeEnum(TaskLinkType),
  targetTask: z
    .object({
      id: z.string().uuid(),
      title: z.string(),
      status: z.nativeEnum(TaskStatus),
    })
    .optional(),
  sourceTask: z
    .object({
      id: z.string().uuid(),
      title: z.string(),
      status: z.nativeEnum(TaskStatus),
    })
    .optional(),
});

const CustomFieldDefinitionForTaskSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  type: z.nativeEnum(CustomFieldType),
  options: z.any().nullable(),
});

const TaskCustomFieldSchema = z.object({
  fieldId: z.string().uuid(),
  value: z.any(),
  definition: CustomFieldDefinitionForTaskSchema,
});

const TaskDocumentSchema = z.object({
  documentId: z.string().uuid(),
  type: z.nativeEnum(DocumentType),
  title: z.string(),
  url: z.string(),
  fileType: z.string().nullable(),
  createdAt: z.coerce.date(),
});

export const ChecklistItemSchema = z.object({
  id: z.string(),
  text: z.string(),
  completed: z.boolean(),
});
export type ChecklistItem = z.infer<typeof ChecklistItemSchema>;

const BaseTaskSchema = z.object({
  __typename: z.literal("Task"),
  id: z.string().uuid(),
  title: z.string(),
  description: z.string().nullable(),
  status: z.nativeEnum(TaskStatus),
  priority: z.nativeEnum(TaskPriority),
  projectId: z.string().uuid().nullable(),
  taskTypeId: z.string().uuid().nullable().optional(),
  taskType: TaskTypeSchema.nullable().optional(),
  workspaceId: z.string().uuid().nullable(),
  projectName: z.string().nullable(),
  ownerId: z.string().uuid().nullable(),
  creatorId: z.string().uuid().nullable(),
  startDate: z.coerce.date().nullable(),
  dueDate: z.coerce.date().nullable(),
  timeEstimate: z.number().int().nullable(),
  storyPoints: z.number().int().nullable().optional(),
  epicId: z.string().uuid().nullable(),
  sprintId: z.string().uuid().nullable().optional(),
  boardColumnId: z.string().uuid().nullable(),
  orderInColumn: z.number().int().nullable(),
  recurrenceRule: z.string().nullable().optional(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  assignees: z.array(TaskAssigneeSchema),
  links: z.array(TaskLinkSchema),
  linkedToBy: z.array(TaskLinkSchema),
  customFields: z.array(TaskCustomFieldSchema),
  documents: z.array(TaskDocumentSchema),
  parentId: z.string().uuid().nullable(),
  checklist: z.array(ChecklistItemSchema).nullable().optional(),
});

export type Task = z.infer<typeof BaseTaskSchema> & {
  subtasks: Task[];
};

export const TaskSchema: ZodType<Task> = BaseTaskSchema.extend({
  subtasks: z.lazy(() => z.array(TaskSchema)),
});

export type TaskLink = z.infer<typeof TaskLinkSchema>;

export const CreateTaskDtoSchema = z.object({
  title: z.string().min(1, "Title is required"),
  description: z.string().optional().nullable(),
  status: z.nativeEnum(TaskStatus).default(TaskStatus.TODO),
  priority: z.nativeEnum(TaskPriority).default(TaskPriority.NONE),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  timeEstimate: z.number().int().positive().optional().nullable(),
  storyPoints: z.number().int().positive().optional().nullable(),
  projectId: z.string().uuid().optional().nullable(),
  taskTypeId: z.string().uuid().optional().nullable(),
  epicId: z.string().uuid().optional().nullable(),
  sprintId: z.string().uuid().optional().nullable(),
  boardColumnId: z.string().uuid().optional().nullable(),
  parentId: z.string().uuid().optional().nullable(),
  assigneeIds: z.array(z.string().uuid()).optional(),
  checklist: z.array(ChecklistItemSchema).optional().nullable(),
});
export type CreateTaskDto = z.infer<typeof CreateTaskDtoSchema>;

export const CreateTaskBodySchema = CreateTaskDtoSchema.omit({
  projectId: true,
});
export type CreateTaskBody = z.infer<typeof CreateTaskBodySchema>;
export const UpdateTaskDtoSchema = CreateTaskDtoSchema.omit({
  projectId: true,
  parentId: true,
}).partial();
export type UpdateTaskDto = z.infer<typeof UpdateTaskDtoSchema>;

export const MoveTaskDtoSchema = z.object({
  targetColumnId: z.string().uuid(),
  orderInColumn: z.number().int(),
});
export type MoveTaskDto = z.infer<typeof MoveTaskDtoSchema>;
export const CreateTaskLinkDtoSchema = z.object({
  targetTaskId: z.string().uuid(),
  type: z.nativeEnum(TaskLinkType),
});
export type CreateTaskLinkDto = z.infer<typeof CreateTaskLinkDtoSchema>;
export const AssignUserToTaskDtoSchema = z.object({
  userId: z.string().uuid(),
});
export type AssignUserToTaskDto = z.infer<typeof AssignUserToTaskDtoSchema>;
export const UpdateTaskCustomValuesDtoSchema = z.object({
  updates: z.array(
    z.object({
      fieldId: z.string().uuid(),
      value: z.any().optional(),
    })
  ),
});
export type UpdateTaskCustomValuesDto = z.infer<
  typeof UpdateTaskCustomValuesDtoSchema
>;

export const ListTasksQuerySchema = createPaginationSchema().extend({
  status: z.nativeEnum(TaskStatus).optional(),
  priority: z.nativeEnum(TaskPriority).optional(),
  search: z.string().optional(),
  startDate: z.coerce.date().optional(),
  endDate: z.coerce.date().optional(),
  includeSubtasks: z.boolean().default(false),
  sortBy: z
    .enum([
      "createdAt",
      "updatedAt",
      "title",
      "status",
      "priority",
      "dueDate",
      "orderInColumn",
    ])
    .default("orderInColumn"),
  sortOrder: z.enum(["asc", "desc"]).default("asc"),
  taskOrigin: z.enum(["project", "standalone"]).optional(),
  userRole: z.enum(["creator", "assignee"]).optional(),
});
export type ListTasksQuery = z.infer<typeof ListTasksQuerySchema>;

export const PaginatedTasksResponseSchema =
  createPaginatedResponseSchema(TaskSchema);

export type PaginatedTasksResponse = z.infer<
  typeof PaginatedTasksResponseSchema
>;

// FILE: src/features/teams/components/ManageTeamMembers.tsx
// FILE: src/features/teams/components/ManageTeamMembers.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Check, UserPlus, XIcon } from "lucide-react";
import { getAbsoluteUrl } from "@/lib/utils";

interface ManageTeamMembersProps {
  team: any;
  workspaceId: string;
}

export function ManageTeamMembers({
  team,
  workspaceId,
}: ManageTeamMembersProps) {
  const { data: usersData, isLoading: isLoadingUsers } = useApiResource(
    "admin/users",
    ["users"]
  ).useGetAll({
    limit: 1000,
  });
  const invalidateQueries = [
    ["teams", workspaceId],
    ["team", team.id],
  ];
  const addUserMutation = useApiMutation({
    mutationFn: (userId: string) =>
      api.post(`/workspaces/${workspaceId}/teams/${team.id}/members/${userId}`),
    successMessage: "User added to team.",
    invalidateQueries,
  });
  const removeUserMutation = useApiMutation({
    mutationFn: (userId: string) =>
      api.delete(
        `/workspaces/${workspaceId}/teams/${team.id}/members/${userId}`
      ),
    successMessage: "User removed from team.",
    invalidateQueries,
  });
  const memberIds = new Set(team.members.map((m: any) => m.id));
  const availableUsers =
    usersData?.data.filter((user: any) => !memberIds.has(user.id)) || [];
  return (
    <div className="space-y-4">
      <div>
        <h4 className="font-semibold">Current Members</h4>
        <div className="mt-2 flex min-h-[40px] flex-wrap items-center gap-2 rounded-md border p-2">
          {team.members.length > 0 ? (
            team.members.map((member: any) => (
              <Badge key={member.id} variant="secondary" className="pr-1">
                <Avatar className="mr-2 h-5 w-5">
                  <AvatarImage
                    src={getAbsoluteUrl(member.avatarUrl)}
                    alt={member.name}
                    className="h-full w-full object-cover"
                  />
                  <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                </Avatar>
                <span>{member.name}</span>
                <Button
                  size="icon"
                  variant="ghost"
                  className="ml-1 h-4 w-4"
                  onClick={() => removeUserMutation.mutate(member.id)}
                >
                  <XIcon className="h-3 w-3" />
                </Button>
              </Badge>
            ))
          ) : (
            <p className="text-muted-foreground px-2 text-sm">
              No members in this team.
            </p>
          )}
        </div>
      </div>

      <div>
        <h4 className="font-semibold">Add Member</h4>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              className="w-full justify-between"
              disabled={isLoadingUsers}
            >
              Select user to add...
              <UserPlus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
            <Command>
              <CommandInput placeholder="Search users..." />
              <CommandList>
                <CommandEmpty>No users available.</CommandEmpty>
                <CommandGroup>
                  {availableUsers.map((user: any) => (
                    <CommandItem
                      value={user.name}
                      key={user.id}
                      onSelect={() => {
                        addUserMutation.mutate(user.id);
                      }}
                    >
                      <Check className="mr-2 h-4 w-4 opacity-0" />
                      {user.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/teams/components/TeamCard.tsx
// FILE: src/features/teams/components/TeamCard.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useApiResource } from "@/hooks/useApiResource";
import { getAbsoluteUrl } from "@/lib/utils";
import { EntityCard } from "@/components/ui/EntityCard";
export function TeamCard({ team, onEdit }: { team: any; onEdit: () => void }) {
  const teamResource = useApiResource(`/workspaces/${team.workspaceId}/teams`, [
    "teams",
    team.workspaceId,
  ]);
  const deleteMutation = teamResource.useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(`Are you sure you want to delete the "${team.name}" team?`)
    ) {
      deleteMutation.mutate(team.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit();
  };
  return (
    <EntityCard
      title={team.name}
      description={team.description || "No description provided."}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
    >
      <h4 className="text-muted-foreground mb-2 text-sm font-medium">
        Members
      </h4>
      <div className="flex items-center -space-x-2">
        {team.members.map((member: any) => (
          <Avatar key={member.id} className="h-7 w-7 border-2 border-white">
            <AvatarImage
              src={getAbsoluteUrl(member.avatarUrl)}
              alt={member.name}
              className="h-full w-full object-cover"
            />
            <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
          </Avatar>
        ))}
        {team.members.length === 0 && (
          <p className="text-muted-foreground text-sm">No members yet.</p>
        )}
      </div>
    </EntityCard>
  );
}

// FILE: src/features/teams/components/TeamForm.tsx
// FILE: src/features/teams/components/TeamForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const teamSchema = z.object({
  name: nameSchema("Team"),
  description: descriptionSchema,
});
type TeamFormValues = z.infer<typeof teamSchema>;

interface TeamFormProps {
  workspaceId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function TeamForm({
  workspaceId,
  initialData,
  onSuccess,
}: TeamFormProps) {
  const isEditMode = !!initialData;
  const teamResource = useApiResource(`/workspaces/${workspaceId}/teams`, [
    "teams",
    workspaceId,
  ]);
  const createMutation = teamResource.useCreate();
  const updateMutation = teamResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<TeamFormValues>({
    resolver: zodResolver(teamSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: TeamFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Team Name"
            placeholder="e.g. Research Division"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short description of the team's purpose"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? isEditMode
                ? "Saving..."
                : "Creating..."
              : isEditMode
                ? "Save Changes"
                : "Create Team"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/teams/components/TeamList.tsx
// FILE: src/features/teams/components/TeamList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { TeamCard } from "./TeamCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { Users } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { TeamForm } from "./TeamForm";
import { ManageTeamMembers } from "./ManageTeamMembers";

const TeamListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function TeamList({ workspaceId }: { workspaceId: string }) {
  const teamResource = useApiResource(`/workspaces/${workspaceId}/teams`, [
    "teams",
    workspaceId,
  ]);
  const { data, isLoading, isError, error } = teamResource.useGetAll();
  const [editingTeamId, setEditingTeamId] = useState<string | null>(null);
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (isLoading) {
    return <TeamListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Teams"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching teams for this workspace."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Users className="text-primary h-10 w-10" />}
        title="This workspace has no teams yet."
        description="Create the first team to start organizing users."
        action={
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Team
              </Button>
            }
            title="Create a new team"
            description="Teams help you group users within a workspace."
            form={TeamForm}
            formProps={{ workspaceId }}
            resourcePath={`/workspaces/${workspaceId}/teams`}
            resourceKey={["teams", workspaceId]}
          />
        }
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((team: any) => (
          <TeamCard
            team={{ ...team, workspaceId }}
            key={team.id}
            onEdit={() => setEditingTeamId(team.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        resourceId={editingTeamId}
        resourcePath={`/workspaces/${workspaceId}/teams`}
        resourceKey={["teams", workspaceId]}
        title="Edit Team"
        description="Update team details and manage its members."
        form={TeamForm}
        formProps={{ workspaceId }}
        isOpen={!!editingTeamId}
        onOpenChange={(isOpen: any) => !isOpen && setEditingTeamId(null)}
        dialogClassName="sm:max-w-3xl"
      >
        {(team: any) => (
          <ManageTeamMembers team={team} workspaceId={workspaceId} />
        )}
      </ResourceCrudDialog>
    </>
  );
}

// FILE: src/features/timelogs/api/useAddTimeLog.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function addTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogData,
}: any): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs`,
    timeLogData
  );
  return data;
}

export function useAddTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (timeLogData: any) =>
      addTimeLog({ workspaceId, projectId, taskId, timeLogData }),
    successMessage: "Time logged successfully.",
    invalidateQueries: [["timeLogs", taskId]],
  });
}

// FILE: src/features/timelogs/api/useDeleteTimeLog.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface DeleteTimeLogParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  timeLogId: string;
}

async function deleteTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogId,
}: DeleteTimeLogParams): Promise<any> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs/${timeLogId}`
  );
}

export function useDeleteTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (timeLogId: string) =>
      deleteTimeLog({ workspaceId, projectId, taskId, timeLogId }),
    successMessage: "Time log deleted.",
    invalidateQueries: [["timeLogs", taskId]],
  });
}

// FILE: src/features/timelogs/api/useGetTimeLogs.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getTimeLogs(
  workspaceId: string,
  projectId: string,
  taskId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs`
  );
  return data;
}

export function useGetTimeLogs(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useQuery({
    queryKey: ["timeLogs", taskId],
    queryFn: () => getTimeLogs(workspaceId, projectId, taskId),
    enabled: !!workspaceId && !!projectId && !!taskId,
  });
}

// FILE: src/features/timelogs/api/useUpdateTimeLog.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface UpdateTimeLogParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  timeLogId: string;
  timeLogData: any;
}

async function updateTimeLog({
  workspaceId,
  projectId,
  taskId,
  timeLogId,
  timeLogData,
}: UpdateTimeLogParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs/${timeLogId}`,
    timeLogData
  );
  return data;
}

export function useUpdateTimeLog(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (data: { timeLogId: string; timeLogData: any }) =>
      updateTimeLog({ workspaceId, projectId, taskId, ...data }),
    successMessage: "Time log updated.",
    invalidateQueries: [["timeLogs", taskId]],
  });
}

// FILE: src/features/timelogs/components/TimeLogItem.tsx
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { useDeleteTimeLog } from "../api/useDeleteTimeLog";
import { toast } from "sonner";

interface TimeLogItemProps {
  log: any;
  workspaceId: string;
  projectId: string;
  taskId: string;
}

export function TimeLogItem({
  log,
  workspaceId,
  projectId,
  taskId,
}: TimeLogItemProps) {
  const deleteMutation = useDeleteTimeLog(workspaceId, projectId, taskId);
  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this time log?")) {
      deleteMutation.mutate(log.id, {
        onSuccess: () => toast.success("Time log deleted."),
        onError: () => toast.error("Failed to delete time log."),
      });
    }
  };

  return (
    <div className="hover:bg-accent/50 flex items-center justify-between rounded-md p-2 text-sm">
      <div className="flex-grow">
        <span>{log.description || "Time logged"}</span>
        <p className="text-muted-foreground text-xs">
          Logged on: {new Date(log.loggedAt).toLocaleDateString()}
        </p>
      </div>
      <div className="flex items-center gap-2">
        <span className="font-medium">{log.duration}m</span>
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={handleDelete}
          disabled={deleteMutation.isPending}
        >
          <Trash2 className="text-destructive h-3 w-3" />
        </Button>
      </div>
    </div>
  );
}

// FILE: src/features/timelogs/components/TimeLogSection.tsx
import { useGetTimeLogs } from "../api/useGetTimeLogs";
import { useAddTimeLog } from "../api/useAddTimeLog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { TimeLogItem } from "./TimeLogItem";
export function TimeLogSection({ workspaceId, projectId, taskId }: any) {
  const { data: timeLogsData, isLoading } = useGetTimeLogs(
    workspaceId,
    projectId,
    taskId
  );
  const addTimeLogMutation = useAddTimeLog(workspaceId, projectId, taskId);

  const [duration, setDuration] = useState("");
  const [description, setDescription] = useState("");
  const handleAddTimeLog = () => {
    const durationInMinutes = parseInt(duration, 10);
    if (!isNaN(durationInMinutes) && durationInMinutes > 0) {
      addTimeLogMutation.mutate(
        {
          taskId: taskId,
          duration: durationInMinutes,
          description,
          loggedAt: new Date().toISOString(),
        },
        {
          onSuccess: () => {
            setDuration("");
            setDescription("");
          },
        }
      );
    }
  };

  if (isLoading) return <div>Loading time logs...</div>;

  const totalMinutes =
    timeLogsData?.data?.reduce(
      (sum: number, log: any) => sum + log.duration,
      0
    ) || 0;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Time Tracking</h3>
      <div className="text-2xl font-bold">
        {hours}h {minutes}m
      </div>
      <div className="space-y-2">
        <div className="grid grid-cols-3 gap-2">
          <Input
            type="number"
            placeholder="Minutes"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            className="col-span-1"
          />
          <Input
            placeholder="Description (optional)"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="col-span-2"
          />
        </div>
        <Button
          onClick={handleAddTimeLog}
          disabled={addTimeLogMutation.isPending || !duration}
          size="sm"
        >
          {addTimeLogMutation.isPending ? "Logging..." : "Log Time"}
        </Button>
      </div>
      <div className="max-h-32 space-y-1 overflow-y-auto rounded-md border p-1">
        {timeLogsData?.data?.length > 0 ? (
          timeLogsData.data.map((log: any) => (
            <TimeLogItem
              key={log.id}
              log={log}
              workspaceId={workspaceId}
              projectId={projectId}
              taskId={taskId}
            />
          ))
        ) : (
          <p className="text-muted-foreground p-2 text-center text-xs">
            No time logged for this task.
          </p>
        )}
      </div>
    </div>
  );
}

// FILE: src/features/views/api/useCreateView.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useQueryClient } from "@tanstack/react-query";
interface CreateViewParams {
  workspaceId: string;
  projectId: string;
  viewData: any;
}

async function createView({
  workspaceId,
  projectId,
  viewData,
}: CreateViewParams): Promise<any> {
  const payload = {
    ...viewData,
    projectId: projectId,
  };
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/views`,
    payload
  );

  return data;
}

export function useCreateView(workspaceId: string) {
  const queryClient = useQueryClient();
  return useApiMutation<any, { projectId: string; viewData: any }>({
    mutationFn: ({ projectId, viewData }) =>
      createView({ workspaceId, projectId, viewData }),
    successMessage: "New view created successfully.",
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["views", variables.projectId],
      });
    },
  });
}

// FILE: src/features/views/api/useDeleteView.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface DeleteViewParams {
  workspaceId: string;
  projectId: string;
  viewId: string;
}

async function deleteView({
  workspaceId,
  projectId,
  viewId,
}: DeleteViewParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`
  );
}

export function useDeleteView(workspaceId: string, projectId: string) {
  return useApiMutation<void, string>({
    mutationFn: (viewId) => deleteView({ workspaceId, projectId, viewId }),
    successMessage: "View deleted successfully.",
    invalidateQueries: [["views", projectId]],
  });
}

// FILE: src/features/views/api/useGetProjectViews.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getProjectViews(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views`
  );
  return data;
}

export function useGetProjectViews(workspaceId: string, projectId: string) {
  return useQuery({
    queryKey: ["views", projectId],
    queryFn: () => getProjectViews(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId,
  });
}

// FILE: src/features/views/api/useGetView.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getView(
  workspaceId: string,
  projectId: string,
  viewId: string
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`
  );
  return data;
}

export function useGetView(
  workspaceId: string,
  projectId: string,
  viewId: string | null
) {
  return useQuery({
    queryKey: ["view", viewId],
    queryFn: () => getView(workspaceId, projectId, viewId!),
    enabled: !!workspaceId && !!projectId && !!viewId,
  });
}

// FILE: src/features/views/api/useGetViewData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { ListTasksQuery } from "@/features/tasks/task.types";
async function getViewData(
  workspaceId: string,
  projectId: string,
  viewId: string,
  query: ListTasksQuery
): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}/data`,
    { params: query }
  );
  return data;
}

export function useGetViewData(
  workspaceId: string,
  projectId: string,
  viewId: string | null,
  query: ListTasksQuery,
  options: { enabled?: boolean } = { enabled: true }
) {
  return useQuery({
    queryKey: ["projects", projectId, "tasks", "view", viewId, query],
    queryFn: () => getViewData(workspaceId, projectId, viewId!, query),
    enabled: !!workspaceId && !!projectId && !!viewId && options.enabled,
  });
}

// FILE: src/features/views/api/useManageViews.ts
// FILE: src/features/views/api/useManageViews.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageViews(workspaceId: string, projectId: string) {
  const resource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/views`,
    ["views", projectId]
  );
  return resource;
}

// FILE: src/features/views/api/useUpdateView.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useQueryClient } from "@tanstack/react-query";

interface UpdateViewParams {
  workspaceId: string;
  projectId: string;
  viewId: string;
  viewData: any;
}

async function updateView({
  workspaceId,
  projectId,
  viewId,
  viewData,
}: UpdateViewParams): Promise<any> {
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/views/${viewId}`,
    viewData
  );
  return data;
}

export function useUpdateView(workspaceId: string, projectId: string) {
  const queryClient = useQueryClient();
  return useApiMutation<any, { viewId: string; viewData: any }>({
    mutationFn: ({ viewId, viewData }) =>
      updateView({ workspaceId, projectId, viewId, viewData }),
    successMessage: "View updated successfully.",
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });
      queryClient.invalidateQueries({ queryKey: ["view", variables.viewId] });
    },
  });
}
// FILE: src/features/views/components/BacklogTaskItem.tsx
// FILE: src/features/views/components/BacklogTaskItem.tsx
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Card } from "@/components/ui/card";
import { Task } from "@/features/tasks/task.types";

interface BacklogTaskItemProps {
  task: Task;
  onTaskSelect: (taskId: string) => void;
}

export function BacklogTaskItem({ task, onTaskSelect }: BacklogTaskItemProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: task.id,
    data: {
      type: "Task",
      task,
    },
  });

  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>
      <Card
        className="mb-2 cursor-grab p-3 active:cursor-grabbing"
        onClick={() => onTaskSelect(task.id)}
      >
        <p className="text-sm font-medium">{task.title}</p>
      </Card>
    </div>
  );
}

// FILE: src/features/views/components/BacklogView.tsx
// FILE: src/features/views/components/BacklogView.tsx
import { useState, useMemo } from "react";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  DragStartEvent,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { Task } from "@/features/tasks/task.types";
import { useApiResource } from "@/hooks/useApiResource";
import { useUpdateMyTask } from "@/features/tasks/api/useUpdateMyTask";
import { EpicDropzone } from "./EpicDropzone";
import { BacklogTaskItem } from "./BacklogTaskItem";
import { KanbanTaskCard } from "./KanbanTaskCard";

interface BacklogViewProps {
  tasks: Task[];
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string) => void;
}

export function BacklogView({
  tasks,
  workspaceId,
  projectId,
  onTaskSelect,
}: BacklogViewProps) {
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const updateTaskMutation = useUpdateMyTask();

  const { data: epicsData } = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/epics`,
    ["epics", projectId]
  ).useGetAll();

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const { tasksWithoutEpic, tasksByEpic } = useMemo(() => {
    const tasksWithoutEpic: Task[] = [];
    const tasksByEpic: Record<string, Task[]> = {};
    tasks.forEach((task) => {
      if (task.epicId) {
        if (!tasksByEpic[task.epicId]) {
          tasksByEpic[task.epicId] = [];
        }
        tasksByEpic[task.epicId].push(task);
      } else {
        tasksWithoutEpic.push(task);
      }
    });
    return { tasksWithoutEpic, tasksByEpic };
  }, [tasks]);

  const onDragStart = (event: DragStartEvent) => {
    if (event.active.data.current?.type === "Task") {
      setActiveTask(event.active.data.current.task);
    }
  };

  const onDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;
    if (!over) return;

    const taskId = active.id as string;
    const task = tasks.find((t) => t.id === taskId);
    if (!task) return;

    const targetIsEpic = over.data.current?.type === "Epic";
    const newEpicId = targetIsEpic
      ? (over.id as string).replace("epic-", "")
      : null;

    if (task.epicId !== newEpicId) {
      updateTaskMutation.mutate({
        taskId,
        workspaceId,
        projectId,
        taskData: { epicId: newEpicId },
      });
    }
  };

  return (
    <DndContext
      onDragStart={onDragStart}
      onDragEnd={onDragEnd}
      sensors={sensors}
    >
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        <div className="space-y-4">
          <h2 className="text-lg font-semibold">Backlog</h2>
          <EpicDropzone
            epic={{ id: "backlog", name: "Tasks without Epic" }}
            tasks={tasksWithoutEpic}
            onTaskSelect={onTaskSelect}
          />
        </div>
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:col-span-2">
          {epicsData?.data?.map((epic: any) => (
            <EpicDropzone
              key={epic.id}
              epic={epic}
              tasks={tasksByEpic[epic.id] || []}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </div>
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}

// FILE: src/features/views/components/CalendarView.tsx
// FILE: src/features/views/components/CalendarView.tsx
import { Calendar, dateFnsLocalizer, Event } from "react-big-calendar";
import { format, parse, startOfWeek, getDay } from "date-fns";
import { enUS } from "date-fns/locale/en-US";
import { Task } from "@/features/tasks/task.types";

interface CalendarViewProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

const locales = {
  "en-US": enUS,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});

export function CalendarView({ tasks, onTaskSelect }: CalendarViewProps) {
  const events: Event[] = tasks
    .filter((task) => task.dueDate)
    .map((task) => ({
      title: task.title,
      start: new Date(task.startDate || task.dueDate!),
      end: new Date(task.dueDate!),
      resource: task,
    }));

  return (
    <div className="h-[calc(100vh-220px)]">
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: "100%" }}
        onSelectEvent={(event) => onTaskSelect((event.resource as Task).id)}
      />
    </div>
  );
}

// FILE: src/features/views/components/EpicDropzone.tsx
// FILE: src/features/views/components/EpicDropzone.tsx
import { useDroppable } from "@dnd-kit/core";
import { SortableContext } from "@dnd-kit/sortable";
import { Task } from "@/features/tasks/task.types";
import { BacklogTaskItem } from "./BacklogTaskItem";

interface EpicDropzoneProps {
  epic: { id: string; name: string };
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

export function EpicDropzone({ epic, tasks, onTaskSelect }: EpicDropzoneProps) {
  const { setNodeRef } = useDroppable({
    id: `epic-${epic.id}`,
    data: {
      type: "Epic",
      epic,
    },
  });

  const taskIds = tasks.map((t) => t.id);

  return (
    <div className="rounded-lg bg-gray-100/60 p-4">
      <h3 className="mb-2 font-semibold">{epic.name}</h3>
      <div ref={setNodeRef} className="min-h-[100px] space-y-2">
        <SortableContext items={taskIds}>
          {tasks.map((task) => (
            <BacklogTaskItem
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
        {tasks.length === 0 && (
          <div className="text-muted-foreground flex h-24 items-center justify-center rounded-md border-2 border-dashed text-sm">
            Drag tasks here to add to this epic
          </div>
        )}
      </div>
    </div>
  );
}

// FILE: src/features/views/components/GanttChartView.tsx
// FILE: src/features/views/components/GanttChartView.tsx
import { useEffect, useRef } from "react";
import { gantt } from "dhtmlx-gantt";
import "dhtmlx-gantt/codebase/dhtmlxgantt.css";
import { Task } from "@/features/tasks/task.types";
import { useApiResource } from "@/hooks/useApiResource";
import { useParams } from "react-router-dom";

interface GanttChartViewProps {
  tasks: Task[];
}

export function GanttChartView({ tasks }: GanttChartViewProps) {
  const ganttContainer = useRef<HTMLDivElement>(null);
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  const taskResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    ["tasks", projectId]
  );
  const updateTaskMutation = taskResource.useUpdate();

  useEffect(() => {
    if (!ganttContainer.current) return;

    gantt.config.date_format = "%Y-%m-%d %H:%i";
    gantt.config.columns = [
      { name: "text", label: "Task name", tree: true, width: "*" },
      { name: "start_date", label: "Start time", align: "center", width: 120 },
      { name: "duration", label: "Duration", align: "center", width: 80 },
    ];

    gantt.init(ganttContainer.current);

    const onAfterTaskDrag = (id: string, mode: string) => {
      const task = gantt.getTask(id);
      const updates: { startDate?: Date; dueDate?: Date } = {};

      if (
        mode === gantt.config.drag_mode.move ||
        mode === gantt.config.drag_mode.resize
      ) {
        updates.startDate = task.start_date;
        updates.dueDate = task.end_date;

        updateTaskMutation.mutate({ id: id as string, data: updates });
      }
    };

    gantt.createDataProcessor({
      task: {
        update: (data: any, id: string) => {
          const updates = {
            title: data.text,
            startDate: data.start_date,
            dueDate: data.end_date,
          };
          updateTaskMutation.mutate({ id: id as string, data: updates });
          return Promise.resolve();
        },
        create: () => Promise.resolve(),
        delete: () => Promise.resolve(),
      },
      link: {
        create: () => Promise.resolve(),
        update: () => Promise.resolve(),
        delete: () => Promise.resolve(),
      },
    });

    const eventId = gantt.attachEvent("onAfterTaskDrag", onAfterTaskDrag);

    return () => {
      gantt.detachEvent(eventId);
      gantt.clearAll();
    };
  }, []);

  useEffect(() => {
    const formattedTasks = {
      data: tasks.map((task) => ({
        id: task.id,
        text: task.title,
        start_date: task.startDate ? new Date(task.startDate) : new Date(),
        end_date: task.dueDate
          ? new Date(task.dueDate)
          : new Date(new Date().setDate(new Date().getDate() + 1)),
        parent: task.parentId || 0,
      })),
      links: [],
    };
    gantt.parse(formattedTasks);
  }, [tasks]);

  return (
    <div
      ref={ganttContainer}
      style={{ width: "100%", height: "calc(100vh - 220px)" }}
    ></div>
  );
}

// FILE: src/features/views/components/KanbanBoard.tsx
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  DragStartEvent,
} from "@dnd-kit/core";
import { KanbanColumn } from "./KanbanColumn";
import { useMoveTask } from "@/features/tasks/api/useMoveTask";
import { Task } from "@/features/tasks/task.types";
import { TaskStatus, View, ViewColumn } from "@/types";
import { createPortal } from "react-dom";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { useMemo, useState } from "react";
import { EmptyState } from "@/components/ui/empty-state";
import { Kanban } from "lucide-react";
interface KanbanBoardProps {
  workspaceId: string;
  projectId: string;
  views: View[];
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

const flattenTasks = (tasksToFlatten: Task[]): Task[] => {
  let flat: Task[] = [];
  if (!tasksToFlatten) return flat;
  for (const task of tasksToFlatten) {
    flat.push(task);
    if (task.subtasks) {
      flat.push(...flattenTasks(task.subtasks));
    }
  }
  return flat;
};

function mapColumnNameToStatus(columnName: string): TaskStatus | null {
  const normalizedName = columnName.trim().toUpperCase().replace(/\s+/g, "_");
  if (normalizedName === "TO_DO") return TaskStatus.TODO;
  if (Object.values(TaskStatus).includes(normalizedName as TaskStatus)) {
    return normalizedName as TaskStatus;
  }
  return null;
}

function mapStatusToColumnName(status: TaskStatus): string {
  switch (status) {
    case TaskStatus.TODO:
      return "To Do";
    case TaskStatus.IN_PROGRESS:
      return "In Progress";
    case TaskStatus.IN_REVIEW:
      return "In Review";
    case TaskStatus.DONE:
      return "Done";
    default:
      return "";
  }
}

export function KanbanBoard({
  workspaceId,
  projectId,
  views,
  tasks,
  onTaskSelect,
}: KanbanBoardProps) {
  const moveTaskMutation = useMoveTask(projectId);
  const [activeTask, setActiveTask] = useState<Task | null>(null);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );
  const topLevelTasks = useMemo(
    () => tasks.filter((task) => !task.parentId),
    [tasks]
  );
  const columns = useMemo(() => {
    const kanbanView = views.find((v) => v.type === "KANBAN");
    return kanbanView?.columns || [];
  }, [views]);
  const tasksByColumn = useMemo(() => {
    const grouped = columns.reduce(
      (acc: Record<string, Task[]>, col: ViewColumn) => {
        acc[col.id] = [];
        return acc;
      },
      {} as Record<string, Task[]>
    );

    topLevelTasks.forEach((task) => {
      let targetColumnId = task.boardColumnId;

      if (!targetColumnId) {
        const expectedColumnName = mapStatusToColumnName(task.status);
        const fallbackColumn = columns.find(
          (c: ViewColumn) =>
            c.name.toUpperCase() === expectedColumnName.toUpperCase()
        );
        if (fallbackColumn) {
          targetColumnId = fallbackColumn.id;
        }
      }

      if (targetColumnId && grouped[targetColumnId]) {
        grouped[targetColumnId].push(task);
      }
    });

    for (const columnId in grouped) {
      grouped[columnId].sort(
        (a, b) => (a.orderInColumn || 0) - (b.orderInColumn || 0)
      );
    }

    return grouped;
  }, [columns, topLevelTasks]);
  const onDragStart = (event: DragStartEvent) => {
    const allTasksFlat = flattenTasks(tasks);
    const task = allTasksFlat.find((t) => t.id === event.active.id);
    if (task) setActiveTask(task);
  };
  const onDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;
    if (!over || active.id === over.id) {
      return;
    }

    const allTasksFlat = flattenTasks(tasks);
    const draggedTask = allTasksFlat.find((t) => t.id === active.id);
    if (!draggedTask) return;
    const targetColumnId =
      over.data.current?.sortable?.containerId?.toString() ??
      over.id.toString();
    const targetColumn = columns.find((col: any) => col.id === targetColumnId);
    if (!targetColumn) return;

    const tasksInDestColumn = (tasksByColumn[targetColumnId] || []).sort(
      (a, b) => (a.orderInColumn || 0) - (b.orderInColumn || 0)
    );
    const overIsTask = over.data.current?.type === "Task";
    let newOrderInColumn: number;

    if (overIsTask) {
      const overTaskIndex = tasksInDestColumn.findIndex(
        (t) => t.id === over.id
      );
      if (overTaskIndex !== -1) {
        const overTask = tasksInDestColumn[overTaskIndex];
        const prevTask = tasksInDestColumn[overTaskIndex - 1];
        const prevOrder = prevTask?.orderInColumn ?? 0;
        const overOrder = overTask?.orderInColumn ?? prevOrder + 2000;
        newOrderInColumn = (prevOrder + overOrder) / 2;
      } else {
        const lastTask = tasksInDestColumn[tasksInDestColumn.length - 1];
        newOrderInColumn = (lastTask?.orderInColumn || 0) + 1000;
      }
    } else {
      const lastTask = tasksInDestColumn[tasksInDestColumn.length - 1];
      newOrderInColumn = (lastTask?.orderInColumn || 0) + 1000;
    }

    const newStatus = mapColumnNameToStatus(targetColumn.name);
    moveTaskMutation.mutate({
      workspaceId,
      projectId,
      taskId: active.id as string,
      targetColumnId,
      newStatus,
      orderInColumn: newOrderInColumn,
    });
  };

  if (columns.length === 0) {
    return (
      <EmptyState
        icon={<Kanban />}
        title="Kanban Board Not Configured"
        description="This Kanban view has no columns. Please edit the view in project settings."
      />
    );
  }

  return (
    <DndContext
      sensors={sensors}
      onDragStart={onDragStart}
      onDragEnd={onDragEnd}
    >
      <div className="flex h-full gap-4 overflow-x-auto p-1">
        {columns.map((col: ViewColumn) => (
          <KanbanColumn
            key={col.id}
            column={col}
            tasks={tasksByColumn[col.id] || []}
            onTaskSelect={onTaskSelect}
          />
        ))}
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}

// FILE: src/features/views/components/KanbanColumn.tsx
import { SortableContext } from "@dnd-kit/sortable";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { useMemo } from "react";
import { useDroppable } from "@dnd-kit/core";

export function KanbanColumn({ column, tasks, onTaskSelect }: any) {
  const { setNodeRef } = useDroppable({
    id: column.id,
    data: { type: "Column", column },
  });
  const tasksIds = useMemo(() => {
    return tasks.map((task: any) => task.id);
  }, [tasks]);
  return (
    <div
      ref={setNodeRef}
      className="flex w-72 shrink-0 flex-col rounded-lg bg-gray-100/60 p-2"
    >
      <h3 className="p-2 font-semibold text-gray-700">{column.name}</h3>
      <div className="flex-grow space-y-2">
        <SortableContext items={tasksIds}>
          {tasks.map((task: any) => (
            <KanbanTaskCard
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}

// FILE: src/features/views/components/KanbanTaskCard.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  MoreHorizontal,
  Edit,
  Copy,
  Trash2,
  Calendar,
  CheckSquare,
  ClipboardPlus,
  Repeat,
} from "lucide-react";
import { useApiResource } from "@/hooks/useApiResource";
import { useParams } from "react-router-dom";
import { toast } from "sonner";
import { format } from "date-fns";
import { Task } from "@/features/tasks/task.types";
import { TaskStatus } from "@/types";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateTemplateFromTaskForm } from "@/features/task-templates/components/CreateTemplateFromTaskDialog";
import { getIcon } from "@/lib/icons";

export function KanbanTaskCard({
  task,
  onTaskSelect,
}: {
  task: Task;
  onTaskSelect: (taskId: string) => void;
}) {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isTemplateDialogOpen, setIsTemplateDialogOpen] = useState(false);

  const deleteTaskMutation = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    ["tasks", projectId]
  ).useDelete();
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({ id: task.id, data: { type: "Task", task } });
  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
  };
  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm(`Delete task "${task.title}"?`)) {
      deleteTaskMutation.mutate(task.id);
    }
  };
  const handleCopyId = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(task.id);
    toast.success("Task ID copied to clipboard.");
  };
  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    onTaskSelect(task.id);
  };

  const totalSubtasks = task.subtasks?.length || 0;
  const completedSubtasks =
    task.subtasks?.filter((sub) => sub.status === TaskStatus.DONE).length || 0;

  const TaskTypeIcon = task.taskType?.icon ? getIcon(task.taskType.icon) : null;
  return (
    <>
      <div
        ref={setNodeRef}
        style={style}
        {...attributes}
        {...listeners}
        onClick={() => onTaskSelect(task.id)}
      >
        <Card className="mb-2 cursor-grab active:cursor-grabbing">
          <CardHeader className="flex-row items-start justify-between p-3 pb-2">
            <div className="flex items-center gap-2">
              {TaskTypeIcon && (
                <TaskTypeIcon
                  className="h-4 w-4"
                  style={{ color: task.taskType?.color || "inherit" }}
                />
              )}
              <CardTitle className="text-sm font-normal">
                {task.title}
              </CardTitle>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6 shrink-0"
                  onClick={(e) => e.stopPropagation()}
                >
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent onClick={(e) => e.stopPropagation()}>
                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                <DropdownMenuItem onClick={handleEdit}>
                  <Edit className="mr-2 h-4 w-4" />
                  <span>View / Edit Details</span>
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setIsTemplateDialogOpen(true)}>
                  <ClipboardPlus className="mr-2 h-4 w-4" />
                  <span>Save as Template</span>
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleCopyId}>
                  <Copy className="mr-2 h-4 w-4" />
                  <span>Copy Task ID</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="text-red-500"
                  onClick={handleDelete}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </CardHeader>
          {(task.dueDate ||
            totalSubtasks > 0 ||
            task.storyPoints ||
            task.recurrenceRule) && (
            <CardContent className="flex items-center justify-between px-3 pb-2">
              <div className="flex items-center gap-2">
                {task.recurrenceRule && (
                  <Repeat className="text-muted-foreground h-3.5 w-3.5" />
                )}
                {task.storyPoints != null && (
                  <Badge variant="outline">{task.storyPoints}</Badge>
                )}
                {task.dueDate ? (
                  <div className="text-muted-foreground flex items-center text-xs">
                    <Calendar className="mr-1 h-3.5 w-3.5" />
                    <span>{format(new Date(task.dueDate), "PP")}</span>
                  </div>
                ) : (
                  <div />
                )}
              </div>
              {totalSubtasks > 0 && (
                <div className="text-muted-foreground flex items-center text-xs">
                  <CheckSquare className="mr-1 h-3.5 w-3.5" />
                  <span>
                    {completedSubtasks}/{totalSubtasks}
                  </span>
                </div>
              )}
            </CardContent>
          )}
        </Card>
      </div>
      <ResourceCrudDialog
        isOpen={isTemplateDialogOpen}
        onOpenChange={setIsTemplateDialogOpen}
        title="Save Task as Template"
        description="This will create a new template based on the current task's properties."
        form={CreateTemplateFromTaskForm}
        formProps={{ workspaceId, projectId, task }}
        resourcePath={""}
        resourceKey={[]}
      />
    </>
  );
}
// FILE: src/features/views/components/ProjectDetailView.tsx
// FILE: src/features/views/components/ProjectDetailView.tsx
import { Link } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaskList } from "@/features/tasks/components/TaskList";
import { KanbanBoard } from "@/features/views/components/KanbanBoard";
import { BacklogView } from "@/features/views/components/BacklogView";
import { GanttChartView } from "@/features/views/components/GanttChartView";
import { CalendarView } from "@/features/views/components/CalendarView";
import { DashboardList } from "@/features/dashboards/components/DashboardList";
import { EpicList } from "@/features/epics/components/EpicList";
import { SprintBoardView } from "@/features/sprints/components/SprintBoardView";
import { ActiveUsers } from "@/components/layout/ActiveUsers";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Settings, CheckSquare, PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/tasks/components/CreateTaskForm";
import { CreateDashboardForm } from "@/features/dashboards/components/CreateDashboardForm";
import { CreateEpicForm } from "@/features/epics/components/CreateEpicForm";
import { Task } from "@/features/tasks/task.types";
import { View } from "@/types";
import { ProjectActivityLog } from "@/features/activities/components/ProjectActivityLog";
import { EmptyState } from "@/components/ui/empty-state";
import { useState } from "react";
import { TemplateSelectorDialog } from "@/features/task-templates/components/TemplateSelectorDialog";

interface ProjectDetailViewProps {
  views: View[];
  tasks: Task[];
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string | null) => void;
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function ProjectDetailView({
  views,
  tasks,
  workspaceId,
  projectId,
  onTaskSelect,
  activeTab,
  onTabChange,
}: ProjectDetailViewProps) {
  const [isCreateTaskOpen, setIsCreateTaskOpen] = useState(false);
  const [isTemplateSelectorOpen, setIsTemplateSelectorOpen] = useState(false);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);

  const renderActionDialog = () => {
    const currentView = views.find((v) => v.id === activeTab);
    const viewType = currentView?.type;

    if (
      viewType === "KANBAN" ||
      viewType === "LIST" ||
      viewType === "BACKLOG" ||
      viewType === "GANTT" ||
      viewType === "CALENDAR"
    ) {
      return (
        <>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Task
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => setIsCreateTaskOpen(true)}>
                New Blank Task
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setIsTemplateSelectorOpen(true)}>
                New from Template...
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <ResourceCrudDialog
            isOpen={isCreateTaskOpen}
            onOpenChange={setIsCreateTaskOpen}
            title="Create a new task"
            description="Fill in the details below to add a new task."
            form={CreateTaskForm}
            formProps={{ workspaceId, projectId }}
            resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
            resourceKey={["tasks", projectId]}
          />

          <TemplateSelectorDialog
            workspaceId={workspaceId}
            projectId={projectId}
            isOpen={isTemplateSelectorOpen}
            onOpenChange={setIsTemplateSelectorOpen}
          />
        </>
      );
    }
    if (activeTab === "dashboards") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Dashboard
            </Button>
          }
          title="Create New Dashboard"
          description="Dashboards contain widgets to visualize your project data."
          form={CreateDashboardForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/dashboards`}
          resourceKey={["dashboards", projectId]}
        />
      );
    }
    if (activeTab === "epics") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Epic
            </Button>
          }
          title="Create New Epic"
          description="Epics are large bodies of work that can be broken down into a number of smaller tasks."
          form={CreateEpicForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/epics`}
          resourceKey={["epics", projectId]}
        />
      );
    }
    return null;
  };

  const projectTaskEmptyState = (
    <EmptyState
      icon={<CheckSquare className="text-primary h-10 w-10" />}
      title="No tasks yet"
      description="Create the first task in this project to get started."
      action={renderActionDialog()}
    />
  );
  return (
    <Tabs value={activeTab} onValueChange={onTabChange} className="space-y-4">
      <div className="flex items-center justify-between">
        <TabsList>
          {views.map((view) => (
            <TabsTrigger key={view.id} value={view.id}>
              {view.name}
            </TabsTrigger>
          ))}
          <TabsTrigger value="sprints">Sprints</TabsTrigger>
          <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
          <TabsTrigger value="epics">Epics</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        <div className="flex items-center gap-2">
          <ActiveUsers />
          {renderActionDialog()}
          <Button variant="outline" asChild>
            <Link to="settings">
              <Settings className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>

      {views.map((view) => (
        <TabsContent key={view.id} value={view.id} className="mt-0 h-full">
          {view.type === "LIST" && (
            <TaskList
              apiUrl={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
              queryKey={["tasks", projectId]}
              tasks={tasks}
              onTaskSelect={onTaskSelect}
              emptyState={projectTaskEmptyState}
            />
          )}
          {view.type === "KANBAN" && (
            <KanbanBoard
              views={views}
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
          {view.type === "BACKLOG" && (
            <BacklogView
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
          {view.type === "GANTT" && <GanttChartView tasks={tasks} />}
          {view.type === "CALENDAR" && (
            <CalendarView tasks={tasks} onTaskSelect={onTaskSelect} />
          )}
        </TabsContent>
      ))}

      <TabsContent value="sprints" className="mt-0">
        <SprintBoardView
          workspaceId={workspaceId}
          projectId={projectId}
          views={views}
          tasks={tasks}
          onTaskSelect={onTaskSelect}
        />
      </TabsContent>

      <TabsContent value="dashboards" className="mt-0 space-y-4">
        <DashboardList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="epics" className="mt-0">
        <EpicList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="activity" className="mt-0">
        <ProjectActivityLog workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>
    </Tabs>
  );
}

// FILE: src/features/views/components/ViewCard.tsx
// FILE: src/features/views/components/ViewCard.tsx
import { EntityCard } from "@/components/ui/EntityCard";
import { useManageViews } from "../api/useManageViews";

interface ViewCardProps {
  view: any;
  workspaceId: string;
  projectId: string;
  onEdit: () => void;
}

export function ViewCard({
  view,
  workspaceId,
  projectId,
  onEdit,
}: ViewCardProps) {
  const { useDelete } = useManageViews(workspaceId, projectId);
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(`Are you sure you want to delete the "${view.name}" view?`)
    ) {
      deleteMutation.mutate(view.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit();
  };

  return (
    <EntityCard
      title={view.name}
      description={`View Type: ${view.type}`}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
    >
      <div className="text-muted-foreground text-sm">
        {view.columns.length > 0
          ? `${view.columns.length} columns`
          : "No specific columns configured"}
      </div>
    </EntityCard>
  );
}

// FILE: src/features/views/components/ViewForm.tsx
// FILE: src/features/views/components/ViewForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormSelect } from "@/components/form/FormFields";
import { useManageViews } from "../api/useManageViews";
import { useEffect } from "react";
import { ViewType } from "@/types";

interface ViewFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function ViewForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: ViewFormProps) {
  const isEditMode = !!initialData;
  const { useCreate, useUpdate } = useManageViews(workspaceId, projectId);
  const createMutation = useCreate();
  const updateMutation = useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const methods = useForm<any>({
    defaultValues: { name: "", type: ViewType.LIST },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset(initialData);
    }
  }, [initialData, isEditMode, methods]);

  async function onSubmit(values: any) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  const viewTypeOptions = Object.values(ViewType).map((type) => ({
    value: type,
    label: type,
  }));

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="View Name"
            placeholder="e.g., Team Kanban"
          />
          <FormSelect
            name="type"
            label="View Type"
            placeholder="Select a view type"
            options={viewTypeOptions}
            disabled={isEditMode}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
              ? "Save Changes"
              : "Create View"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/views/components/ViewList.tsx
// FILE: src/features/views/components/ViewList.tsx
import { useState } from "react";
import { useManageViews } from "../api/useManageViews";
import { ViewCard } from "./ViewCard";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { ViewForm } from "./ViewForm";

interface ViewListProps {
  workspaceId: string;
  projectId: string;
}

export function ViewList({ workspaceId, projectId }: ViewListProps) {
  const { useGetAll } = useManageViews(workspaceId, projectId);
  const { data: viewsData, isLoading } = useGetAll();
  const [editingViewId, setEditingViewId] = useState<string | null>(null);

  if (isLoading) return <div>Loading views...</div>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {viewsData?.data?.map((view: any) => (
          <ViewCard
            key={view.id}
            view={view}
            workspaceId={workspaceId}
            projectId={projectId}
            onEdit={() => setEditingViewId(view.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingViewId}
        onOpenChange={(isOpen) => !isOpen && setEditingViewId(null)}
        resourceId={editingViewId}
        resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/views`}
        resourceKey={["views", projectId]}
        title="Edit View"
        description="Update the view's name and configuration."
        form={ViewForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}

// FILE: src/features/views/view.types.ts
// FILE: src/features/views/view.types.ts
import { z } from "zod";
import { ViewType } from "@/types";
import {
  createPaginationSchema,
  createPaginatedResponseSchema,
  createUuidParamSchema,
} from "@/lib/zod";

export const ProjectIdParamsSchema = createUuidParamSchema(
  "projectId",
  "Project"
);
export const ViewIdParamsSchema = createUuidParamSchema("viewId", "View");
export type ViewIdParams = z.infer<typeof ViewIdParamsSchema>;

export const ViewColumnSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  order: z.number().int(),
  viewId: z.string().uuid(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

const KanbanConfigSchema = z.object({});

const ListConfigSchema = z.object({
  visibleFields: z.array(z.string()).optional(),
});

const CalendarConfigSchema = z.object({
  dateField: z.enum(["dueDate", "startDate"]),
});

const GanttConfigSchema = z.object({});
const BacklogConfigSchema = z.object({});

export const ViewConfigSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal(ViewType.KANBAN),
    settings: KanbanConfigSchema.optional(),
  }),
  z.object({
    type: z.literal(ViewType.LIST),
    settings: ListConfigSchema.optional(),
  }),
  z.object({
    type: z.literal(ViewType.CALENDAR),
    settings: CalendarConfigSchema,
  }),
  z.object({
    type: z.literal(ViewType.GANTT),
    settings: GanttConfigSchema.optional(),
  }),
  z.object({
    type: z.literal(ViewType.BACKLOG),
    settings: BacklogConfigSchema.optional(),
  }),
]);
export type ViewConfig = z.infer<typeof ViewConfigSchema>;

export const ViewSchema = z.object({
  __typename: z.literal("View"),
  id: z.string().uuid(),
  name: z.string(),
  type: z.nativeEnum(ViewType),
  config: ViewConfigSchema.nullable(),
  projectId: z.string().uuid(),
  columns: z.array(ViewColumnSchema),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type View = z.infer<typeof ViewSchema>;
export type ViewColumn = z.infer<typeof ViewColumnSchema>;

export const CreateViewColumnDtoSchema = z.object({
  name: z.string().min(1, "Column name cannot be empty."),
  order: z.number().int().optional(),
});

export const CreateViewDtoSchema = z.object({
  name: z.string().min(1, "View name cannot be empty."),
  type: z.nativeEnum(ViewType),
  config: ViewConfigSchema.optional(),
  projectId: z.string().uuid(),
  columns: z.array(CreateViewColumnDtoSchema).optional(),
});
export type CreateViewDto = z.infer<typeof CreateViewDtoSchema>;

export const UpdateViewDtoSchema = z.object({
  name: z.string().min(1).optional(),
  config: ViewConfigSchema.optional(),
  columns: z.array(CreateViewColumnDtoSchema).optional(),
});
export type UpdateViewDto = z.infer<typeof UpdateViewDtoSchema>;

export const ListViewsQuerySchema = createPaginationSchema().extend({
  sortBy: z.enum(["createdAt", "updatedAt", "name"]).default("createdAt"),
  sortOrder: z.enum(["asc", "desc"]).default("asc"),

  startDate: z.coerce.date().optional(),
  endDate: z.coerce.date().optional(),
});
export type ListViewsQuery = z.infer<typeof ListViewsQuerySchema>;

export const PaginatedViewsResponseSchema =
  createPaginatedResponseSchema(ViewSchema);
export type PaginatedViewsResponse = z.infer<
  typeof PaginatedViewsResponseSchema
>;

// FILE: src/features/widgets/api/useCreateWidget.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface CreateWidgetParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetData: any;
}

async function createWidget({
  workspaceId,
  projectId,
  dashboardId,
  widgetData,
}: CreateWidgetParams): Promise<any> {
  const { data } = await api.post(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets`,
    widgetData
  );
  return data;
}

export function useCreateWidget(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  return useApiMutation({
    mutationFn: (widgetData: any) =>
      createWidget({ workspaceId, projectId, dashboardId, widgetData }),
    successMessage: "Widget added to dashboard.",
    invalidateQueries: [["dashboard", dashboardId]],
  });
}
// FILE: src/features/widgets/api/useDeleteWidget.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface DeleteParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetId: string;
}

async function deleteWidget({
  workspaceId,
  projectId,
  dashboardId,
  widgetId,
}: DeleteParams): Promise<void> {
  await api.delete(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}`
  );
}

export function useDeleteWidget(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  return useApiMutation<void, string>({
    mutationFn: (widgetId) =>
      deleteWidget({ workspaceId, projectId, dashboardId, widgetId }),
    successMessage: "Widget removed from dashboard.",
    invalidateQueries: [["dashboard", dashboardId]],
  });
}
// FILE: src/features/widgets/api/useGetWidgetData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWidgetData({
  workspaceId,
  projectId,
  dashboardId,
  widgetId,
}: any): Promise<any> {
  const { data } = await api.get(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}/data`
  );
  return data;
}

export function useGetWidgetData(
  workspaceId: string,
  projectId: string,
  dashboardId: string,
  widgetId: string
) {
  return useQuery({
    queryKey: ["widgetData", widgetId],
    queryFn: () =>
      getWidgetData({ workspaceId, projectId, dashboardId, widgetId }),
    enabled: !!workspaceId && !!projectId && !!dashboardId && !!widgetId,
  });
}

// FILE: src/features/widgets/api/useUpdateWidget.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface UpdateWidgetParams {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  widgetId: string;
  widgetData: any;
}

async function updateWidget(params: UpdateWidgetParams): Promise<any> {
  const { workspaceId, projectId, dashboardId, widgetId, widgetData } = params;
  const { data } = await api.put(
    `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets/${widgetId}`,
    widgetData
  );
  return data;
}

export function useUpdateWidget(
  workspaceId: string,
  projectId: string,
  dashboardId: string
) {
  return useApiMutation({
    mutationFn: (params: { widgetId: string; widgetData: any }) =>
      updateWidget({ workspaceId, projectId, dashboardId, ...params }),
    invalidateQueries: [["dashboard", dashboardId]],
  });
}
// FILE: src/features/widgets/components/BurndownChartWidget.tsx
// FILE: src/features/widgets/components/BurndownChartWidget.tsx
import {
  ChartContainer,
  LineChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Line,
  ResponsiveContainer,
} from "@/components/ui/recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";

export function BurndownChartWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );
  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <ChartContainer>
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={payload?.points}
          margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" fontSize={12} />
          <YAxis fontSize={12} />
          <Tooltip />
          <Line
            type="monotone"
            dataKey="ideal"
            stroke="#8884d8"
            strokeDasharray="5 5"
          />
          <Line type="monotone" dataKey="actual" stroke="#82ca9d" />
        </LineChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
}

// FILE: src/features/widgets/components/config-fields/BurndownChartConfigFields.tsx
import { FormDatePicker } from "@/components/form/FormFields";

export function BurndownChartConfigFields() {
  return (
    <div className="space-y-4">
      <FormDatePicker name="config.startDate" label="Start Date" />
      <FormDatePicker name="config.endDate" label="End Date" />
    </div>
  );
}

// FILE: src/features/widgets/components/config-fields/PieChartConfigFields.tsx
// FILE: src/features/widgets/components/config-fields/PieChartConfigFields.tsx
import { FormInput } from "@/components/form/FormFields";

export function PieChartConfigFields() {
  return (
    <div className="space-y-4">
      <FormInput
        name="config.title"
        label="Chart Title"
        placeholder="e.g., Tasks by Status"
      />
    </div>
  );
}

// FILE: src/features/widgets/components/config-fields/StatsCounterConfigFields.tsx
import { FormInput, FormSelect } from "@/components/form/FormFields";
import { TaskStatus } from "@/types";

export function StatsCounterConfigFields() {
  const statusOptions = Object.values(TaskStatus).map((status) => ({
    value: status,
    label: status,
  }));

  return (
    <div className="space-y-4">
      <FormInput
        name="config.label"
        label="Label"
        placeholder="e.g., Open Tasks"
      />
      <FormSelect
        name="config.filter.status"
        label="Task Status to Count"
        placeholder="Select a status"
        options={statusOptions}
      />
    </div>
  );
}

// FILE: src/features/widgets/components/config-fields/TaskListConfigFields.tsx
import { FormInput } from "@/components/form/FormFields";

export function TaskListConfigFields() {
  return (
    <FormInput
      name="config.limit"
      label="Number of Tasks to Show"
      type="number"
      placeholder="e.g., 10"
    />
  );
}

// FILE: src/features/widgets/components/config-fields/TimeTrackingReportConfigFields.tsx
// FILE: src/features/widgets/components/config-fields/TimeTrackingReportConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useParams } from "react-router-dom";
import { Check, ChevronsUpDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";

export function TimeTrackingReportConfigFields() {
  const { control } = useFormContext();
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const { data: membersData } = useGetProjectMembers(workspaceId!, projectId!);

  return (
    <FormField
      control={control}
      name="config.userIds"
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>Team Members (Optional)</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                className={cn(
                  "w-full justify-between",
                  !field.value?.length && "text-muted-foreground"
                )}
              >
                {field.value?.length
                  ? `${field.value.length} selected`
                  : "Select members..."}
                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput placeholder="Search members..." />
                <CommandList>
                  <CommandEmpty>No members found.</CommandEmpty>
                  <CommandGroup>
                    {membersData?.map((member: any) => (
                      <CommandItem
                        value={member.name}
                        key={member.userId}
                        onSelect={() => {
                          const selected = field.value || [];
                          const isSelected = selected.includes(member.userId);
                          field.onChange(
                            isSelected
                              ? selected.filter(
                                  (id: string) => id !== member.userId
                                )
                              : [...selected, member.userId]
                          );
                        }}
                      >
                        <Check
                          className={cn(
                            "mr-2 h-4 w-4",
                            field.value?.includes(member.userId)
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                        {member.name}
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/features/widgets/components/CreateWidgetForm.tsx
// FILE: src/features/widgets/components/CreateWidgetForm.tsx
import { useState } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormSelect } from "@/components/form/FormFields";
import { useCreateWidget } from "../api/useCreateWidget";
import { StatsCounterConfigFields } from "./config-fields/StatsCounterConfigFields";
import { TaskListConfigFields } from "./config-fields/TaskListConfigFields";
import { BurndownChartConfigFields } from "./config-fields/BurndownChartConfigFields";
import { TimeTrackingReportConfigFields } from "./config-fields/TimeTrackingReportConfigFields";
import { PieChartConfigFields } from "./config-fields/PieChartConfigFields";
import { WidgetType } from "@/types";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const widgetSchema = z.object({
  title: z.string().min(1, "Widget title is required."),
  type: z.nativeEnum(WidgetType),
  config: z.any(),
  layout: z.object({
    x: z.number(),
    y: z.number(),
    w: z.number(),
    h: z.number(),
  }),
  dashboardId: z.string().uuid(),
});
type WidgetFormValues = z.infer<typeof widgetSchema>;

interface CreateWidgetFormProps {
  workspaceId: string;
  projectId: string;
  dashboardId: string;
  onSuccess?: () => void;
}

const configFieldsMap: Record<string, React.FC> = {
  STATS_COUNTER: StatsCounterConfigFields,
  TASK_LIST: TaskListConfigFields,
  BURNDOWN_CHART: BurndownChartConfigFields,
  TIME_TRACKING_REPORT: TimeTrackingReportConfigFields,
  PIE_CHART: PieChartConfigFields,
};
function getDefaultConfig(type: WidgetType) {
  switch (type) {
    case WidgetType.STATS_COUNTER:
      return { label: "", filter: {} };
    case WidgetType.TASK_LIST:
      return { limit: 10, filter: {} };
    case WidgetType.BURNDOWN_CHART:
      const today = new Date();
      const twoWeeksAgo = new Date(today);
      twoWeeksAgo.setDate(today.getDate() - 14);
      return { startDate: twoWeeksAgo, endDate: today, unit: "task_count" };
    case WidgetType.TIME_TRACKING_REPORT:
      return { userIds: [] };
    case WidgetType.PIE_CHART:
      return { title: "Tasks by Status" };
    default:
      return {};
  }
}

export function CreateWidgetForm({
  workspaceId,
  projectId,
  dashboardId,
  onSuccess,
}: CreateWidgetFormProps) {
  const [step, setStep] = useState(1);
  const createMutation = useCreateWidget(workspaceId, projectId, dashboardId);

  const methods = useForm<WidgetFormValues>({
    resolver: zodResolver(widgetSchema),
    defaultValues: {
      title: "",
      type: WidgetType.STATS_COUNTER,
      config: getDefaultConfig(WidgetType.STATS_COUNTER),
      layout: { x: 0, y: 0, w: 4, h: 5 },
      dashboardId,
    },
  });
  const selectedType = methods.watch("type") as string;
  const ConfigFields = configFieldsMap[selectedType];

  function handleNext() {
    methods.trigger(["title", "type"]).then((isValid) => {
      if (isValid) {
        const currentType = methods.getValues("type") as WidgetType;
        methods.setValue("config", getDefaultConfig(currentType));
        setStep(2);
      }
    });
  }

  async function onSubmit(values: WidgetFormValues) {
    await createMutation.mutateAsync(values, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  const widgetTypeOptions = Object.values(WidgetType)
    .filter(
      (type) => type !== "CHART" && type !== "TABLE" // Filter out generic types
    )
    .map((type) => ({
      value: type,
      label: type.replace(/_/g, " "),
    }));

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-6">
          {step === 1 && (
            <div className="space-y-4">
              <FormInput
                name="title"
                label="Widget Title"
                placeholder="e.g., Open Tasks Counter"
              />
              <FormSelect
                name="type"
                label="Widget Type"
                placeholder="Select a widget type"
                options={widgetTypeOptions}
              />
              <Button type="button" onClick={handleNext} className="w-full">
                Next
              </Button>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-4">
              {ConfigFields && <ConfigFields />}
              <div className="flex justify-between pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setStep(1)}
                >
                  Back
                </Button>
                <Button type="submit" disabled={createMutation.isPending}>
                  {createMutation.isPending ? "Adding..." : "Add Widget"}
                </Button>
              </div>
            </div>
          )}
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/widgets/components/PieChartWidget.tsx
// FILE: src/features/widgets/components/PieChartWidget.tsx
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
} from "recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Skeleton } from "@/components/ui/skeleton";

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884d8"];

export function PieChartWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );
  if (isLoading) return <Skeleton className="h-full w-full" />;

  const payload = data?.payload;
  const chartData = payload?.data || [];

  if (chartData.length === 0) {
    return (
      <div className="flex h-full items-center justify-center">
        <p className="text-muted-foreground text-sm">No data to display.</p>
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <PieChart>
        <Pie
          data={chartData}
          cx="50%"
          cy="50%"
          labelLine={false}
          outerRadius={80}
          fill="#8884d8"
          dataKey="value"
          nameKey="name"
          label={({ name, percent }) =>
            percent ? `${name}: ${(percent * 100).toFixed(0)}%` : name
          }
        >
          {chartData.map((_entry: any, index: number) => (
            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Tooltip
          contentStyle={{
            backgroundColor: "hsl(var(--popover))",
            borderColor: "hsl(var(--border))",
          }}
        />
        <Legend />
      </PieChart>
    </ResponsiveContainer>
  );
}

// FILE: src/features/widgets/components/StatsCounterWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";

export function StatsCounterWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );

  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <>
      <div className="text-4xl font-bold">{payload?.count ?? 0}</div>
      <p className="text-muted-foreground text-xs">{payload?.label}</p>
    </>
  );
}

// FILE: src/features/widgets/components/TaskListWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Badge } from "@/components/ui/badge";

export function TaskListWidget({ widget, workspaceId, projectId }: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );

  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <div className="space-y-2">
      {payload?.tasks?.length > 0 ? (
        payload.tasks.map((task: any) => (
          <div
            key={task.id}
            className="flex items-center justify-between text-sm"
          >
            <span className="truncate pr-2">{task.title}</span>
            <Badge variant="outline">{task.status}</Badge>
          </div>
        ))
      ) : (
        <p className="text-muted-foreground text-sm">
          No tasks match criteria.
        </p>
      )}
    </div>
  );
}

// FILE: src/features/widgets/components/TimeTrackingReportWidget.tsx
// FILE: src/features/widgets/components/TimeTrackingReportWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

export function TimeTrackingReportWidget({
  widget,
  workspaceId,
  projectId,
}: any) {
  const { data, isLoading } = useGetWidgetData(
    workspaceId,
    projectId,
    widget.dashboardId,
    widget.id
  );
  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Task</TableHead>
          <TableHead className="text-right">Logged</TableHead>
          <TableHead className="text-right">Estimated</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {payload?.rows?.map((row: any) => (
          <TableRow key={row.taskId}>
            <TableCell className="max-w-xs truncate font-medium">
              {row.taskTitle}
            </TableCell>
            <TableCell className="text-right">{row.timeLogged}m</TableCell>
            <TableCell className="text-right">{row.timeEstimate}m</TableCell>
          </TableRow>
        ))}
        <TableRow className="font-bold">
          <TableCell>Total</TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeLogged}m
          </TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeEstimate}m
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}

// FILE: src/features/widgets/components/WidgetRenderer.tsx
// FILE: src/features/widgets/components/WidgetRenderer.tsx
import { StatsCounterWidget } from "./StatsCounterWidget";
import { TaskListWidget } from "./TaskListWidget";
import { BurndownChartWidget } from "./BurndownChartWidget";
import { TimeTrackingReportWidget } from "./TimeTrackingReportWidget";
import { PieChartWidget } from "./PieChartWidget";
import { WidgetWrapper } from "./WidgetWrapper";

export function WidgetRenderer({ widget, workspaceId, projectId }: any) {
  const renderWidgetContent = () => {
    switch (widget.type) {
      case "STATS_COUNTER":
        return (
          <StatsCounterWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "TASK_LIST":
        return (
          <TaskListWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "BURNDOWN_CHART":
        return (
          <BurndownChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "TIME_TRACKING_REPORT":
        return (
          <TimeTrackingReportWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case "PIE_CHART":
        return (
          <PieChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      default:
        return <div>Unknown widget type: {widget.type}</div>;
    }
  };

  return (
    <WidgetWrapper
      widget={widget}
      workspaceId={workspaceId}
      projectId={projectId}
    >
      {renderWidgetContent()}
    </WidgetWrapper>
  );
}

// FILE: src/features/widgets/components/WidgetWrapper.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Trash2 } from "lucide-react";
import { ReactNode } from "react";
import { useDeleteWidget } from "../api/useDeleteWidget";

interface WidgetWrapperProps {
  widget: any;
  workspaceId: string;
  projectId: string;
  children: ReactNode;
}

export function WidgetWrapper({
  widget,
  workspaceId,
  projectId,
  children,
}: WidgetWrapperProps) {
  const deleteMutation = useDeleteWidget(
    workspaceId,
    projectId,
    widget.dashboardId
  );

  const handleDelete = () => {
    if (window.confirm(`Delete widget "${widget.title}"?`)) {
      deleteMutation.mutate(widget.id);
    }
  };

  return (
    <Card className="h-full">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-base">{widget.title}</CardTitle>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem
              className="text-red-500"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
}

// FILE: src/features/workspaces/components/WorkspaceCard.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { EntityCard } from "@/components/ui/EntityCard";
import { CardContent } from "@/components/ui/card";

interface WorkspaceCardProps {
  workspace: any;
  onEdit: (workspaceId: string) => void;
}

export function WorkspaceCard({ workspace, onEdit }: WorkspaceCardProps) {
  const workspaceResource = useApiResource("workspaces", ["workspaces"]);
  const deleteMutation = workspaceResource.useDelete();
  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${workspace.name}" workspace? This will delete all associated projects and tasks.`
      )
    ) {
      deleteMutation.mutate(workspace.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(workspace.id);
  };
  return (
    <EntityCard
      title={workspace.name}
      description={workspace.description}
      linkTo={`/workspaces/${workspace.id}/projects`}
      onEdit={handleEdit}
      onDelete={handleDelete}
      deleteDisabled={deleteMutation.isPending}
    >
      <CardContent>
        <p className="text-muted-foreground text-sm">
          Created on:{" "}
          {new Date(workspace.createdAt).toLocaleDateString("en-US")}
        </p>
      </CardContent>
    </EntityCard>
  );
}

// FILE: src/features/workspaces/components/WorkspaceForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { AxiosError } from "axios";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const workspaceSchema = z.object({
  name: nameSchema("Workspace"),
  description: descriptionSchema,
});
type WorkspaceFormValues = z.infer<typeof workspaceSchema>;

interface WorkspaceFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function WorkspaceForm({ initialData, onSuccess }: WorkspaceFormProps) {
  const isEditMode = !!initialData;
  const workspaceResource = useApiResource("workspaces", ["workspaces"]);
  const createMutation = workspaceResource.useCreate();
  const updateMutation = workspaceResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  const form = useForm<WorkspaceFormValues>({
    resolver: zodResolver(workspaceSchema),
    defaultValues: {
      name: "",
      description: "",
    },
  });

  useEffect(() => {
    if (isEditMode && initialData) {
      form.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, form]);

  async function onSubmit(values: WorkspaceFormValues) {
    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: values },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(values, {
        onSuccess: () => {
          form.reset();
          onSuccess?.();
        },
      });
    }
  }

  const errorMessage = (mutation.error as AxiosError<{ message?: string }>)
    ?.response?.data?.message;
  return (
    <FormProvider {...form}>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Workspace Name"
            placeholder="e.g. Q1 Research Projects"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A brief summary of this workspace"
          />
          {errorMessage && (
            <div className="text-sm font-medium text-red-500">
              {errorMessage}
            </div>
          )}
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? isEditMode
                ? "Saving..."
                : "Creating..."
              : isEditMode
                ? "Save Changes"
                : "Create Workspace"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/features/workspaces/components/WorkspaceList.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/ui/error-state";
import { EmptyState } from "@/components/ui/empty-state";
import { Blocks } from "lucide-react";
import { useState } from "react";
import { WorkspaceCard } from "./WorkspaceCard";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { WorkspaceForm } from "./WorkspaceForm";

const WorkspaceListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function WorkspaceList() {
  const workspaceResource = useApiResource("workspaces", ["workspaces"]);
  const { data, isLoading, isError, error } = workspaceResource.useGetAll();
  const [editingWorkspaceId, setEditingWorkspaceId] = useState<string | null>(
    null
  );

  if (isLoading) {
    return <WorkspaceListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Workspaces"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your workspaces. Please try again later."
        }
      />
    );
  }

  const handleEdit = (workspaceId: string) => {
    setEditingWorkspaceId(workspaceId);
  };

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Blocks className="text-primary h-10 w-10" />}
        title="No Workspaces Found"
        description="Get started by creating your first workspace using the button above."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((workspace: any) => (
          <WorkspaceCard
            key={workspace.id}
            workspace={workspace}
            onEdit={handleEdit}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingWorkspaceId}
        onOpenChange={(isOpen) => !isOpen && setEditingWorkspaceId(null)}
        trigger={<></>}
        title="Edit Workspace"
        description="Make changes to your workspace here. Click save when you're done."
        form={WorkspaceForm}
        resourcePath="workspaces"
        resourceKey={["workspaces"]}
        resourceId={editingWorkspaceId}
      />
    </>
  );
}

// FILE: src/hooks/useApiMutation.ts
// FILE: src/hooks/useApiMutation.ts
import {
  useMutation,
  useQueryClient,
  QueryKey,
  MutationFunction,
  UseMutationOptions,
} from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

export interface UseApiMutationOptions<TData, TVariables, TContext>
  extends Omit<
    UseMutationOptions<TData, AxiosError, TVariables, TContext>,
    "mutationFn"
  > {
  mutationFn: MutationFunction<TData, TVariables>;
  successMessage?: string | ((data: TData, variables: TVariables) => string);
  errorMessage?: string;
  invalidateQueries?:
    | QueryKey[]
    | ((data: TData, variables: TVariables) => QueryKey[]);
}

export function useApiMutation<
  TData = any,
  TVariables = any,
  TContext = unknown,
>({
  mutationFn,
  successMessage,
  errorMessage,
  invalidateQueries = [],
  onSuccess,
  onError,
  ...options
}: UseApiMutationOptions<TData, TVariables, TContext>) {
  const queryClient = useQueryClient();

  return useMutation<TData, AxiosError, TVariables, TContext>({
    mutationFn,
    onSuccess: (data, variables, context) => {
      if (successMessage) {
        const message =
          typeof successMessage === "function"
            ? successMessage(data, variables)
            : successMessage;
        toast.success(message);
      }

      const keysToInvalidate =
        typeof invalidateQueries === "function"
          ? invalidateQueries(data, variables)
          : invalidateQueries;

      if (keysToInvalidate.length) {
        keysToInvalidate.forEach((key) => {
          if (key.length > 0) {
            queryClient.invalidateQueries({ queryKey: key });
          }
        });
      }

      if (onSuccess) {
        onSuccess(data, variables, context);
      }
    },
    onError: (error: any, variables, context) => {
      const defaultMessage = "An unexpected error occurred.";
      const message =
        errorMessage || error.response?.data?.message || defaultMessage;

      toast.error("Operation Failed", {
        description: message,
      });
      if (onError) {
        onError(error, variables, context);
      }
    },
    ...options,
  });
}

// FILE: src/hooks/useApiResource.ts
// FILE: src/hooks/useApiResource.ts
import api from "@/lib/api";
import { useQuery, QueryKey } from "@tanstack/react-query";
import { useApiMutation } from "./useApiMutation";

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

const fetchResourceList = async <T>(
  resourceUrl: string,
  query?: any
): Promise<PaginatedResponse<T>> => {
  const { data } = await api.get<PaginatedResponse<T>>(resourceUrl, {
    params: query,
  });
  return data;
};

const fetchResource = async <T>(
  resourceUrl: string,
  id: string
): Promise<T> => {
  const { data } = await api.get<T>(`${resourceUrl}/${id}`);
  return data;
};

const createResource = async <T>(
  resourceUrl: string,
  resourceData: any
): Promise<T> => {
  const { data } = await api.post<T>(`${resourceUrl}`, resourceData);
  return data;
};

const updateResource = async <T>({
  resourceUrl,
  id,
  data: resourceData,
}: {
  resourceUrl: string;
  id: string;
  data: any;
}): Promise<T> => {
  const { data } = await api.put<T>(`${resourceUrl}/${id}`, resourceData);
  return data;
};

const deleteResource = async (
  resourceUrl: string,
  ids: string | string[]
): Promise<void> => {
  if (Array.isArray(ids) && ids.length > 0) {
    await api.delete(`${resourceUrl}`, { data: { ids } });
  } else if (typeof ids === "string") {
    await api.delete(`${resourceUrl}/${ids}`);
  }
};

export function useApiResource<TData = any, TQuery = object>(
  resourceUrl: string,
  resourceKey: QueryKey
) {
  const resourceName = String(resourceKey[0]);

  const useGetAll = (query?: TQuery) => {
    return useQuery<PaginatedResponse<TData>>({
      queryKey: [...resourceKey, query],
      queryFn: () => fetchResourceList<TData>(resourceUrl, query),
    });
  };

  const useGetOne = (id: string | null) => {
    return useQuery<TData>({
      queryKey: [...resourceKey, id],
      queryFn: () => fetchResource<TData>(resourceUrl, id!),
      enabled: !!id,
    });
  };

  const useCreate = () => {
    return useApiMutation<TData, any>({
      mutationFn: (newData: any) => createResource<TData>(resourceUrl, newData),
      successMessage: `${resourceName} created successfully.`,
      invalidateQueries: [resourceKey],
    });
  };

  const useUpdate = () => {
    return useApiMutation<TData, { id: string; data: any }>({
      mutationFn: (variables) =>
        updateResource<TData>({ resourceUrl, ...variables }),
      successMessage: `${resourceName} updated successfully.`,
      invalidateQueries: [resourceKey],
    });
  };

  const useDelete = () => {
    return useApiMutation<void, string | string[]>({
      mutationFn: (ids: string | string[]) => deleteResource(resourceUrl, ids),
      successMessage: (_data, variables) => {
        const count = Array.isArray(variables) ? variables.length : 1;
        return `${count} ${resourceName}(s) deleted successfully.`;
      },
      invalidateQueries: [resourceKey],
    });
  };

  return {
    useGetAll,
    useGetOne,
    useCreate,
    useUpdate,
    useDelete,
  };
}

// FILE: src/hooks/useDebounce.ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

// FILE: src/hooks/useNotificationSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useNotificationSocket() {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket) {
      return;
    }

    const handleNewNotification = (event: { payload: any }) => {
      const newNotification = event.payload;

      toast.info(newNotification.message, {
        description: `Severity: ${newNotification.severity}`,
      });

      queryClient.setQueryData<any>(
        ["notifications"],
        (oldData: { data: any; total: number; unreadCount: any }) => {
          if (!oldData) {
            const newData = {
              data: [newNotification],
              total: 1,
              unreadCount: 1,
              page: 1,
              limit: 10,
              totalPages: 1,
            };
            return newData;
          }

          const newData = {
            ...oldData,
            data: [newNotification, ...(oldData.data || [])],
            total: oldData.total + 1,
            unreadCount: (oldData.unreadCount ?? 0) + 1,
          };
          return newData;
        }
      );
    };

    socket.on("NEW_NOTIFICATION", handleNewNotification);

    return () => {
      socket.off("NEW_NOTIFICATION", handleNewNotification);
    };
  }, [socket, queryClient]);
}
// FILE: src/hooks/usePresence.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { usePresenceStore } from "@/store/presence";

export function usePresence(contextType: string, contextId: string) {
  const socket = useSocket();
  const { setMembers, addMember, removeMember } = usePresenceStore();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      setMembers([]);
      return;
    }

    socket.emit("join_context", { contextType, contextId }, (response: any) => {
      if (response.success) {
        setMembers(response.data.members);
      }
    });

    const onUserJoined = (event: any) => {
      addMember(event.payload);
    };

    const onUserLeft = (event: any) => {
      removeMember(event.payload.socketId);
    };

    socket.on("USER_JOINED_CONTEXT", onUserJoined);
    socket.on("USER_LEFT_CONTEXT", onUserLeft);

    return () => {
      socket.emit("leave_context", { contextType, contextId });
      socket.off("USER_JOINED_CONTEXT", onUserJoined);
      socket.off("USER_LEFT_CONTEXT", onUserLeft);

      setMembers([]);
    };
  }, [socket, contextType, contextId, setMembers, addMember, removeMember]);
}

// FILE: src/hooks/useProjectSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useProjectSocket(projectId: string) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !projectId) {
      return;
    }

    const handleContextUpdate = (event: any) => {
      const { entityType, data } = event.payload;

      toast.info(`Real-time update: ${entityType} was modified.`);

      queryClient.invalidateQueries({ queryKey: ["tasks", projectId] });
      queryClient.invalidateQueries({ queryKey: ["epics", projectId] });
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });

      if (data?.id) {
        queryClient.invalidateQueries({ queryKey: ["task", data.id] });
      }
    };

    socket.on("CONTEXT_ITEM_UPDATED", handleContextUpdate);

    socket.emit("join_context", {
      contextType: "Project",
      contextId: projectId,
    });

    return () => {
      socket.emit("leave_context", {
        contextType: "Project",
        contextId: projectId,
      });
      socket.off("CONTEXT_ITEM_UPDATED", handleContextUpdate);
    };
  }, [socket, projectId, queryClient]);
}

// FILE: src/hooks/useSocket.ts
import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";
import { useAuthStore } from "@/store/auth";

export function useSocket() {
  const [socket, setSocket] = useState<Socket | null>(null);
  const accessToken = useAuthStore((state) => state.accessToken);

  useEffect(() => {
    if (!accessToken) {
      if (socket) {
        socket.disconnect();
        setSocket(null);
      }
      return;
    }

    const newSocket = io("http://localhost:3000", {
      auth: {
        token: accessToken,
      },
    });

    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, [accessToken]);

  return socket;
}
// FILE: src/hooks/useSocketSubscription.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";

type EventHandler = (event: any) => void;

export function useSocketSubscription(
  contextType: string,
  contextId: string,
  handlers: Record<string, EventHandler>
) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      return;
    }

    socket.emit("join_context", { contextType, contextId });

    Object.entries(handlers).forEach(([eventName, handler]) => {
      socket.on(eventName, handler);
    });

    return () => {
      socket.emit("leave_context", { contextType, contextId });

      Object.keys(handlers).forEach((eventName) => {
        socket.off(eventName);
      });
    };
  }, [socket, contextType, contextId, queryClient, handlers]);
}

// FILE: src/lib/api.ts
// FILE: src/lib/api.ts
import axios, { InternalAxiosRequestConfig } from "axios";
import { useAuthStore } from "@/store/auth";

const api = axios.create({
  baseURL: "http://localhost:3000/api/v1",
  withCredentials: true,
});

api.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = useAuthStore.getState().accessToken;
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    console.log("Axios Interceptor: Caught an error.", {
      url: originalRequest.url,
      status: error.response?.status,
    });

    const isAuthEndpoint =
      originalRequest.url?.includes("/auth/login") ||
      originalRequest.url?.includes("/auth/refresh-token");

    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !isAuthEndpoint
    ) {
      console.log(
        "Axios Interceptor: Intercepted 401. Attempting token refresh."
      );
      originalRequest._retry = true;
      try {
        const { data } = await api.post("/auth/refresh-token");
        const { accessToken } = data;
        useAuthStore.getState().setAccessToken(accessToken);
        originalRequest.headers.Authorization = `Bearer ${accessToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        console.error("Axios Interceptor: Token refresh failed.", refreshError);
        useAuthStore.getState().setAccessToken(null);
        console.error("Session expired. Please log in again.");
        return Promise.reject(refreshError);
      }
    }

    console.log(
      "Axios Interceptor: Error was not a 401 or was an auth endpoint. Rejecting promise."
    );
    return Promise.reject(error);
  }
);

export default api;

// FILE: src/lib/config.ts
const config = {
  apiBaseUrl: "http://localhost:3000/api/v1",
};

export default config;

// FILE: src/lib/icons.tsx
// FILE: src/lib/icons.tsx
import {
  Briefcase,
  CheckSquare,
  FileText,
  User,
  type LucideIcon,
  Book,
  FlaskConical,
  BarChart,
  Target,
  Bug,
  Lightbulb,
  Flame,
} from "lucide-react";

export const ICONS: Record<string, LucideIcon> = {
  Project: Briefcase,
  Task: CheckSquare,
  Publication: FileText,
  User: User,
  Book,
  FlaskConical,
  BarChart,
  Target,
  Bug,
  Spike: Flame,
  Story: Book,
  Idea: Lightbulb,
  Default: FileText,
};
export function getIcon(typeName: string | null | undefined): LucideIcon {
  if (!typeName) {
    return ICONS.Default;
  }
  // Case-insensitive matching
  const foundIcon = Object.keys(ICONS).find(
    (key) => key.toLowerCase() === typeName.toLowerCase()
  );
  return foundIcon ? ICONS[foundIcon] : ICONS.Default;
}

// FILE: src/lib/schemas.ts
import { SocialProvider, JobStatus } from "@/types";
import { z } from "zod";
import { createPaginationSchema, createPaginatedResponseSchema } from "./zod";

export const phoneRegex = new RegExp(/^[+]*[(]?[0-9]{1,4}[)]?[-\s./0-9]*$/);

export const nameSchema = (entity: string, min = 2) =>
  z.string().min(min, `${entity} name must be at least ${min} characters.`);

export const descriptionSchema = z.string().optional().nullable();

export const requiredStringSchema = (fieldName: string) =>
  z.string().min(1, `${fieldName} is required.`);

export const phoneNumberSchema = z
  .string()
  .refine((val) => {
    if (!val) return true;
    return phoneRegex.test(val);
  }, "Invalid phone number format.")
  .optional()
  .nullable();
export const socialLinkSchema = z.object({
  id: z.string().uuid().optional(),
  provider: z.nativeEnum(SocialProvider),
  url: z.string().url("Please enter a valid URL."),
});

const BaseProfileUpdateSchema = z.object({
  firstName: z.string().min(1).optional(),
  lastName: z.string().min(1).optional(),
  email: z.string().email().optional(),
  avatarUrl: z.string().url().optional().nullable(),
  phoneNumber: phoneNumberSchema,
  birthday: z.date().optional().nullable(),
  socialLinks: z.array(socialLinkSchema).optional(),
  skillIds: z.array(z.string().uuid()).optional(),
});

const BiographyUpdateSchema = z.object({
  biography: z
    .string()
    .nullable()
    .optional()
    .transform((val) => {
      if (typeof document !== "undefined") {
        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = val || "";
        if (!val || tempDiv.textContent?.trim() === "") {
          return null;
        }
      }
      return val;
    }),
});
export const UpdateUserProfileDtoSchema = BaseProfileUpdateSchema.merge(
  BiographyUpdateSchema
);
export type UpdateUserProfileDto = z.infer<typeof UpdateUserProfileDtoSchema>;
export const UpdateAvatarDtoSchema = z.object({
  avatarUrl: z.string().url(),
});
export type UpdateAvatarDto = z.infer<typeof UpdateAvatarDtoSchema>;

export const JobIdParamsSchema = z.object({
  jobId: z.string().uuid(),
});

export const JobScheduleIdParamsSchema = z.object({
  scheduleId: z.string().uuid(),
});
export const JobSchema = z.object({
  id: z.string().uuid(),
  type: z.string(),
  payload: z.record(z.string(), z.unknown()),
  status: z.nativeEnum(JobStatus),
  priority: z.number().int(),
  attempts: z.number().int(),
  maxAttempts: z.number().int(),
  scheduledAt: z.coerce.date().nullable(),
  startedAt: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  failedAt: z.coerce.date().nullable(),
  nextRetryAt: z.coerce.date().nullable(),
  error: z.string().nullable(),
  result: z.record(z.string(), z.unknown()).nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
});
export type Job = z.infer<typeof JobSchema>;

export const JobAttemptSchema = z.object({
  id: z.string().uuid(),
  jobId: z.string().uuid(),
  attemptNumber: z.number().int(),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().nullable(),
  error: z.string().nullable(),
  duration: z.number().int().nullable(),
});
export const JobWithAttemptsSchema = JobSchema.extend({
  attempts_log: z.array(JobAttemptSchema),
});

export const JobScheduleSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  jobType: z.string(),
  cronExpression: z.string(),
  payload: z.record(z.string(), z.unknown()),
  isActive: z.boolean(),
  lastRunAt: z.coerce.date().nullable(),
  nextRunAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
});
export const JobListQuerySchema = createPaginationSchema().extend({
  type: z.string().optional(),
  status: z.nativeEnum(JobStatus).optional(),
  sortBy: z
    .enum(["createdAt", "scheduledAt", "priority", "type", "status"])
    .default("createdAt"),
  sortOrder: z.enum(["asc", "desc"]).default("desc"),
});
export const JobScheduleListQuerySchema = createPaginationSchema().extend({
  jobType: z.string().optional(),
  isActive: z.preprocess((val) => val === "true", z.boolean()).optional(),
  sortBy: z
    .enum(["name", "createdAt", "lastRunAt", "nextRunAt"])
    .default("name"),
  sortOrder: z.enum(["asc", "desc"]).default("asc"),
});
export const PaginatedJobsResponseSchema =
  createPaginatedResponseSchema(JobSchema);
export const PaginatedJobSchedulesResponseSchema =
  createPaginatedResponseSchema(JobScheduleSchema);
export const QueueStatsSchema = z.object({
  totalJobs: z.object({
    total: z.number().int(),
    pending: z.number().int(),
    running: z.number().int(),
    completed: z.number().int(),
    failed: z.number().int(),
    cancelled: z.number().int(),
  }),
  averageWaitTime: z.number(),
  averageProcessingTime: z.number(),
  throughputPerHour: z.number(),
  failureRate: z.number(),
});
export const JobSystemStatusResponseSchema = z.object({
  processor: z.object({
    isProcessing: z.boolean(),
    runningJobs: z.number().int(),
    consecutiveFailures: z.number().int(),
  }),
  scheduler: z.object({ isRunning: z.boolean() }),
  registeredJobTypes: z.number().int(),
});

// FILE: src/lib/utils.ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import config from "./config";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function getAbsoluteUrl(
  relativePath?: string | null
): string | undefined {
  if (!relativePath) {
    return undefined;
  }
  if (
    relativePath.startsWith("http://") ||
    relativePath.startsWith("https://")
  ) {
    return relativePath;
  }
  const backendUrl = new URL(config.apiBaseUrl).origin;
  return `${backendUrl}${relativePath}`;
}

export const parseServerDate = (
  dateString: string | null | undefined
): Date | null => {
  if (!dateString) return null;
  const date = new Date(dateString);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
};

export const formatDateForServer = (
  date: Date | null | undefined
): string | null => {
  if (!date) return null;
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}T00:00:00.000Z`;
};

// FILE: src/lib/zod.ts
import { z, ZodType } from "zod";

export const createPaginationSchema = (defaultLimit = 10) =>
  z.object({
    page: z.coerce.number().int().positive().optional().default(1),
    limit: z.coerce
      .number()
      .int()
      .positive()
      .max(100)
      .optional()
      .default(defaultLimit),
  });

export const createPaginatedResponseSchema = <T extends ZodType>(
  itemSchema: T
) =>
  z.object({
    data: z.array(itemSchema),
    total: z.number().int(),
    page: z.number().int(),
    limit: z.number().int(),
    totalPages: z.number().int(),
  });

export const createUuidParamSchema = (paramName: string, entityDisplayName: string) =>
  z.object({
    [paramName]: z.string().uuid({
      message: `Invalid ${entityDisplayName} ID format. Expected UUID.`,
    }),
  });
// FILE: src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import { QueryProvider } from "./providers/QueryProvider.tsx";
import { AuthProvider } from "./providers/AuthProvider.tsx";
import { BrowserRouter } from "react-router-dom";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <QueryProvider>
      <BrowserRouter>
        <AuthProvider>
          <App />
        </AuthProvider>
      </BrowserRouter>
    </QueryProvider>
  </React.StrictMode>
);

// FILE: src/pages/AccountSettingsPage.tsx
import { ChangePasswordForm } from "@/features/security/components/ChangePasswordForm";
import { NotificationPreferencesForm } from "@/features/notifications/components/NotificationPreferencesForm";
export function AccountSettingsPage() {
  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <ChangePasswordForm />
      <NotificationPreferencesForm />
    </div>
  );
}

// FILE: src/pages/admin/AnnouncementListPage.tsx
import { AnnouncementList } from "@/features/admin/announcements/components/AnnouncementList";
import { BroadcastNotificationDialog } from "@/features/notifications/components/BroadcastNotificationDialog";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { AnnouncementForm } from "@/features/admin/announcements/components/AnnouncementForm";

export function AnnouncementListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            System Communications
          </h1>
          <p className="text-muted-foreground">
            Create and manage announcements or send real-time broadcasts.
          </p>
        </div>
        <div className="flex items-center gap-2">
          <BroadcastNotificationDialog />
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Announcement
              </Button>
            }
            title="Create New Announcement"
            description="Broadcast information to all users or specific roles."
            form={AnnouncementForm}
            resourcePath="announcements"
            resourceKey={["announcements"]}
          />
        </div>
      </div>
      <AnnouncementList />
    </div>
  );
}

// FILE: src/pages/admin/JobMonitoringPage.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { JobSystemStatus } from "@/features/admin/jobs/components/JobSystemStatus";
import { JobList } from "@/features/admin/jobs/components/JobList";
import { JobScheduleList } from "@/features/admin/jobs/components/JobScheduleList";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateJobScheduleForm } from "@/features/admin/jobs/components/CreateJobScheduleForm";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";

export function JobMonitoringPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Job Monitoring</h1>
        <p className="text-muted-foreground">
          Monitor and manage background jobs and schedules.
        </p>
      </div>

      <Tabs defaultValue="status" className="space-y-4">
        <TabsList>
          <TabsTrigger value="status">System Status</TabsTrigger>
          <TabsTrigger value="queue">Job Queue</TabsTrigger>
          <TabsTrigger value="schedules">Schedules</TabsTrigger>
        </TabsList>
        <TabsContent value="status" className="space-y-4">
          <JobSystemStatus />
        </TabsContent>
        <TabsContent value="queue" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Job Queue</CardTitle>
              <CardDescription>
                A list of all recent and pending background jobs.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <JobList />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="schedules" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Job Schedules</CardTitle>
                <CardDescription>
                  All recurring jobs defined in the system.
                </CardDescription>
              </div>
              <ResourceCrudDialog
                isOpen={isCreateOpen}
                onOpenChange={setIsCreateOpen}
                trigger={
                  <Button onClick={() => setIsCreateOpen(true)}>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New Schedule
                  </Button>
                }
                title="Create New Job Schedule"
                description="Define a recurring job that will run automatically."
                form={CreateJobScheduleForm}
                resourcePath="admin/jobs/schedules"
                resourceKey={["jobSchedules"]}
              />
            </CardHeader>
            <CardContent>
              <JobScheduleList />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// FILE: src/pages/admin/PermissionListPage.tsx
import { PermissionList } from "@/features/admin/permissions/components/PermissionList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { PermissionForm } from "@/features/admin/permissions/components/PermissionForm";

export function PermissionListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            System Permissions
          </h1>
          <p className="text-muted-foreground">
            Manage all available permissions in the system.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Permission
            </Button>
          }
          title="Create New Permission"
          description="Define a new action and subject pair for access control."
          form={PermissionForm}
          resourcePath="admin/permissions"
          resourceKey={["permissions"]}
        />
      </div>
      <PermissionList />
    </div>
  );
}

// FILE: src/pages/admin/RoleListPage.tsx
import { RoleList } from "@/features/admin/roles/components/RoleList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { RoleForm } from "@/features/admin/roles/components/RoleForm";

export function RoleListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Role Management</h1>
          <p className="text-muted-foreground">
            View, create, and manage system roles and their permissions.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Role
            </Button>
          }
          title="Create New Role"
          description="Define a new global role and assign permissions later."
          form={RoleForm}
          resourcePath="admin/roles"
          resourceKey={["roles"]}
        />
      </div>
      <RoleList />
    </div>
  );
}

// FILE: src/pages/admin/SystemStatusPage.tsx
import { SystemStatusDashboard } from "@/features/admin/system-status/components/SystemStatusDashboard";

export function SystemStatusPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">System Status</h1>
        <p className="text-muted-foreground">
          A real-time overview of the application's health and core
          dependencies.
        </p>
      </div>
      <SystemStatusDashboard />
    </div>
  );
}

// FILE: src/pages/admin/UserListPage.tsx
import { UserList } from "@/features/admin/users/components/UserList";
import { Button } from "@/components/ui/button";
import { UserPlus } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateUserForm } from "@/features/admin/users/components/CreateUserForm";

export function UserListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground">View and manage system users.</p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <UserPlus className="mr-2 h-4 w-4" />
              New User
            </Button>
          }
          title="Create New User"
          description="Fill out the form below to create a new user account. An invitation email will be sent for them to set their password."
          form={CreateUserForm}
          resourcePath="admin/users"
          resourceKey={["users"]}
        />
      </div>
      <UserList />
    </div>
  );
}

// FILE: src/pages/admin/WorkflowListPage.tsx
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { WorkflowList } from "@/features/admin/workflows/components/WorkflowList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { WorkflowForm } from "@/features/admin/workflows/components/WorkflowForm";

export function WorkflowListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Workflows</h1>
          <p className="text-muted-foreground">
            Automate tasks based on project events.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Workflow
            </Button>
          }
          title="Create New Workflow"
          description="Configure a trigger and a series of actions to automate your processes."
          form={WorkflowForm}
          resourcePath="admin/workflows"
          resourceKey={["workflows"]}
          dialogClassName="sm:max-w-[600px]"
        />
      </div>
      <WorkflowList />
    </div>
  );
}

// FILE: src/pages/CrmPage.tsx
// FILE: src/pages/CrmPage.tsx
import { useState } from "react";
import { PersonList } from "@/features/crm/components/PersonList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { PersonForm } from "@/features/crm/components/PersonForm";
import { CompanyForm } from "@/features/crm/components/CompanyForm";
import { PersonDetailPanel } from "@/features/crm/components/PersonDetailPanel";
import { CompanyDetailPanel } from "@/features/crm/components/CompanyDetailPanel";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useApiResource } from "@/hooks/useApiResource";
import { CompanyCard } from "@/features/crm/components/CompanyCard";
import { EmptyState } from "@/components/ui/empty-state";
import { Building2 } from "lucide-react";

function CompanyList({
  onCompanySelect,
}: {
  onCompanySelect: (id: string) => void;
}) {
  const { data, isLoading } = useApiResource("companies", [
    "companies",
  ]).useGetAll();

  if (isLoading) return <div>Loading companies...</div>;

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Building2 className="h-10 w-10" />}
        title="No Companies Found"
        description="Get started by creating your first company."
      />
    );
  }

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {data.data.map((company: any) => (
        <CompanyCard
          key={company.id}
          company={company}
          onSelect={() => onCompanySelect(company.id)}
        />
      ))}
    </div>
  );
}

export function CrmPage() {
  const [selectedPersonId, setSelectedPersonId] = useState<string | null>(null);
  const [selectedCompanyId, setSelectedCompanyId] = useState<string | null>(
    null
  );
  const [isCreatePersonOpen, setIsCreatePersonOpen] = useState(false);
  const [isCreateCompanyOpen, setIsCreateCompanyOpen] = useState(false);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">CRM</h1>
          <p className="text-muted-foreground">
            Manage all people and companies in your organization.
          </p>
        </div>
        <div>
          <ResourceCrudDialog
            isOpen={isCreatePersonOpen}
            onOpenChange={setIsCreatePersonOpen}
            trigger={
              <Button
                onClick={() => setIsCreatePersonOpen(true)}
                className="mr-2"
              >
                <PlusCircle className="mr-2 h-4 w-4" />
                New Person
              </Button>
            }
            title="Create New Person"
            description="Add a new person to the CRM. This won't create a system user account."
            form={PersonForm}
            resourcePath="people"
            resourceKey={["people"]}
          />
          <ResourceCrudDialog
            isOpen={isCreateCompanyOpen}
            onOpenChange={setIsCreateCompanyOpen}
            trigger={
              <Button onClick={() => setIsCreateCompanyOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Company
              </Button>
            }
            title="Create New Company"
            description="Add a new company or organization to the CRM."
            form={CompanyForm}
            resourcePath="companies"
            resourceKey={["companies"]}
          />
        </div>
      </div>

      <Tabs defaultValue="people">
        <TabsList>
          <TabsTrigger value="people">People</TabsTrigger>
          <TabsTrigger value="companies">Companies</TabsTrigger>
        </TabsList>
        <TabsContent value="people" className="mt-4">
          <PersonList onPersonSelect={setSelectedPersonId} />
        </TabsContent>
        <TabsContent value="companies" className="mt-4">
          <CompanyList onCompanySelect={setSelectedCompanyId} />
        </TabsContent>
      </Tabs>

      <PersonDetailPanel
        personId={selectedPersonId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedPersonId(null);
        }}
      />
      <CompanyDetailPanel
        companyId={selectedCompanyId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedCompanyId(null);
        }}
      />
    </div>
  );
}

// FILE: src/pages/Dashboard.tsx
export function DashboardPage() {
  return (
    <div>
      <h1 className="text-3xl font-bold tracking-tight">
        Welcome to your Dashboard
      </h1>
      <p className="text-muted-foreground mt-2">
        This is your central hub. Select an option from the sidebar to get
        started.
      </p>
    </div>
  );
}

// FILE: src/pages/DashboardDetailPage.tsx
// FILE: src/pages/DashboardDetailPage.tsx
import { useParams } from "react-router-dom";
import GridLayout, { Layout } from "react-grid-layout";
import { useApiResource } from "@/hooks/useApiResource";
import { WidgetRenderer } from "@/features/widgets/components/WidgetRenderer";
import "react-grid-layout/css/styles.css";
import "react-resizable/css/styles.css";
import { useUpdateWidget } from "@/features/widgets/api/useUpdateWidget";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateWidgetForm } from "@/features/widgets/components/CreateWidgetForm";

export function DashboardDetailPage() {
  const { workspaceId, projectId, dashboardId } = useParams<{
    workspaceId: string;
    projectId?: string; // projectId is now optional
    dashboardId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !dashboardId) {
    return <div>Missing ID parameter.</div>;
  }

  const resourceUrl = projectId
    ? `/workspaces/${workspaceId}/projects/${projectId}/dashboards`
    : `/workspaces/${workspaceId}/dashboards`;

  const resourceKey = projectId
    ? ["dashboards", projectId]
    : ["dashboards", workspaceId];

  const dashboardResource = useApiResource(resourceUrl, resourceKey);

  const { data: dashboardData, isLoading } =
    dashboardResource.useGetOne(dashboardId);

  // Note: useUpdateWidget will need to be aware of the context. For now, we assume it can figure it out.
  // A more robust solution might involve passing both workspaceId and projectId to the hook.
  const updateWidgetMutation = useUpdateWidget(
    workspaceId,
    projectId!, // This might be an issue if projectId is null, requires careful handling in the hook
    dashboardId
  );

  const handleLayoutChange = (newLayout: Layout[]) => {
    if (!dashboardData?.widgets) return;
    const originalLayout = dashboardData.widgets.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    }));
    for (const newPos of newLayout) {
      const originalPos = originalLayout.find((o: any) => o.i === newPos.i);
      if (
        originalPos &&
        (originalPos.x !== newPos.x ||
          originalPos.y !== newPos.y ||
          originalPos.w !== newPos.w ||
          originalPos.h !== newPos.h)
      ) {
        updateWidgetMutation.mutate({
          widgetId: newPos.i,
          widgetData: {
            layout: {
              x: newPos.x,
              y: newPos.y,
              w: newPos.w,
              h: newPos.h,
            },
          },
        });
      }
    }
  };

  if (isLoading) return <div>Loading Dashboard...</div>;
  if (!dashboardData) return <div>Dashboard not found.</div>;

  const layout =
    dashboardData.widgets?.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    })) || [];

  const widgetResourcePath = projectId
    ? `/workspaces/${workspaceId}/projects/${projectId}/dashboards/${dashboardId}/widgets`
    : `/workspaces/${workspaceId}/dashboards/${dashboardId}/widgets`;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            {dashboardData.name}
          </h1>
          <p className="text-muted-foreground">{dashboardData.description}</p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Widget
            </Button>
          }
          title="Add a New Widget"
          description="Select a widget type and configure it to visualize your data."
          form={CreateWidgetForm}
          formProps={{ workspaceId, projectId, dashboardId }}
          resourcePath={widgetResourcePath}
          resourceKey={["dashboard", dashboardId]}
        />
      </div>

      <GridLayout
        className="layout"
        layout={layout}
        cols={12}
        rowHeight={30}
        width={1200}
        isDraggable={true}
        isResizable={true}
        onLayoutChange={handleLayoutChange}
      >
        {dashboardData.widgets?.map((widget: any) => (
          <div key={widget.id}>
            <WidgetRenderer
              widget={widget}
              workspaceId={workspaceId}
              projectId={projectId}
            />
          </div>
        ))}
      </GridLayout>
    </div>
  );
}

// FILE: src/pages/ForgotPasswordPage.tsx
import { ForgotPasswordForm } from "@/features/auth/components/ForgotPasswordForm";

export function ForgotPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ForgotPasswordForm />
    </div>
  );
}

// FILE: src/pages/IntegrationCallbackPage.tsx
import { useEffect } from "react";
import { useSearchParams } from "react-router-dom";
export function IntegrationCallbackPage() {
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const status = searchParams.get("status");
    const message = searchParams.get("message");

    if (window.opener) {
      window.opener.postMessage(
        {
          source: "google-oauth-callback",
          status: status,
          message: message,
        },
        window.location.origin
      );

      window.close();
    }
  }, [searchParams]);
  return (
    <div className="flex h-screen w-full items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-xl font-semibold">Processing...</h1>
        <p className="text-muted-foreground">
          You can close this window if it does not close automatically.
        </p>
      </div>
    </div>
  );
}

// FILE: src/pages/IntegrationsPage.tsx
// FILE: src/pages/IntegrationsPage.tsx
import { IntegrationList } from "@/features/integrations/components/IntegrationList";

export function IntegrationsPage() {
  return (
    <div className="space-y-4">
      <div>
        <h2 className="text-2xl font-semibold">Integrations</h2>
        <p className="text-muted-foreground">
          Connect your account to third-party services to enhance your workflow.
        </p>
      </div>
      <IntegrationList />
    </div>
  );
}

// FILE: src/pages/KnowledgeBasePage.tsx
// FILE: src/pages/KnowledgeBasePage.tsx
import { KnowledgeBaseList } from "@/features/knowledge-base/components/KnowledgeBaseList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { KnowledgeBaseForm } from "@/features/knowledge-base/components/KnowledgeBaseForm";

export function KnowledgeBasePage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">
            All Knowledge Bases
          </h2>
          <p className="text-muted-foreground">
            A list of all knowledge bases within this workspace.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Knowledge Base
            </Button>
          }
          title="Create a new knowledge base"
          description="Knowledge bases contain documents and pages."
          form={KnowledgeBaseForm}
          formProps={{ workspaceId }}
          resourcePath={`/workspaces/${workspaceId}/knowledge-bases`}
          resourceKey={["knowledgeBases", workspaceId]}
        />
      </div>
      <KnowledgeBaseList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/Login.tsx
import { LoginForm } from "@/features/auth/components/LoginForm";

export function LoginPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <LoginForm />
    </div>
  );
}

// FILE: src/pages/MyTasksPage.tsx
import { TaskList } from "@/features/tasks/components/TaskList";
import { TaskDetailModal } from "@/features/tasks/components/TaskDetailModal";
import { useSearchParams } from "react-router-dom";
import { useState, useMemo } from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { ListTasksQuery } from "@/features/tasks/task.types";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useApiResource } from "@/hooks/useApiResource";
import { MyTasksKanbanBoard } from "@/features/tasks/components/MyTasksKanbanBoard";
import { Skeleton } from "@/components/ui/skeleton";
import { EmptyState } from "@/components/ui/empty-state";
import { CheckSquare, PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { Button } from "@/components/ui/button";
import { CreateTaskForm } from "@/features/tasks/components/CreateTaskForm";

const TaskListSkeleton = () => (
  <div className="space-y-2 pt-4">
    {Array.from({ length: 8 }).map((_, i) => (
      <Skeleton key={i} className="h-12 w-full rounded-lg" />
    ))}
  </div>
);
export function MyTasksPage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const selectedTaskId = searchParams.get("taskId");
  const activeView = searchParams.get("view") || "list";
  const [page, setPage] = useState(1);
  const [filter, setFilter] = useState("all_assigned");
  const [sortBy, setSortBy] = useState("priority");
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const handleTaskSelect = (taskId: string | null) => {
    setSearchParams(
      (params) => {
        if (taskId) {
          params.set("taskId", taskId);
        } else {
          params.delete("taskId");
        }
        return params;
      },
      { replace: true }
    );
  };

  const handleViewChange = (view: string) => {
    setSearchParams(
      (params) => {
        params.set("view", view);
        return params;
      },
      { replace: true }
    );
  };

  const queryParams: ListTasksQuery = useMemo(() => {
    const baseQuery: ListTasksQuery = {
      sortBy: sortBy as ListTasksQuery["sortBy"],
      sortOrder: "desc" as const,
      limit: activeView === "kanban" ? 200 : 15,
      page: page,
      includeSubtasks: true,
    };

    switch (filter) {
      case "created_standalone":
        return { ...baseQuery, userRole: "creator", taskOrigin: "standalone" };
      case "created_project":
        return { ...baseQuery, userRole: "creator", taskOrigin: "project" };
      case "assigned_standalone":
        return { ...baseQuery, userRole: "assignee", taskOrigin: "standalone" };
      case "assigned_project":
        return { ...baseQuery, userRole: "assignee", taskOrigin: "project" };
      case "all_assigned":
        return { ...baseQuery, userRole: "assignee" };
      default:
        return baseQuery;
    }
  }, [filter, sortBy, activeView, page]);

  const { data, isLoading } = useApiResource("tasks/my-tasks", [
    "myTasks",
  ]).useGetAll(queryParams);
  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const emptyState = (
    <EmptyState
      icon={<CheckSquare className="text-primary h-10 w-10" />}
      title="No tasks here"
      description="No tasks match your current filter. Try selecting a different filter or create a new task."
    />
  );
  return (
    <>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">My Tasks</h1>
            <p className="text-muted-foreground">
              All tasks assigned to you or created by you.
            </p>
          </div>
          <div className="flex items-center gap-4">
            <div className="grid w-full max-w-sm items-center gap-1.5">
              <Label htmlFor="filter">Filter by</Label>
              <Select value={filter} onValueChange={setFilter}>
                <SelectTrigger id="filter" className="w-[240px]">
                  <SelectValue placeholder="Filter tasks" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All My Tasks</SelectItem>
                  <SelectItem value="all_assigned">
                    All Assigned to Me (Default)
                  </SelectItem>
                  <SelectItem value="assigned_project">
                    Assigned to Me (from Projects)
                  </SelectItem>
                  <SelectItem value="assigned_standalone">
                    Assigned to Me (Standalone)
                  </SelectItem>
                  <SelectItem value="created_project">
                    Created by Me (in Projects)
                  </SelectItem>
                  <SelectItem value="created_standalone">
                    Created by Me (Standalone)
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
            {activeView === "list" && (
              <div className="grid w-full max-w-sm items-center gap-1.5">
                <Label htmlFor="sort">Sort by</Label>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger id="sort" className="w-[180px]">
                    <SelectValue placeholder="Sort tasks" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="priority">Priority</SelectItem>
                    <SelectItem value="dueDate">Due Date</SelectItem>
                    <SelectItem value="createdAt">Creation Date</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
            <div className="self-end">
              <ResourceCrudDialog
                isOpen={isCreateOpen}
                onOpenChange={setIsCreateOpen}
                trigger={
                  <Button onClick={() => setIsCreateOpen(true)}>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New Task
                  </Button>
                }
                title="Create a new task"
                description="Fill in the details below to add a new task."
                form={CreateTaskForm}
                resourcePath="/tasks"
                resourceKey={["myTasks"]}
              />
            </div>
          </div>
        </div>
        <Tabs value={activeView} onValueChange={handleViewChange}>
          <TabsList>
            <TabsTrigger value="list">List</TabsTrigger>
            <TabsTrigger value="kanban">Kanban</TabsTrigger>
          </TabsList>
          <TabsContent value="list">
            {isLoading ? (
              <TaskListSkeleton />
            ) : (
              <TaskList
                onTaskSelect={handleTaskSelect}
                tasks={data?.data || []}
                emptyState={emptyState}
                apiUrl="tasks"
                queryKey={["myTasks"]}
                pagination={{
                  page: data?.page || 1,
                  totalPages: data?.totalPages || 1,
                  handlePageChange,
                }}
              />
            )}
          </TabsContent>
          <TabsContent value="kanban" className="mt-4">
            {isLoading ? (
              <TaskListSkeleton />
            ) : (
              <MyTasksKanbanBoard
                tasks={data?.data || []}
                onTaskSelect={handleTaskSelect}
              />
            )}
          </TabsContent>
        </Tabs>
      </div>

      <TaskDetailModal
        taskId={selectedTaskId}
        isOpen={!!selectedTaskId}
        onOpenChange={(isOpen) => {
          if (!isOpen) handleTaskSelect(null);
        }}
        onTaskSelect={handleTaskSelect}
      />
    </>
  );
}

// FILE: src/pages/ProfilePage.tsx
import { UserForm } from "@/features/admin/users/components/UserForm";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useGetProfile } from "@/features/profile/api/useGetProfile";
import { Skeleton } from "@/components/ui/skeleton";
import { ProfileAvatar } from "@/features/profile/components/ProfileAvatar";
export function ProfilePage() {
  const { data: profile, isLoading } = useGetProfile();
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">My Profile</h1>
          <p className="text-muted-foreground">
            View and manage your personal details, publications, and activity.
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-8 lg:grid-cols-3">
        <div className="lg:col-span-1">
          <Card>
            <CardContent className="flex flex-col items-center pt-8">
              {isLoading || !profile ? (
                <Skeleton className="h-32 w-32 rounded-full" />
              ) : (
                <ProfileAvatar user={profile} isSelfProfile={true} />
              )}
              <h2 className="mt-4 text-2xl font-semibold">
                {isLoading ? <Skeleton className="h-8 w-40" /> : profile?.name}
              </h2>
              <p className="text-muted-foreground">
                {isLoading ? (
                  <Skeleton className="h-4 w-48" />
                ) : (
                  profile?.roles.join(", ")
                )}
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Personal Information</CardTitle>
              <CardDescription>
                Update your personal details. This information is visible to
                other users in the system.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-4">
                  <Skeleton className="h-10 w-full" />
                  <Skeleton className="h-20 w-full" />
                  <Skeleton className="h-10 w-full" />
                </div>
              ) : (
                <UserForm user={profile} onSuccess={() => {}} isSelfProfile />
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

// FILE: src/pages/ProjectAccessControlPage.tsx
// FILE: src/pages/ProjectAccessControlPage.tsx
import { ProjectRoleList } from "@/features/project-roles/components/ProjectRoleList";
import { InviteProjectMember } from "@/features/projects/components/InviteProjectMember";
import { ProjectMemberList } from "@/features/projects/components/ProjectMemberList";
import { useGetProjectMembers } from "@/features/projects/api/useGetProjectMembers";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateProjectRoleForm } from "@/features/project-roles/components/CreateProjectRoleForm";

export function ProjectAccessControlPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  const { data: membersData } = useGetProjectMembers(workspaceId, projectId);
  const existingMemberIds = membersData?.map((m: any) => m.userId) || [];
  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Members</h2>
            <p className="text-muted-foreground">
              Users who have been granted access to this project.
            </p>
          </div>
        </div>
        <ProjectMemberList workspaceId={workspaceId} projectId={projectId} />
        <InviteProjectMember
          workspaceId={workspaceId}
          projectId={projectId}
          existingMemberIds={existingMemberIds}
        />
      </div>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Roles</h2>
            <p className="text-muted-foreground">
              Custom roles and permissions specific to this project.
            </p>
          </div>
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Project Role
              </Button>
            }
            title="Create New Project Role"
            description="This role will only be available within this project."
            form={CreateProjectRoleForm}
            formProps={{ workspaceId, projectId }}
            resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/roles`}
            resourceKey={["projectRoles", projectId]}
          />
        </div>
        <ProjectRoleList workspaceId={workspaceId} projectId={projectId} />
      </div>
    </div>
  );
}

// FILE: src/pages/ProjectCustomFieldsPage.tsx
import { CustomFieldDefinitionList } from "@/features/custom-fields/components/CustomFieldDefinitionList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CustomFieldDefinitionForm } from "@/features/custom-fields/components/CustomFieldDefinitionForm";

export function ProjectCustomFieldsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold">Custom Fields</h2>
          <p className="text-muted-foreground">
            Add and manage custom data fields for tasks in this project.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Custom Field
            </Button>
          }
          title="Create New Custom Field"
          description="This field will be available for all tasks in this project."
          form={CustomFieldDefinitionForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/custom-fields`}
          resourceKey={["customFieldDefinitions", projectId]}
        />
      </div>
      <CustomFieldDefinitionList
        workspaceId={workspaceId}
        projectId={projectId}
      />
    </div>
  );
}

// FILE: src/pages/ProjectDetailPage.tsx
// FILE: src/pages/ProjectDetailPage.tsx
import { useParams, useSearchParams } from "react-router-dom";
import { useEffect, useMemo } from "react";
import { TaskDetailModal } from "@/features/tasks/components/TaskDetailModal";
import { useApiResource } from "@/hooks/useApiResource";
import { useProjectSocket } from "@/hooks/useProjectSocket";
import { usePresence } from "@/hooks/usePresence";
import { ErrorState } from "@/components/ui/error-state";
import { Skeleton } from "@/components/ui/skeleton";
import { ProjectDetailView } from "@/features/views/components/ProjectDetailView";
import { ListTasksQuery } from "@/features/tasks/task.types";
import { View } from "@/types";
import { useGetViewData } from "@/features/views/api/useGetViewData";

export function ProjectDetailPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  const [searchParams, setSearchParams] = useSearchParams();
  const activeTabId = searchParams.get("view");
  const selectedTaskId = searchParams.get("taskId");
  const viewsResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/views`,
    ["views", projectId]
  );
  const {
    data: viewsData,
    isLoading: isLoadingViews,
    isError: isViewsError,
  } = viewsResource.useGetAll();
  const activeView = useMemo(
    () => (viewsData?.data || []).find((v: View) => v.id === activeTabId),
    [viewsData, activeTabId]
  );
  const viewDataQuery: ListTasksQuery = {
    page: 1,
    limit: 100,
    includeSubtasks: false,
    sortBy: "orderInColumn" as const,
    sortOrder: "asc" as const,
  };
  const {
    data: viewData,
    isLoading: isLoadingViewData,
    isError: isViewDataError,
  } = useGetViewData(workspaceId!, projectId!, activeTabId, viewDataQuery, {
    enabled: !!activeView,
  });
  useProjectSocket(projectId!);
  usePresence("Project", projectId!);

  const handleTabChange = (newTab: string) => {
    setSearchParams((params) => {
      params.set("view", newTab);
      return params;
    });
  };

  useEffect(() => {
    if (!isLoadingViews && viewsData && !activeTabId) {
      const listTabView = viewsData.data?.find((v: any) => v.name === "List");
      const defaultViewId =
        listTabView?.id || viewsData.data?.[0]?.id || "dashboards";
      handleTabChange(defaultViewId);
    }
  }, [isLoadingViews, viewsData, activeTabId, handleTabChange]);
  const handleTaskSelect = (taskId: string | null) => {
    setSearchParams((params) => {
      if (taskId) {
        params.set("taskId", taskId);
      } else {
        params.delete("taskId");
      }
      return params;
    });
  };

  if (!workspaceId || !projectId) {
    return <div>Invalid Project ID</div>;
  }

  if (isViewsError || isViewDataError) {
    return (
      <ErrorState
        title="Could not load project data"
        message="Please try again later."
      />
    );
  }

  const isLoading = isLoadingViews || (!!activeView && isLoadingViewData);
  if (isLoading || !activeTabId) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Skeleton className="h-10 w-[450px]" />
          <div className="flex items-center gap-2">
            <Skeleton className="h-10 w-10 rounded-full" />
            <Skeleton className="h-10 w-32" />
            <Skeleton className="h-10 w-10" />
          </div>
        </div>
        <Skeleton className="h-[600px] w-full" />
      </div>
    );
  }

  return (
    <>
      <ProjectDetailView
        views={viewsData?.data || []}
        tasks={viewData?.data || []}
        workspaceId={workspaceId}
        projectId={projectId}
        onTaskSelect={handleTaskSelect}
        activeTab={activeTabId}
        onTabChange={handleTabChange}
      />

      <TaskDetailModal
        taskId={selectedTaskId}
        isOpen={!!selectedTaskId}
        onOpenChange={(isOpen) => {
          if (!isOpen) handleTaskSelect(null);
        }}
        onTaskSelect={handleTaskSelect}
      />
    </>
  );
}

// FILE: src/pages/ProjectDetailView.tsx
// FILE: src/pages/ProjectDetailView.tsx
import { Link } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { TaskList } from "@/features/tasks/components/TaskList";
import { KanbanBoard } from "@/features/views/components/KanbanBoard";
import { BacklogView } from "@/features/views/components/BacklogView";
import { DashboardList } from "@/features/dashboards/components/DashboardList";
import { EpicList } from "@/features/epics/components/EpicList";
import { ActiveUsers } from "@/components/layout/ActiveUsers";
import { Button } from "@/components/ui/button";
import { Settings, CheckSquare, PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/tasks/components/CreateTaskForm";
import { CreateDashboardForm } from "@/features/dashboards/components/CreateDashboardForm";
import { CreateEpicForm } from "@/features/epics/components/CreateEpicForm";
import { Task } from "@/features/tasks/task.types";
import { View } from "@/types";
import { ProjectActivityLog } from "@/features/activities/components/ProjectActivityLog";
import { EmptyState } from "@/components/ui/empty-state";
import { useState } from "react";

interface ProjectDetailViewProps {
  views: View[];
  tasks: Task[];
  workspaceId: string;
  projectId: string;
  onTaskSelect: (taskId: string | null) => void;
  activeTab: string;
  onTabChange: (tab: string) => void;
}

export function ProjectDetailView({
  views,
  tasks,
  workspaceId,
  projectId,
  onTaskSelect,
  activeTab,
  onTabChange,
}: ProjectDetailViewProps) {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const renderActionDialog = () => {
    const currentView = views.find((v) => v.id === activeTab);
    const viewType = currentView?.type;

    if (
      viewType === "KANBAN" ||
      viewType === "LIST" ||
      viewType === "BACKLOG"
    ) {
      return (
        <ResourceCrudDialog
          trigger={
            <Button>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Task
            </Button>
          }
          title="Create a new task"
          description="Fill in the details below to add a new task."
          form={CreateTaskForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
          resourceKey={["tasks", projectId]}
        />
      );
    }
    if (activeTab === "dashboards") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Dashboard
            </Button>
          }
          title="Create New Dashboard"
          description="Dashboards contain widgets to visualize your project data."
          form={CreateDashboardForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/dashboards`}
          resourceKey={["dashboards", projectId]}
        />
      );
    }
    if (activeTab === "epics") {
      return (
        <ResourceCrudDialog
          isOpen={isCreateDialogOpen}
          onOpenChange={setIsCreateDialogOpen}
          trigger={
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Epic
            </Button>
          }
          title="Create New Epic"
          description="Epics are large bodies of work that can be broken down into a number of smaller tasks."
          form={CreateEpicForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/epics`}
          resourceKey={["epics", projectId]}
        />
      );
    }
    return null;
  };

  const projectTaskEmptyState = (
    <EmptyState
      icon={<CheckSquare className="text-primary h-10 w-10" />}
      title="No tasks yet"
      description="Create the first task in this project to get started."
      action={
        <ResourceCrudDialog
          trigger={
            <Button>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Task
            </Button>
          }
          title="Create a new task"
          description="Fill in the details below to add a new task."
          form={CreateTaskForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
          resourceKey={["tasks", projectId]}
        />
      }
    />
  );
  return (
    <Tabs value={activeTab} onValueChange={onTabChange} className="space-y-4">
      <div className="flex items-center justify-between">
        <TabsList>
          {views.map((view) => (
            <TabsTrigger key={view.id} value={view.id}>
              {view.name}
            </TabsTrigger>
          ))}
          <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
          <TabsTrigger value="epics">Epics</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>

        <div className="flex items-center gap-2">
          <ActiveUsers />
          {renderActionDialog()}
          <Button variant="outline" asChild>
            <Link to="settings">
              <Settings className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>

      {views.map((view) => (
        <TabsContent key={view.id} value={view.id} className="mt-0 h-full">
          {view.type === "LIST" && (
            <TaskList
              apiUrl={`/workspaces/${workspaceId}/projects/${projectId}/tasks`}
              queryKey={["tasks", projectId]}
              tasks={tasks}
              onTaskSelect={onTaskSelect}
              emptyState={projectTaskEmptyState}
            />
          )}
          {view.type === "KANBAN" && (
            <KanbanBoard
              views={views}
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
          {view.type === "BACKLOG" && (
            <BacklogView
              tasks={tasks}
              workspaceId={workspaceId}
              projectId={projectId}
              onTaskSelect={onTaskSelect}
            />
          )}
        </TabsContent>
      ))}

      <TabsContent value="dashboards" className="mt-0 space-y-4">
        <DashboardList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="epics" className="mt-0">
        <EpicList workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>

      <TabsContent value="activity" className="mt-0">
        <ProjectActivityLog workspaceId={workspaceId} projectId={projectId} />
      </TabsContent>
    </Tabs>
  );
}

// FILE: src/pages/ProjectGeneralSettingsPage.tsx
import { useParams } from "react-router-dom";
import { useApiResource } from "@/hooks/useApiResource";
import { ProjectForm } from "@/features/projects/components/ProjectForm";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

export function ProjectGeneralSettingsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  if (!workspaceId || !projectId) {
    return <div>Missing URL parameters.</div>;
  }

  const projectResource = useApiResource(
    `/workspaces/${workspaceId}/projects`,
    ["projects", workspaceId]
  );
  const { data: projectData, isLoading } = projectResource.useGetOne(projectId);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/4" />
          <Skeleton className="mt-2 h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  if (!projectData) {
    return <div>Project not found.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>General Information</CardTitle>
        <CardDescription>
          Update the name and description of your project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ProjectForm workspaceId={workspaceId} initialData={projectData} />
      </CardContent>
    </Card>
  );
}

// FILE: src/pages/ProjectListPage.tsx
import { ProjectList } from "@/features/projects/components/ProjectList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { ProjectForm } from "@/features/projects/components/ProjectForm";

export function ProjectListPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">All Projects</h2>
          <p className="text-muted-foreground">
            A list of all projects within this workspace.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Project
            </Button>
          }
          title="Create a new project"
          description="Projects live inside workspaces and contain your tasks."
          form={ProjectForm}
          formProps={{ workspaceId }}
          resourcePath={`/workspaces/${workspaceId}/projects`}
          resourceKey={["projects", workspaceId]}
        />
      </div>
      <ProjectList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/ProjectSettingsPage.tsx
// FILE: src/pages/ProjectSettingsPage.tsx
import { NavLink, Outlet, useLocation } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const settingsNavItems = [
  { to: "general", label: "General" },
  { to: "access", label: "Access Control" },
  { to: "custom-fields", label: "Custom Fields" },
  { to: "task-types", label: "Task Types" },
  { to: "views", label: "Views" },
];

export function ProjectSettingsPage() {
  const location = useLocation();
  const currentTab = location.pathname.split("/").pop() || "general";

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Project Settings</h1>
        <p className="text-muted-foreground">
          Manage general settings, access control, and more for your project.
        </p>
      </div>

      <Tabs defaultValue={currentTab} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to} end>
              <TabsTrigger value={item.to}>{item.label}</TabsTrigger>
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/pages/ProjectTaskTypesPage.tsx
// FILE: src/pages/ProjectTaskTypesPage.tsx
import { TaskTypeList } from "@/features/task-types/components/TaskTypeList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { TaskTypeForm } from "@/features/task-types/components/TaskTypeForm";

export function ProjectTaskTypesPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold">Task Types</h2>
          <p className="text-muted-foreground">
            Define custom types for tasks in this project, like 'Bug' or
            'Story'.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Type
            </Button>
          }
          title="Create New Task Type"
          description="This type will be available for all tasks in this project."
          form={TaskTypeForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/task-types`}
          resourceKey={["taskTypes", projectId]}
        />
      </div>
      <TaskTypeList workspaceId={workspaceId} projectId={projectId} />
    </div>
  );
}

// FILE: src/pages/ProjectViewsPage.tsx
// FILE: src/pages/ProjectViewsPage.tsx
import { ViewList } from "@/features/views/components/ViewList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { ViewForm } from "@/features/views/components/ViewForm";

export function ProjectViewsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold">Views</h2>
          <p className="text-muted-foreground">
            Manage the different ways to visualize your project's tasks.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New View
            </Button>
          }
          title="Create New View"
          description="Add a new List, Kanban, or other type of view to your project."
          form={ViewForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`/workspaces/${workspaceId}/projects/${projectId}/views`}
          resourceKey={["views", projectId]}
        />
      </div>
      <ViewList workspaceId={workspaceId} projectId={projectId} />
    </div>
  );
}

// FILE: src/pages/PublicationsPage.tsx
import { PublicationList } from "@/features/publications/components/PublicationList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreatePublicationForm } from "@/features/publications/components/CreatePublicationForm";
export function PublicationsPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Publications</h1>
          <p className="text-muted-foreground">
            Manage your organization's articles, papers, and other publications.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Publication
            </Button>
          }
          title="Create Publication"
          description="Add a new article, paper, or report to the knowledge base."
          form={CreatePublicationForm}
          resourcePath="publications"
          resourceKey={["publications"]}
        />
      </div>
      <PublicationList />
    </div>
  );
}

// FILE: src/pages/ResetPasswordPage.tsx
import { ResetPasswordForm } from "@/features/auth/components/ResetPasswordForm";

export function ResetPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ResetPasswordForm />
    </div>
  );
}

// FILE: src/pages/SettingsPage.tsx
import { NavLink, Outlet } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const settingsNavItems = [
  { to: "/settings/integrations", label: "Integrations" },
  { to: "/settings/security", label: "Security" },
];

export function SettingsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and integrations.
        </p>
      </div>

      <Tabs defaultValue={location.pathname} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to}>
              {({ isActive }) => (
                <TabsTrigger value={item.to} disabled={isActive}>
                  {item.label}
                </TabsTrigger>
              )}
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/pages/SetupPasswordPage.tsx
import { SetupPasswordForm } from "@/features/auth/components/SetupPasswordForm";

export function SetupPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <SetupPasswordForm />
    </div>
  );
}

// FILE: src/pages/TeamsPage.tsx
// FILE: src/pages/TeamsPage.tsx
import { TeamList } from "@/features/teams/components/TeamList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { TeamForm } from "@/features/teams/components/TeamForm";

export function TeamsPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">All Teams</h2>
          <p className="text-muted-foreground">
            Manage teams within your workspace.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Team
            </Button>
          }
          title="Create a new team"
          description="Teams help you group users within a workspace."
          form={TeamForm}
          formProps={{ workspaceId }}
          resourcePath={`/workspaces/${workspaceId}/teams`}
          resourceKey={["teams", workspaceId]}
        />
      </div>

      <TeamList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/WorkspaceDashboardListPage.tsx
// FILE: src/pages/WorkspaceDashboardListPage.tsx
import { DashboardList } from "@/features/dashboards/components/DashboardList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { CreateDashboardForm } from "@/features/dashboards/components/CreateDashboardForm";

export function WorkspaceDashboardListPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">All Dashboards</h2>
          <p className="text-muted-foreground">
            A list of all dashboards within this workspace.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Dashboard
            </Button>
          }
          title="Create a new dashboard"
          description="Dashboards live inside workspaces and contain widgets to visualize your data."
          form={CreateDashboardForm}
          formProps={{ workspaceId }}
          resourcePath={`/workspaces/${workspaceId}/dashboards`}
          resourceKey={["dashboards", workspaceId]}
        />
      </div>
      <DashboardList workspaceId={workspaceId} />
    </div>
  );
}

// FILE: src/pages/Workspaces.tsx
import { WorkspaceList } from "@/features/workspaces/components/WorkspaceList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/ui/ResourceCrudDialog";
import { WorkspaceForm } from "@/features/workspaces/components/WorkspaceForm";

export function WorkspacesPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Workspaces</h1>
          <p className="text-muted-foreground">
            Select a workspace to view its projects.
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Workspace
            </Button>
          }
          title="Create a new workspace"
          description="Workspaces help you organize your projects and teams."
          form={WorkspaceForm}
          resourcePath="workspaces"
          resourceKey={["workspaces"]}
        />
      </div>

      <WorkspaceList />
    </div>
  );
}

// FILE: src/providers/AuthProvider.tsx
import { useAuthStore } from "@/store/auth";
import { ReactNode, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";

export function AuthProvider({ children }: { children: ReactNode }) {
  const accessToken = useAuthStore((state) => state.accessToken);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    if (!accessToken && location.pathname !== "/login") {
      navigate("/login", { replace: true });
    }
  }, [accessToken, navigate, location.pathname]);

  return <>{children}</>;
}

// FILE: src/providers/QueryProvider.tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactNode } from "react";

const queryClient = new QueryClient();

export function QueryProvider({ children }: { children: ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
}

// FILE: src/routes/AdminLayout.tsx
import { Outlet } from "react-router-dom";

export function AdminLayout() {
  return <Outlet />;
}

// FILE: src/routes/ProtectedLayout.tsx
// FILE: src/routes/ProtectedLayout.tsx
import { Outlet } from "react-router-dom";
import { Header } from "@/components/layout/Header";
import { Sidebar } from "@/components/layout/Sidebar";
import { MainContent } from "@/components/layout/MainContent";
import { Toaster } from "@/components/ui/sonner";
import { useNotificationSocket } from "@/hooks/useNotificationSocket";
import { ActiveAnnouncements } from "@/features/announcements/components/ActiveAnnouncements";

export function ProtectedLayout() {
  useNotificationSocket();

  return (
    <div className="flex h-screen w-full bg-white">
      <Sidebar />
      <div className="flex flex-1 flex-col">
        <Header />
        <MainContent>
          <ActiveAnnouncements />
          <div className="mt-4">
            <Outlet />
          </div>
        </MainContent>
      </div>
      <Toaster />
    </div>
  );
}

// FILE: src/routes/WorkspaceLayout.tsx
// FILE: src/routes/WorkspaceLayout.tsx
import { NavLink, Outlet, useLocation, useParams } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
export function WorkspaceLayout() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const location = useLocation();
  const { data: workspace, isLoading } = useApiResource("workspaces", [
    "workspaces",
  ]).useGetOne(workspaceId!);

  const currentTab = location.pathname.split("/")[3] || "projects";

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        {isLoading ? (
          <div className="space-y-2">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-80" />
          </div>
        ) : (
          <div>
            <h1 className="text-3xl font-bold tracking-tight">
              {workspace?.name}
            </h1>
            <p className="text-muted-foreground">{workspace?.description}</p>
          </div>
        )}
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          <NavLink to={`/workspaces/${workspaceId}/projects`}>
            <TabsTrigger value="projects">Projects</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/teams`}>
            <TabsTrigger value="teams">Teams</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/dashboards`}>
            <TabsTrigger value="dashboards">Dashboards</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/knowledge-bases`}>
            <TabsTrigger value="knowledge-bases">Knowledge Base</TabsTrigger>
          </NavLink>
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}

// FILE: src/store/auth.ts
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";

interface AuthState {
  accessToken: string | null;
  setAccessToken: (token: string | null) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      accessToken: null,
      setAccessToken: (token) => set({ accessToken: token }),
    }),
    {
      name: "auth-storage",
      storage: createJSONStorage(() => localStorage),
    }
  )
);

// FILE: src/store/presence.ts
import { create } from "zustand";

interface PresenceState {
  members: any[];
  setMembers: (members: any[]) => void;
  addMember: (member: any) => void;
  removeMember: (socketId: string) => void;
}

export const usePresenceStore = create<PresenceState>((set) => ({
  members: [],
  setMembers: (members) => set({ members }),
  addMember: (member) =>
    set((state) => ({
      members: state.members.some((m) => m.socketId === member.socketId)
        ? state.members
        : [...state.members, member],
    })),
  removeMember: (socketId) =>
    set((state) => ({
      members: state.members.filter((m) => m.socketId !== socketId),
    })),
}));

// FILE: src/types/index.ts
// FILE: src/types/index.ts
export enum TaskStatus {
  TODO = "TODO",
  IN_PROGRESS = "IN_PROGRESS",
  IN_REVIEW = "IN_REVIEW",
  DONE = "DONE",
  BLOCKED = "BLOCKED",
  CANCELLED = "CANCELLED",
}

export enum TaskPriority {
  NONE = "NONE",
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  URGENT = "URGENT",
}

export enum EpicStatus {
  TODO = "TODO",
  IN_PROGRESS = "IN_PROGRESS",
  DONE = "DONE",
  ARCHIVED = "ARCHIVED",
}

export enum SprintStatus {
  PLANNING = "PLANNING",
  ACTIVE = "ACTIVE",
  COMPLETED = "COMPLETED",
}

export enum TaskLinkType {
  RELATES_TO = "RELATES_TO",
  BLOCKS = "BLOCKS",
  IS_BLOCKED_BY = "IS_BLOCKED_BY",
}

export enum ActivityActionType {
  TASK_CREATED = "TASK_CREATED",
  TASK_UPDATED = "TASK_UPDATED",
  TASK_DELETED = "TASK_DELETED",
  PROJECT_CREATED = "PROJECT_CREATED",
  PROJECT_UPDATED = "PROJECT_UPDATED",
  USER_JOINED = "USER_JOINED",
  COMMENT_ADDED = "COMMENT_ADDED",
}

export enum WorkflowActionType {
  UPDATE_TASK_STATUS = "UPDATE_TASK_STATUS",
  CREATE_TASK = "CREATE_TASK",
  SEND_NOTIFICATION = "SEND_NOTIFICATION",
  ASSIGN_TASK = "ASSIGN_TASK", // Formerly ASSIGN_USER
  ADD_COMMENT = "ADD_COMMENT",
  SEND_TELEGRAM_MESSAGE = "SEND_TELEGRAM_MESSAGE", // Added
  SEND_EMAIL_BREVO = "SEND_EMAIL_BREVO", // Added
}

export enum WidgetType {
  STATS_COUNTER = "STATS_COUNTER",
  TASK_LIST = "TASK_LIST",
  BURNDOWN_CHART = "BURNDOWN_CHART",
  TIME_TRACKING_REPORT = "TIME_TRACKING_REPORT",
  PIE_CHART = "PIE_CHART",
  CHART = "CHART",
  TABLE = "TABLE",
}

export enum SocialProvider {
  GOOGLE = "GOOGLE",
  LINKEDIN = "LINKEDIN",
  TWITTER = "TWITTER",
  FACEBOOK = "FACEBOOK",
  NEXTCLOUD = "NEXTCLOUD",
  TELEGRAM = "TELEGRAM",
  GITHUB = "GITHUB",
  WEBSITE = "WEBSITE",
  OTHER = "OTHER",
}

export enum CustomFieldType {
  TEXT = "TEXT",
  NUMBER = "NUMBER",
  DATE = "DATE",
  SELECT = "SELECT",
}

export enum DocumentType {
  INPUT = "INPUT",
  OUTPUT = "OUTPUT",
}

export enum NotificationType {
  SYSTEM_BROADCAST = "SYSTEM_BROADCAST",
  TASK_ASSIGNMENT = "TASK_ASSIGNMENT",
  COMMENT_MENTION = "COMMENT_MENTION",
  PROJECT_INVITE = "PROJECT_INVITE",
}

export enum NotificationSeverity {
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
  CRITICAL = "CRITICAL",
}

export enum ViewType {
  KANBAN = "KANBAN",
  LIST = "LIST",
  CALENDAR = "CALENDAR",
  GANTT = "GANTT",
  BACKLOG = "BACKLOG",
}

export enum JobStatus {
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  CANCELLED = "CANCELLED",
}

export interface ViewColumn {
  id: string;
  name: string;
  order: number;
}

export interface View {
  id: string;
  name: string;
  type: ViewType;
  columns: ViewColumn[];
}

// FILE: src/vite-env.d.ts
/// <reference types="vite/client" />

// FILE: tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
};

// FILE: vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";
import path from "path";


export default defineConfig({
  plugins: [tailwindcss(), react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});
