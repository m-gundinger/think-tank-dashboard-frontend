
// FILE: eslint.config.js
import globals from "globals";
import pluginJs from "@typescript-eslint/eslint-plugin";
import parserTs from "@typescript-eslint/parser";
import pluginReactConfig from "eslint-plugin-react/configs/recommended.js";
import pluginReactHooks from "eslint-plugin-react-hooks";
import pluginReactRefresh from "eslint-plugin-react-refresh";
import configPrettier from "eslint-config-prettier";

export default [
  {
    files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"],
    languageOptions: {
      parser: parserTs,
      parserOptions: {
        ecmaFeatures: { jsx: true },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    plugins: {
      "@typescript-eslint": pluginJs,
      "react-hooks": pluginReactHooks,
      "react-refresh": pluginReactRefresh,
    },
    rules: {
      ...pluginJs.configs["eslint-recommended"].rules,
      ...pluginJs.configs["recommended"].rules,
      ...pluginReactConfig.rules,
      ...pluginReactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "react/react-in-jsx-scope": "off",
      "react/prop-types": "off",
    },
    settings: {
      react: {
        version: "detect",
      },
    },
  },
  configPrettier,
];

// FILE: postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

// FILE: src/App.tsx
import { Routes, Route, Navigate } from "react-router-dom";
import { ProtectedLayout } from "./routes/ProtectedLayout";
import { WorkspaceLayout } from "./routes/WorkspaceLayout";
import { LoginPage } from "./pages/Login";
import { WorkspacesPage } from "./pages/WorkspacesPage";
import { ProjectListPage } from "./pages/ProjectListPage";
import { ProjectDetailPage } from "./pages/ProjectDetailPage";
import { AdminLayout } from "./routes/AdminLayout";
import { UserListPage } from "./pages/admin/UserListPage";
import { RoleListPage } from "./pages/admin/RoleListPage";
import { PermissionListPage } from "./pages/admin/PermissionListPage";
import { AnnouncementListPage } from "./pages/admin/AnnouncementListPage";
import { ProfilePage } from "./pages/ProfilePage";
import { DashboardDetailPage } from "./pages/DashboardDetailPage";
import { WorkflowListPage } from "./pages/admin/WorkflowListPage";
import { SettingsPage } from "./pages/SettingsPage";
import { IntegrationsPage } from "./pages/IntegrationsPage";
import { PublicationsPage } from "./pages/PublicationsPage";
import { TeamsPage } from "./pages/TeamsPage";
import { AccountSettingsPage } from "./pages/AccountSettingsPage";
import { IntegrationCallbackPage } from "./pages/IntegrationCallbackPage";
import { ProjectSettingsPage } from "./pages/ProjectSettingsPage";
import { ProjectAccessControlPage } from "./pages/ProjectAccessControlPage";
import { ProjectCustomFieldsPage } from "./pages/ProjectCustomFieldsPage";
import { ProjectTaskTypesPage } from "./pages/ProjectTaskTypesPage";
import { ForgotPasswordPage } from "./pages/ForgotPasswordPage";
import { ResetPasswordPage } from "./pages/ResetPasswordPage";
import { SetupPasswordPage } from "./pages/SetupPasswordPage";
import { ErrorBoundary } from "./components/ui/ErrorBoundary";
import { ProjectGeneralSettingsPage } from "./pages/ProjectGeneralSettingsPage";
import { JobMonitoringPage } from "./pages/admin/JobMonitoringPage";
import { SystemStatusPage } from "./pages/admin/SystemStatusPage";
import { CrmPage } from "./pages/CrmPage";
import { TasksPage } from "./pages/TasksPage";
import { ProjectGoalsPage } from "./pages/ProjectGoalsPage";
import { HomePage } from "./pages/HomePage";
import { ChatPage } from "./pages/ChatPage";
import { ProjectTemplatesPage } from "./pages/ProjectTemplatesPage";
import { KnowledgeBaseDetailPage } from "./pages/KnowledgeBaseDetailPage";
import { GlobalKnowledgeBasePage } from "./pages/GlobalKnowledgeBasePage";
import { WhiteboardsPage } from "./pages/WhiteboardsPage";
import { ProjectAttachmentsPage } from "./pages/ProjectAttachmentsPage";
import { WorkspaceAttachmentsPage } from "./pages/WorkspaceAttachmentsPage";
import { AnalyticsLayout } from "./pages/AnalyticsLayout";
import { ActivitiesPage } from "./pages/ActivitiesPage";
import { DashboardsPage } from "./pages/DashboardsPage";
import { ReportingPage } from "./pages/ReportingPage";
import { ReportsPage } from "./pages/ReportsPage";
import { TaskTypesSettingsPage } from "./pages/TaskTypesSettingsPage";

function App() {
  return (
    <ErrorBoundary>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/forgot-password" element={<ForgotPasswordPage />} />
        <Route path="/reset-password" element={<ResetPasswordPage />} />
        <Route path="/setup-password" element={<SetupPasswordPage />} />

        <Route
          path="/integrations/callback"
          element={<IntegrationCallbackPage />}
        />

        <Route path="/" element={<ProtectedLayout />}>
          <Route index element={<Navigate to="/home" replace />} />
          <Route path="home" element={<HomePage />} />
          <Route path="chat" element={<ChatPage />} />
          <Route path="my-tasks" element={<TasksPage scope="user" />} />
          <Route path="workspaces" element={<WorkspacesPage />} />
          <Route path="knowledge-bases" element={<GlobalKnowledgeBasePage />} />
          <Route path="whiteboards" element={<WhiteboardsPage />} />
          <Route path="publications" element={<PublicationsPage />} />
          <Route path="crm" element={<CrmPage />} />

          <Route path="analytics" element={<AnalyticsLayout />}>
            <Route index element={<Navigate to="activities" replace />} />
            <Route path="activities" element={<ActivitiesPage />} />
            <Route path="dashboards" element={<DashboardsPage />} />
            <Route path="reporting" element={<ReportingPage />} />
            <Route path="reports" element={<ReportsPage />} />
          </Route>

          <Route path="workspaces/:workspaceId" element={<WorkspaceLayout />}>
            <Route index element={<Navigate to="projects" replace />} />
            <Route path="projects" element={<ProjectListPage />} />
            <Route path="teams" element={<TeamsPage />} />
            <Route path="attachments" element={<WorkspaceAttachmentsPage />} />
            <Route path="analytics" element={<AnalyticsLayout />}>
              <Route index element={<Navigate to="dashboards" replace />} />
              <Route path="dashboards" element={<DashboardsPage />} />
              <Route path="reporting" element={<ReportingPage />} />
              <Route path="activity" element={<ActivitiesPage />} />
            </Route>
          </Route>
          <Route
            path="workspaces/:workspaceId/knowledge-bases/:knowledgeBaseId"
            element={<KnowledgeBaseDetailPage />}
          />
          <Route
            path="workspaces/:workspaceId/projects/:projectId"
            element={
              <ErrorBoundary>
                <ProjectDetailPage />
              </ErrorBoundary>
            }
          />
          <Route
            path="workspaces/:workspaceId/dashboards/:dashboardId"
            element={<DashboardDetailPage />}
          />
          <Route
            path="workspaces/:workspaceId/projects/:projectId/settings"
            element={<ProjectSettingsPage />}
          >
            <Route index element={<Navigate to="general" replace />} />
            <Route path="general" element={<ProjectGeneralSettingsPage />} />
            <Route path="access" element={<ProjectAccessControlPage />} />
            <Route path="custom-fields" element={<ProjectCustomFieldsPage />} />
            <Route path="task-types" element={<ProjectTaskTypesPage />} />
            <Route path="goals" element={<ProjectGoalsPage />} />
            <Route path="templates" element={<ProjectTemplatesPage />} />
            <Route path="attachments" element={<ProjectAttachmentsPage />} />
          </Route>
          <Route
            path="workspaces/:workspaceId/projects/:projectId/dashboards/:dashboardId"
            element={<DashboardDetailPage />}
          />
          <Route path="profile" element={<ProfilePage />} />
          <Route path="settings" element={<SettingsPage />}>
            <Route index element={<Navigate to="integrations" replace />} />
            <Route path="integrations" element={<IntegrationsPage />} />
            <Route path="security" element={<AccountSettingsPage />} />
            <Route path="task-types" element={<TaskTypesSettingsPage />} />
          </Route>
          <Route path="admin" element={<AdminLayout />}>
            <Route index element={<Navigate to="/admin/users" replace />} />
            <Route path="users" element={<UserListPage />} />
            <Route path="roles" element={<RoleListPage />} />
            <Route path="permissions" element={<PermissionListPage />} />
            <Route path="workflows" element={<WorkflowListPage />} />
            <Route path="announcements" element={<AnnouncementListPage />} />
            <Route path="jobs" element={<JobMonitoringPage />} />
            <Route path="system" element={<SystemStatusPage />} />
          </Route>
        </Route>
      </Routes>
    </ErrorBoundary>
  );
}

export default App;
// FILE: src/components/layout/Header.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useGetProfile } from "@/features/user-management/api/useGetProfile";
import { useLogout } from "@/features/user-management/api/useLogout";
import { LogOut, User, Search, Settings } from "lucide-react";
import { Link } from "react-router-dom";
import { SearchDialog } from "@/features/system/components/SearchDialog";
import { NotificationBell } from "@/features/system/components/NotificationBell";
import { useState } from "react";
import { getAbsoluteUrl } from "@/lib/utils";

export function Header() {
  const { data: user, isLoading } = useGetProfile();
  const logoutMutation = useLogout();
  const [isSearchOpen, setIsSearchOpen] = useState(false);

  const handleLogout = () => {
    logoutMutation.mutate(undefined);
  };

  return (
    <>
      <header className="flex h-16 items-center border-b border-border bg-background px-6">
        <div className="flex-1"></div>
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 rounded-full"
            onClick={() => setIsSearchOpen(true)}
          >
            <Search className="h-5 w-5" />
          </Button>
          <NotificationBell />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                {isLoading ? (
                  <div className="h-8 w-8 animate-pulse rounded-full bg-muted"></div>
                ) : (
                  <Avatar className="h-8 w-8">
                    <AvatarImage
                      src={getAbsoluteUrl(user?.avatarUrl)}
                      alt={user?.name}
                      className="h-full w-full object-cover"
                    />
                    <AvatarFallback>{user?.name?.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium">{user?.name}</p>
                  <p className="text-xs leading-none text-muted-foreground">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link to="/profile">
                  <User className="mr-2 h-4 w-4" />
                  <span>Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link to="/settings/integrations">
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Settings</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleLogout}
                disabled={logoutMutation.isPending}
              >
                <LogOut className="mr-2 h-4 w-4" />
                <span>
                  {logoutMutation.isPending ? "Logging out..." : "Log out"}
                </span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <SearchDialog isOpen={isSearchOpen} onOpenChange={setIsSearchOpen} />
    </>
  );
}
// FILE: src/components/layout/MainContent.tsx
import { ReactNode } from "react";

interface MainContentProps {
  children: ReactNode;
}

export function MainContent({ children }: MainContentProps) {
  return (
    <main className="bg-background flex-1 overflow-auto p-6">{children}</main>
  );
}
// FILE: src/components/layout/Sidebar.tsx
import { NavLink, useLocation } from "react-router-dom";
import {
  FolderKanban,
  Wrench,
  FileText,
  ChevronDown,
  Users,
  Shield,
  Lock,
  Zap,
  Megaphone,
  Clock,
  Activity,
  Contact,
  CheckSquare,
  Home,
  MessageSquare,
  BookOpen,
  Clipboard,
  PieChart,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";

const mainNavItems = [
  { to: "/home", icon: Home, label: "Home" },
  { to: "/my-tasks", icon: CheckSquare, label: "My Tasks" },
  { to: "/workspaces", icon: FolderKanban, label: "Workspaces" },
  { to: "/analytics/activities", icon: PieChart, label: "Analytics" },
  { to: "/knowledge-bases", icon: BookOpen, label: "Knowledge Bases" },
  { to: "/publications", icon: FileText, label: "Publications" },
  { to: "/whiteboards", icon: Clipboard, label: "Whiteboards" },
  { to: "/crm", icon: Contact, label: "CRM" },
  { to: "/chat", icon: MessageSquare, label: "Chat" },
];

const adminNavItems = [
  { to: "/admin/users", icon: Users, label: "Users" },
  { to: "/admin/roles", icon: Shield, label: "Roles" },
  { to: "/admin/permissions", icon: Lock, label: "Permissions" },
  { to: "/admin/workflows", icon: Zap, label: "Workflows" },
  { to: "/admin/announcements", icon: Megaphone, label: "Announcements" },
  { to: "/admin/jobs", icon: Clock, label: "Jobs & Queues" },
  { to: "/admin/system", icon: Activity, label: "System Status" },
];

export function Sidebar() {
  const location = useLocation();
  const isAdminPath = location.pathname.startsWith("/admin");
  const [isAdminOpen, setIsAdminOpen] = useState(isAdminPath);

  return (
    <aside className="hidden w-64 flex-col border-r border-border bg-background p-4 lg:flex">
      <h1 className="mb-8 text-2xl font-bold text-foreground">AutoNomos</h1>
      <nav className="flex flex-col gap-1">
        {mainNavItems.map((item) => (
          <NavLink
            key={item.to}
            to={item.to}
            className={({ isActive }) =>
              cn(
                "flex items-center gap-3 rounded-lg px-3 py-2 text-base font-medium text-muted-foreground transition-all hover:text-primary",
                isActive && "bg-background text-primary",
                item.to.startsWith("/analytics") &&
                  location.pathname.startsWith("/analytics") &&
                  "bg-background text-primary"
              )
            }
          >
            <item.icon className="h-4 w-4" />
            {item.label}
          </NavLink>
        ))}

        <div>
          <button
            onClick={() => setIsAdminOpen(!isAdminOpen)}
            className={cn(
              "flex w-full items-center justify-between gap-3 rounded-lg px-3 py-2 text-base font-medium text-muted-foreground transition-all hover:text-primary",
              isAdminPath && "bg-muted text-primary"
            )}
          >
            <div className="flex items-center gap-3">
              <Wrench className="h-4 w-4" />
              <span>Admin</span>
            </div>
            <ChevronDown
              className={cn(
                "h-4 w-4 transition-transform",
                isAdminOpen && "rotate-180"
              )}
            />
          </button>
          {isAdminOpen && (
            <div className="mt-1 space-y-1 pl-6">
              {adminNavItems.map((item) => (
                <NavLink
                  key={item.to}
                  to={item.to}
                  className={({ isActive }) =>
                    cn(
                      "flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-normal text-muted-foreground transition-all hover:text-primary",
                      isActive && "text-primary"
                    )
                  }
                >
                  <item.icon className="h-4 w-4" />
                  {item.label}
                </NavLink>
              ))}
            </div>
          )}
        </div>
      </nav>
    </aside>
  );
}
// FILE: src/components/shared/ActionMenu.tsx
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Edit, Trash2, LucideIcon } from "lucide-react";
import React from "react";

export interface CustomAction {
  label: string;
  icon: LucideIcon;
  onClick: (e: React.MouseEvent) => void;
  className?: string;
  disabled?: boolean;
}

interface ActionMenuProps {
  onEdit?: (e: React.MouseEvent) => void;
  onDelete?: (e: React.MouseEvent) => void;
  deleteDisabled?: boolean;
  customActions?: CustomAction[];
}

export function ActionMenu({
  onEdit,
  onDelete,
  deleteDisabled,
  customActions,
}: ActionMenuProps) {
  const stopPropagation = (
    handler?: (e: React.MouseEvent) => void
  ): ((e: React.MouseEvent) => void) | undefined => {
    if (!handler) return undefined;
    return (e: React.MouseEvent) => {
      e.stopPropagation();
      handler(e);
    };
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8 flex-shrink-0 p-0"
          onClick={(e) => e.stopPropagation()}
        >
          <MoreHorizontal className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" onClick={(e) => e.stopPropagation()}>
        {onEdit && (
          <DropdownMenuItem onClick={stopPropagation(onEdit)}>
            <Edit className="mr-2 h-4 w-4" />
            <span>Edit</span>
          </DropdownMenuItem>
        )}
        {customActions &&
          customActions.map((action, index) => (
            <DropdownMenuItem
              key={index}
              onClick={stopPropagation(action.onClick)}
              className={action.className}
              disabled={action.disabled}
            >
              <action.icon className="mr-2 h-4 w-4" />
              <span>{action.label}</span>
            </DropdownMenuItem>
          ))}
        {(onEdit || (customActions && customActions.length > 0)) &&
          onDelete && <DropdownMenuSeparator />}
        {onDelete && (
          <DropdownMenuItem
            className="text-red-600 focus:text-red-600"
            onClick={stopPropagation(onDelete)}
            disabled={deleteDisabled}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            <span>Delete</span>
          </DropdownMenuItem>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

// FILE: src/components/shared/DataTable.tsx
import { useState, ReactNode } from "react";
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
  getPaginationRowModel,
  Row,
  SortingState,
  getSortedRowModel,
  OnChangeFn,
} from "@tanstack/react-table";
import { ArrowUpDown } from "lucide-react";
import { Card, CardFooter } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

export type { ColumnDef, SortingState, OnChangeFn };

interface DataTableProps<TData> {
  data: TData[];
  columns: ColumnDef<TData>[];
  pagination?: {
    page: number;
    totalPages: number;
    handlePageChange: (newPage: number) => void;
  };
  bulkActions?: (selectedIds: string[]) => ReactNode;
  onRowClick?: (row: TData) => void;
  sorting?: SortingState;
  setSorting?: OnChangeFn<SortingState>;
  renderRowActions?: (row: TData) => ReactNode;
}

export function DataTable<TData extends { id: string }>({
  columns,
  data,
  pagination,
  bulkActions,
  onRowClick,
  sorting = [],
  setSorting,
  renderRowActions,
}: DataTableProps<TData>) {
  const [rowSelection, setRowSelection] = useState({});

  const tableColumns: ColumnDef<TData>[] = [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={
            table.getIsAllPageRowsSelected() ||
            (table.getIsSomePageRowsSelected() && "indeterminate")
          }
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          onClick={(e) => e.stopPropagation()}
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    ...columns,
  ];

  if (renderRowActions) {
    tableColumns.push({
      id: "actions",
      cell: ({ row }) => renderRowActions(row.original),
    });
  }

  const table = useReactTable({
    data,
    columns: tableColumns,
    state: {
      rowSelection,
      sorting,
    },
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onRowSelectionChange: setRowSelection,
    getSortedRowModel: getSortedRowModel(),
    onSortingChange: setSorting,
    manualSorting: true,
    enableRowSelection: true,
  });

  const selectedIds = table
    .getFilteredSelectedRowModel()
    .rows.map((row: Row<TData>) => row.original.id);

  return (
    <div className="space-y-4">
      {bulkActions && selectedIds.length > 0 && (
        <div className="flex items-center gap-2">
          {bulkActions(selectedIds)}
        </div>
      )}

      <Card>
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder ? null : (
                      <div
                        className={
                          header.column.getCanSort()
                            ? "flex cursor-pointer select-none items-center"
                            : ""
                        }
                        onClick={header.column.getToggleSortingHandler()}
                      >
                        {flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                        {{
                          asc: <ArrowUpDown className="ml-2 h-4 w-4" />,
                          desc: <ArrowUpDown className="ml-2 h-4 w-4" />,
                        }[header.column.getIsSorted() as string] ?? null}
                      </div>
                    )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  onClick={() => onRowClick && onRowClick(row.original)}
                  className={onRowClick ? "cursor-pointer" : ""}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={tableColumns.length}
                  className="h-24 text-center"
                >
                  No results found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>

        {pagination && pagination.totalPages > 1 && (
          <CardFooter className="flex justify-center pt-4">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      if (pagination.page > 1) {
                        pagination.handlePageChange(pagination.page - 1);
                      }
                    }}
                    className={
                      pagination.page <= 1
                        ? "pointer-events-none opacity-50"
                        : ""
                    }
                  />
                </PaginationItem>

                {[...Array(pagination.totalPages)].map((_, i) => (
                  <PaginationItem key={i}>
                    <PaginationLink
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        pagination.handlePageChange(i + 1);
                      }}
                      isActive={pagination.page === i + 1}
                    >
                      {i + 1}
                    </PaginationLink>
                  </PaginationItem>
                ))}

                <PaginationItem>
                  <PaginationNext
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      if (pagination.page < pagination.totalPages) {
                        pagination.handlePageChange(pagination.page + 1);
                      }
                    }}
                    className={
                      pagination.page >= pagination.totalPages
                        ? "pointer-events-none opacity-50"
                        : ""
                    }
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </CardFooter>
        )}
      </Card>
    </div>
  );
}

export function DataTableWrapper({ children }: { children: React.ReactNode }) {
  return <div className="w-full">{children}</div>;
}

// FILE: src/components/shared/EditableField.tsx
import { useState, useRef, useEffect, KeyboardEvent } from "react";
import { Input } from "../ui/input";
import { Textarea } from "../ui/textarea";
import { cn } from "@/lib/utils";
import { RichTextEditor } from "./RichTextEditor";
import { RichTextOutput } from "./RichTextOutput";

interface EditableFieldProps {
  initialValue: string;
  onSave: (newValue: string) => void;
  placeholder?: string;
  className?: string;
  as?: "input" | "textarea" | "richtext";
}

const isRichTextEmpty = (html: string | null | undefined): boolean => {
  if (!html) return true;
  const cleaned = html.replace(/<p><\/p>/g, "").trim();
  return cleaned.length === 0;
};

export function EditableField({
  initialValue,
  onSave,
  placeholder,
  className,
  as = "input",
}: EditableFieldProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [value, setValue] = useState(initialValue || "");
  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isEditing]);

  const handleSave = () => {
    if (value !== initialValue) {
      onSave(value);
    }
    setIsEditing(false);
  };

  const handleKeyDown = (
    e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    if (e.key === "Enter" && as === "input") {
      e.preventDefault();
      handleSave();
    } else if (e.key === "Escape") {
      setValue(initialValue || "");
      setIsEditing(false);
    }
  };

  if (isEditing) {
    if (as === "richtext") {
      return (
        <RichTextEditor value={value} onChange={setValue} onBlur={handleSave} />
      );
    }

    const Component = as === "input" ? Input : Textarea;
    return (
      <Component
        ref={inputRef as any}
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleSave}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        className={className}
      />
    );
  }

  if (as === "richtext") {
    return (
      <div
        onClick={() => setIsEditing(true)}
        className={cn(
          "min-h-[123px] w-full cursor-pointer rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background",
          "hover:bg-muted",
          className
        )}
      >
        {!isRichTextEmpty(value) ? (
          <RichTextOutput html={value} />
        ) : (
          <p className="text-muted-foreground">{placeholder}</p>
        )}
      </div>
    );
  }

  return (
    <div
      onClick={() => setIsEditing(true)}
      className={cn(
        "min-h-[40px] w-full cursor-pointer rounded-md border border-input bg-transparent px-3 py-2 text-sm",
        "hover:bg-muted",
        className
      )}
    >
      {value || <span className="text-muted-foreground">{placeholder}</span>}
    </div>
  );
}

// FILE: src/components/shared/EmptyState.tsx
import { ReactNode } from "react";

interface EmptyStateProps {
  icon: ReactNode;
  title: string;
  description: string;
  action?: ReactNode;
}

export function EmptyState({
  icon,
  title,
  description,
  action,
}: EmptyStateProps) {
  return (
    <div className="flex h-full flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
      <div className="flex h-16 w-16 items-center justify-center rounded-full bg-primary/10">
        {icon}
      </div>
      <h2 className="mt-6 text-xl font-semibold">{title}</h2>
      <p className="mt-2 text-center text-sm text-muted-foreground">
        {description}
      </p>
      {action && <div className="mt-6">{action}</div>}
    </div>
  );
}

// FILE: src/components/shared/EntityCard.tsx
import {
  Card,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { type LucideIcon } from "lucide-react";
import { Link } from "react-router-dom";

interface EntityCardProps {
  title: string;
  description?: string | null;
  linkTo?: string;
  children: React.ReactNode;
  icon?: LucideIcon;
  actions?: React.ReactNode;
}

export function EntityCard({
  title,
  description,
  linkTo,
  children,
  icon: Icon,
  actions,
}: EntityCardProps) {
  const CardBody = (
    <Card className="flex h-full flex-col transition-colors hover:border-primary">
      <CardHeader className="flex-row items-start justify-between">
        <div className="flex items-center gap-3">
          {Icon && <Icon className="h-6 w-6 text-gray-400" />}
          <div className="flex-grow">
            <CardTitle>{title}</CardTitle>
            {description && <CardDescription>{description}</CardDescription>}
          </div>
        </div>
        {actions}
      </CardHeader>
      {children}
    </Card>
  );

  return linkTo ? (
    <Link to={linkTo} className="block h-full">
      {CardBody}
    </Link>
  ) : (
    CardBody
  );
}

// FILE: src/components/shared/ErrorState.tsx
import { AlertTriangle } from "lucide-react";

interface ErrorStateProps {
  title: string;
  message: string;
}

export function ErrorState({ title, message }: ErrorStateProps) {
  return (
    <div className="flex h-full flex-col items-center justify-center rounded-lg border border-dashed p-8 text-center">
      <div className="flex h-16 w-16 items-center justify-center rounded-full bg-destructive/10">
        <AlertTriangle className="h-8 w-8 text-destructive" />
      </div>
      <h2 className="mt-6 text-xl font-semibold">{title}</h2>
      <p className="mt-2 text-sm text-muted-foreground">{message}</p>
    </div>
  );
}

// FILE: src/components/shared/form/FormFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { CalendarIcon, Check, ChevronsUpDown } from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { RichTextEditor } from "@/components/shared/RichTextEditor";
import { MultiSelect } from "@/components/ui/MultiSelect";
import { ComponentProps } from "react";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Badge } from "@/components/ui/badge";
import { AssigneeSelector } from "@/features/project-management/components/AssigneeSelector";
import { TaskTypeSelector } from "@/features/project-management/components/TaskTypeSelector";

interface FormInputProps extends ComponentProps<typeof Input> {
  name: string;
  label: string;
}

export function FormInput({ name, label, ...props }: FormInputProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input {...field} {...props} value={field.value ?? ""} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormTextareaProps extends ComponentProps<typeof Textarea> {
  name: string;
  label: string;
}

export function FormTextarea({ name, label, ...props }: FormTextareaProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Textarea {...field} {...props} value={field.value ?? ""} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormSelectProps extends ComponentProps<typeof Select> {
  name: string;
  label: string;
  placeholder: string;
  options: { value: string; label: string }[];
}

export function FormSelect({
  name,
  label,
  placeholder,
  options,
  ...props
}: FormSelectProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <Select
            onValueChange={field.onChange}
            defaultValue={field.value}
            {...props}
          >
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder={placeholder} />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {options.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormDatePickerProps {
  name: string;
  label: string;
}

export function FormDatePicker({ name, label }: FormDatePickerProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant={"outline"}
                  className={cn(
                    "w-full pl-3 text-left font-normal",
                    !field.value && "text-muted-foreground"
                  )}
                >
                  {field.value ? (
                    format(field.value, "PPP")
                  ) : (
                    <span>Pick a date</span>
                  )}
                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={field.value || undefined}
                onSelect={field.onChange}
                disabled={(date) =>
                  date > new Date() || date < new Date("1900-01-01")
                }
                initialFocus
              />
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormRichTextEditorProps {
  name: string;
  label: string;
  description?: string;
}

export function FormRichTextEditor({
  name,
  label,
  description,
}: FormRichTextEditorProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <RichTextEditor
              value={field.value ?? ""}
              onChange={field.onChange}
            />
          </FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormMultiSelectProps {
  name: string;
  label: string;
  placeholder: string;
  options: any[];
}

export function FormMultiSelect({
  name,
  label,
  placeholder,
  options,
}: FormMultiSelectProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <MultiSelect
            options={options}
            selected={field.value ?? []}
            onChange={field.onChange}
            placeholder={placeholder}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormSwitchProps extends ComponentProps<typeof Switch> {
  name: string;
  label: string;
  description?: string;
}

export function FormSwitch({ name, label, description }: FormSwitchProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
          <div className="space-y-0.5">
            <FormLabel>{label}</FormLabel>
            {description && <FormDescription>{description}</FormDescription>}
          </div>
          <FormControl>
            <Switch checked={field.value} onCheckedChange={field.onChange} />
          </FormControl>
        </FormItem>
      )}
    />
  );
}

interface FormMultiSelectPopoverProps {
  name: string;
  label: string;
  placeholder: string;
  options: { id: string; name: string }[];
}

export function FormMultiSelectPopover({
  name,
  label,
  placeholder,
  options,
}: FormMultiSelectPopoverProps) {
  const { control, setValue, watch } = useFormContext();
  const selectedValues = watch(name) || [];
  const selectedItems =
    options.filter((opt) => selectedValues.includes(opt.id)) || [];

  return (
    <FormField
      control={control}
      name={name}
      render={() => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant="outline"
                  role="combobox"
                  className={cn(
                    "w-full justify-between",
                    !selectedItems.length && "text-muted-foreground"
                  )}
                >
                  <div className="flex flex-wrap items-center gap-1">
                    {selectedItems.length > 0 ? (
                      selectedItems.map((item) => (
                        <Badge variant="secondary" key={item.id}>
                          {item.name}
                        </Badge>
                      ))
                    ) : (
                      <span>{placeholder}</span>
                    )}
                  </div>
                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput placeholder="Search..." />
                <CommandList>
                  <CommandEmpty>No results found.</CommandEmpty>
                  <CommandGroup>
                    {options.map((option) => {
                      const isSelected = selectedValues.includes(option.id);
                      return (
                        <CommandItem
                          value={option.name}
                          key={option.id}
                          onSelect={() => {
                            if (isSelected) {
                              setValue(
                                name,
                                selectedValues.filter(
                                  (id: string) => id !== option.id
                                )
                              );
                            } else {
                              setValue(name, [...selectedValues, option.id]);
                            }
                          }}
                        >
                          <Check
                            className={cn(
                              "mr-2 h-4 w-4",
                              isSelected ? "opacity-100" : "opacity-0"
                            )}
                          />
                          {option.name}
                        </CommandItem>
                      );
                    })}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormAssigneeSelectorProps {
  name: string;
  label: string;
  projectId?: string;
  workspaceId?: string;
}

export function FormAssigneeSelector({
  name,
  label,
  projectId,
  workspaceId,
}: FormAssigneeSelectorProps) {
  const { control } = useFormContext();
  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <AssigneeSelector
            projectId={projectId}
            workspaceId={workspaceId}
            selectedIds={field.value}
            onSelectionChange={field.onChange}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

interface FormTaskTypeSelectorProps {
  name: string;
  label: string;
  workspaceId?: string;
  projectId?: string;
}

export function FormTaskTypeSelector({
  name,
  label,
  workspaceId,
  projectId,
}: FormTaskTypeSelectorProps) {
  const { control } = useFormContext();

  return (
    <FormField
      control={control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <TaskTypeSelector
            workspaceId={workspaceId}
            projectId={projectId}
            value={field.value}
            onValueChange={field.onChange}
          />
          <FormMessage />
        </FormItem>
      )}
    />
  );
}

// FILE: src/components/shared/form/FormWrapper.tsx
import { useForm, FormProvider, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { UseMutationResult } from "@tanstack/react-query";
import { AxiosError } from "axios";
import { useEffect } from "react";

interface FormWrapperProps<Schema extends z.ZodType<any, any>> {
  schema: Schema;
  onSubmit: (values: z.output<Schema>) => void;
  mutation: UseMutationResult<any, AxiosError, any, any>;
  renderFields: (
    form: ReturnType<typeof useForm<z.input<Schema>>>
  ) => React.ReactNode;
  submitButtonText?: string;
  className?: string;
  defaultValues?: Partial<z.input<Schema>>;
}

export function FormWrapper<Schema extends z.ZodType<any, any>>({
  schema,
  onSubmit,
  mutation,
  renderFields,
  submitButtonText = "Save Changes",
  className,
  defaultValues,
}: FormWrapperProps<Schema>) {
  const methods = useForm<z.input<Schema>>({
    resolver: zodResolver(schema) as any,
    defaultValues: defaultValues as z.input<Schema>,
  });

  useEffect(() => {
    if (defaultValues) {
      methods.reset(defaultValues as z.input<Schema>);
    }
  }, [defaultValues, methods]);

  const handleSubmit: SubmitHandler<z.input<Schema>> = (values) => {
    onSubmit(values as unknown as z.output<Schema>);
  };

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form
          onSubmit={methods.handleSubmit(handleSubmit)}
          className={className || "space-y-4"}
        >
          {renderFields(methods)}
          <Button type="submit" disabled={mutation.isPending}>
            {mutation.isPending ? "Saving..." : submitButtonText}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/components/shared/form/ResourceForm.tsx
import {
  useForm,
  FormProvider,
  SubmitHandler,
  UseFormReturn,
} from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useEffect } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { QueryKey } from "@tanstack/react-query";

type FormData<Schema extends z.ZodType<any, any>> = z.infer<Schema>;

interface ResourceFormProps<Schema extends z.ZodType<any, any>> {
  schema: Schema;
  resourcePath: string;
  resourceKey: QueryKey;
  initialData?: FormData<Schema>;
  onSuccess?: (data: any) => void;
  renderFields: (form: UseFormReturn<FormData<Schema>>) => React.ReactNode;
  processValues?: (values: FormData<Schema>) => any;
  className?: string;
}

export function ResourceForm<Schema extends z.ZodType<any, any>>({
  schema,
  resourcePath,
  resourceKey,
  initialData,
  onSuccess,
  renderFields,
  processValues,
  className,
}: ResourceFormProps<Schema>) {
  const resource = useApiResource(resourcePath, resourceKey);
  const isEditMode = !!initialData;
  const createMutation = resource.useCreate();
  const updateMutation = resource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;

  type FormValues = FormData<Schema>;

  const methods = useForm<FormValues>({
    resolver: zodResolver(schema) as any,
    defaultValues: initialData,
  });

  useEffect(() => {
    if (isEditMode) {
      methods.reset(initialData);
    }
  }, [initialData, isEditMode, methods]);

  const onSubmit: SubmitHandler<FormValues> = async (values) => {
    const finalValues = processValues ? processValues(values) : values;

    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: (initialData as any).id, data: finalValues },
        {
          onSuccess: (data) => {
            onSuccess?.(data);
          },
        }
      );
    } else {
      await createMutation.mutateAsync(finalValues, {
        onSuccess: (data) => {
          methods.reset();
          onSuccess?.(data);
        },
      });
    }
  };

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form
          onSubmit={methods.handleSubmit(onSubmit)}
          className={className || "space-y-4"}
        >
          {renderFields(methods)}
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : `Create ${
                    resourceKey[0]
                      ?.toString()
                      .replace(/s$/, "")
                      .replace(/^\w/, (c) => c.toUpperCase()) || "Item"
                  }`}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

// FILE: src/components/shared/ListPageLayout.tsx
import { ReactNode } from "react";

interface ListPageLayoutProps {
  title: string;
  description: string;
  actionButton?: ReactNode;
  children: ReactNode;
}

export function ListPageLayout({
  title,
  description,
  actionButton,
  children,
}: ListPageLayoutProps) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
          <p className="text-muted-foreground">{description}</p>
        </div>
        {actionButton}
      </div>
      {children}
    </div>
  );
}

// FILE: src/components/shared/ResourceCrudDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import React, { useState } from "react";
import { QueryKey } from "@tanstack/react-query";
import { cn } from "@/lib/utils";

const DialogFormContent = ({
  isEditMode,
  resourceId,
  resourcePath,
  resourceKey,
  formComponent: FormComponent,
  formProps,
  onSuccess,
  children,
}: {
  isEditMode: boolean;
  resourceId: string | null;
  resourcePath: string;
  resourceKey: QueryKey;
  formComponent: React.ElementType;
  formProps?: Record<string, any>;
  onSuccess: () => void;
  children?: (data: any) => React.ReactNode;
}) => {
  const resource = useApiResource(resourcePath, resourceKey);
  const { data, isLoading } = resource.useGetOne(
    isEditMode ? resourceId : null
  );

  if (isEditMode && isLoading) {
    return (
      <div className="grid grid-cols-1 gap-6 py-4 md:grid-cols-2">
        <div className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-9 w-24" />
        </div>
        <div className="space-y-4">
          <Skeleton className="h-6 w-1/3" />
          <Skeleton className="h-24 w-full" />
        </div>
      </div>
    );
  }

  if (isEditMode && !data) {
    return null;
  }

  const formContent = (
    <FormComponent
      initialData={isEditMode ? data : undefined}
      onSuccess={onSuccess}
      {...formProps}
    />
  );

  if (children && isEditMode && data) {
    return (
      <div className="grid grid-cols-1 gap-8 py-4 md:grid-cols-3">
        <div className="md:col-span-2">{formContent}</div>
        {children(data)}
      </div>
    );
  }

  return formContent;
};
interface ResourceCrudDialogProps {
  trigger?: React.ReactNode;
  title: string;
  description: string;
  form: React.ElementType;
  formProps?: Record<string, any>;
  resourcePath: string;
  resourceKey: QueryKey;
  resourceId?: string | null;
  isOpen?: boolean;
  onOpenChange?: (isOpen: boolean) => void;
  children?: (data: any) => React.ReactNode;
  dialogClassName?: string;
}

export function ResourceCrudDialog({
  trigger,
  title,
  description,
  form: FormComponent,
  formProps,
  resourcePath,
  resourceKey,
  resourceId,
  isOpen: externalIsOpen,
  onOpenChange: externalOnOpenChange,
  children,
  dialogClassName,
}: ResourceCrudDialogProps) {
  const [internalIsOpen, setInternalIsOpen] = useState(false);
  const isControlled =
    externalIsOpen !== undefined && externalOnOpenChange !== undefined;

  const isOpen = isControlled ? externalIsOpen : internalIsOpen;
  const onOpenChange = isControlled ? externalOnOpenChange : setInternalIsOpen;

  const isEditMode = !!resourceId;

  const handleSuccess = () => {
    onOpenChange(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}
      <DialogContent className={cn(dialogClassName)}>
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          <DialogDescription>{description}</DialogDescription>
        </DialogHeader>
        {isOpen && (
          <DialogFormContent
            isEditMode={isEditMode}
            resourceId={resourceId ?? null}
            resourcePath={resourcePath}
            resourceKey={resourceKey}
            formComponent={FormComponent}
            formProps={formProps}
            onSuccess={handleSuccess}
            children={children}
          />
        )}
      </DialogContent>
    </Dialog>
  );
}

// FILE: src/components/shared/RichTextEditor.tsx
import { useEditor, EditorContent, Editor } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Link from "@tiptap/extension-link";
import Mention from "@tiptap/extension-mention";
import {
  Bold,
  Italic,
  List,
  ListOrdered,
  Heading1,
  Heading2,
  Heading3,
  Quote,
  Link2,
  Smile,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Toggle } from "@/components/ui/toggle";
import { Separator } from "@/components/ui/separator";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import Picker, { EmojiClickData } from "emoji-picker-react";
import { useCallback, useEffect } from "react";
import { suggestion } from "../ui/mention-suggestion";

interface RichTextEditorProps {
  value: string;
  onChange: (value: string) => void;
  className?: string;
  onBlur?: () => void;
  workspaceId?: string;
  projectId?: string;
}

function EditorToolbar({ editor }: { editor: Editor | null }) {
  if (!editor) {
    return null;
  }

  const setLink = useCallback(() => {
    const previousUrl = editor.getAttributes("link").href;
    const url = window.prompt("URL", previousUrl);

    if (url === null) {
      return;
    }

    if (url === "") {
      editor.chain().focus().extendMarkRange("link").unsetLink().run();
      return;
    }

    editor.chain().focus().extendMarkRange("link").setLink({ href: url }).run();
  }, [editor]);

  const handleEmojiClick = (emojiClickData: EmojiClickData) => {
    editor.chain().focus().insertContent(emojiClickData.emoji).run();
  };

  return (
    <div className="flex flex-wrap items-center gap-1 rounded-t-md border border-b-0 border-input bg-transparent p-1">
      <Toggle
        size="sm"
        pressed={editor.isActive("bold")}
        onPressedChange={() => editor.chain().focus().toggleBold().run()}
      >
        <Bold className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("italic")}
        onPressedChange={() => editor.chain().focus().toggleItalic().run()}
      >
        <Italic className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 1 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 1 }).run()
        }
      >
        <Heading1 className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 2 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 2 }).run()
        }
      >
        <Heading2 className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("heading", { level: 3 })}
        onPressedChange={() =>
          editor.chain().focus().toggleHeading({ level: 3 }).run()
        }
      >
        <Heading3 className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("bulletList")}
        onPressedChange={() => editor.chain().focus().toggleBulletList().run()}
      >
        <List className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("orderedList")}
        onPressedChange={() => editor.chain().focus().toggleOrderedList().run()}
      >
        <ListOrdered className="h-4 w-4" />
      </Toggle>
      <Toggle
        size="sm"
        pressed={editor.isActive("blockquote")}
        onPressedChange={() => editor.chain().focus().toggleBlockquote().run()}
      >
        <Quote className="h-4 w-4" />
      </Toggle>
      <Separator orientation="vertical" className="h-6" />
      <Toggle
        size="sm"
        pressed={editor.isActive("link")}
        onPressedChange={setLink}
      >
        <Link2 className="h-4 w-4" />
      </Toggle>
      <Popover>
        <PopoverTrigger asChild>
          <Toggle size="sm">
            <Smile className="h-4 w-4" />
          </Toggle>
        </PopoverTrigger>
        <PopoverContent className="w-full border-none bg-transparent p-0 shadow-none">
          <Picker onEmojiClick={handleEmojiClick} />
        </PopoverContent>
      </Popover>
    </div>
  );
}

export function RichTextEditor({
  value,
  onChange,
  className,
  onBlur,
  workspaceId,
  projectId,
}: RichTextEditorProps) {
  const editor = useEditor({
    extensions: [
      StarterKit,
      Link.configure({
        openOnClick: false,
        autolink: true,
      }),
      Mention.configure({
        HTMLAttributes: {
          class: "mention",
        },
        suggestion: suggestion(workspaceId, projectId),
      }),
    ],
    content: value,
    onUpdate({ editor }) {
      onChange(editor.getHTML());
    },
    onBlur() {
      onBlur?.();
    },
    editorProps: {
      attributes: {
        class: cn(
          "min-h-[150px] w-full rounded-md rounded-t-none border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 prose prose-sm max-w-none dark:prose-invert",
          className
        ),
      },
    },
  });

  useEffect(() => {
    if (editor && value !== editor.getHTML()) {
      editor.commands.setContent(value);
    }
  }, [editor, value]);

  return (
    <div>
      <EditorToolbar editor={editor} />
      <EditorContent editor={editor} />
    </div>
  );
}

// FILE: src/components/shared/RichTextOutput.tsx
import DOMPurify from "dompurify";
import { cn } from "@/lib/utils";

interface RichTextOutputProps {
  html: string;
  className?: string;
}

export function RichTextOutput({ html, className }: RichTextOutputProps) {
  const sanitizedHtml = DOMPurify.sanitize(html);
  return (
    <div
      className={cn("prose prose-sm max-w-none dark:prose-invert", className)}
      dangerouslySetInnerHTML={{ __html: sanitizedHtml }}
    />
  );
}

// FILE: src/features/admin/announcements/api/useManageAnnouncements.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Announcement } from "@/types";

interface AnnouncementQuery {
  page?: number;
}

export function useManageAnnouncements() {
  return useApiResource<Announcement, AnnouncementQuery>("announcements", [
    "announcements",
  ]);
}
// FILE: src/features/admin/announcements/components/AnnouncementForm.tsx
import { z } from "zod";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import {
  FormInput,
  FormRichTextEditor,
  FormSelect,
  FormSwitch,
} from "@/components/shared/form/FormFields";
import { AnnouncementSeverity, PublicationStatus } from "@/types/api";
import { Announcement } from "@/types";

const announcementSchema = z.object({
  title: z.string().min(1, "Title is required."),
  content: z.string().min(1, "Content is required."),
  status: z.nativeEnum(PublicationStatus),
  severity: z.nativeEnum(AnnouncementSeverity),
  isPinned: z.boolean(),
});

interface AnnouncementFormProps {
  initialData?: Announcement;
  onSuccess?: () => void;
}

export function AnnouncementForm({
  initialData,
  onSuccess,
}: AnnouncementFormProps) {
  const statusOptions = Object.values(PublicationStatus).map((s) => ({
    value: s,
    label: s.charAt(0) + s.slice(1).toLowerCase(),
  }));

  const severityOptions = Object.values(AnnouncementSeverity).map((s) => ({
    value: s,
    label: s.charAt(0) + s.slice(1).toLowerCase(),
  }));

  const processedInitialData = initialData
    ? {
        ...initialData,
        content: initialData.content?.message || "",
      }
    : undefined;

  return (
    <ResourceForm
      schema={announcementSchema}
      resourcePath="announcements"
      resourceKey={["announcements"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => ({
        ...values,
        content: { message: values.content },
      })}
      renderFields={() => (
        <>
          <FormInput
            name="title"
            label="Title"
            placeholder="e.g., System Maintenance"
          />
          <FormRichTextEditor
            name="content"
            label="Content"
            description="This content will be displayed to users."
          />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="status"
              label="Status"
              placeholder="Select status"
              options={statusOptions}
            />
            <FormSelect
              name="severity"
              label="Severity"
              placeholder="Select severity"
              options={severityOptions}
            />
          </div>
          <FormSwitch
            name="isPinned"
            label="Pin Announcement"
            description="Pinned announcements will appear at the top."
          />
        </>
      )}
    />
  );
}
// FILE: src/features/admin/announcements/components/AnnouncementList.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/shared/DataTable";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { AnnouncementForm } from "./AnnouncementForm";
import { Announcement } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageAnnouncements } from "../api/useManageAnnouncements";

export function AnnouncementList() {
  const [page, setPage] = useState(1);
  const [editingId, setEditingId] = useState<string | null>(null);
  const { useGetAll, useDelete } = useManageAnnouncements();
  const { data, isLoading, isError } = useGetAll({ page });
  const deleteMutation = useDelete();

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const columns: ColumnDef<Announcement>[] = [
    {
      accessorKey: "title",
      header: "Title",
      cell: ({ row }) => (
        <span className="font-medium">{row.original.title}</span>
      ),
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => <Badge variant="outline">{row.original.status}</Badge>,
    },
    {
      accessorKey: "severity",
      header: "Severity",
      cell: ({ row }) => (
        <Badge variant="secondary">{row.original.severity}</Badge>
      ),
    },
    {
      accessorKey: "isPinned",
      header: "Pinned",
      cell: ({ row }) => (row.original.isPinned ? "Yes" : "No"),
    },
    {
      accessorKey: "publishedAt",
      header: "Published",
      cell: ({ row }) =>
        row.original.publishedAt
          ? new Date(row.original.publishedAt).toLocaleDateString("en-US")
          : "N/A",
    },
  ];

  if (isLoading) return <div>Loading announcements...</div>;
  if (isError) return <div>Error loading announcements.</div>;
  return (
    <>
      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Delete ${selectedIds.length} selected announcements?`
                  )
                ) {
                  deleteMutation.mutate(selectedIds);
                }
              }}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete ({selectedIds.length})
            </Button>
          )}
          renderRowActions={(row) => (
            <ActionMenu
              onEdit={() => setEditingId(row.id)}
              onDelete={() => {
                if (window.confirm(`Delete announcement "${row.title}"?`)) {
                  deleteMutation.mutate(row.id);
                }
              }}
              deleteDisabled={deleteMutation.isPending}
            />
          )}
        />
      </DataTableWrapper>

      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Announcement"
        description="Make changes to the announcement details."
        form={AnnouncementForm}
        resourcePath="announcements"
        resourceKey={["announcements"]}
        resourceId={editingId}
      />
    </>
  );
}
// FILE: src/features/admin/jobs/api/useGetJobSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobSystemStatus(): Promise<any> {
  const { data } = await api.get("admin/jobs/system/status");
  return data;
}

export function useGetJobSystemStatus() {
  return useQuery({
    queryKey: ["jobSystemStatus"],
    queryFn: getJobSystemStatus,
    refetchInterval: 5000,
  });
}

async function getQueueStats(): Promise<any> {
  const { data } = await api.get("admin/jobs/system/queue-stats");
  return data;
}

export function useGetQueueStats() {
  return useQuery({
    queryKey: ["queueStats"],
    queryFn: getQueueStats,
    refetchInterval: 5000,
  });
}
// FILE: src/features/admin/jobs/api/useGetJobTypes.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getJobTypes(): Promise<any> {
  const { data } = await api.get("admin/jobs/system/job-types");
  return data;
}

export function useGetJobTypes() {
  return useQuery({
    queryKey: ["jobTypes"],
    queryFn: getJobTypes,
    staleTime: Infinity,
  });
}
// FILE: src/features/admin/jobs/api/useJobActions.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function retryJob(jobId: string): Promise<any> {
  const { data } = await api.post(`admin/jobs/${jobId}/retry`);
  return data;
}

export function useRetryJob() {
  return useApiMutation({
    mutationFn: retryJob,
    successMessage: (data) => `Job sent for retry. Job ID: ${data.job.id}`,
    invalidateQueries: (data) => [["jobs"], ["job", data.job.id]],
  });
}

async function cancelJob(jobId: string): Promise<any> {
  const { data } = await api.post(`admin/jobs/${jobId}/cancel`);
  return data;
}

export function useCancelJob() {
  return useApiMutation({
    mutationFn: cancelJob,
    successMessage: (data) => `Job cancelled. Job ID: ${data.job.id}`,
    invalidateQueries: (data) => [["jobs"], ["job", data.job.id]],
  });
}
// FILE: src/features/admin/jobs/api/useJobSystemActions.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function cleanupJobs(): Promise<any> {
  const { data } = await api.post("admin/jobs/system/cleanup");
  return data;
}

export function useCleanupJobs() {
  return useApiMutation({
    mutationFn: cleanupJobs,
    successMessage: (data) =>
      `Job cleanup successful. Deleted ${data.deletedCompleted + data.deletedFailed} records.`,
    invalidateQueries: [["jobs"], ["queueStats"]],
  });
}

async function emitJobStats(): Promise<any> {
  const { data } = await api.post("admin/jobs/system/emit-stats");
  return data;
}

export function useEmitJobStats() {
  return useApiMutation({
    mutationFn: emitJobStats,
    successMessage: "Job queue stats emitted over WebSocket.",
  });
}
// FILE: src/features/admin/jobs/api/useManageJobs.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Job } from "@/types";

export function useManageJobs() {
  return useApiResource<Job>("admin/jobs", ["jobs"]);
}
// FILE: src/features/admin/jobs/api/useManageJobSchedules.ts
import { useApiResource } from "@/hooks/useApiResource";
import { JobSchedule } from "@/types";

export function useManageJobSchedules() {
  return useApiResource<JobSchedule>("admin/jobs/schedules", ["jobSchedules"]);
}
// FILE: src/features/admin/jobs/api/useTriggerJobSchedule.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function triggerJobSchedule(
  scheduleId: string
): Promise<{ jobId: string }> {
  const { data } = await api.post(`admin/jobs/schedules/${scheduleId}/trigger`);
  return data;
}

export function useTriggerJobSchedule() {
  return useApiMutation({
    mutationFn: triggerJobSchedule,
    successMessage: (data) =>
      `Job schedule triggered. New Job ID: ${data.jobId}`,
  });
}
// FILE: src/features/admin/jobs/components/CreateJobForm.tsx
import { z } from "zod";
import { JobPriority } from "@/types/api";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import {
  FormInput,
  FormSelect,
  FormTextarea,
  FormDatePicker,
} from "@/components/shared/form/FormFields";
import { useGetJobTypes } from "../api/useGetJobTypes";

const jobSchema = z.object({
  type: z.string().min(1, "Job type is required."),
  payload: z.string().optional(),
  priority: z.nativeEnum(JobPriority).optional(),
  maxAttempts: z.string().optional(),
  delay: z.string().optional(),
  scheduledAt: z.date().optional().nullable(),
});

type JobFormValues = z.infer<typeof jobSchema>;

interface CreateJobFormProps {
  onSuccess?: () => void;
  initialData?: JobFormValues;
}

export function CreateJobForm({ onSuccess, initialData }: CreateJobFormProps) {
  const { data: jobTypesData, isLoading: isLoadingJobTypes } = useGetJobTypes();

  const jobTypeOptions =
    jobTypesData?.jobTypes.map((jobType: any) => ({
      value: jobType.type,
      label: jobType.type,
    })) || [];

  const priorityOptions = Object.values(JobPriority).map((p) => ({
    value: p,
    label: p.charAt(0) + p.slice(1).toLowerCase(),
  }));

  return (
    <ResourceForm
      schema={jobSchema}
      resourcePath="admin/jobs"
      resourceKey={["jobs"]}
      initialData={initialData}
      onSuccess={onSuccess}
      processValues={(values) => {
        let parsedPayload = {};
        if (values.payload && values.payload.trim()) {
          try {
            parsedPayload = JSON.parse(values.payload);
          } catch (e) {
            throw new Error("Payload must be valid JSON.");
          }
        }
        return {
          ...values,
          payload: parsedPayload,
          maxAttempts: values.maxAttempts
            ? parseInt(values.maxAttempts, 10)
            : undefined,
          delay: values.delay ? parseInt(values.delay, 10) : undefined,
        };
      }}
      renderFields={() => (
        <>
          <FormSelect
            name="type"
            label="Job Type"
            placeholder={
              isLoadingJobTypes ? "Loading types..." : "Select a job type"
            }
            options={jobTypeOptions}
            disabled={isLoadingJobTypes}
          />
          <FormTextarea
            name="payload"
            label="Payload (JSON)"
            placeholder='{ "userId": "...", "force": true }'
            rows={5}
          />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="priority"
              label="Priority"
              placeholder="Select priority"
              options={priorityOptions}
            />
            <FormInput
              name="maxAttempts"
              label="Max Attempts"
              type="number"
              placeholder="e.g., 3"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <FormInput
              name="delay"
              label="Delay (ms)"
              type="number"
              placeholder="e.g., 5000"
            />
            <FormDatePicker
              name="scheduledAt"
              label="Scheduled At (Optional)"
            />
          </div>
        </>
      )}
    />
  );
}
// FILE: src/features/admin/jobs/components/CreateJobScheduleForm.tsx
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { z } from "zod";
import { useGetJobTypes } from "../api/useGetJobTypes";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { JobSchedule } from "@/types";
import { ResourceForm } from "@/components/shared/form/ResourceForm";

const JobScheduleFormSchema = z.object({
  name: z.string().min(1, "Schedule name is required."),
  jobType: z.string().min(1, "Job type is required."),
  cronExpression: z.string().min(1, "A valid CRON expression is required."),
  payload: z.string(),
  isActive: z.boolean(),
});

interface CreateJobScheduleFormProps {
  onSuccess?: () => void;
  initialData?: JobSchedule;
}

export function CreateJobScheduleForm({
  onSuccess,
  initialData,
}: CreateJobScheduleFormProps) {
  const { data: jobTypesData, isLoading: isLoadingJobTypes } = useGetJobTypes();

  const processedInitialData = initialData
    ? {
        ...initialData,
        payload: JSON.stringify(initialData.payload, null, 2),
      }
    : {
        name: "",
        jobType: "",
        cronExpression: "",
        payload: "{}",
        isActive: true,
      };

  return (
    <ResourceForm
      schema={JobScheduleFormSchema}
      resourcePath="admin/jobs/schedules"
      resourceKey={["jobSchedules"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => {
        let parsedPayload = {};
        if (values.payload && values.payload.trim()) {
          try {
            parsedPayload = JSON.parse(values.payload);
          } catch (e) {
            throw new Error("Payload must be valid JSON.");
          }
        }
        return {
          ...values,
          payload: parsedPayload,
        };
      }}
      renderFields={({ control }) => (
        <>
          <FormField
            control={control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Schedule Name</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Daily Cleanup" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={control}
            name="jobType"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Job Type</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger disabled={isLoadingJobTypes}>
                      <SelectValue placeholder="Select a job type" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {jobTypesData?.jobTypes.map((jobType: any) => (
                      <SelectItem key={jobType.type} value={jobType.type}>
                        {jobType.type}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={control}
            name="cronExpression"
            render={({ field }) => (
              <FormItem>
                <FormLabel>CRON Expression</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., 0 2 * * *" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={control}
            name="payload"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Payload (JSON)</FormLabel>
                <FormControl>
                  <Textarea placeholder='{ "days": 7 }' {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={control}
            name="isActive"
            render={({ field }) => (
              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                <FormLabel>Active</FormLabel>
                <FormControl>
                  <Switch
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
        </>
      )}
    />
  );
}
// FILE: src/features/admin/jobs/components/JobList.tsx
import { useRetryJob, useCancelJob } from "../api/useJobActions";
import { Badge } from "@/components/ui/badge";
import {
  RefreshCw,
  XCircle,
  Clock,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { JobStatus } from "@/types/api";
import { Job } from "@/types";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/shared/DataTable";
import { ActionMenu, CustomAction } from "@/components/shared/ActionMenu";
import { useManageJobs } from "../api/useManageJobs";

const statusVariantMap: Record<
  JobStatus,
  "default" | "secondary" | "destructive" | "outline"
> = {
  [JobStatus.PENDING]: "outline",
  [JobStatus.RUNNING]: "default",
  [JobStatus.COMPLETED]: "secondary",
  [JobStatus.FAILED]: "destructive",
  [JobStatus.CANCELLED]: "destructive",
};

const statusIconMap: Record<JobStatus, React.ElementType> = {
  [JobStatus.PENDING]: Clock,
  [JobStatus.RUNNING]: RefreshCw,
  [JobStatus.COMPLETED]: CheckCircle,
  [JobStatus.FAILED]: AlertCircle,
  [JobStatus.CANCELLED]: XCircle,
};

export function JobList() {
  const { useGetAll, useDelete } = useManageJobs();
  const { data, isLoading, isError } = useGetAll();
  const retryMutation = useRetryJob();
  const cancelMutation = useCancelJob();
  const deleteMutation = useDelete();

  const columns: ColumnDef<Job>[] = [
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const status = row.original.status;
        const StatusIcon = statusIconMap[status];
        return (
          <Badge variant={statusVariantMap[status]}>
            <StatusIcon className="mr-2 h-4 w-4" />
            {status}
          </Badge>
        );
      },
    },
    {
      accessorKey: "type",
      header: "Type",
      cell: ({ row }) => (
        <span className="font-mono text-xs">{row.original.type}</span>
      ),
    },
    {
      accessorKey: "attempts",
      header: "Attempts",
      cell: ({ row }) =>
        `${row.original.attempts} / ${row.original.maxAttempts}`,
    },
    {
      accessorKey: "createdAt",
      header: "Created At",
      cell: ({ row }) =>
        new Date(row.original.createdAt).toLocaleString("en-US"),
    },
  ];

  if (isLoading) return <div>Loading jobs...</div>;
  if (isError) return <div>Error loading jobs.</div>;
  return (
    <DataTableWrapper>
      <DataTable
        columns={columns}
        data={data?.data || []}
        renderRowActions={(job) => {
          const customActions: CustomAction[] = [
            {
              label: "Retry",
              icon: RefreshCw,
              onClick: () => retryMutation.mutate(job.id),
              disabled: job.status === "RUNNING" || job.status === "PENDING",
            },
            {
              label: "Cancel",
              icon: XCircle,
              onClick: () => cancelMutation.mutate(job.id),
              disabled: job.status !== "RUNNING" && job.status !== "PENDING",
              className: "text-red-600 focus:text-red-600",
            },
          ];
          return (
            <ActionMenu
              customActions={customActions}
              onDelete={() => deleteMutation.mutate(job.id)}
            />
          );
        }}
      />
    </DataTableWrapper>
  );
}
// FILE: src/features/admin/jobs/components/JobScheduleList.tsx
import { useState } from "react";
import { Switch } from "@/components/ui/switch";
import { Zap } from "lucide-react";
import { JobSchedule } from "@/types";
import { useTriggerJobSchedule } from "../api/useTriggerJobSchedule";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateJobScheduleForm } from "./CreateJobScheduleForm";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/shared/DataTable";
import { ActionMenu, CustomAction } from "@/components/shared/ActionMenu";
import { useManageJobSchedules } from "../api/useManageJobSchedules";

export function JobScheduleList() {
  const [editingScheduleId, setEditingScheduleId] = useState<string | null>(
    null
  );
  const { useGetAll, useUpdate, useDelete } = useManageJobSchedules();
  const { data, isLoading, isError } = useGetAll();
  const updateMutation = useUpdate();
  const deleteMutation = useDelete();
  const triggerMutation = useTriggerJobSchedule();

  const columns: ColumnDef<JobSchedule>[] = [
    {
      accessorKey: "name",
      header: "Name",
      cell: ({ row }) => (
        <span className="font-medium">{row.original.name}</span>
      ),
    },
    {
      accessorKey: "cronExpression",
      header: "Cron Expression",
      cell: ({ row }) => (
        <span className="font-mono text-xs">{row.original.cronExpression}</span>
      ),
    },
    {
      accessorKey: "jobType",
      header: "Job Type",
      cell: ({ row }) => (
        <span className="font-mono text-xs">{row.original.jobType}</span>
      ),
    },
    {
      accessorKey: "nextRunAt",
      header: "Next Run",
      cell: ({ row }) =>
        row.original.nextRunAt
          ? new Date(row.original.nextRunAt).toLocaleString("en-US")
          : "N/A",
    },
    {
      accessorKey: "isActive",
      header: "Active",
      cell: ({ row }) => (
        <Switch
          checked={row.original.isActive}
          onCheckedChange={(isActive) =>
            updateMutation.mutate({ id: row.original.id, data: { isActive } })
          }
        />
      ),
    },
  ];

  if (isLoading) return <div>Loading schedules...</div>;
  if (isError) return <div>Error loading schedules.</div>;

  return (
    <>
      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          renderRowActions={(schedule) => {
            const customActions: CustomAction[] = [
              {
                label: "Trigger Now",
                icon: Zap,
                onClick: () => triggerMutation.mutate(schedule.id),
              },
            ];
            return (
              <ActionMenu
                onEdit={() => setEditingScheduleId(schedule.id)}
                onDelete={() => deleteMutation.mutate(schedule.id)}
                customActions={customActions}
              />
            );
          }}
        />
      </DataTableWrapper>
      <ResourceCrudDialog
        isOpen={!!editingScheduleId}
        onOpenChange={(isOpen) => !isOpen && setEditingScheduleId(null)}
        title="Edit Job Schedule"
        description="Modify the details of the recurring job."
        form={CreateJobScheduleForm}
        resourceId={editingScheduleId}
        resourcePath="admin/jobs/schedules"
        resourceKey={["jobSchedules"]}
      />
    </>
  );
}
// FILE: src/features/admin/jobs/components/JobSystemStatus.tsx
import {
  useGetJobSystemStatus,
  useGetQueueStats,
} from "../api/useGetJobSystemStatus";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";

const StatCard = ({
  title,
  value,
  isLoading,
}: {
  title: string;
  value: React.ReactNode;
  isLoading: boolean;
}) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {isLoading ? (
        <Skeleton className="h-8 w-1/2" />
      ) : (
        <div className="text-2xl font-bold">{value}</div>
      )}
    </CardContent>
  </Card>
);

export function JobSystemStatus() {
  const { data: statusData, isLoading: isLoadingStatus } =
    useGetJobSystemStatus();
  const { data: queueData, isLoading: isLoadingQueue } = useGetQueueStats();

  const processorStatus = statusData?.processor;
  const schedulerStatus = statusData?.scheduler;
  const queueStats = queueData?.totalJobs;

  const isProcessorOk =
    processorStatus &&
    processorStatus.isProcessing &&
    processorStatus.consecutiveFailures < 5;
  return (
    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
      <StatCard
        title="Processor Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={isProcessorOk ? "default" : "destructive"}>
            {isProcessorOk ? "Running" : "Error"}
          </Badge>
        }
      />
      <StatCard
        title="Scheduler Status"
        isLoading={isLoadingStatus}
        value={
          <Badge variant={schedulerStatus?.isRunning ? "default" : "outline"}>
            {schedulerStatus?.isRunning ? "Running" : "Stopped"}
          </Badge>
        }
      />
      <StatCard
        title="Jobs Running"
        isLoading={isLoadingStatus}
        value={processorStatus?.runningJobs ?? "N/A"}
      />
      <StatCard
        title="Jobs Pending"
        isLoading={isLoadingQueue}
        value={queueStats?.pending ?? "N/A"}
      />
    </div>
  );
}
// FILE: src/features/admin/permissions/api/useManagePermissions.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Permission } from "@/types";

interface PermissionQuery {
  page?: number;
}

export function useManagePermissions() {
  return useApiResource<Permission, PermissionQuery>("admin/permissions", [
    "permissions",
  ]);
}
// FILE: src/features/admin/permissions/components/PermissionForm.tsx
import { z } from "zod";
import { descriptionSchema, requiredStringSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput, FormTextarea } from "@/components/shared/form/FormFields";

const permissionSchema = z.object({
  action: requiredStringSchema("Action"),
  subject: requiredStringSchema("Subject"),
  description: descriptionSchema,
});

interface PermissionFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function PermissionForm({
  initialData,
  onSuccess,
}: PermissionFormProps) {
  return (
    <ResourceForm
      schema={permissionSchema}
      resourcePath="admin/permissions"
      resourceKey={["permissions"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="action"
            label="Action"
            placeholder="e.g., manage, create, read"
          />
          <FormInput
            name="subject"
            label="Subject"
            placeholder="e.g., Project, Task, User"
          />
          <FormTextarea
            name="description"
            label="Description"
            placeholder="A short description of what this permission allows."
          />
        </>
      )}
    />
  );
}

// FILE: src/features/admin/permissions/components/PermissionList.tsx
import { useState } from "react";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/shared/DataTable";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { Permission } from "@/types";
import { useManagePermissions } from "../api/useManagePermissions";

export function PermissionList() {
  const [page, setPage] = useState(1);
  const { useGetAll, useDelete } = useManagePermissions();
  const { data, isLoading, isError } = useGetAll({ page });
  const deleteMutation = useDelete();

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const columns: ColumnDef<Permission>[] = [
    {
      accessorKey: "action",
      header: "Action",
      cell: ({ row }) => (
        <span className="font-mono">{row.original.action}</span>
      ),
    },
    {
      accessorKey: "subject",
      header: "Subject",
      cell: ({ row }) => (
        <span className="font-mono">{row.original.subject}</span>
      ),
    },
    {
      accessorKey: "description",
      header: "Description",
      cell: ({ row }) => row.original.description,
    },
  ];

  if (isLoading) return <div>Loading permissions...</div>;
  if (isError) return <div>Error loading permissions.</div>;

  return (
    <DataTableWrapper>
      <DataTable
        columns={columns}
        data={data?.data || []}
        pagination={{
          page: data?.page || 1,
          totalPages: data?.totalPages || 1,
          handlePageChange,
        }}
        bulkActions={(selectedIds) => (
          <Button
            variant="destructive"
            onClick={() => {
              if (
                window.confirm(
                  `Delete ${selectedIds.length} selected permissions?`
                )
              ) {
                deleteMutation.mutate(selectedIds);
              }
            }}
            disabled={deleteMutation.isPending}
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Delete ({selectedIds.length})
          </Button>
        )}
      />
    </DataTableWrapper>
  );
}
// FILE: src/features/admin/roles/api/useAssignPermissionToRole.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function assignPermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.post(`admin/roles/${roleId}/permissions`, {
    permissionId,
  });
  return data;
}

export function useAssignPermissionToRole(roleId: string) {
  return useApiMutation({
    mutationFn: (permissionId: string) =>
      assignPermission({ roleId, permissionId }),
    successMessage: "Permission assigned to role.",
    invalidateQueries: [["roles"], ["role", roleId]],
  });
}
// FILE: src/features/admin/roles/api/useManageRoles.ts
import { useApiResource } from "@/hooks/useApiResource";
import { RoleWithPermissions } from "@/types";

export function useManageRoles() {
  return useApiResource<RoleWithPermissions>("admin/roles", ["roles"]);
}
// FILE: src/features/admin/roles/api/useRevokePermissionFromRole.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function revokePermission({
  roleId,
  permissionId,
}: {
  roleId: string;
  permissionId: string;
}): Promise<any> {
  const { data } = await api.delete(
    `admin/roles/${roleId}/permissions/${permissionId}`
  );
  return data;
}

export function useRevokePermissionFromRole(roleId: string) {
  return useApiMutation({
    mutationFn: (permissionId: string) =>
      revokePermission({ roleId, permissionId }),
    successMessage: "Permission revoked from role.",
    invalidateQueries: [["roles"], ["role", roleId]],
  });
}
// FILE: src/features/admin/roles/components/ManageRolePermissions.tsx
import { useAssignPermissionToRole } from "../api/useAssignPermissionToRole";
import { useRevokePermissionFromRole } from "../api/useRevokePermissionFromRole";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, ChevronsUpDown, XIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";
import { AnyValue } from "@/types";
import { useManagePermissions } from "../../permissions/api/useManagePermissions";

export function ManageRolePermissions({ role }: { role: AnyValue }) {
  const { data: permissionsData, isLoading } =
    useManagePermissions().useGetAll();
  const assignMutation = useAssignPermissionToRole(role.id);
  const revokeMutation = useRevokePermissionFromRole(role.id);
  const [popoverOpen, setPopoverOpen] = useState(false);

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));
  const availablePermissions =
    permissionsData?.data?.filter(
      (permission: any) => !rolePermissionIds.has(permission.id)
    ) || [];

  return (
    <div className="space-y-2">
      <h4 className="font-semibold">Permissions</h4>
      <div className="flex min-h-[60px] flex-wrap items-center gap-1 rounded-md border p-2">
        {role.permissions.length > 0 ? (
          role.permissions.map((permission: any) => (
            <Badge key={permission.id} variant="secondary" className="pr-1">
              <span>
                {permission.action} on {permission.subject}
              </span>
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => revokeMutation.mutate(permission.id)}
                disabled={revokeMutation.isPending}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="px-2 text-sm text-muted-foreground">
            No permissions assigned.
          </p>
        )}
      </div>

      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            role="combobox"
            className="w-full justify-between"
            disabled={isLoading}
          >
            {isLoading ? "Loading..." : "Add a permission..."}
            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
          <Command>
            <CommandInput placeholder="Search permissions..." />
            <CommandList>
              <CommandEmpty>No permissions found.</CommandEmpty>
              <CommandGroup>
                {availablePermissions.map((permission: any) => (
                  <CommandItem
                    key={permission.id}
                    value={`${permission.action} ${permission.subject}`}
                    onSelect={() => {
                      assignMutation.mutate(permission.id);
                      setPopoverOpen(false);
                    }}
                  >
                    <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                    {permission.action} on {permission.subject}
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  );
}
// FILE: src/features/admin/roles/components/RoleCard.tsx
import { Badge } from "@/components/ui/badge";
import { EntityCard } from "@/components/shared/EntityCard";
import { RoleWithPermissions } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageRoles } from "../api/useManageRoles";

interface RoleCardProps {
  role: RoleWithPermissions;
  onEdit: (roleId: string) => void;
}

export function RoleCard({ role, onEdit }: RoleCardProps) {
  const { useDelete } = useManageRoles();
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${role.name}" role? This action cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit(role.id);
  };

  return (
    <EntityCard
      title={role.name}
      description={role.description || "No description."}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <div className="space-y-2">
        <div className="flex flex-wrap items-center gap-1">
          <span className="text-sm font-semibold">Permissions:</span>
          {role.permissions?.length > 0 ? (
            role.permissions.map((p) => (
              <Badge variant="outline" key={p.id}>
                {p.action} on {p.subject}
              </Badge>
            ))
          ) : (
            <span className="text-sm text-muted-foreground">None</span>
          )}
        </div>
      </div>
    </EntityCard>
  );
}
// FILE: src/features/admin/roles/components/RoleForm.tsx
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput, FormTextarea } from "@/components/shared/form/FormFields";

const roleSchema = z.object({
  name: nameSchema("Role"),
  description: descriptionSchema,
});

interface RoleFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function RoleForm({ initialData, onSuccess }: RoleFormProps) {
  const processedInitialData = initialData
    ? {
        ...initialData,
        description: initialData.description || "",
      }
    : undefined;

  return (
    <ResourceForm
      schema={roleSchema}
      resourcePath="admin/roles"
      resourceKey={["roles"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Role Name"
            placeholder="e.g., Content Manager"
          />
          <FormTextarea
            name="description"
            label="Description"
            placeholder="What this role can do"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/admin/roles/components/RoleList.tsx
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { RoleCard } from "./RoleCard";
import { RoleForm } from "./RoleForm";
import { ManageRolePermissions } from "./ManageRolePermissions";
import { useManageRoles } from "../api/useManageRoles";

export function RoleList() {
  const { useGetAll } = useManageRoles();
  const { data, isLoading, isError } = useGetAll();
  const [editingRoleId, setEditingRoleId] = useState<string | null>(null);

  if (isLoading) return <div>Loading roles...</div>;
  if (isError) return <div>Error loading roles.</div>;

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2">
        {data?.data?.map((role) => (
          <RoleCard key={role.id} role={role} onEdit={setEditingRoleId} />
        ))}
      </div>
      <ResourceCrudDialog
        resourceId={editingRoleId}
        resourcePath="admin/roles"
        resourceKey={["roles"]}
        title="Edit Role"
        description="Update role details and manage assigned permissions."
        form={RoleForm}
        isOpen={!!editingRoleId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setEditingRoleId(null);
        }}
        dialogClassName="sm:max-w-4xl"
      >
        {(role) => <ManageRolePermissions role={role} />}
      </ResourceCrudDialog>
    </>
  );
}
// FILE: src/features/admin/system-status/api/useGetSystemStatus.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getSystemStatus(): Promise<any> {
  const { data } = await api.get("status");
  return data;
}

export function useGetSystemStatus() {
  return useQuery({
    queryKey: ["systemStatus"],
    queryFn: getSystemStatus,
    refetchInterval: 15000,
  });
}
// FILE: src/features/admin/system-status/components/SystemStatusDashboard.tsx
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";
import { useGetSystemStatus } from "../api/useGetSystemStatus";

const StatusBadge = ({
  status,
}: {
  status: "ok" | "partial_outage" | "major_outage" | string;
}) => {
  const variant =
    status === "ok"
      ? "default"
      : status === "partial_outage"
        ? "secondary"
        : "destructive";
  return <Badge variant={variant}>{status}</Badge>;
};

export function SystemStatusDashboard() {
  const { data, isLoading, isError, error } = useGetSystemStatus();
  if (isLoading) {
    return <Skeleton className="h-64 w-full" />;
  }

  if (isError) {
    return (
      <div className="text-destructive">
        Failed to load system status: {error.message}
      </div>
    );
  }

  const { status, timestamp, version, metrics, dependencies } = data;
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Overall Status</span>
            <StatusBadge status={status} />
          </CardTitle>
          <CardDescription>
            Last checked: {new Date(timestamp).toLocaleString("en-US")}
          </CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 gap-4 text-sm md:grid-cols-3">
          <div>
            <strong>Version:</strong> {version.release}
          </div>
          <div>
            <strong>Commit:</strong> {version.commit.substring(0, 7)}
          </div>
          <div>
            <strong>Uptime:</strong> {metrics.uptime}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Dependencies</CardTitle>
          <CardDescription>
            Status of core application dependencies.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Service</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Response Time</TableHead>
                <TableHead>Details</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {Object.entries(dependencies).map(
                ([name, depStatus]: [string, any]) => (
                  <TableRow key={name}>
                    <TableCell className="font-medium capitalize">
                      {name}
                    </TableCell>
                    <TableCell>
                      <StatusBadge status={depStatus.status} />
                    </TableCell>
                    <TableCell>{depStatus.responseTime}</TableCell>
                    <TableCell className="text-muted-foreground text-xs">
                      {depStatus.message || "OK"}
                    </TableCell>
                  </TableRow>
                )
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
// FILE: src/features/admin/users/api/useAdminUploadAvatar.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function uploadAvatar(userId: string, formData: FormData): Promise<any> {
  const { data } = await api.patch(`admin/users/${userId}/avatar`, formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
  return data;
}

export function useAdminUploadAvatar(userId: string) {
  return useApiMutation({
    mutationFn: (formData: FormData) => uploadAvatar(userId, formData),
    successMessage: "Avatar updated successfully!",
    invalidateQueries: [["users"], ["user", userId]],
  });
}
// FILE: src/features/admin/users/api/useHardDeleteUser.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function hardDeleteUser(userId: string): Promise<void> {
  await api.delete(`admin/users/${userId}/hard`);
}

export function useHardDeleteUser() {
  return useApiMutation({
    mutationFn: hardDeleteUser,
    successMessage: "User permanently deleted.",
    invalidateQueries: [["users"]],
  });
}
// FILE: src/features/admin/users/api/useManageUsers.ts
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { ListPeopleQuery, User } from "@/types";

export function useManageUsers() {
  const resource = useApiResource<User, ListPeopleQuery>("admin/users", [
    "users",
  ]);

  const useBulkDelete = () => {
    return useApiMutation<{ count: number }, { ids: string[] }>({
      mutationFn: (variables) => api.delete("admin/users", { data: variables }),
      successMessage: (data) => `${data.count} users deactivated successfully.`,
      invalidateQueries: [["users"]],
    });
  };

  return {
    ...resource,
    useBulkDelete,
  };
}
// FILE: src/features/admin/users/api/useSetUserStatus.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface SetStatusParams {
  userId: string;
  isActive: boolean;
}

async function setUserStatus({
  userId,
  isActive,
}: SetStatusParams): Promise<any> {
  const { data } = await api.patch(`admin/users/${userId}/status`, {
    isActive,
  });
  return data;
}

export function useSetUserStatus() {
  return useApiMutation<any, SetStatusParams>({
    mutationFn: setUserStatus,
    successMessage: (data) =>
      `User ${data.person.firstName} has been ${
        data.isActive ? "activated" : "deactivated"
      }.`,
    invalidateQueries: (data) => [["users"], ["user", data.id]],
  });
}
// FILE: src/features/admin/users/components/CreateUserForm.tsx
import { z } from "zod";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import {
  FormInput,
  FormMultiSelectPopover,
} from "@/components/shared/form/FormFields";
import { useManageRoles } from "../../roles/api/useManageRoles";

const createUserSchema = z.object({
  person: z.object({
    firstName: z.string().min(1, "First name is required."),
    lastName: z.string().min(1, "Last name is required."),
    email: z.string().email("A valid email is required."),
  }),
  roles: z.array(z.string()).optional(),
});

type CreateUserFormValues = z.infer<typeof createUserSchema>;

interface CreateUserFormProps {
  onSuccess?: () => void;
  initialData?: CreateUserFormValues;
}

export function CreateUserForm({
  onSuccess,
  initialData,
}: CreateUserFormProps) {
  const { data: rolesData, isLoading: isLoadingRoles } =
    useManageRoles().useGetAll();

  const roleOptions =
    rolesData?.data.map((role: any) => ({
      id: role.id,
      name: role.name,
    })) || [];

  return (
    <ResourceForm
      schema={createUserSchema}
      resourcePath="admin/users"
      resourceKey={["users"]}
      initialData={initialData}
      onSuccess={onSuccess}
      processValues={(values) => {
        const roleNames =
          rolesData?.data
            .filter((r: any) => values.roles?.includes(r.id))
            .map((r: any) => r.name) || [];
        return { ...values, roles: roleNames };
      }}
      renderFields={() => (
        <>
          <FormInput
            name="person.firstName"
            label="First Name"
            placeholder="John"
          />
          <FormInput
            name="person.lastName"
            label="Last Name"
            placeholder="Doe"
          />
          <FormInput
            name="person.email"
            label="Email Address"
            placeholder="name@example.com"
          />
          <FormMultiSelectPopover
            name="roles"
            label="Roles"
            placeholder={isLoadingRoles ? "Loading roles..." : "Select roles"}
            options={roleOptions}
          />
        </>
      )}
    />
  );
}
// FILE: src/features/admin/users/components/ManageUserRoles.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { XIcon } from "lucide-react";
import { useState } from "react";
import { AnyValue } from "@/types";

interface ManageUserRolesProps {
  user: AnyValue;
}

export function ManageUserRoles({ user }: ManageUserRolesProps) {
  const roleResource = useApiResource("admin/roles", ["roles"]);
  const [selectedRoleId, setSelectedRoleId] = useState("");
  const { data: rolesData, isLoading: isLoadingRoles } =
    roleResource.useGetAll();

  const invalidateQueries = [["users"], ["user", user.id]];

  const assignRoleMutation = useApiMutation({
    mutationFn: (roleId: string) =>
      api.post(`admin/users/${user.id}/roles`, { roleId }),
    successMessage: "Role assigned successfully.",
    invalidateQueries,
  });

  const removeRoleMutation = useApiMutation({
    mutationFn: (roleId: string) =>
      api.delete(`admin/users/${user.id}/roles/${roleId}`),
    successMessage: "Role removed successfully.",
    invalidateQueries,
  });

  const userRoleIds =
    rolesData?.data
      .filter((r: any) => user.roles.includes(r.name))
      .map((r: any) => r.id) || [];

  const availableRoles =
    rolesData?.data.filter((role: any) => !userRoleIds.includes(role.id)) || [];

  const handleAssignRole = () => {
    if (selectedRoleId) {
      assignRoleMutation.mutate(selectedRoleId, {
        onSuccess: () => setSelectedRoleId(""),
      });
    }
  };

  return (
    <div className="space-y-4 rounded-lg border p-4">
      <h4 className="font-semibold">User Roles</h4>
      <div className="flex flex-wrap gap-2">
        {user.roles.length > 0 ? (
          user.roles.map((roleName: string) => (
            <Badge key={roleName} variant="secondary" className="pr-1">
              <span>{roleName}</span>
              <Button
                size="icon"
                variant="ghost"
                className="ml-1 h-4 w-4"
                onClick={() => {
                  const role = rolesData?.data.find(
                    (r: any) => r.name === roleName
                  );
                  if (role) removeRoleMutation.mutate(role.id);
                }}
                disabled={removeRoleMutation.isPending}
              >
                <XIcon className="h-3 w-3" />
              </Button>
            </Badge>
          ))
        ) : (
          <p className="text-muted-foreground text-sm">No roles assigned.</p>
        )}
      </div>

      <div className="flex items-center gap-2">
        <Select
          value={selectedRoleId}
          onValueChange={setSelectedRoleId}
          disabled={availableRoles.length === 0 || isLoadingRoles}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a role to add" />
          </SelectTrigger>
          <SelectContent>
            {isLoadingRoles ? (
              <SelectItem value="loading" disabled>
                Loading roles...
              </SelectItem>
            ) : (
              availableRoles.map((role: any) => (
                <SelectItem key={role.id} value={role.id}>
                  {role.name}
                </SelectItem>
              ))
            )}
          </SelectContent>
        </Select>
        <Button
          onClick={handleAssignRole}
          disabled={!selectedRoleId || assignRoleMutation.isPending}
          size="sm"
        >
          {assignRoleMutation.isPending ? "Adding..." : "Add Role"}
        </Button>
      </div>
    </div>
  );
}
// FILE: src/features/admin/users/components/UserForm.tsx
import {
  FormDatePicker,
  FormInput,
  FormMultiSelect,
  FormTextarea,
} from "@/components/shared/form/FormFields";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { useGetSkills } from "@/features/crm/api/useGetSkills";
import { phoneNumberSchema, socialLinkSchema } from "@/lib/schemas";
import { formatDateForServer, parseServerDate } from "@/lib/utils";
import { SocialProvider } from "@/types/api";
import { Button } from "@/components/ui/button";
import { FormLabel } from "@/components/ui/form";
import { Trash2 } from "lucide-react";
import { useForm, useFieldArray } from "react-hook-form";
import { z } from "zod";

const userFormSchema = z.object({
  firstName: z.string().min(1, "First name is required."),
  lastName: z.string().min(1, "Last name is required."),
  email: z.string().email(),
  biography: z.string().optional().nullable(),
  phoneNumber: phoneNumberSchema,
  birthday: z.date().nullable().optional(),
  socialLinks: z.array(socialLinkSchema).optional(),
  skillIds: z.array(z.string().uuid()).optional(),
});

type UserFormValues = z.infer<typeof userFormSchema>;

interface UserFormProps {
  initialData?: any;
  onSuccess?: () => void;
  isSelfProfile?: boolean;
}

export function UserForm({
  initialData,
  onSuccess,
  isSelfProfile = false,
}: UserFormProps) {
  const { data: skillsData, isLoading: isLoadingSkills } = useGetSkills();

  const resourcePath = isSelfProfile ? "users/me/profile" : "admin/users";
  const resourceKey = isSelfProfile ? ["profile"] : ["users"];

  const processedInitialData = initialData
    ? {
        ...initialData,
        birthday: parseServerDate(initialData.birthday),
        skillIds: initialData.skills?.map((s: any) => s.id) || [],
      }
    : undefined;

  return (
    <ResourceForm
      schema={userFormSchema}
      resourcePath={resourcePath}
      resourceKey={resourceKey}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => {
        const { email, birthday, ...submissionData } = values;
        const formattedData: any = {
          ...submissionData,
          birthday: formatDateForServer(birthday),
        };

        if (!isSelfProfile) {
          formattedData.email = email;
        }

        return formattedData;
      }}
      renderFields={(form) => (
        <UserFormFields
          form={form}
          isSelfProfile={isSelfProfile}
          skillsData={skillsData}
          isLoadingSkills={isLoadingSkills}
        />
      )}
    />
  );
}

const UserFormFields = ({
  form,
  isSelfProfile,
  skillsData,
  isLoadingSkills,
}: {
  form: ReturnType<typeof useForm<UserFormValues>>;
  isSelfProfile: boolean;
  skillsData: any[] | undefined;
  isLoadingSkills: boolean;
}) => {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "socialLinks",
  });

  return (
    <div className="w-full space-y-8">
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
        <FormInput name="firstName" label="First Name" />
        <FormInput name="lastName" label="Last Name" />
      </div>

      <FormInput
        name="email"
        label="Email Address"
        readOnly={isSelfProfile}
        disabled={isSelfProfile}
      />
      {isSelfProfile && (
        <p className="text-[0.8rem] text-muted-foreground">
          Your email address cannot be changed from this page.
        </p>
      )}
      <FormTextarea name="biography" label="Biography" />

      <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
        <FormInput name="phoneNumber" label="Phone Number" />
        <FormDatePicker name="birthday" label="Date of Birth" />
      </div>

      <FormMultiSelect
        name="skillIds"
        label="Skills"
        options={skillsData || []}
        placeholder={isLoadingSkills ? "Loading skills..." : "Select skills..."}
      />

      <div>
        <FormLabel>Social Links</FormLabel>
        <div className="mt-2 space-y-4">
          {fields.map((field, index) => (
            <div key={field.id} className="flex items-center gap-2">
              <FormInput
                name={`socialLinks.${index}.url`}
                placeholder="https://example.com/username"
                className="flex-grow"
                label={""}
              />
              <Button
                type="button"
                variant="ghost"
                size="icon"
                onClick={() => remove(index)}
              >
                <Trash2 className="h-4 w-4 text-destructive" />
              </Button>
            </div>
          ))}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() =>
              append({ provider: SocialProvider.WEBSITE, url: "" })
            }
          >
            Add Social Link
          </Button>
        </div>
      </div>
    </div>
  );
};
// FILE: src/features/admin/users/components/UserList.tsx
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { Button } from "@/components/ui/button";
import { Trash2, ShieldAlert } from "lucide-react";
import {
  DataTable,
  DataTableWrapper,
  ColumnDef,
} from "@/components/shared/DataTable";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { useSetUserStatus } from "../api/useSetUserStatus";
import { useHardDeleteUser } from "../api/useHardDeleteUser";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { UserForm } from "./UserForm";
import { ManageUserRoles } from "./ManageUserRoles";
import { ProfileAvatar } from "@/features/user-management/components/ProfileAvatar";
import { Card, CardContent } from "@/components/ui/card";
import { User } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageUsers } from "../api/useManageUsers";

export function UserList() {
  const [page, setPage] = useState(1);
  const [editingUserId, setEditingUserId] = useState<string | null>(null);
  const { useGetAll, useDelete } = useManageUsers();
  const deleteUserMutation = useDelete();
  const hardDeleteUserMutation = useHardDeleteUser();
  const setUserStatusMutation = useSetUserStatus();
  const { data, isLoading, isError } = useGetAll({ page });

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
  };

  const columns: ColumnDef<User>[] = [
    {
      accessorKey: "name",
      header: "Name",
      cell: ({ row }) => {
        const user = row.original;
        return (
          <div className="flex items-center gap-3">
            <Avatar className="h-9 w-9">
              <AvatarImage
                src={getAbsoluteUrl(user.avatarUrl)}
                alt={user.name}
              />
              <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="font-semibold">{user.name}</span>
          </div>
        );
      },
    },
    {
      accessorKey: "email",
      header: "Email",
      cell: ({ row }) => row.original.email,
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const user = row.original;
        return (
          <div className="flex items-center gap-2">
            <Switch
              checked={user.isActive}
              onCheckedChange={(isActive) =>
                setUserStatusMutation.mutate({ userId: user.id, isActive })
              }
            />
            <Badge
              variant={user.isActive ? "default" : "destructive"}
              className={cn(user.isActive ? "bg-green-500" : "")}
            >
              {user.isActive ? "Active" : "Inactive"}
            </Badge>
          </div>
        );
      },
    },
    {
      accessorKey: "roles",
      header: "Roles",
      cell: ({ row }) => {
        const user = row.original;
        return (
          <div className="flex flex-wrap gap-1">
            {user.roles.map((role: string) => (
              <Badge key={role} variant="secondary">
                {role}
              </Badge>
            ))}
          </div>
        );
      },
    },
    {
      accessorKey: "createdAt",
      header: "Created At",
      cell: ({ row }) =>
        new Date(row.original.createdAt).toLocaleDateString("en-US"),
    },
  ];

  if (isLoading) return <div>Loading users...</div>;
  if (isError) return <div>Error loading users.</div>;
  return (
    <>
      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Deactivate ${selectedIds.length} selected users?`
                  )
                ) {
                  deleteUserMutation.mutate(selectedIds);
                }
              }}
              disabled={deleteUserMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Deactivate ({selectedIds.length})
            </Button>
          )}
          onRowClick={(row) => setEditingUserId(row.id)}
          renderRowActions={(row) => (
            <ActionMenu
              onEdit={() => setEditingUserId(row.id)}
              customActions={[
                {
                  label: "Deactivate (Soft Delete)",
                  icon: Trash2,
                  className: "text-amber-600 focus:text-amber-600",
                  onClick: () => {
                    if (
                      window.confirm(
                        `Are you sure you want to deactivate user: ${row.name}?`
                      )
                    ) {
                      deleteUserMutation.mutate(row.id);
                    }
                  },
                  disabled: deleteUserMutation.isPending,
                },
                {
                  label: "Hard Delete",
                  icon: ShieldAlert,
                  className: "text-red-600 focus:text-red-600",
                  onClick: () => {
                    if (
                      window.confirm(
                        `Are you sure you want to PERMANENTLY DELETE user: ${row.name}? This action cannot be undone.`
                      )
                    ) {
                      hardDeleteUserMutation.mutate(row.id);
                    }
                  },
                  disabled: hardDeleteUserMutation.isPending,
                },
              ]}
            />
          )}
        />
      </DataTableWrapper>

      <ResourceCrudDialog
        resourceId={editingUserId}
        resourcePath="admin/users"
        resourceKey={["users"]}
        title="Edit User Profile"
        description="Modify user details and manage their roles."
        form={UserForm}
        formProps={{ isSelfProfile: false }}
        isOpen={!!editingUserId}
        onOpenChange={(isOpen) => !isOpen && setEditingUserId(null)}
        dialogClassName="sm:max-w-4xl"
      >
        {(user) => (
          <div className="space-y-6 lg:col-span-1">
            <Card>
              <CardContent className="flex flex-col items-center pt-8">
                <ProfileAvatar user={user} isSelfProfile={false} />
                <h2 className="mt-4 text-2xl font-semibold">{user?.name}</h2>
                <p className="text-muted-foreground">
                  {user?.roles.join(", ")}
                </p>
              </CardContent>
            </Card>
            <ManageUserRoles user={user} />
          </div>
        )}
      </ResourceCrudDialog>
    </>
  );
}

// FILE: src/features/admin/workflows/api/useGetWorkflowRuns.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { PaginatedResponse, WorkflowRun } from "@/types";

async function getWorkflowRuns(
  workflowId: string,
  query: any
): Promise<PaginatedResponse<WorkflowRun>> {
  const { data } = await api.get(`/admin/workflows/${workflowId}/runs`, {
    params: query,
  });
  return data;
}

export function useGetWorkflowRuns(workflowId: string, query: any) {
  return useQuery<PaginatedResponse<WorkflowRun>>({
    queryKey: ["workflow-runs", workflowId, query],
    queryFn: () => getWorkflowRuns(workflowId, query),
    enabled: !!workflowId,
  });
}
// FILE: src/features/admin/workflows/api/useManageWorkflows.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Workflow } from "@/types";

export function useManageWorkflows() {
  return useApiResource<Workflow>("admin/workflows", ["workflows"]);
}
// FILE: src/features/admin/workflows/api/useToggleWorkflow.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface ToggleParams {
  workflowId: string;
  enabled: boolean;
}

async function toggleWorkflow({
  workflowId,
  enabled,
}: ToggleParams): Promise<any> {
  const { data } = await api.post(`/admin/workflows/${workflowId}/toggle`, {
    enabled,
  });
  return data;
}

export function useToggleWorkflow() {
  return useApiMutation<any, ToggleParams>({
    mutationFn: toggleWorkflow,
    invalidateQueries: [["workflows"]],
  });
}
// FILE: src/features/admin/workflows/components/action-fields/AddCommentFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function AddCommentActionFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.content`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Comment Content</FormLabel>
          <FormControl>
            <Textarea
              placeholder="Enter the comment to add to the task..."
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/action-fields/AssignTaskFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function AssignTaskActionFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.userId`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>User ID to Assign</FormLabel>
          <FormControl>
            <Input
              placeholder="Enter the UUID of the user to assign"
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/action-fields/CreateTaskFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function CreateTaskFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.title`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Task Title</FormLabel>
          <FormControl>
            <Input placeholder="Enter the title for the new task" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/action-fields/index.ts
export * from "./AddCommentFields";
export * from "./AssignTaskFields";
export * from "./CreateTaskFields";
export * from "./SendEmailBrevoFields";
export * from "./SendTelegramMessageFields";
export * from "./SendWebhookFields";
export * from "./UpdateTaskStatusFields";

// FILE: src/features/admin/workflows/components/action-fields/SendEmailBrevoFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function SendEmailBrevoFields({ control, index }: ActionFieldProps) {
  return (
    <div className="space-y-4">
      <FormField
        control={control}
        name={`actions.${index}.config.templateId`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Brevo Template ID</FormLabel>
            <FormControl>
              <Input
                type="number"
                placeholder="e.g., 4"
                {...field}
                onChange={(e) => field.onChange(parseInt(e.target.value, 10))}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name={`actions.${index}.config.to`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Recipients (JSON)</FormLabel>
            <FormControl>
              <Textarea
                placeholder={`[{"email": "test@example.com", "name": "Test User"}]`}
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
}
// FILE: src/features/admin/workflows/components/action-fields/SendTelegramMessageFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function SendTelegramMessageFields({
  control,
  index,
}: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.message`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>Message</FormLabel>
          <FormControl>
            <Textarea
              placeholder="Enter the message to send. Markdown is supported."
              {...field}
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/action-fields/SendWebhookFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function SendWebhookFields({ control, index }: ActionFieldProps) {
  return (
    <div className="space-y-4">
      <FormField
        control={control}
        name={`actions.${index}.config.url`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Webhook URL</FormLabel>
            <FormControl>
              <Input placeholder="https://api.example.com/webhook" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
      <FormField
        control={control}
        name={`actions.${index}.config.body`}
        render={({ field }) => (
          <FormItem>
            <FormLabel>Payload Body (JSON)</FormLabel>
            <FormControl>
              <Textarea
                placeholder={`{ "content": "Task '{{task.title}}' was updated." }`}
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  );
}
// FILE: src/features/admin/workflows/components/action-fields/UpdateTaskStatusFields.tsx
import { Control } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TaskStatus } from "@/types/api";

interface ActionFieldProps {
  control: Control<any>;
  index: number;
}

export function UpdateTaskStatusFields({ control, index }: ActionFieldProps) {
  return (
    <FormField
      control={control}
      name={`actions.${index}.config.status`}
      render={({ field }) => (
        <FormItem>
          <FormLabel>New Status</FormLabel>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder="Select a new status" />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {Object.values(TaskStatus).map((status) => (
                <SelectItem key={status} value={status}>
                  {status}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/admin/workflows/components/ActionRepeater.tsx
import { Control, useWatch } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { WorkflowActionType } from "@/types/api";
import {
  UpdateTaskStatusFields,
  CreateTaskFields,
  AddCommentActionFields,
  AssignTaskActionFields,
  SendEmailBrevoFields,
  SendTelegramMessageFields,
  SendWebhookFields,
} from "./action-fields";

interface ActionRepeaterProps {
  control: Control<any>;
  index: number;
  remove: (index: number) => void;
}

const actionFieldComponents: Record<string, React.FC<any>> = {
  [WorkflowActionType.UPDATE_TASK_STATUS]: UpdateTaskStatusFields,
  [WorkflowActionType.CREATE_TASK]: CreateTaskFields,
  [WorkflowActionType.ADD_COMMENT]: AddCommentActionFields,
  [WorkflowActionType.ASSIGN_TASK]: AssignTaskActionFields,
  [WorkflowActionType.SEND_EMAIL_BREVO]: SendEmailBrevoFields,
  [WorkflowActionType.SEND_TELEGRAM_MESSAGE]: SendTelegramMessageFields,
  [WorkflowActionType.SEND_WEBHOOK]: SendWebhookFields,
};

export function ActionRepeater({
  control,
  index,
  remove,
}: ActionRepeaterProps) {
  const actionType = useWatch({
    control,
    name: `actions.${index}.type`,
  });

  const SpecificFields = actionFieldComponents[actionType as string];

  return (
    <div className="flex items-start gap-4 rounded-md border bg-slate-50 p-4">
      <div className="flex-grow space-y-4">
        <FormField
          control={control}
          name={`actions.${index}.type`}
          render={({ field }) => (
            <FormItem>
              <FormLabel>Action</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an action" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(WorkflowActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </FormItem>
          )}
        />
        {SpecificFields && <SpecificFields control={control} index={index} />}
      </div>
      <Button
        type="button"
        variant="ghost"
        size="icon"
        onClick={() => remove(index)}
        className="mt-8 shrink-0"
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}
// FILE: src/features/admin/workflows/components/WorkflowForm.tsx
import { useState } from "react";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  ActivityActionType,
  TaskStatus,
  WorkflowActionType,
} from "@/types/api";
import { ActionRepeater } from "./ActionRepeater";
import { PlusCircle } from "lucide-react";
import { z } from "zod";
import { Workflow } from "@/types";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { useFieldArray } from "react-hook-form";
import { Button } from "@/components/ui/button";

const createTaskConfigSchema = z.object({
  title: z.string().min(1),
});

const updateTaskStatusConfigSchema = z.object({
  status: z.nativeEnum(TaskStatus),
});

export const AddCommentActionConfigSchema = z.object({
  content: z.string().min(1),
});
export const AssignTaskActionConfigSchema = z.object({
  userId: z.string().uuid(),
});

export const SendTelegramMessageActionConfigSchema = z.object({
  message: z.string().min(1),
});

export const SendWebhookActionConfigSchema = z.object({
  url: z.string().url(),
  body: z.record(z.string(), z.any()),
});
export const SendEmailBrevoActionConfigSchema = z.object({
  templateId: z.number().int().positive(),
  to: z.array(z.object({ email: z.string().email(), name: z.string() })),
  params: z.record(z.string(), z.unknown()).optional(),
});

const workflowActionSchema = z.discriminatedUnion("type", [
  z.object({
    type: z.literal(WorkflowActionType.CREATE_TASK),
    config: createTaskConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.UPDATE_TASK_STATUS),
    config: updateTaskStatusConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.ADD_COMMENT),
    config: AddCommentActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.ASSIGN_TASK),
    config: AssignTaskActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.SEND_TELEGRAM_MESSAGE),
    config: SendTelegramMessageActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.SEND_WEBHOOK),
    config: SendWebhookActionConfigSchema,
    order: z.number().int().min(0),
  }),
  z.object({
    type: z.literal(WorkflowActionType.SEND_EMAIL_BREVO),
    config: SendEmailBrevoActionConfigSchema,
    order: z.number().int().min(0),
  }),
]);

const workflowSchema = z
  .object({
    name: z.string().min(1, "Workflow name is required."),
    description: z.string().optional(),
    triggerType: z.nativeEnum(ActivityActionType).optional().nullable(),
    cronExpression: z.string().optional().nullable(),
    enabled: z.boolean(),
    actions: z.array(workflowActionSchema),
  })
  .refine(
    (data) => {
      if (data.cronExpression) {
        return !data.triggerType;
      }
      return !!data.triggerType;
    },
    {
      message:
        "Either an event trigger or a CRON schedule must be defined, but not both.",
      path: ["triggerType"],
    }
  );

interface WorkflowFormProps {
  initialData?: Workflow;
  onSuccess?: () => void;
}

export function WorkflowForm({ initialData, onSuccess }: WorkflowFormProps) {
  const [triggerMode, setTriggerMode] = useState(
    initialData?.cronExpression ? "schedule" : "event"
  );

  const processedInitialData = initialData
    ? {
        ...initialData,
        description: initialData.description ?? "",
        actions: initialData.actions as any[],
      }
    : {
        name: "",
        description: "",
        triggerType: ActivityActionType.TASK_CREATED,
        cronExpression: "",
        enabled: true,
        actions: [],
      };

  return (
    <ResourceForm
      schema={workflowSchema}
      resourcePath="admin/workflows"
      resourceKey={["workflows"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => ({
        ...values,
        actions: values.actions.map((action, index) => ({
          ...action,
          order: index,
        })),
        triggerType: triggerMode === "event" ? values.triggerType : null,
        cronExpression:
          triggerMode === "schedule" ? values.cronExpression : null,
      })}
      className="space-y-6"
      renderFields={({ control }) => (
        <WorkflowFormFields
          control={control}
          triggerMode={triggerMode}
          setTriggerMode={setTriggerMode}
        />
      )}
    />
  );
}

const WorkflowFormFields = ({
  control,
  triggerMode,
  setTriggerMode,
}: {
  control: any;
  triggerMode: string;
  setTriggerMode: (mode: string) => void;
}) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name: "actions",
  });

  return (
    <>
      <FormField
        control={control}
        name="name"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Workflow Name</FormLabel>
            <FormControl>
              <Input placeholder="e.g., Notify on Task Creation" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormItem className="space-y-3">
        <FormLabel>When this happens...</FormLabel>
        <FormControl>
          <RadioGroup
            onValueChange={setTriggerMode}
            defaultValue={triggerMode}
            className="flex items-center space-x-4"
          >
            <FormItem className="flex items-center space-x-2 space-y-0">
              <FormControl>
                <RadioGroupItem value="event" />
              </FormControl>
              <FormLabel className="font-normal">An event occurs</FormLabel>
            </FormItem>
            <FormItem className="flex items-center space-x-2 space-y-0">
              <FormControl>
                <RadioGroupItem value="schedule" />
              </FormControl>
              <FormLabel className="font-normal">
                On a schedule (CRON)
              </FormLabel>
            </FormItem>
          </RadioGroup>
        </FormControl>
        <FormMessage />
      </FormItem>

      {triggerMode === "event" && (
        <FormField
          control={control}
          name="triggerType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Event</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value ?? ""}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a trigger event" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {Object.values(ActivityActionType).map((type) => (
                    <SelectItem key={type} value={type}>
                      {type.replace(/_/g, " ")}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      {triggerMode === "schedule" && (
        <FormField
          control={control}
          name="cronExpression"
          render={({ field }) => (
            <FormItem>
              <FormLabel>CRON Expression</FormLabel>
              <FormControl>
                <Input
                  placeholder="e.g., 0 2 * * *"
                  {...field}
                  value={field.value ?? ""}
                />
              </FormControl>
              <FormDescription>
                Define when this workflow will run. e.g., '0 2 * * *' for every
                day at 2 AM.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <div>
        <h3 className="mb-2 text-sm font-medium">Do this...</h3>
        <div className="space-y-4 rounded-md border p-4">
          {fields.map((field, index) => (
            <ActionRepeater
              key={field.id}
              control={control}
              index={index}
              remove={remove}
            />
          ))}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() =>
              append({
                type: WorkflowActionType.UPDATE_TASK_STATUS,
                config: { status: TaskStatus.IN_PROGRESS },
                order: fields.length,
              } as any)
            }
          >
            <PlusCircle className="mr-2 h-4 w-4" />
            Add Action
          </Button>
        </div>
        <FormField
          control={control}
          name="actions"
          render={() => <FormMessage />}
        />
      </div>
    </>
  );
};

// FILE: src/features/admin/workflows/components/WorkflowList.tsx
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Edit, Eye, Trash2, MoreHorizontal } from "lucide-react";
import { WorkflowRunsDialog } from "./WorkflowRunsDialog";
import { useToggleWorkflow } from "../api/useToggleWorkflow";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WorkflowForm } from "./WorkflowForm";
import { Workflow } from "@/types";
import { useManageWorkflows } from "../api/useManageWorkflows";

export function WorkflowList() {
  const { useGetAll, useDelete } = useManageWorkflows();
  const { data, isLoading, isError } = useGetAll();
  const [editingWorkflowId, setEditingWorkflowId] = useState<string | null>(
    null
  );
  const [viewingRunsFor, setViewingRunsFor] = useState<Workflow | null>(null);
  const toggleMutation = useToggleWorkflow();
  const deleteMutation = useDelete();

  if (isLoading) return <div>Loading workflows...</div>;
  if (isError) return <div>Error loading workflows.</div>;
  const handleDelete = (workflow: any) => {
    if (
      window.confirm(
        `Delete workflow "${workflow.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(workflow.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {data?.data.map((workflow: any) => (
          <Card key={workflow.id}>
            <CardHeader>
              <div className="flex items-start justify-between">
                <CardTitle>{workflow.name}</CardTitle>
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-muted-foreground">
                      {workflow.enabled ? "Enabled" : "Disabled"}
                    </span>
                    <Switch
                      checked={workflow.enabled}
                      onCheckedChange={(enabled) =>
                        toggleMutation.mutate({
                          workflowId: workflow.id,
                          enabled,
                        })
                      }
                    />
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 p-0"
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        onClick={() => setEditingWorkflowId(workflow.id)}
                      >
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setViewingRunsFor(workflow)}
                      >
                        <Eye className="mr-2 h-4 w-4" />
                        View Runs
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-500"
                        onClick={() => handleDelete(workflow)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-2">
              <p className="text-sm text-muted-foreground">
                {workflow.description}
              </p>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Trigger:</span>
                <Badge variant="outline">
                  {workflow.triggerType || workflow.cronExpression}
                </Badge>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <span className="font-semibold">Actions:</span>
                <div className="flex flex-wrap gap-1">
                  {workflow.actions.map((action: any) => (
                    <Badge variant="secondary" key={action.id}>
                      {action.type}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingWorkflowId}
        onOpenChange={(isOpen) => !isOpen && setEditingWorkflowId(null)}
        resourceId={editingWorkflowId}
        resourcePath="admin/workflows"
        resourceKey={["workflows"]}
        title="Edit Workflow"
        description="Modify the workflow's trigger and actions."
        form={WorkflowForm}
        dialogClassName="sm:max-w-[600px]"
      />
      <WorkflowRunsDialog
        isOpen={!!viewingRunsFor}
        workflowId={viewingRunsFor?.id ?? null}
        workflowName={viewingRunsFor?.name ?? ""}
        onOpenChange={(isOpen) => {
          if (!isOpen) {
            setViewingRunsFor(null);
          }
        }}
      />
    </>
  );
}

// FILE: src/features/admin/workflows/components/WorkflowRunDetail.tsx
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { cn } from "@/lib/utils";
import { WorkflowRun } from "@/types";
interface WorkflowRunDetailProps {
  run: WorkflowRun | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-500",
  FAILED: "bg-red-500",
  RUNNING: "bg-blue-500",
};
export function WorkflowRunDetail({
  run,
  isOpen,
  onOpenChange,
}: WorkflowRunDetailProps) {
  if (!run) return null;
  return (
    <Drawer open={isOpen} onOpenChange={onOpenChange}>
      <DrawerContent>
        <div className="mx-auto w-full max-w-2xl">
          <DrawerHeader>
            <div className="flex items-center justify-between">
              <DrawerTitle>Workflow Run: {run.id}</DrawerTitle>
              <Badge className={cn(statusColors[run.status])}>
                {run.status}
              </Badge>
            </div>
            <DrawerDescription>
              Ran at: {new Date(run.startedAt).toLocaleString("en-US")}
            </DrawerDescription>
          </DrawerHeader>
          <div className="grid grid-cols-2 gap-4 px-4 pb-4">
            <div className="space-y-2">
              <h4 className="font-semibold">Trigger Context</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.context, null, 2)}
                </pre>
              </ScrollArea>
            </div>
            <div className="space-y-2">
              <h4 className="font-semibold">Execution Logs</h4>
              <ScrollArea className="h-72 w-full rounded-md border">
                <pre className="p-4 text-xs">
                  {JSON.stringify(run.logs, null, 2)}
                </pre>
              </ScrollArea>
            </div>
          </div>
        </div>
      </DrawerContent>
    </Drawer>
  );
}
// FILE: src/features/admin/workflows/components/WorkflowRunList.tsx
import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { useGetWorkflowRuns } from "../api/useGetWorkflowRuns";
import { WorkflowRunDetail } from "./WorkflowRunDetail";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { WorkflowRun } from "@/types";
const statusColors: Record<string, string> = {
  SUCCESS: "bg-green-100 text-green-800",
  FAILED: "bg-red-100 text-red-800",
  RUNNING: "bg-blue-100 text-blue-800",
};
export function WorkflowRunList({ workflowId }: { workflowId: string }) {
  const [selectedRun, setSelectedRun] = useState<WorkflowRun | null>(null);
  const { data, isLoading, isError } = useGetWorkflowRuns(workflowId, {
    page: 1,
    limit: 50,
  });
  if (isLoading) return <div>Loading run history...</div>;
  if (isError) return <div>Error loading run history.</div>;
  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Status</TableHead>
              <TableHead>Started At</TableHead>
              <TableHead>Completed At</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data?.data.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  This workflow has not been run yet.
                </TableCell>
              </TableRow>
            ) : (
              data?.data.map((run: WorkflowRun) => (
                <TableRow key={run.id}>
                  <TableCell>
                    <Badge
                      className={cn(statusColors[run.status])}
                      variant="outline"
                    >
                      {run.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {new Date(run.startedAt).toLocaleString("en-US")}
                  </TableCell>
                  <TableCell>
                    {run.completedAt
                      ? new Date(run.completedAt).toLocaleString("en-US")
                      : "N/A"}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setSelectedRun(run)}
                    >
                      View Details
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      <WorkflowRunDetail
        isOpen={!!selectedRun}
        run={selectedRun}
        onOpenChange={(isOpen) => !isOpen && setSelectedRun(null)}
      />
    </>
  );
}
// FILE: src/features/admin/workflows/components/WorkflowRunsDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { WorkflowRunList } from "./WorkflowRunList";

interface WorkflowRunsDialogProps {
  workflowId: string | null;
  workflowName: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function WorkflowRunsDialog({
  workflowId,
  workflowName,
  isOpen,
  onOpenChange,
}: WorkflowRunsDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Run History: {workflowName}</DialogTitle>
          <DialogDescription>
            A log of all executions for this workflow.
          </DialogDescription>
        </DialogHeader>
        {workflowId && <WorkflowRunList workflowId={workflowId} />}
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/analytics/api/useGetActivities.ts
import { useApiResource } from "@/hooks/useApiResource";
import { ListTasksQuery, Activity } from "@/types";

export function useGetActivities(
  scope: {
    workspaceId?: string;
    projectId?: string;
    taskId?: string;
  },
  query: Omit<ListTasksQuery, "includeSubtasks">
) {
  const { workspaceId, projectId, taskId } = scope;
  const resourceUrl = "activities";
  const resourceKey: (string | undefined)[] = [
    "activities",
    workspaceId,
    projectId,
    taskId,
  ];

  const combinedQuery = { ...query, workspaceId, projectId, taskId };

  const resource = useApiResource<Activity, ListTasksQuery>(
    resourceUrl,
    resourceKey
  );

  return resource.useGetAll(combinedQuery);
}
// FILE: src/features/analytics/api/useGetDashboard.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getDashboard(dashboardId: string): Promise<any> {
  const url = `dashboards/${dashboardId}`;
  const { data } = await api.get(url);
  return data;
}

export function useGetDashboard(dashboardId: string) {
  return useQuery({
    queryKey: ["dashboard", dashboardId],
    queryFn: () => getDashboard(dashboardId),
    enabled: !!dashboardId,
  });
}
// FILE: src/features/analytics/api/useGetReportingData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getReportingOverview(scope?: {
  workspaceId?: string;
  projectId?: string;
}) {
  let url = "/reporting/global";
  if (scope?.projectId) {
    url = `/reporting/projects/${scope.projectId}`;
  } else if (scope?.workspaceId) {
    url = `/reporting/workspaces/${scope.workspaceId}`;
  }
  const { data } = await api.get(url);
  return data;
}

export function useGetReportingData(scope?: {
  workspaceId?: string;
  projectId?: string;
}) {
  const queryKey = [
    "reportingOverview",
    scope?.workspaceId || "global",
    scope?.projectId,
  ].filter(Boolean);

  return useQuery({
    queryKey,
    queryFn: () => getReportingOverview(scope),
  });
}
// FILE: src/features/analytics/api/useGetWidgetData.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getWidgetData({ dashboardId, widgetId }: any): Promise<any> {
  const url = `dashboards/${dashboardId}/widgets/${widgetId}/data`;
  const { data } = await api.get(url);
  return data;
}

export function useGetWidgetData(dashboardId: string, widgetId: string) {
  return useQuery({
    queryKey: ["widgetData", widgetId],
    queryFn: () => getWidgetData({ dashboardId, widgetId }),
    enabled: !!dashboardId && !!widgetId,
  });
}
// FILE: src/features/analytics/api/useManageDashboards.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Dashboard } from "@/types";

export function useManageDashboards(scope?: {
  workspaceId?: string;
  projectId?: string;
}) {
  const { resourceUrl, resourceKey } = useApiResource.constructUrlAndKey({
    scope: "dashboards",
    workspaceId: scope?.workspaceId,
    projectId: scope?.projectId,
  });

  return useApiResource<Dashboard>(resourceUrl, resourceKey);
}
// FILE: src/features/analytics/api/useManageReports.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Report } from "@/types";

type ListReportsQuery = {
  page?: number;
  limit?: number;
  sortBy?: "title" | "status" | "createdAt" | "updatedAt";
  sortOrder?: "asc" | "desc";
  search?: string;
  status?: string;
  workspaceId?: string;
  projectId?: string;
  taskId?: string;
};

export function useManageReports() {
  const resource = useApiResource<Report, ListReportsQuery>("reports", [
    "reports",
  ]);
  return resource;
}
// FILE: src/features/analytics/api/useManageWidgets.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageWidgets(dashboardId: string) {
  const resourceUrl = `dashboards/${dashboardId}/widgets`;
  const resourceKey = ["dashboard", dashboardId, "widgets"];
  const resource = useApiResource(resourceUrl, resourceKey);

  return {
    ...resource,
    resourceUrl,
    resourceKey,
  };
}
// FILE: src/features/analytics/api/useUpdateWidget.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface UpdateWidgetParams {
  dashboardId: string;
  widgetId: string;
  widgetData: any;
}

async function updateWidget(params: UpdateWidgetParams): Promise<any> {
  const { dashboardId, widgetId, widgetData } = params;
  const url = `dashboards/${dashboardId}/widgets/${widgetId}`;
  const { data } = await api.put(url, widgetData);
  return data;
}

export function useUpdateWidget(dashboardId: string) {
  return useApiMutation({
    mutationFn: (params: { widgetId: string; widgetData: any }) =>
      updateWidget({ dashboardId, ...params }),
    invalidateQueries: [["dashboard", dashboardId]],
  });
}
// FILE: src/features/analytics/components/ActivityLog.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Activity, MessageSquarePlus, SquarePlus, Trash2 } from "lucide-react";
import { AnyValue } from "@/types";
import { useGetActivities } from "../api/useGetActivities";

const activityIconMap: Record<string, React.ElementType> = {
  TASK_CREATED: SquarePlus,
  TASK_UPDATED: Activity,
  TASK_DELETED: Trash2,
  COMMENT_CREATED: MessageSquarePlus,
  DEFAULT: Activity,
};

function formatActivityDetails(activity: AnyValue): string {
  const actorName = activity.actor.name;
  switch (activity.actionType) {
    case "TASK_CREATED":
      return `${actorName} created task "${activity.details.title}"`;
    case "TASK_DELETED":
      return `${actorName} deleted task "${activity.details.title}"`;
    case "COMMENT_CREATED":
      return `${actorName} commented on a task: "${activity.details.content.substring(
        0,
        50
      )}..."`;
    case "TASK_UPDATED":
      return `${actorName} updated task "${activity.details.title}"`;
    default:
      return `${actorName} performed action: ${activity.actionType}`;
  }
}

interface ActivityLogProps {
  title?: string;
  scope: {
    workspaceId?: string;
    projectId?: string;
    taskId?: string;
  };
}

export function ActivityLog({ title = "Activity Feed", scope }: ActivityLogProps) {
  const { data, isLoading, isError } = useGetActivities(scope, {
    limit: 20,
    page: 1,
  });

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 10 }).map((_, i) => (
          <div key={i} className="flex items-center gap-4">
            <Skeleton className="h-8 w-8 rounded-full" />
            <Skeleton className="h-4 w-full" />
          </div>
        ))}
      </div>
    );
  }

  if (isError) return <div>Failed to load activity.</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {data?.data && data.data.length > 0 ? (
          data.data.map((activity: any) => {
            const Icon =
              activityIconMap[activity.actionType] || activityIconMap.DEFAULT;
            return (
              <div key={activity.id} className="flex items-start gap-4">
                <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gray-100">
                  <Icon className="h-4 w-4 text-gray-500" />
                </div>
                <div className="flex-grow">
                  <p className="text-sm">{formatActivityDetails(activity)}</p>
                  <p className="text-muted-foreground text-xs">
                    {new Date(activity.createdAt).toLocaleString("en-US")}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <p className="text-muted-foreground text-center text-sm">
            No recent activity found.
          </p>
        )}
      </CardContent>
    </Card>
  );
}
// FILE: src/features/analytics/components/BurndownChartWidget.tsx
import {
  ChartContainer,
  LineChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Line,
  ResponsiveContainer,
} from "@/components/ui/recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";

export function BurndownChartWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);
  if (isLoading) return <div>Loading...</div>;

  const payload = data?.payload;
  return (
    <ChartContainer>
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={payload?.points}
          margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="date" fontSize={12} />
          <YAxis fontSize={12} />
          <Tooltip />
          <Line
            type="monotone"
            dataKey="ideal"
            stroke="#8884d8"
            strokeDasharray="5 5"
          />
          <Line type="monotone" dataKey="actual" stroke="#82ca9d" />
        </LineChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
}
// FILE: src/features/analytics/components/config-fields/BurndownChartConfigFields.tsx
import {
  FormDatePicker,
  FormSelect,
} from "@/components/shared/form/FormFields";

export function BurndownChartConfigFields() {
  const unitOptions = [
    { value: "task_count", label: "Task Count" },
    { value: "story_points", label: "Story Points" },
  ];

  return (
    <div className="space-y-4">
      <FormDatePicker name="config.startDate" label="Start Date" />
      <FormDatePicker name="config.endDate" label="End Date" />
      <FormSelect
        name="config.unit"
        label="Unit"
        placeholder="Select unit"
        options={unitOptions}
      />
    </div>
  );
}

// FILE: src/features/analytics/components/config-fields/GoalTrackingConfigFields.tsx
import { FormSelect } from "@/components/shared/form/FormFields";
import { useManageGoals } from "@/features/project-management/api/useManageGoals";
import { useParams } from "react-router-dom";

export function GoalTrackingConfigFields() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const { data: goalsData, isLoading } = useManageGoals(
    workspaceId!,
    projectId!
  ).useGetAll();

  const goalOptions =
    goalsData?.data?.map((goal: any) => ({
      value: goal.id,
      label: goal.name,
    })) || [];

  return (
    <div className="space-y-4">
      <FormSelect
        name="config.goalId"
        label="Goal to Track"
        placeholder={isLoading ? "Loading goals..." : "Select a goal"}
        options={goalOptions}
        disabled={isLoading}
      />
    </div>
  );
}

// FILE: src/features/analytics/components/config-fields/LeadCycleTimeConfigFields.tsx
import { FormInput } from "@/components/shared/form/FormFields";

export function LeadCycleTimeConfigFields() {
  return (
    <div className="space-y-4">
      <FormInput
        name="config.title"
        label="Chart Title"
        placeholder="e.g., Task Lead Times"
      />
    </div>
  );
}

// FILE: src/features/analytics/components/config-fields/PieChartConfigFields.tsx
import { FormInput } from "@/components/shared/form/FormFields";

export function PieChartConfigFields() {
  return (
    <div className="space-y-4">
      <FormInput
        name="config.title"
        label="Chart Title"
        placeholder="e.g., Tasks by Status"
      />
    </div>
  );
}

// FILE: src/features/analytics/components/config-fields/StatsCounterConfigFields.tsx
import { FormInput, FormSelect } from "@/components/shared/form/FormFields";
import { TaskStatus } from "@/types/api";

export function StatsCounterConfigFields() {
  const statusOptions = Object.values(TaskStatus).map((status) => ({
    value: status,
    label: status,
  }));

  return (
    <div className="space-y-4">
      <FormInput
        name="config.label"
        label="Label"
        placeholder="e.g., Open Tasks"
      />
      <FormSelect
        name="config.filter.status"
        label="Task Status to Count"
        placeholder="Select a status"
        options={statusOptions}
      />
    </div>
  );
}

// FILE: src/features/analytics/components/config-fields/TaskListConfigFields.tsx
import { FormInput } from "@/components/shared/form/FormFields";

export function TaskListConfigFields() {
  return (
    <FormInput
      name="config.limit"
      label="Number of Tasks to Show"
      type="number"
      placeholder="e.g., 10"
    />
  );
}

// FILE: src/features/analytics/components/config-fields/TimeTrackingReportConfigFields.tsx
import { useFormContext } from "react-hook-form";
import {
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useParams } from "react-router-dom";
import { Check, ChevronsUpDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";

export function TimeTrackingReportConfigFields() {
  const { control } = useFormContext();
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const { data: membersData } = useGetProjectMembers(workspaceId!, projectId!);

  return (
    <FormField
      control={control}
      name="config.userIds"
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>Team Members (Optional)</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                role="combobox"
                className={cn(
                  "w-full justify-between",
                  !field.value?.length && "text-muted-foreground"
                )}
              >
                {field.value?.length
                  ? `${field.value.length} selected`
                  : "Select members..."}
                <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
              <Command>
                <CommandInput placeholder="Search members..." />
                <CommandList>
                  <CommandEmpty>No members found.</CommandEmpty>
                  <CommandGroup>
                    {membersData?.map((member: any) => (
                      <CommandItem
                        value={member.name}
                        key={member.userId}
                        onSelect={() => {
                          const selected = field.value || [];
                          const isSelected = selected.includes(member.userId);
                          field.onChange(
                            isSelected
                              ? selected.filter(
                                  (id: string) => id !== member.userId
                                )
                              : [...selected, member.userId]
                          );
                        }}
                      >
                        <Check
                          className={cn(
                            "mr-2 h-4 w-4",
                            field.value?.includes(member.userId)
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                        {member.name}
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
          <FormMessage />
        </FormItem>
      )}
    />
  );
}
// FILE: src/features/analytics/components/CreateWidgetForm.tsx
import { useState } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormSelect } from "@/components/shared/form/FormFields";
import { StatsCounterConfigFields } from "./config-fields/StatsCounterConfigFields";
import { TaskListConfigFields } from "./config-fields/TaskListConfigFields";
import { BurndownChartConfigFields } from "./config-fields/BurndownChartConfigFields";
import { TimeTrackingReportConfigFields } from "./config-fields/TimeTrackingReportConfigFields";
import { PieChartConfigFields } from "./config-fields/PieChartConfigFields";
import { GoalTrackingConfigFields } from "./config-fields/GoalTrackingConfigFields";
import { LeadCycleTimeConfigFields } from "./config-fields/LeadCycleTimeConfigFields";
import { WidgetType } from "@/types/api";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useManageWidgets } from "../api/useManageWidgets";

const widgetSchema = z.object({
  title: z.string().min(1, "Widget title is required."),
  type: z.nativeEnum(WidgetType),
  config: z.any(),
  layout: z.object({
    x: z.number(),
    y: z.number(),
    w: z.number(),
    h: z.number(),
  }),
});
type WidgetFormValues = z.infer<typeof widgetSchema>;

interface CreateWidgetFormProps {
  dashboardId: string;
  onSuccess?: () => void;
}

const configFieldsMap: Record<string, React.FC> = {
  STATS_COUNTER: StatsCounterConfigFields,
  TASK_LIST: TaskListConfigFields,
  BURNDOWN_CHART: BurndownChartConfigFields,
  TIME_TRACKING_REPORT: TimeTrackingReportConfigFields,
  PIE_CHART: PieChartConfigFields,
  GOAL_TRACKING: GoalTrackingConfigFields,
  LEAD_CYCLE_TIME_CHART: LeadCycleTimeConfigFields,
};
function getDefaultConfig(type: WidgetType) {
  switch (type) {
    case WidgetType.STATS_COUNTER:
      return { label: "", filter: {} };
    case WidgetType.TASK_LIST:
      return { limit: 10, filter: {} };
    case WidgetType.BURNDOWN_CHART:
      const today = new Date();
      const twoWeeksAgo = new Date(today);
      twoWeeksAgo.setDate(today.getDate() - 14);
      return { startDate: twoWeeksAgo, endDate: today, unit: "task_count" };
    case WidgetType.TIME_TRACKING_REPORT:
      return { userIds: [] };
    case WidgetType.PIE_CHART:
      return { title: "Tasks by Status" };
    case WidgetType.GOAL_TRACKING:
      return { goalId: "" };
    case WidgetType.LEAD_CYCLE_TIME_CHART:
      return { title: "Task Lead Times" };
    default:
      return {};
  }
}

export function CreateWidgetForm({
  dashboardId,
  onSuccess,
}: CreateWidgetFormProps) {
  const [step, setStep] = useState(1);
  const { useCreate } = useManageWidgets(dashboardId);
  const createMutation = useCreate();

  const methods = useForm<WidgetFormValues>({
    resolver: zodResolver(widgetSchema),
    defaultValues: {
      title: "",
      type: WidgetType.STATS_COUNTER,
      config: getDefaultConfig(WidgetType.STATS_COUNTER),
      layout: { x: 0, y: 0, w: 4, h: 5 },
    },
  });
  const selectedType = methods.watch("type") as string;
  const ConfigFields = configFieldsMap[selectedType];

  function handleNext() {
    methods.trigger(["title", "type"]).then((isValid) => {
      if (isValid) {
        const currentType = methods.getValues("type") as WidgetType;
        methods.setValue("config", getDefaultConfig(currentType));
        setStep(2);
      }
    });
  }

  async function onSubmit(values: WidgetFormValues) {
    await createMutation.mutateAsync(
      { ...values, dashboardId },
      {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      }
    );
  }

  const widgetTypeOptions = Object.values(WidgetType).map((type) => ({
    value: type,
    label: type.replace(/_/g, " "),
  }));

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-6">
          {step === 1 && (
            <div className="space-y-4">
              <FormInput
                name="title"
                label="Widget Title"
                placeholder="e.g., Open Tasks Counter"
              />
              <FormSelect
                name="type"
                label="Widget Type"
                placeholder="Select a widget type"
                options={widgetTypeOptions}
              />
              <Button type="button" onClick={handleNext} className="w-full">
                Next
              </Button>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-4">
              {ConfigFields && <ConfigFields />}
              <div className="flex justify-between pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setStep(1)}
                >
                  Back
                </Button>
                <Button type="submit" disabled={createMutation.isPending}>
                  {createMutation.isPending ? "Adding..." : "Add Widget"}
                </Button>
              </div>
            </div>
          )}
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/analytics/components/DashboardCard.tsx
import { CardContent } from "@/components/ui/card";
import { useManageDashboards } from "../api/useManageDashboards";
import { Dashboard } from "@/types";
import { EntityCard } from "@/components/shared/EntityCard";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface DashboardCardProps {
  dashboard: Dashboard;
  onEdit: (dashboardId: string) => void;
}

export function DashboardCard({ dashboard, onEdit }: DashboardCardProps) {
  const dashboardResource = useManageDashboards({
    workspaceId: dashboard.workspaceId ?? undefined,
    projectId: dashboard.projectId ?? undefined,
  });

  const deleteMutation = dashboardResource.useDelete();
  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${dashboard.name}" dashboard?`
      )
    ) {
      deleteMutation.mutate(dashboard.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit(dashboard.id);
  };

  const dashboardUrl =
    dashboard.projectId && dashboard.workspaceId
      ? `/workspaces/${dashboard.workspaceId}/projects/${dashboard.projectId}/dashboards/${dashboard.id}`
      : dashboard.workspaceId
        ? `/workspaces/${dashboard.workspaceId}/dashboards/${dashboard.id}`
        : `/dashboards/${dashboard.id}`;

  return (
    <EntityCard
      title={dashboard.name}
      description={dashboard.description || "No description provided."}
      linkTo={dashboardUrl}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <CardContent />
    </EntityCard>
  );
}

// FILE: src/features/analytics/components/DashboardForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/shared/form/FormFields";
import { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { useManageDashboards } from "../api/useManageDashboards";

const dashboardSchema = z.object({
  name: nameSchema("Dashboard"),
  description: descriptionSchema,
});
type DashboardFormValues = z.infer<typeof dashboardSchema>;

interface DashboardFormProps {
  scope?: {
    workspaceId?: string;
    projectId?: string;
  };
  initialData?: any;
  onSuccess?: () => void;
}

export function DashboardForm({
  scope,
  initialData,
  onSuccess,
}: DashboardFormProps) {
  const isEditMode = !!initialData;

  const dashboardResource = useManageDashboards(scope);

  const createMutation = dashboardResource.useCreate();
  const updateMutation = dashboardResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<DashboardFormValues>({
    resolver: zodResolver(dashboardSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: DashboardFormValues) {
    const payload = {
      ...values,
      ...scope,
    };
    if (isEditMode) {
      await updateMutation.mutateAsync(
        {
          id: initialData.id,
          data: { name: values.name, description: values.description },
        },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(payload, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Dashboard Name"
            placeholder="e.g. Q3 Metrics"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A summary of what this dashboard tracks"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Dashboard"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/analytics/components/DashboardList.tsx
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { useManageDashboards } from "../api/useManageDashboards";
import { DashboardCard } from "./DashboardCard";
import { DashboardForm } from "./DashboardForm";
import { Dashboard } from "@/types";

export function DashboardList(scope: {
  workspaceId?: string;
  projectId?: string;
}) {
  const dashboardResource = useManageDashboards(scope);

  const { data, isLoading, isError } = dashboardResource.useGetAll();
  const [editingDashboardId, setEditingDashboardId] = useState<string | null>(
    null
  );

  if (isLoading) return <div>Loading dashboards...</div>;
  if (isError) return <div>Error loading dashboards.</div>;
  if (!data || data.data.length === 0) {
    return (
      <p className="text-muted-foreground">
        No dashboards have been created yet. Create one to begin!
      </p>
    );
  }

  const resourceKey = scope.projectId
    ? ["dashboards", scope.projectId]
    : scope.workspaceId
      ? ["dashboards", scope.workspaceId]
      : ["dashboards", "user"];

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((dashboard: Dashboard) => (
          <DashboardCard
            dashboard={dashboard}
            key={dashboard.id}
            onEdit={() => setEditingDashboardId(dashboard.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingDashboardId}
        onOpenChange={(isOpen) => !isOpen && setEditingDashboardId(null)}
        resourceId={editingDashboardId}
        resourcePath={"dashboards"}
        resourceKey={resourceKey}
        title="Edit Dashboard"
        description="Make changes to your dashboard here. Click save when you're done."
        form={DashboardForm}
        formProps={{ scope }}
      />
    </>
  );
}
// FILE: src/features/analytics/components/GoalTrackingWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Skeleton } from "@/components/ui/skeleton";
import { Progress } from "@/components/ui/progress";
import { KeyResultType } from "@/types/api";

const formatKeyResultValue = (value: number, type: KeyResultType) => {
  switch (type) {
    case KeyResultType.PERCENTAGE:
      return `${value}%`;
    case KeyResultType.CURRENCY:
      return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(value);
    case KeyResultType.BOOLEAN:
      return value > 0 ? "Done" : "Not Done";
    default:
      return value.toLocaleString();
  }
};

export function GoalTrackingWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);

  if (isLoading) return <Skeleton className="h-full w-full" />;

  const payload = data?.payload;
  if (!payload)
    return (
      <div className="text-sm text-muted-foreground">
        Please configure this widget.
      </div>
    );

  return (
    <div className="space-y-3">
      <div className="flex items-center gap-2">
        <Progress value={payload.overallProgress} className="h-2 flex-grow" />
        <span className="text-sm font-semibold">
          {payload.overallProgress.toFixed(0)}%
        </span>
      </div>
      <div className="space-y-2">
        {payload.keyResults?.map((kr: any) => (
          <div key={kr.id} className="text-xs">
            <p className="truncate font-medium">{kr.name}</p>
            <p className="text-muted-foreground">
              {formatKeyResultValue(kr.currentValue, kr.type)} /{" "}
              {formatKeyResultValue(kr.targetValue, kr.type)}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}
// FILE: src/features/analytics/components/LeadCycleTimeChartWidget.tsx
import {
  ChartContainer,
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Bar,
  ResponsiveContainer,
} from "@/components/ui/recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";

export function LeadCycleTimeChartWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);

  if (isLoading) return <Skeleton className="h-full w-full" />;

  const payload = data?.payload;
  const chartData = (payload?.points || []).map((p: any) => ({
    ...p,
    completedDate: format(new Date(p.completedAt), "MMM d"),
  }));

  if (!chartData || chartData.length === 0) {
    return (
      <div className="flex h-full items-center justify-center">
        <p className="text-sm text-muted-foreground">
          No completed tasks in the selected range.
        </p>
      </div>
    );
  }

  return (
    <ChartContainer className="h-full w-full">
      <ResponsiveContainer>
        <BarChart
          data={chartData}
          margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis
            dataKey="completedDate"
            fontSize={12}
            tickLine={false}
            axisLine={false}
          />
          <YAxis
            fontSize={12}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value) => `${value}h`}
            label={{
              value: "Lead Time (Hours)",
              angle: -90,
              position: "insideLeft",
            }}
          />
          <Tooltip
            cursor={{ fill: "hsl(var(--muted))" }}
            contentStyle={{
              backgroundColor: "hsl(var(--popover))",
              borderColor: "hsl(var(--border))",
            }}
            formatter={(value, _name, props) => [
              `${value} hours`,
              `Task: ${props.payload.taskTitle}`,
            ]}
          />
          <Bar
            dataKey="leadTime"
            fill="hsl(var(--primary))"
            radius={[4, 4, 0, 0]}
          />
        </BarChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
}
// FILE: src/features/analytics/components/PieChartWidget.tsx
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
} from "recharts";
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Skeleton } from "@/components/ui/skeleton";

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884d8"];

export function PieChartWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);
  if (isLoading) return <Skeleton className="h-full w-full" />;
  const payload = data?.payload;
  const chartData = payload?.data || [];

  if (chartData.length === 0) {
    return (
      <div className="flex h-full items-center justify-center">
        <p className="text-sm text-muted-foreground">No data to display.</p>
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <PieChart>
        <Pie
          data={chartData}
          cx="50%"
          cy="50%"
          labelLine={false}
          outerRadius={80}
          fill="#8884d8"
          dataKey="value"
          nameKey="name"
          label={({ name, percent }) =>
            percent ? `${name}: ${(percent * 100).toFixed(0)}%` : name
          }
        >
          {chartData.map((_entry: any, index: number) => (
            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Tooltip
          contentStyle={{
            backgroundColor: "hsl(var(--popover))",
            borderColor: "hsl(var(--border))",
          }}
        />
        <Legend />
      </PieChart>
    </ResponsiveContainer>
  );
}
// FILE: src/features/analytics/components/ReportCard.tsx
import { EntityCard } from "@/components/shared/EntityCard";
import { useManageReports } from "../api/useManageReports";
import { BarChart } from "lucide-react";
import { Report } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface ReportCardProps {
  report: Report;
  onEdit: () => void;
}

export function ReportCard({ report, onEdit }: ReportCardProps) {
  const { useDelete } = useManageReports();
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the report "${report.title}"?`
      )
    ) {
      deleteMutation.mutate(report.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit();
  };

  return (
    <EntityCard
      title={report.title}
      description={report.summary || "No summary provided."}
      icon={BarChart}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <></>
    </EntityCard>
  );
}

// FILE: src/features/analytics/components/ReportForm.tsx
import { z } from "zod";
import { nameSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const reportSchema = z.object({
  title: nameSchema("Report"),
});

interface ReportFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function ReportForm({ initialData, onSuccess }: ReportFormProps) {
  return (
    <ResourceForm
      schema={reportSchema}
      resourcePath="reports"
      resourceKey={["reports"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <FormInput
          name="title"
          label="Report Title"
          placeholder="e.g., Q3 Project Velocity"
        />
      )}
    />
  );
}
// FILE: src/features/analytics/components/ReportingOverview.tsx
import { useGetReportingData } from "../api/useGetReportingData";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";

const StatCard = ({
  title,
  value,
  isLoading,
}: {
  title: string;
  value: React.ReactNode;
  isLoading: boolean;
}) => (
  <Card>
    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
    </CardHeader>
    <CardContent>
      {isLoading ? (
        <Skeleton className="h-8 w-1/2" />
      ) : (
        <div className="text-2xl font-bold">{value}</div>
      )}
    </CardContent>
  </Card>
);

interface ReportingOverviewProps {
  scope?: {
    workspaceId?: string;
    projectId?: string;
  };
}

export function ReportingOverview({ scope }: ReportingOverviewProps) {
  const { data, isLoading } = useGetReportingData(scope);

  const getTitle = () => {
    if (scope?.projectId) return "Project Overview";
    if (scope?.workspaceId) return "Workspace Overview";
    return "Global Overview";
  };

  const renderContent = () => {
    if (!data) return null;
    switch (data.__typename) {
      case "GlobalAnalyticsOverview":
        return (
          <>
            <StatCard
              title="Total Workspaces"
              value={data.totalWorkspaces}
              isLoading={isLoading}
            />
            <StatCard
              title="Total Projects"
              value={data.totalProjects}
              isLoading={isLoading}
            />
            <StatCard title="Total Users" value={data.totalUsers} isLoading={isLoading} />
            <StatCard title="Total Tasks" value={data.totalTasks} isLoading={isLoading} />
          </>
        );
      case "WorkspaceAnalyticsOverview":
        return (
          <>
            <StatCard
              title="Total Projects"
              value={data.totalProjects}
              isLoading={isLoading}
            />
            <StatCard
              title="Total Members"
              value={data.totalMembers}
              isLoading={isLoading}
            />
            <StatCard title="Total Tasks" value={data.totalTasks} isLoading={isLoading} />
            <StatCard
              title="Time Logged (Hours)"
              value={(data.totalTimeLoggedSeconds / 3600).toFixed(1)}
              isLoading={isLoading}
            />
          </>
        );
      case "ProjectAnalyticsOverview":
        return (
          <>
            <StatCard title="Total Tasks" value={data.totalTasks} isLoading={isLoading} />
            <StatCard
              title="Total Members"
              value={data.totalMembers}
              isLoading={isLoading}
            />
            <StatCard
              title="Story Points Done"
              value={`${data.storyPointsCompleted} / ${data.totalStoryPoints}`}
              isLoading={isLoading}
            />
            <StatCard
              title="Time Logged (Hours)"
              value={(data.totalTimeLoggedSeconds / 3600).toFixed(1)}
              isLoading={isLoading}
            />
          </>
        );
      default:
        return <p>No data available for this view.</p>;
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{getTitle()}</CardTitle>
      </CardHeader>
      <CardContent className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
        {renderContent()}
      </CardContent>
    </Card>
  );
}
// FILE: src/features/analytics/components/ReportList.tsx
import { useState } from "react";
import { useManageReports } from "../api/useManageReports";
import { EmptyState } from "@/components/shared/EmptyState";
import { BarChart } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { ReportForm } from "./ReportForm";
import { ReportCard } from "./ReportCard";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Skeleton key={i} className="h-36 w-full" />
    ))}
  </div>
);

export function ReportList() {
  const { useGetAll } = useManageReports();
  const { data, isLoading, isError } = useGetAll({
    sortBy: "title",
    sortOrder: "asc",
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  if (isLoading) return <ListSkeleton />;
  if (isError) return <div>Error loading reports.</div>;

  const reports = data?.data || [];

  if (reports.length === 0) {
    return (
      <EmptyState
        icon={<BarChart className="h-10 w-10" />}
        title="No Reports Found"
        description="Get started by creating your first report."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {reports.map((report: any) => (
          <ReportCard
            key={report.id}
            report={report}
            onEdit={() => setEditingId(report.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Report"
        description="Update the details of your report."
        form={ReportForm}
        resourcePath="reports"
        resourceKey={["reports"]}
        resourceId={editingId}
      />
    </>
  );
}
// FILE: src/features/analytics/components/StatsCounterWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Skeleton } from "@/components/ui/skeleton";

export function StatsCounterWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);
  if (isLoading) {
    return (
      <div className="space-y-2">
        <Skeleton className="h-8 w-1/2" />
        <Skeleton className="h-4 w-1/3" />
      </div>
    );
  }

  const payload = data?.payload;
  return (
    <>
      <div className="text-4xl font-bold">{payload?.count ?? 0}</div>
      <p className="text-xs text-muted-foreground">{payload?.label}</p>
    </>
  );
}
// FILE: src/features/analytics/components/TaskListWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";

export function TaskListWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);

  if (isLoading) {
    return (
      <div className="space-y-2">
        <Skeleton className="h-6 w-full" />
        <Skeleton className="h-6 w-full" />
        <Skeleton className="h-6 w-full" />
      </div>
    );
  }

  const payload = data?.payload;
  return (
    <div className="space-y-2">
      {payload?.tasks?.length > 0 ? (
        payload.tasks.map((task: any) => (
          <div
            key={task.id}
            className="flex items-center justify-between text-sm"
          >
            <span className="truncate pr-2">{task.title}</span>
            <Badge variant="outline">{task.status}</Badge>
          </div>
        ))
      ) : (
        <p className="text-sm text-muted-foreground">
          No tasks match criteria.
        </p>
      )}
    </div>
  );
}
// FILE: src/features/analytics/components/TimeTrackingReportWidget.tsx
import { useGetWidgetData } from "../api/useGetWidgetData";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Skeleton } from "@/components/ui/skeleton";

export function TimeTrackingReportWidget({ widget }: any) {
  const { data, isLoading } = useGetWidgetData(widget.dashboardId, widget.id);
  if (isLoading) {
    return (
      <div className="space-y-2">
        <Skeleton className="h-8 w-full" />
        <Skeleton className="h-8 w-full" />
        <Skeleton className="h-8 w-full" />
      </div>
    );
  }

  const payload = data?.payload;
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Task</TableHead>
          <TableHead className="text-right">Logged</TableHead>
          <TableHead className="text-right">Estimated</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {payload?.rows?.map((row: any) => (
          <TableRow key={row.taskId}>
            <TableCell className="max-w-xs truncate font-medium">
              {row.taskTitle}
            </TableCell>
            <TableCell className="text-right">{row.timeLogged}m</TableCell>
            <TableCell className="text-right">{row.timeEstimate}m</TableCell>
          </TableRow>
        ))}
        <TableRow className="font-bold">
          <TableCell>Total</TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeLogged}m
          </TableCell>
          <TableCell className="text-right">
            {payload?.totals?.timeEstimate}m
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}
// FILE: src/features/analytics/components/WidgetRenderer.tsx
import { StatsCounterWidget } from "./StatsCounterWidget";
import { TaskListWidget } from "./TaskListWidget";
import { BurndownChartWidget } from "./BurndownChartWidget";
import { TimeTrackingReportWidget } from "./TimeTrackingReportWidget";
import { PieChartWidget } from "./PieChartWidget";
import { GoalTrackingWidget } from "./GoalTrackingWidget";
import { LeadCycleTimeChartWidget } from "./LeadCycleTimeChartWidget";
import { WidgetWrapper } from "./WidgetWrapper";
import { WidgetType } from "@/types/api";

export function WidgetRenderer({ widget, workspaceId, projectId }: any) {
  const renderWidgetContent = () => {
    switch (widget.type) {
      case WidgetType.STATS_COUNTER:
        return (
          <StatsCounterWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.TASK_LIST:
        return (
          <TaskListWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.BURNDOWN_CHART:
        return (
          <BurndownChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.TIME_TRACKING_REPORT:
        return (
          <TimeTrackingReportWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.PIE_CHART:
        return (
          <PieChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.GOAL_TRACKING:
        return (
          <GoalTrackingWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      case WidgetType.LEAD_CYCLE_TIME_CHART:
        return (
          <LeadCycleTimeChartWidget
            widget={widget}
            workspaceId={workspaceId}
            projectId={projectId}
          />
        );
      default:
        return <div>Unknown widget type: {widget.type}</div>;
    }
  };
  return (
    <WidgetWrapper
      widget={widget}
      workspaceId={workspaceId}
      projectId={projectId}
    >
      {renderWidgetContent()}
    </WidgetWrapper>
  );
}
// FILE: src/features/analytics/components/WidgetWrapper.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Trash2 } from "lucide-react";
import { ReactNode } from "react";
import { useManageWidgets } from "../api/useManageWidgets";

interface WidgetWrapperProps {
  widget: any;
  workspaceId?: string;
  projectId?: string;
  children: ReactNode;
}

export function WidgetWrapper({ widget, children }: WidgetWrapperProps) {
  const { useDelete } = useManageWidgets(widget.dashboardId);
  const deleteMutation = useDelete();

  const handleDelete = () => {
    if (window.confirm(`Delete widget "${widget.title}"?`)) {
      deleteMutation.mutate(widget.id);
    }
  };

  return (
    <Card className="h-full">
      <CardHeader className="flex flex-row items-center justify-between p-4">
        <CardTitle className="text-base">{widget.title}</CardTitle>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem
              className="text-red-500"
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent className="p-4 pt-0">{children}</CardContent>
    </Card>
  );
}
// FILE: src/features/collaboration/api/useGetComments.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { PaginatedResponse, Comment } from "@/types";

interface CommentQuery {
  page?: number;
  limit?: number;
}

async function getComments(
  entityId: string,
  entityType: "Project" | "Task",
  query?: CommentQuery
): Promise<PaginatedResponse<Comment>> {
  const entityPath = entityType === "Project" ? "projects" : "tasks";

  const { data } = await api.get(`${entityPath}/${entityId}/comments`, {
    params: query,
  });
  return data;
}

export function useGetComments(
  entityId: string,
  entityType: "Project" | "Task",
  query?: CommentQuery
) {
  return useQuery<PaginatedResponse<Comment>>({
    queryKey: ["comments", entityId, query],
    queryFn: () => getComments(entityId, entityType, query),
    enabled: !!entityId,
  });
}
// FILE: src/features/collaboration/api/useManageChat.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";


async function getWorkspaceChannels(workspaceId: string): Promise<any[]> {
  const { data } = await api.get(`workspaces/${workspaceId}/channels`);
  return data;
}

export function useGetWorkspaceChannels(workspaceId: string) {
  return useQuery({
    queryKey: ["channels", "workspace", workspaceId],
    queryFn: () => getWorkspaceChannels(workspaceId),
    enabled: !!workspaceId,
  });
}

async function getProjectChannels(projectId: string): Promise<any[]> {
  const { data } = await api.get(`projects/${projectId}/channels`);
  return data;
}

export function useGetProjectChannels(projectId: string) {
  return useQuery({
    queryKey: ["channels", "project", projectId],
    queryFn: () => getProjectChannels(projectId),
    enabled: !!projectId,
  });
}

async function getMessages({
  channelId,
  pageParam = 1,
}: {
  channelId: string;
  pageParam?: number;
}): Promise<any> {
  const { data } = await api.get(`chats/${channelId}/messages`, {
    params: { page: pageParam, limit: 50 },
  });
  return data;
}

export function useGetMessages(channelId: string | null) {
  return useInfiniteQuery({
    queryKey: ["messages", channelId],
    queryFn: ({ pageParam }) =>
      getMessages({ channelId: channelId!, pageParam }),
    getNextPageParam: (lastPage) =>
      lastPage.page < lastPage.totalPages ? lastPage.page + 1 : undefined,
    initialPageParam: 1,
    enabled: !!channelId,
  });
}

interface CreateChannelParams {
  context: { workspaceId?: string; projectId?: string };
  channelData: { name: string; isPrivate?: boolean; memberIds?: string[] };
}

async function createChannel({
  context,
  channelData,
}: CreateChannelParams): Promise<any> {
  const url = context.workspaceId
    ? `workspaces/${context.workspaceId}/channels`
    : `projects/${context.projectId}/channels`;
  const { data } = await api.post(url, channelData);
  return data;
}

export function useCreateChannel(
  context: { workspaceId?: string; projectId?: string } = {}
) {
  const queryKey = context.workspaceId
    ? ["channels", "workspace", context.workspaceId]
    : ["channels", "project", context.projectId];

  return useApiMutation({
    mutationFn: (channelData: any) => createChannel({ context, channelData }),
    successMessage: "Channel created successfully.",
    invalidateQueries: [queryKey],
  });
}

async function sendMessage(channelId: string, content: string): Promise<any> {
  const { data } = await api.post(`chats/${channelId}/messages`, { content });
  return data;
}

export function useSendMessage(channelId: string) {
  return useApiMutation({
    mutationFn: (content: string) => sendMessage(channelId, content),
    invalidateQueries: [["messages", channelId]],
  });
}

interface MemberParams {
  channelId: string;
  userId: string;
  role?: string;
}

async function addMember({
  channelId,
  userId,
  role,
}: MemberParams): Promise<any> {
  const { data } = await api.post(`chats/${channelId}/members`, {
    userId,
    role,
  });
  return data;
}

async function removeMember({ channelId, userId }: MemberParams): Promise<any> {
  const { data } = await api.delete(`chats/${channelId}/members/${userId}`);
  return data;
}

export function useManageChannelMembers(channelId: string) {
  const invalidateQueries = [["channels"]];

  const useAddMember = () =>
    useApiMutation<any, Omit<MemberParams, "channelId">>({
      mutationFn: (params) => addMember({ channelId, ...params }),
      successMessage: "Member added to channel.",
      invalidateQueries,
    });

  const useRemoveMember = () =>
    useApiMutation<any, string>({
      mutationFn: (userId) => removeMember({ channelId, userId }),
      successMessage: "Member removed from channel.",
      invalidateQueries,
    });

  return { useAddMember, useRemoveMember };
}

// FILE: src/features/collaboration/api/useManageCommentAttachments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

type PluralEntityType = "knowledge-bases" | "whiteboards" | "publications";

interface AttachParams {
  commentId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function attachEntity(params: AttachParams): Promise<any> {
  const { commentId, entityId, plural } = params;
  const url = `comments/${commentId}/${plural}`;
  const { data } = await api.post(url, { entityId });
  return data;
}

interface DetachParams {
  commentId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function detachEntity(params: DetachParams): Promise<void> {
  const { commentId, entityId, plural } = params;
  const url = `comments/${commentId}/${plural}/${entityId}`;
  await api.delete(url);
}

export function useManageCommentAttachments(commentId: string, taskId: string) {
  const invalidateQueries = [
    ["comments", taskId],
    ["task", taskId],
  ];

  const useAttachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        attachEntity({ commentId, ...data }),
      successMessage: "Attachment added to comment.",
      invalidateQueries,
    });
  };

  const useDetachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        detachEntity({ commentId, ...data }),
      successMessage: "Attachment removed from comment.",
      invalidateQueries,
    });
  };

  return { useAttachEntity, useDetachEntity };
}
// FILE: src/features/collaboration/api/useManageComments.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Comment } from "@/types";

export function useManageComments(entityId: string) {
  const resource = useApiResource<Comment>(`comments`, ["comments", entityId]);

  return {
    useUpdate: resource.useUpdate,
    useDelete: resource.useDelete,
  };
}
// FILE: src/features/collaboration/api/useManageKnowledgeBases.ts
import { useApiResource } from "@/hooks/useApiResource";
import { KnowledgeBase } from "@/types";

interface KnowledgeBaseQuery {
  page?: number;
  limit?: number;
  search?: string;
  workspaceId?: string;
}

export function useManageKnowledgeBases() {
  const resource = useApiResource<KnowledgeBase, KnowledgeBaseQuery>(
    "knowledge-bases",
    ["knowledgeBases"]
  );
  return resource;
}
// FILE: src/features/collaboration/api/useManageKnowledgePages.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageKnowledgePages(knowledgeBaseId: string) {
  const resource = useApiResource(`knowledge-bases/${knowledgeBaseId}/pages`, [
    "knowledgePages",
    knowledgeBaseId,
  ]);
  return resource;
}
// FILE: src/features/collaboration/api/useManageWhiteboards.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Whiteboard } from "@/types";

export function useManageWhiteboards() {
  const resource = useApiResource<Whiteboard>("whiteboards", ["whiteboards"]);
  return resource;
}
// FILE: src/features/collaboration/components/ChannelList.tsx
import { useGetWorkspaceChannels } from "../api/useManageChat";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";
import { Hash } from "lucide-react";

interface ChannelListProps {
  workspaceId: string;
  selectedThreadId: string | null;
  onSelectThread: (threadId: string) => void;
}

export function ChannelList({
  workspaceId,
  selectedThreadId,
  onSelectThread,
}: ChannelListProps) {
  const { data: channels, isLoading } = useGetWorkspaceChannels(workspaceId);

  if (isLoading) {
    return (
      <div className="space-y-2 p-2">
        {Array.from({ length: 5 }).map((_, i) => (
          <Skeleton key={i} className="h-8 w-full" />
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-1 p-2">
      <h3 className="text-muted-foreground px-2 text-xs font-semibold uppercase">
        Channels
      </h3>
      {channels
        ?.filter((c) => !c.isPrivate)
        .map((channel) => (
          <button
            key={channel.id}
            onClick={() => onSelectThread(channel.id)}
            className={cn(
              "text-muted-foreground hover:bg-accent flex w-full items-center gap-2 rounded-md p-2 text-left text-sm",
              selectedThreadId === channel.id &&
                "bg-accent text-primary font-semibold"
            )}
          >
            <Hash className="h-4 w-4" />
            {channel.name}
          </button>
        ))}
    </div>
  );
}

// FILE: src/features/collaboration/components/ChatInterface.tsx
import { useState } from "react";
import { ChannelList } from "./ChannelList";
import { MessageView } from "./MessageView";
import { MessageInput } from "./MessageInput";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { Label } from "@/components/ui/label";

export function ChatInterface() {
  const [selectedThreadId, setSelectedThreadId] = useState<string | null>(null);
  const [selectedWorkspaceId, setSelectedWorkspaceId] = useState<string>("");
  const { data: workspacesData } = useGetWorkspaces();

  return (
    <div className="flex h-[calc(100vh-200px)] rounded-lg border">
      <div className="w-1/4 border-r">
        <div className="p-4">
          <h2 className="text-lg font-semibold">Channels & DMs</h2>
          <div className="mt-2 space-y-2">
            <Label>Workspace</Label>
            <Select
              value={selectedWorkspaceId}
              onValueChange={(id) => {
                setSelectedWorkspaceId(id);
                setSelectedThreadId(null);
              }}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a workspace" />
              </SelectTrigger>
              <SelectContent>
                {workspacesData?.data.map((ws) => (
                  <SelectItem key={ws.id} value={ws.id}>
                    {ws.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        {selectedWorkspaceId && (
          <ChannelList
            workspaceId={selectedWorkspaceId}
            selectedThreadId={selectedThreadId}
            onSelectThread={setSelectedThreadId}
          />
        )}
      </div>
      <div className="flex flex-1 flex-col">
        <MessageView threadId={selectedThreadId} />
        <MessageInput threadId={selectedThreadId} />
      </div>
    </div>
  );
}
// FILE: src/features/collaboration/components/CommentAttachments.tsx
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { useManageCommentAttachments } from "../api/useManageCommentAttachments";
import { getIcon } from "@/lib/icons";
import { AnyValue } from "@/types";

export function CommentAttachments({
  comment,
  taskId,
}: {
  comment: AnyValue;
  taskId: string;
}) {
  const { useDetachEntity } = useManageCommentAttachments(comment.id, taskId);
  const detachMutation = useDetachEntity();

  const handleDetach = (entityId: string, plural: any) => {
    detachMutation.mutate({ entityId, plural });
  };

  const attachments = [
    ...(comment.knowledgeBases || []).map((kb: any) => ({
      ...kb,
      type: "KnowledgeBase",
      plural: "knowledge-bases",
    })),
    ...(comment.publications || []).map((p: any) => ({
      ...p,
      type: "Publication",
      plural: "publications",
    })),
    ...(comment.whiteboards || []).map((w: any) => ({
      ...w,
      type: "Whiteboard",
      plural: "whiteboards",
    })),
  ];

  if (attachments.length === 0) {
    return null;
  }

  return (
    <div className="mt-2 space-y-2">
      <div className="flex flex-wrap items-center gap-1">
        {attachments.map((item: any) => {
          const Icon = getIcon(item.type);
          return (
            <div
              key={item.id}
              className="flex items-center justify-between rounded-md border bg-slate-50 p-1 pr-2 text-xs hover:bg-accent/50"
            >
              <div className="flex min-w-0 items-center gap-1">
                <Icon className="h-3 w-3 flex-shrink-0" />
                <span className="truncate">{item.name || item.title}</span>
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="ml-1 h-5 w-5"
                onClick={() => handleDetach(item.id, item.plural)}
              >
                <Trash2 className="h-2.5 w-2.5" />
              </Button>
            </div>
          );
        })}
      </div>
    </div>
  );
}
// FILE: src/features/collaboration/components/CommentItem.tsx
import { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { RichTextOutput } from "@/components/shared/RichTextOutput";
import { getAbsoluteUrl } from "@/lib/utils";
import { CommentAttachments } from "./CommentAttachments";
import { useManageComments } from "../api/useManageComments";
import { RichTextEditor } from "@/components/shared/RichTextEditor";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface CommentItemProps {
  comment: any;
  taskId: string;
}

export function CommentItem({ comment, taskId }: CommentItemProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState(comment.content);
  const { useUpdate, useDelete } = useManageComments(taskId);
  const updateCommentMutation = useUpdate();
  const deleteCommentMutation = useDelete();

  const handleSave = () => {
    updateCommentMutation.mutate(
      { id: comment.id, data: { content: editedContent } },
      {
        onSuccess: () => setIsEditing(false),
      }
    );
  };

  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this comment?")) {
      deleteCommentMutation.mutate(comment.id);
    }
  };

  const handleCancel = () => {
    setEditedContent(comment.content);
    setIsEditing(false);
  };

  const canEdit = true;

  return (
    <div className="flex items-start gap-3">
      <Avatar className="h-8 w-8">
        <AvatarImage src={getAbsoluteUrl(comment.author.avatarUrl)} />
        <AvatarFallback>{comment.author.name?.charAt(0)}</AvatarFallback>
      </Avatar>
      <div className="w-full">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm font-semibold">{comment.author.name}</span>
            <span className="text-xs text-muted-foreground">
              {new Date(comment.createdAt).toLocaleString("en-US")}
            </span>
          </div>
          {canEdit && !isEditing && (
            <ActionMenu
              onEdit={() => setIsEditing(true)}
              onDelete={handleDelete}
              deleteDisabled={deleteCommentMutation.isPending}
            />
          )}
        </div>
        <div className="mt-1 rounded-md bg-gray-100 p-2 text-sm">
          {isEditing ? (
            <div className="space-y-2">
              <RichTextEditor
                value={editedContent}
                onChange={setEditedContent}
              />
              <div className="flex items-center gap-2">
                <Button
                  size="sm"
                  onClick={handleSave}
                  disabled={updateCommentMutation.isPending}
                >
                  {updateCommentMutation.isPending ? "Saving..." : "Save"}
                </Button>
                <Button size="sm" variant="ghost" onClick={handleCancel}>
                  Cancel
                </Button>
              </div>
            </div>
          ) : (
            <RichTextOutput
              html={comment.content}
              className="prose prose-sm max-w-none"
            />
          )}
          {!isEditing && (
            <CommentAttachments comment={comment} taskId={taskId} />
          )}
        </div>
      </div>
    </div>
  );
}
// FILE: src/features/collaboration/components/CommentSection.tsx
import { Button } from "@/components/ui/button";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { useGetComments } from "../api/useGetComments";
import { useState, useCallback } from "react";
import { useSocketSubscription } from "@/hooks/useSocketSubscription";
import { useQueryClient } from "@tanstack/react-query";
import { CommentItem } from "./CommentItem";
import { RichTextEditor } from "@/components/shared/RichTextEditor";

export function CommentSection({ workspaceId, projectId, taskId }: any) {
  const queryClient = useQueryClient();
  const { data: commentsData, isLoading } = useGetComments(taskId, "Task");

  const addCommentMutation = useApiMutation({
    mutationFn: (content: string) =>
      api.post(`/tasks/${taskId}/comments`, {
        content,
        entityId: taskId,
        entityType: "Task",
      }),
    successMessage: "Comment posted.",
    invalidateQueries: [["comments", taskId]],
  });

  const [newComment, setNewComment] = useState("");

  const handleCommentUpdate = useCallback(
    (event: any) => {
      const { action, comment } = event.payload;
      queryClient.setQueryData(["comments", taskId], (oldData: any) => {
        if (!oldData) return oldData;
        let newComments;
        if (action === "created") {
          newComments = [comment, ...oldData.data];
        } else {
          newComments = oldData.data;
        }
        return { ...oldData, data: newComments };
      });
    },
    [queryClient, taskId]
  );

  useSocketSubscription("Project", projectId, {
    COMMENT_UPDATED: handleCommentUpdate,
  });

  const isCommentEmpty = () => {
    if (!newComment) return true;
    const cleaned = newComment.replace(/<p><\/p>/g, "").trim();
    return cleaned.length === 0;
  };

  const handleAddComment = () => {
    if (!isCommentEmpty()) {
      addCommentMutation.mutate(newComment, {
        onSuccess: () => setNewComment(""),
      });
    }
  };

  if (isLoading) return <div>Loading comments...</div>;

  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Comments</h3>
      <div className="space-y-4">
        {commentsData?.data?.map((comment: any) => (
          <CommentItem key={comment.id} comment={comment} taskId={taskId} />
        ))}
      </div>
      <div className="space-y-2">
        <RichTextEditor
          value={newComment}
          onChange={setNewComment}
          projectId={projectId}
          workspaceId={workspaceId}
        />
        <Button
          onClick={handleAddComment}
          disabled={addCommentMutation.isPending || isCommentEmpty()}
        >
          {addCommentMutation.isPending ? "Posting..." : "Post Comment"}
        </Button>
      </div>
    </div>
  );
}
// FILE: src/features/collaboration/components/KnowledgeBaseCard.tsx
import { EntityCard } from "@/components/shared/EntityCard";
import { useManageKnowledgeBases } from "../api/useManageKnowledgeBases";
import { BookOpen } from "lucide-react";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface KnowledgeBaseCardProps {
  knowledgeBase: any;
  onEdit: () => void;
}

export function KnowledgeBaseCard({
  knowledgeBase,
  onEdit,
}: KnowledgeBaseCardProps) {
  const { useDelete } = useManageKnowledgeBases();
  const deleteMutation = useDelete();
  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete "${knowledgeBase.name}"? This will delete all associated pages.`
      )
    ) {
      deleteMutation.mutate(knowledgeBase.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit();
  };
  return (
    <EntityCard
      title={knowledgeBase.name}
      description={knowledgeBase.description || "No description."}
      linkTo={`/workspaces/${knowledgeBase.workspaceId}/knowledge-bases/${knowledgeBase.id}`}
      icon={BookOpen}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <></>
    </EntityCard>
  );
}

// FILE: src/features/collaboration/components/KnowledgeBaseDetailView.tsx
import { useManageKnowledgeBases } from "../api/useManageKnowledgeBases";
import { useManageKnowledgePages } from "../api/useManageKnowledgePages";
import { Skeleton } from "@/components/ui/skeleton";
import { ErrorState } from "@/components/shared/ErrorState";
import { useState, useEffect } from "react";
import { RichTextOutput } from "@/components/shared/RichTextOutput";

function PageList({ pages, onSelectPage, selectedPageId }: any) {
  return (
    <nav className="space-y-1">
      {pages.map((page: any) => (
        <button
          key={page.id}
          onClick={() => onSelectPage(page)}
          className={`w-full rounded-md p-2 text-left text-sm ${
            selectedPageId === page.id ? "bg-accent" : "hover:bg-accent/50"
          }`}
        >
          {page.title}
        </button>
      ))}
    </nav>
  );
}

export function KnowledgeBaseDetailView({
  knowledgeBaseId,
}: {
  workspaceId: string;
  knowledgeBaseId: string;
}) {
  const [selectedPage, setSelectedPage] = useState<any | null>(null);

  const {
    data: kbData,
    isLoading: isLoadingKb,
    isError: isKbError,
  } = useManageKnowledgeBases().useGetOne(knowledgeBaseId);

  const {
    data: pagesData,
    isLoading: isLoadingPages,
    isError: isPagesError,
  } = useManageKnowledgePages(knowledgeBaseId).useGetAll();

  useEffect(() => {
    if (!selectedPage && pagesData?.data?.length) {
      setSelectedPage(pagesData.data[0]);
    }
  }, [pagesData, selectedPage]);

  const isLoading = isLoadingKb || isLoadingPages;
  const isError = isKbError || isPagesError;

  if (isLoading) {
    return (
      <div className="grid h-full grid-cols-4 gap-6">
        <div className="col-span-1">
          <Skeleton className="h-8 w-3/4" />
          <div className="mt-4 space-y-2">
            <Skeleton className="h-8 w-full" />
            <Skeleton className="h-8 w-full" />
            <Skeleton className="h-8 w-full" />
          </div>
        </div>
        <div className="col-span-3">
          <Skeleton className="h-10 w-1/2" />
          <Skeleton className="mt-4 h-64 w-full" />
        </div>
      </div>
    );
  }

  if (isError || !kbData) {
    return (
      <ErrorState
        title="Failed to load knowledge base"
        message="Please try again."
      />
    );
  }

  return (
    <div className="grid h-full grid-cols-4 gap-8">
      <div className="col-span-1 border-r pr-6">
        <h2 className="mb-4 text-xl font-bold">{kbData.name}</h2>
        <PageList
          pages={pagesData?.data || []}
          onSelectPage={setSelectedPage}
          selectedPageId={selectedPage?.id}
        />
      </div>
      <div className="col-span-3">
        {selectedPage ? (
          <article className="prose max-w-none dark:prose-invert">
            <h1>{selectedPage.title}</h1>
            <RichTextOutput html={selectedPage.content} />
          </article>
        ) : (
          <div className="flex h-full items-center justify-center">
            <p className="text-muted-foreground">
              Select a page to view its content or create a new one.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/collaboration/components/KnowledgeBaseForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/shared/form/FormFields";
import { useManageKnowledgeBases } from "../api/useManageKnowledgeBases";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";
import { nameSchema, descriptionSchema } from "@/lib/schemas";

const kbSchema = z.object({
  name: nameSchema("Knowledge base"),
  description: descriptionSchema,
});
type KBFormValues = z.infer<typeof kbSchema>;

interface KBFormProps {
  workspaceId?: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function KnowledgeBaseForm({
  workspaceId,
  initialData,
  onSuccess,
}: KBFormProps) {
  const isEditMode = !!initialData;
  const kbResource = useManageKnowledgeBases();
  const createMutation = kbResource.useCreate();
  const updateMutation = kbResource.useUpdate();
  const mutation = isEditMode ? updateMutation : createMutation;
  const methods = useForm<KBFormValues>({
    resolver: zodResolver(kbSchema),
    defaultValues: { name: "", description: "" },
  });
  useEffect(() => {
    if (isEditMode && initialData) {
      methods.reset({
        name: initialData.name,
        description: initialData.description || "",
      });
    }
  }, [initialData, isEditMode, methods]);
  async function onSubmit(values: KBFormValues) {
    const payload: any = { ...values };
    if (workspaceId) {
      payload.workspaceId = workspaceId;
    }

    if (isEditMode) {
      await updateMutation.mutateAsync(
        { id: initialData.id, data: payload },
        { onSuccess }
      );
    } else {
      await createMutation.mutateAsync(payload, {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      });
    }
  }

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Knowledge Base Name"
            placeholder="e.g., Internal Documentation"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short summary of this knowledge base"
          />
          <Button
            type="submit"
            className="w-full"
            disabled={mutation.isPending}
          >
            {mutation.isPending
              ? "Saving..."
              : isEditMode
                ? "Save Changes"
                : "Create Knowledge Base"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/collaboration/components/KnowledgeBaseList.tsx
import { useManageKnowledgeBases } from "../api/useManageKnowledgeBases";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { BookOpen } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { KnowledgeBaseCard } from "./KnowledgeBaseCard";
import { KnowledgeBaseForm } from "./KnowledgeBaseForm";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function KnowledgeBaseList({ workspaceId }: { workspaceId: string }) {
  const kbResource = useManageKnowledgeBases();
  const { data, isLoading, isError, error } = kbResource.useGetAll({
    workspaceId,
  });
  const [editingId, setEditingId] = useState<string | null>(null);

  if (isLoading) {
    return <ListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Knowledge Bases"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your knowledge bases."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<BookOpen className="h-10 w-10 text-primary" />}
        title="No Knowledge Bases Found"
        description="Get started by creating your first knowledge base using the button above."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((kb: any) => (
          <KnowledgeBaseCard
            key={kb.id}
            knowledgeBase={{ ...kb, workspaceId }}
            onEdit={() => setEditingId(kb.id)}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Knowledge Base"
        description="Make changes to your knowledge base here."
        form={KnowledgeBaseForm}
        formProps={{ workspaceId }}
        resourcePath={`knowledge-bases`}
        resourceKey={["knowledgeBases", workspaceId]}
        resourceId={editingId}
      />
    </>
  );
}
// FILE: src/features/collaboration/components/MessageInput.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useSendMessage } from "../api/useManageChat";
import { Paperclip, Send } from "lucide-react";

interface MessageInputProps {
  threadId: string | null;
}

export function MessageInput({ threadId }: MessageInputProps) {
  const [content, setContent] = useState("");
  const sendMessageMutation = useSendMessage(threadId!);

  const handleSend = () => {
    if (content.trim() && threadId) {
      sendMessageMutation.mutate(content, {
        onSuccess: () => setContent(""),
      });
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  if (!threadId) {
    return null;
  }

  return (
    <div className="border-t p-4">
      <div className="relative">
        <Textarea
          placeholder="Type a message..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
          onKeyDown={handleKeyPress}
          className="pr-20"
        />
        <div className="absolute top-1/2 right-2 flex -translate-y-1/2 items-center gap-1">
          <Button variant="ghost" size="icon">
            <Paperclip className="h-4 w-4" />
          </Button>
          <Button
            onClick={handleSend}
            size="icon"
            disabled={sendMessageMutation.isPending}
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}

// FILE: src/features/collaboration/components/MessageView.tsx
import { useGetMessages } from "../api/useManageChat";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Skeleton } from "@/components/ui/skeleton";
import { getAbsoluteUrl } from "@/lib/utils";

interface MessageViewProps {
  threadId: string | null;
}

export function MessageView({ threadId }: MessageViewProps) {
  const { data, isLoading } = useGetMessages(threadId);
  const messages = data?.pages.flatMap((page) => page.data) || [];

  if (!threadId) {
    return (
      <div className="flex flex-1 items-center justify-center p-4">
        <p className="text-muted-foreground">
          Select a conversation to start chatting.
        </p>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex-1 space-y-4 p-4">
        <Skeleton className="h-12 w-3/4" />
        <Skeleton className="h-12 w-1/2 self-end" />
        <Skeleton className="h-12 w-3/4" />
      </div>
    );
  }

  return (
    <div className="flex-1 space-y-4 overflow-y-auto p-4">
      {messages?.map((msg) => (
        <div key={msg.id} className="flex items-start gap-3">
          <Avatar>
            <AvatarImage src={getAbsoluteUrl(msg.author?.avatarUrl)} />
            <AvatarFallback>{msg.author?.name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <div>
            <p className="font-semibold">{msg.author?.name}</p>
            <div className="bg-muted mt-1 rounded-md p-2">{msg.content}</div>
          </div>
        </div>
      ))}
    </div>
  );
}

// FILE: src/features/collaboration/components/WhiteboardCard.tsx
import { EntityCard } from "@/components/shared/EntityCard";
import { useManageWhiteboards } from "../api/useManageWhiteboards";
import { LayoutDashboard } from "lucide-react";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { Whiteboard } from "@/types";

interface WhiteboardCardProps {
  whiteboard: Whiteboard;
  onEdit: () => void;
}

export function WhiteboardCard({ whiteboard, onEdit }: WhiteboardCardProps) {
  const { useDelete } = useManageWhiteboards();
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the whiteboard "${whiteboard.name}"?`
      )
    ) {
      deleteMutation.mutate(whiteboard.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit();
  };

  return (
    <EntityCard
      title={whiteboard.name}
      description={`Created: ${new Date(
        whiteboard.createdAt
      ).toLocaleDateString()}`}
      icon={LayoutDashboard}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <></>
    </EntityCard>
  );
}

// FILE: src/features/collaboration/components/WhiteboardForm.tsx
import { z } from "zod";
import { nameSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const whiteboardSchema = z.object({
  name: nameSchema("Whiteboard"),
});

interface WhiteboardFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function WhiteboardForm({
  initialData,
  onSuccess,
}: WhiteboardFormProps) {
  return (
    <ResourceForm
      schema={whiteboardSchema}
      resourcePath="whiteboards"
      resourceKey={["whiteboards"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <FormInput
          name="name"
          label="Whiteboard Name"
          placeholder="e.g., Q3 Brainstorming Session"
        />
      )}
    />
  );
}
// FILE: src/features/collaboration/components/WhiteboardList.tsx
import { useState } from "react";
import { Skeleton } from "@/components/ui/skeleton";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { Clipboard } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WhiteboardForm } from "./WhiteboardForm";
import { WhiteboardCard } from "./WhiteboardCard";
import { useManageWhiteboards } from "../api/useManageWhiteboards";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 6 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function WhiteboardList() {
  const { useGetAll } = useManageWhiteboards();
  const { data, isLoading, isError, error } = useGetAll();
  const [editingId, setEditingId] = useState<string | null>(null);

  if (isLoading) return <ListSkeleton />;
  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Whiteboards"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your whiteboards."
        }
      />
    );
  }

  const whiteboards = data?.data || [];

  if (whiteboards.length === 0) {
    return (
      <EmptyState
        icon={<Clipboard className="h-10 w-10 text-primary" />}
        title="No Whiteboards Found"
        description="Get started by creating your first whiteboard."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {whiteboards.map((wb: any) => (
          <WhiteboardCard
            key={wb.id}
            whiteboard={wb}
            onEdit={() => setEditingId(wb.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Whiteboard"
        description="Update the name of your whiteboard."
        form={WhiteboardForm}
        resourcePath="whiteboards"
        resourceKey={["whiteboards"]}
        resourceId={editingId}
      />
    </>
  );
}
// FILE: src/features/crm/api/useGetSkills.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { Skill } from "@/types";

async function getSkills(): Promise<Skill[]> {
  const { data } = await api.get("/skills");
  return data;
}

export function useGetSkills() {
  return useQuery({
    queryKey: ["skills"],
    queryFn: getSkills,
    staleTime: Infinity,
  });
}
// FILE: src/features/crm/api/useManageCrmAttachments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

type CrmEntityType = "organizations" | "people";
type PluralAttachmentType = "publications";

interface AttachParams {
  entityType: CrmEntityType;
  entityId: string;
  attachmentId: string;
  plural: PluralAttachmentType;
}

async function attachEntity({
  entityType,
  entityId,
  attachmentId,
  plural,
}: AttachParams): Promise<any> {
  const url = `${entityType}/${entityId}/${plural}`;
  const { data } = await api.post(url, { entityId: attachmentId });
  return data;
}

interface DetachParams {
  entityType: CrmEntityType;
  entityId: string;
  attachmentId: string;
  plural: PluralAttachmentType;
}

async function detachEntity({
  entityType,
  entityId,
  attachmentId,
  plural,
}: DetachParams): Promise<void> {
  const url = `${entityType}/${entityId}/${plural}/${attachmentId}`;
  await api.delete(url);
}

export function useManageCrmAttachments(
  entityType: CrmEntityType,
  entityId: string
) {
  const invalidateQueries: (string | null | undefined)[][] = [
    [entityType],
    [`${entityType.slice(0, -1)}`, entityId],
  ];

  const useAttachPublication = () => {
    return useApiMutation({
      mutationFn: (attachmentId: string) =>
        attachEntity({
          entityType,
          entityId,
          attachmentId,
          plural: "publications",
        }),
      successMessage: "Publication attached successfully.",
      invalidateQueries,
    });
  };

  const useDetachPublication = () => {
    return useApiMutation({
      mutationFn: (attachmentId: string) =>
        detachEntity({
          entityType,
          entityId,
          attachmentId,
          plural: "publications",
        }),
      successMessage: "Publication removed successfully.",
      invalidateQueries,
    });
  };

  return { useAttachPublication, useDetachPublication };
}
// FILE: src/features/crm/api/useManageDeals.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Deal } from "@/types";

export function useManageDeals() {
  const resource = useApiResource<Deal>("deals", ["deals"]);
  return resource;
}
// FILE: src/features/crm/api/useManageDealStages.ts
import { useApiResource } from "@/hooks/useApiResource";
import { DealStage } from "@/types";

type DealStageQuery = {
  projectId?: string;
};

export function useManageDealStages(projectId?: string) {
  const resource = useApiResource<DealStage, DealStageQuery>("deal-stages", [
    "dealStages",
    projectId,
  ]);

  const useGetAll = (options: { enabled?: boolean } = {}) => {
    return resource.useGetAll({ projectId, ...options });
  };

  return { ...resource, useGetAll };
}
// FILE: src/features/crm/api/useManageInteractions.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageInteractions() {
  const resource = useApiResource("interactions", ["interactions"]);
  return resource;
}
// FILE: src/features/crm/api/useManageOrganizationPeople.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface AddPersonParams {
  organizationId: string;
  personId: string;
  role?: string;
}

async function addPersonToOrganization({
  organizationId,
  personId,
  role,
}: AddPersonParams) {
  const { data } = await api.post(`organizations/${organizationId}/people`, {
    personId,
    role,
  });
  return data;
}

interface UpdatePersonParams {
  organizationId: string;
  personId: string;
  role: string;
}

async function updatePersonInOrganization({
  organizationId,
  personId,
  role,
}: UpdatePersonParams) {
  const { data } = await api.patch(
    `organizations/${organizationId}/people/${personId}`,
    {
      role,
    }
  );
  return data;
}

interface RemovePersonParams {
  organizationId: string;
  personId: string;
}

async function removePersonFromOrganization({
  organizationId,
  personId,
}: RemovePersonParams) {
  const { data } = await api.delete(
    `organizations/${organizationId}/people/${personId}`
  );
  return data;
}

export function useManageOrganizationPeople(organizationId: string) {
  const invalidateQueries = [
    ["organizations"],
    ["organization", organizationId],
    ["people"],
  ];

  const addPersonMutation = useApiMutation<
    any,
    Omit<AddPersonParams, "organizationId">
  >({
    mutationFn: (params) =>
      addPersonToOrganization({ organizationId, ...params }),
    successMessage: "Person added to organization.",
    invalidateQueries,
  });

  const updatePersonMutation = useApiMutation<
    any,
    Omit<UpdatePersonParams, "organizationId">
  >({
    mutationFn: (params) =>
      updatePersonInOrganization({ organizationId, ...params }),
    successMessage: "Person's role updated.",
    invalidateQueries,
  });

  const removePersonMutation = useApiMutation<any, string>({
    mutationFn: (personId) =>
      removePersonFromOrganization({ organizationId, personId }),
    successMessage: "Person removed from organization.",
    invalidateQueries,
  });

  return {
    addPerson: addPersonMutation.mutate,
    updatePerson: updatePersonMutation.mutate,
    removePerson: removePersonMutation.mutate,
    isLoading:
      addPersonMutation.isPending ||
      removePersonMutation.isPending ||
      updatePersonMutation.isPending,
  };
}
// FILE: src/features/crm/api/useManageOrganizations.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Organization } from "@/types";

export function useManageOrganizations() {
  const resource = useApiResource<Organization>("organizations", [
    "organizations",
  ]);
  return resource;
}
// FILE: src/features/crm/api/useManagePeople.ts
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import { ListPeopleQuery, Person } from "@/types";

export function useManagePeople() {
  const resource = useApiResource<Person, ListPeopleQuery>("people", [
    "people",
  ]);

  const useBulkDelete = () => {
    return useApiMutation<{ count: number }, { ids: string[] }>({
      mutationFn: (variables) => api.delete("people", { data: variables }),
      successMessage: (data) => `${data.count} people deleted successfully.`,
      invalidateQueries: [["people"]],
    });
  };

  return {
    ...resource,
    useBulkDelete,
  };
}
// FILE: src/features/crm/api/useUpdateDealStageOrder.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function updateDealStageOrder(
  updates: {
    id: string;
    order: number;
  }[]
): Promise<any> {
  const promises = updates.map((update) =>
    api.put(`deal-stages/${update.id}`, { order: update.order })
  );
  const results = await Promise.all(promises);
  return results.map((r) => r.data);
}

export function useUpdateDealStageOrder(projectId: string) {
  return useApiMutation({
    mutationFn: updateDealStageOrder,
    successMessage: "Deal stages reordered successfully.",
    invalidateQueries: [["dealStages", projectId]],
  });
}
// FILE: src/features/crm/components/CrmAttachments.tsx
import { useState } from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Plus, Trash2 } from "lucide-react";
import { useManageCrmAttachments } from "../api/useManageCrmAttachments";
import { useManagePublications } from "@/features/publications/api/useManagePublications";
import { getIcon } from "@/lib/icons";
import { AnyValue } from "@/types";

export function CrmAttachments({
  entity,
  entityType,
}: {
  entity: AnyValue;
  entityType: "organizations" | "people";
}) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { useAttachPublication, useDetachPublication } =
    useManageCrmAttachments(entityType, entity.id);

  const attachMutation = useAttachPublication();
  const detachMutation = useDetachPublication();

  const { data: pubsData } = useManagePublications().useGetAll();

  const handleAttach = (attachmentId: string) => {
    attachMutation.mutate(attachmentId);
    setPopoverOpen(false);
  };

  const handleDetach = (attachmentId: string) => {
    detachMutation.mutate(attachmentId);
  };

  const attachments = (entity.publications || []).map((p: any) => ({
    ...p,
    type: "Publication",
    plural: "publications",
  }));

  if (!pubsData) {
    return null;
  }

  return (
    <div className="space-y-2 px-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold text-muted-foreground">
          Attached Publications
        </h3>
        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <Plus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[250px] p-0">
            <Command>
              <CommandInput placeholder="Attach Publication..." />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup>
                  {pubsData?.data?.map((pub: any) => (
                    <CommandItem
                      key={pub.id}
                      onSelect={() => handleAttach(pub.id)}
                    >
                      {pub.title}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
      <div className="max-h-48 space-y-1 overflow-y-auto rounded-md border p-1">
        {attachments.length > 0 ? (
          attachments.map((item: any) => {
            const Icon = getIcon(item.type);
            return (
              <div
                key={item.id}
                className="flex items-center justify-between rounded-md p-2 text-sm hover:bg-accent/50"
              >
                <div className="flex min-w-0 items-center gap-2">
                  <Icon className="h-4 w-4 flex-shrink-0" />
                  <span className="truncate">{item.name || item.title}</span>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={() => handleDetach(item.id)}
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            );
          })
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No attachments.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/DealCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Deal } from "@/types";

interface DealCardProps {
  deal: Deal;
  onSelect: (dealId: string) => void;
}

export function DealCard({ deal, onSelect }: DealCardProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: deal.id,
    data: {
      type: "Deal",
      deal,
    },
  });
  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
    opacity: isDragging ? 0.5 : 1,
  };

  const currencyFormatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });
  return (
    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>
      <Card
        className="mb-2 cursor-grab active:cursor-grabbing"
        onClick={() => onSelect(deal.id)}
      >
        <CardHeader className="p-3">
          <CardTitle className="text-sm">{deal.name}</CardTitle>
          <CardDescription className="text-xs">
            {deal.organization.name}
          </CardDescription>
        </CardHeader>
        <CardContent className="flex items-center justify-between p-3 pt-0">
          <span className="text-sm font-semibold">
            {currencyFormatter.format(deal.value)}
          </span>
          <Avatar className="h-6 w-6">
            <AvatarFallback className="text-xs">
              {deal.ownerName?.charAt(0)}
            </AvatarFallback>
          </Avatar>
        </CardContent>
      </Card>
    </div>
  );
}
// FILE: src/features/crm/components/DealColumn.tsx
import { useDroppable } from "@dnd-kit/core";
import { SortableContext } from "@dnd-kit/sortable";
import { Deal, DealStage } from "@/types";
import { DealCard } from "./DealCard";

interface DealColumnProps {
  stage: DealStage;
  deals: Deal[];
  onDealSelect: (dealId: string) => void;
}

export function DealColumn({ stage, deals, onDealSelect }: DealColumnProps) {
  const { setNodeRef } = useDroppable({
    id: stage.id,
    data: {
      type: "DealStage",
      stage,
    },
  });
  const dealIds = deals.map((d) => d.id);
  const totalValue = deals.reduce((sum, deal) => sum + deal.value, 0);
  const currencyFormatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });
  return (
    <div
      ref={setNodeRef}
      className="flex w-72 shrink-0 flex-col rounded-lg bg-gray-100/60 p-2"
    >
      <div className="p-2">
        <h3 className="font-semibold text-gray-700">{stage.name}</h3>
        <p className="text-sm text-gray-500">
          {currencyFormatter.format(totalValue)} ({deals.length})
        </p>
      </div>
      <div className="flex-grow space-y-2 overflow-y-auto">
        <SortableContext items={dealIds}>
          {deals.map((deal) => (
            <DealCard key={deal.id} deal={deal} onSelect={onDealSelect} />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/DealDetailContent.tsx
import { Deal } from "@/types";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAbsoluteUrl } from "@/lib/utils";
import { Building2, User } from "lucide-react";
import { InteractionTimeline } from "./InteractionTimeline";

function InfoItem({
  icon: Icon,
  label,
  value,
  children,
}: {
  icon: React.ElementType;
  label: string;
  value?: React.ReactNode;
  children?: React.ReactNode;
}) {
  if (!value && !children) return null;
  return (
    <div className="flex items-start gap-4 p-2">
      <Icon className="text-muted-foreground mt-1 h-5 w-5 flex-shrink-0" />
      <div className="flex-1">
        <p className="text-sm font-medium">{value}</p>
        <p className="text-muted-foreground text-xs">{label}</p>
        {children}
      </div>
    </div>
  );
}

export function DealDetailContent({ deal }: { deal: Deal }) {
  const currencyFormatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  });

  return (
    <div className="space-y-6">
      <div className="space-y-2 text-center">
        <h2 className="text-2xl font-bold">{deal.name}</h2>
        <p className="text-4xl font-bold text-green-600">
          {currencyFormatter.format(deal.value)}
        </p>
        <Badge variant="secondary">{deal.stage.name}</Badge>
      </div>

      <hr />

      <div className="space-y-1">
        <InfoItem
          icon={Building2}
          label="Organization"
          value={deal.organization.name}
        />
        <InfoItem icon={User} label="Owner">
          <div className="flex items-center gap-2">
            <Avatar className="h-6 w-6">
              <AvatarImage src={getAbsoluteUrl(null)} alt={deal.ownerName} />
              <AvatarFallback>{deal.ownerName?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="text-sm font-medium">{deal.ownerName}</span>
          </div>
        </InfoItem>
      </div>
      <hr />
      <div className="px-2">
        <InteractionTimeline dealId={deal.id} />
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/DealDetailPanel.tsx
import { Sheet, SheetContent, SheetFooter } from "@/components/ui/sheet";
import { useManageDeals } from "../api/useManageDeals";
import { Skeleton } from "@/components/ui/skeleton";
import { DealDetailContent } from "./DealDetailContent";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { DealForm } from "./DealForm";
interface DealDetailPanelProps {
  dealId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex flex-col items-center gap-4 pt-4">
      <Skeleton className="h-7 w-48" />
      <Skeleton className="h-10 w-32" />
    </div>
    <hr />
    <Skeleton className="h-20 w-full" />
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-24 w-full" />
  </div>
);
export function DealDetailPanel({
  dealId,
  onOpenChange,
}: DealDetailPanelProps) {
  const dealResource = useManageDeals();
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const { data: deal, isLoading } = dealResource.useGetOne(dealId);
  const deleteMutation = dealResource.useDelete();

  const handleDelete = () => {
    if (
      deal &&
      window.confirm(`Are you sure you want to delete ${deal.name}?`)
    ) {
      deleteMutation.mutate(deal.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <>
      <Sheet open={!!dealId} onOpenChange={onOpenChange}>
        <SheetContent className="flex w-full flex-col p-0 sm:max-w-lg">
          {isLoading ? (
            <PanelSkeleton />
          ) : deal ? (
            <>
              <div className="flex-1 overflow-y-auto p-6">
                <DealDetailContent deal={deal} />
              </div>
              <SheetFooter className="bg-background mt-auto border-t p-4">
                <div className="flex w-full justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditDialogOpen(true)}
                  >
                    <Edit className="mr-2 h-4 w-4" /> Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                    disabled={deleteMutation.isPending}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    {deleteMutation.isPending ? "Deleting..." : "Delete"}
                  </Button>
                </div>
              </SheetFooter>
            </>
          ) : (
            <div className="flex h-full items-center justify-center">
              <p>Could not load deal details.</p>
            </div>
          )}
        </SheetContent>
      </Sheet>
      <ResourceCrudDialog
        isOpen={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        title="Edit Deal"
        description="Make changes to the deal's details."
        form={DealForm}
        formProps={{
          projectId: deal?.projectId,
          workspaceId: deal?.workspaceId,
        }}
        resourcePath="deals"
        resourceKey={["deals"]}
        resourceId={deal?.id}
      />
    </>
  );
}
// FILE: src/features/crm/components/DealForm.tsx
import {
  FormInput,
  FormSelect,
  FormMultiSelectPopover,
} from "@/components/shared/form/FormFields";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { useManageDealStages } from "../api/useManageDealStages";
import { useManageOrganizations } from "../api/useManageOrganizations";
import { z } from "zod";
import { requiredStringSchema } from "@/lib/schemas";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useManagePeople } from "../api/useManagePeople";

const dealSchema = z.object({
  name: requiredStringSchema("Deal name"),
  value: z.coerce
    .number()
    .positive({ message: "Value must be a positive number." }),
  stageId: z.string().uuid("A deal stage must be selected."),
  organizationId: z.string().uuid("An organization must be selected."),
  ownerId: z.string().uuid("An owner is required.").optional(),
  contactIds: z.array(z.string().uuid()).optional(),
  projectId: z.string().uuid().optional().nullable(),
});

interface DealFormProps {
  initialData?: any;
  onSuccess?: () => void;
  workspaceId: string;
  projectId?: string;
}

export function DealForm({
  initialData,
  onSuccess,
  workspaceId,
  projectId,
}: DealFormProps) {
  const { data: stagesData, isLoading: isLoadingStages } = useManageDealStages(
    projectId
  ).useGetAll({ enabled: !!projectId });
  const { data: organizationsData, isLoading: isLoadingOrganizations } =
    useManageOrganizations().useGetAll();
  const { data: membersData, isLoading: isLoadingMembers } =
    useGetProjectMembers(workspaceId, projectId!, { enabled: !!projectId });
  const { data: peopleData, isLoading: isLoadingPeople } =
    useManagePeople().useGetAll();

  const processedInitialData = initialData
    ? {
        ...initialData,
        value: initialData.value || 0,
        contactIds: initialData.contacts?.map((c: any) => c.id) || [],
        projectId:
          initialData.projectId !== undefined
            ? initialData.projectId
            : (projectId ?? null),
      }
    : {
        projectId: projectId ?? null,
        contactIds: [],
        value: 0,
      };

  return (
    <ResourceForm
      schema={dealSchema}
      resourcePath="deals"
      resourceKey={["deals"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => ({ ...values, projectId })}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Deal Name"
            placeholder="e.g., Q3 Enterprise Contract"
          />
          <FormInput
            name="value"
            label="Value ($)"
            type="number"
            placeholder="e.g., 50000"
          />
          <FormSelect
            name="organizationId"
            label="Organization"
            placeholder={
              isLoadingOrganizations ? "Loading..." : "Select an organization"
            }
            options={
              organizationsData?.data?.map((o: any) => ({
                value: o.id,
                label: o.name,
              })) || []
            }
            disabled={isLoadingOrganizations || !!initialData}
          />
          <FormSelect
            name="stageId"
            label="Stage"
            placeholder={
              !projectId
                ? "Deal stages depend on a project context"
                : isLoadingStages
                  ? "Loading..."
                  : "Select a stage"
            }
            options={
              stagesData?.data?.map((s: any) => ({
                value: s.id,
                label: s.name,
              })) || []
            }
            disabled={isLoadingStages || !projectId}
          />
          <FormSelect
            name="ownerId"
            label="Owner"
            placeholder={
              !projectId
                ? "Owners depend on a project context"
                : isLoadingMembers
                  ? "Loading..."
                  : "Select an owner"
            }
            options={
              membersData?.map((m: any) => ({
                value: m.userId,
                label: m.name,
              })) || []
            }
            disabled={isLoadingMembers || !projectId}
          />
          <FormMultiSelectPopover
            name="contactIds"
            label="Contacts"
            placeholder={isLoadingPeople ? "Loading..." : "Select contacts"}
            options={
              peopleData?.data.map((p: any) => ({
                id: p.id,
                name: `${p.firstName} ${p.lastName}`,
              })) || []
            }
          />
        </>
      )}
    />
  );
}
// FILE: src/features/crm/components/DealPipeline.tsx
import { useState, useEffect } from "react";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  DragStartEvent,
  DragOverEvent,
  closestCorners,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { Deal } from "@/types";
import { DealColumn } from "./DealColumn";
import { DealCard } from "./DealCard";
import { Skeleton } from "@/components/ui/skeleton";
import { useManageDealStages } from "../api/useManageDealStages";
import { useManageDeals } from "../api/useManageDeals";
import { arrayMove } from "@dnd-kit/sortable";

interface DealPipelineProps {
  onDealSelect: (dealId: string) => void;
  projectId?: string;
}

const PipelineSkeleton = () => (
  <div className="flex gap-4">
    {Array.from({ length: 4 }).map((_, i) => (
      <div key={i} className="w-72 shrink-0 space-y-2">
        <Skeleton className="h-8 w-1/2" />
        <Skeleton className="h-24 w-full" />
        <Skeleton className="h-24 w-full" />
      </div>
    ))}
  </div>
);

export function DealPipeline({ onDealSelect, projectId }: DealPipelineProps) {
  const [activeDeal, setActiveDeal] = useState<Deal | null>(null);
  const { data: stagesData, isLoading: isLoadingStages } = useManageDealStages(
    projectId
  ).useGetAll({ enabled: !!projectId });
  const { data: dealsData, isLoading: isLoadingDeals } =
    useManageDeals().useGetAll();
  const { useUpdate } = useManageDeals();
  const updateDealMutation = useUpdate();

  const [tasksByColumn, setTasksByColumn] = useState<Record<string, Deal[]>>(
    {}
  );

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  useEffect(() => {
    if (!stagesData?.data || !dealsData?.data) {
      setTasksByColumn({});
      return;
    }
    const grouped: Record<string, Deal[]> = {};
    stagesData.data.forEach((stage: any) => (grouped[stage.id] = []));
    dealsData.data.forEach((deal: any) => {
      if (grouped[deal.stageId]) {
        grouped[deal.stageId].push(deal);
      }
    });
    setTasksByColumn(grouped);
  }, [stagesData, dealsData]);

  const findColumnForTask = (taskId: string) => {
    return Object.keys(tasksByColumn).find((colId) =>
      tasksByColumn[colId].some((task) => task.id === taskId)
    );
  };

  const onDragStart = (event: DragStartEvent) => {
    if (event.active.data.current?.type === "Deal") {
      setActiveDeal(event.active.data.current.deal);
    }
  };

  const onDragOver = (event: DragOverEvent) => {
    const { active, over } = event;
    if (!over || !activeDeal || active.id === over.id) return;

    const sourceColumnId = findColumnForTask(active.id as string);
    const destColumnId =
      over.data.current?.type === "DealStage"
        ? (over.id as string)
        : findColumnForTask(over.id as string);

    if (!sourceColumnId || !destColumnId) return;

    if (sourceColumnId !== destColumnId) {
      setTasksByColumn((prev) => {
        const sourceItems = prev[sourceColumnId] || [];
        const destItems = prev[destColumnId] || [];

        const activeIndex = sourceItems.findIndex((t) => t.id === active.id);
        if (activeIndex === -1) return prev;

        const [movedItem] = sourceItems.splice(activeIndex, 1);

        const overIsTask = over.data.current?.type === "Deal";
        let overIndex = -1;
        if (overIsTask) {
          overIndex = destItems.findIndex((t) => t.id === over.id);
        }

        if (overIndex !== -1) {
          destItems.splice(overIndex, 0, movedItem);
        } else {
          destItems.push(movedItem);
        }

        return {
          ...prev,
          [sourceColumnId]: sourceItems,
          [destColumnId]: destItems,
        };
      });
    } else {
      setTasksByColumn((prev) => {
        const items = prev[sourceColumnId];
        const oldIndex = items.findIndex((t) => t.id === active.id);
        const newIndex = items.findIndex((t) => t.id === over.id);

        if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex) {
          return {
            ...prev,
            [sourceColumnId]: arrayMove(items, oldIndex, newIndex),
          };
        }
        return prev;
      });
    }
  };

  const onDragEnd = (event: DragEndEvent) => {
    setActiveDeal(null);
    const { active, over } = event;
    if (!over || active.id === over.id) return;

    const deal = active.data.current?.deal as Deal;
    const destColumnId =
      over.data.current?.type === "DealStage"
        ? (over.id as string)
        : findColumnForTask(over.id as string);

    if (deal && destColumnId && deal.stageId !== destColumnId) {
      updateDealMutation.mutate({
        id: deal.id,
        data: { stageId: destColumnId },
      });
    }
  };

  if (isLoadingStages || isLoadingDeals) {
    return <PipelineSkeleton />;
  }

  if (!stagesData?.data) {
    return (
      <div className="flex h-full items-center justify-center">
        <p className="text-muted-foreground">
          Could not load deal stages. Please select a project context if
          available.
        </p>
      </div>
    );
  }

  return (
    <DndContext
      sensors={sensors}
      onDragStart={onDragStart}
      onDragEnd={onDragEnd}
      onDragOver={onDragOver}
      collisionDetection={closestCorners}
    >
      <div className="flex h-[calc(100vh-250px)] gap-4 overflow-x-auto p-1">
        {stagesData?.data
          ?.sort((a: any, b: any) => a.order - b.order)
          .map((stage: any) => (
            <DealColumn
              key={stage.id}
              stage={stage}
              deals={tasksByColumn[stage.id] || []}
              onDealSelect={onDealSelect}
            />
          ))}
      </div>
      {createPortal(
        <DragOverlay>
          {activeDeal ? (
            <DealCard deal={activeDeal} onSelect={onDealSelect} />
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}
// FILE: src/features/crm/components/DealStageManager.tsx
import { useManageDealStages } from "../api/useManageDealStages";
import {
  DndContext,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { GripVertical, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useEffect, useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { z } from "zod";
import { nameSchema } from "@/lib/schemas";
import { useForm, FormProvider } from "react-hook-form";
import { Form } from "@/components/ui/form";
import { FormInput } from "@/components/shared/form/FormFields";
import { zodResolver } from "@hookform/resolvers/zod";
import { useUpdateDealStageOrder } from "../api/useUpdateDealStageOrder";
import { useParams } from "react-router-dom";

const stageSchema = z.object({ name: nameSchema("Stage") });
type StageFormValues = z.infer<typeof stageSchema>;

function StageForm({
  onSuccess,
  projectId,
  stagesCount,
}: {
  onSuccess?: () => void;
  projectId: string;
  stagesCount: number;
}) {
  const { useCreate } = useManageDealStages(projectId);
  const createMutation = useCreate();
  const methods = useForm<StageFormValues>({
    resolver: zodResolver(stageSchema),
  });

  const onSubmit = (values: StageFormValues) => {
    createMutation.mutate(
      { ...values, projectId, order: stagesCount },
      { onSuccess }
    );
  };

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="Stage Name"
            placeholder="e.g., Negotiation"
          />
          <Button type="submit" disabled={createMutation.isPending}>
            {createMutation.isPending ? "Creating..." : "Create Stage"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}

function SortableItem({ stage, onRemove, onUpdate }: any) {
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({ id: stage.id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };
  const [name, setName] = useState(stage.name);

  return (
    <div
      ref={setNodeRef}
      style={style}
      className="flex items-center gap-2 rounded-md bg-white p-2"
    >
      <span {...attributes} {...listeners} className="cursor-grab p-1">
        <GripVertical className="h-5 w-5 text-muted-foreground" />
      </span>
      <Input
        value={name}
        onChange={(e) => setName(e.target.value)}
        onBlur={() => onUpdate(stage.id, { name })}
      />
      <Button variant="ghost" size="icon" onClick={() => onRemove(stage.id)}>
        <Trash2 className="h-4 w-4 text-destructive" />
      </Button>
    </div>
  );
}

export function DealStageManager() {
  const { projectId } = useParams<{ projectId: string }>();

  if (!projectId) {
    return (
      <div className="p-4 text-center text-muted-foreground">
        Deal stages are managed within a project. Please navigate to a project's
        settings to manage its deal stages.
      </div>
    );
  }

  const { useGetAll, useDelete, useUpdate } = useManageDealStages(projectId);
  const { data, isLoading } = useGetAll();
  const deleteMutation = useDelete();
  const updateMutation = useUpdate();
  const updateOrderMutation = useUpdateDealStageOrder(projectId);
  const [stages, setStages] = useState(data?.data || []);
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  useEffect(() => {
    setStages(data?.data || []);
  }, [data]);

  const sensors = useSensors(useSensor(PointerSensor));

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (active.id !== over?.id) {
      setStages((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over!.id);
        const newOrder = arrayMove(items, oldIndex, newIndex);
        const orderUpdates = newOrder.map((stage, index) => ({
          id: stage.id,
          order: index,
        }));
        updateOrderMutation.mutate(orderUpdates);
        return newOrder;
      });
    }
  };

  if (isLoading) return <div>Loading stages...</div>;

  return (
    <div className="space-y-4">
      <div className="h-96 space-y-2 overflow-y-auto rounded-md bg-muted p-2">
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext
            items={stages.map((s) => s.id)}
            strategy={verticalListSortingStrategy}
          >
            {stages
              .sort((a, b) => a.order - b.order)
              .map((stage) => (
                <SortableItem
                  key={stage.id}
                  stage={stage}
                  onRemove={deleteMutation.mutate}
                  onUpdate={(id: string, data: { name: string }) =>
                    updateMutation.mutate({ id, data })
                  }
                />
              ))}
          </SortableContext>
        </DndContext>
      </div>
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        trigger={
          <Button onClick={() => setIsCreateOpen(true)}>Add Stage</Button>
        }
        title="Create New Deal Stage"
        description="Add a new column to your deals pipeline."
        form={StageForm}
        formProps={{ projectId, stagesCount: stages.length }}
        resourcePath="deal-stages"
        resourceKey={["dealStages", projectId]}
      />
    </div>
  );
}
// FILE: src/features/crm/components/InteractionTimeline.tsx
import { useManageInteractions } from "../api/useManageInteractions";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Mail, Phone, Users, MessageSquare } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

const interactionIcons: Record<string, React.ElementType> = {
  EMAIL: Mail,
  CALL: Phone,
  MEETING: Users,
  SOCIAL: MessageSquare,
};

export function InteractionTimeline({
  personId,
  organizationId,
  dealId,
}: {
  personId?: string;
  organizationId?: string;
  dealId?: string;
}) {
  const queryParams = { personId, organizationId, dealId };
  const { useGetAll } = useManageInteractions();
  const { data, isLoading } = useGetAll(queryParams);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Activity Timeline</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {isLoading && <Skeleton className="h-20 w-full" />}
        {data?.data?.length === 0 && (
          <p className="text-muted-foreground text-sm">
            No interactions logged yet.
          </p>
        )}
        {data?.data.map((item: any) => {
          const Icon = interactionIcons[item.type] || Mail;
          return (
            <div key={item.id} className="flex items-start gap-4">
              <Icon className="text-muted-foreground mt-1 h-5 w-5" />
              <div>
                <p className="text-sm font-medium">
                  {item.type} with {item.actor?.name || "Unknown"}
                </p>
                <p className="text-muted-foreground text-xs">
                  {new Date(item.date).toLocaleString()}
                </p>
                <p className="mt-1 text-sm">{item.notes}</p>
              </div>
            </div>
          );
        })}
      </CardContent>
    </Card>
  );
}
// FILE: src/features/crm/components/ManageOrganizationPeople.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useManageOrganizationPeople } from "../api/useManageOrganizationPeople";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Check, UserPlus, XIcon } from "lucide-react";
import { getAbsoluteUrl } from "@/lib/utils";
import { Organization, Person } from "@/types";

interface ManageOrganizationPeopleProps {
  organization: Organization;
}

export function ManageOrganizationPeople({
  organization,
}: ManageOrganizationPeopleProps) {
  const { data: peopleData, isLoading: isLoadingPeople } = useApiResource(
    "people",
    ["people"]
  ).useGetAll();
  const {
    addPerson,
    removePerson,
    isLoading: isMutating,
  } = useManageOrganizationPeople(organization.id);
  const memberIds = new Set(organization.people.map((p) => p.id));
  const availablePeople =
    peopleData?.data.filter((person: any) => !memberIds.has(person.id)) || [];
  return (
    <div className="space-y-4">
      <div>
        <h4 className="font-semibold">Team Members</h4>
        <div className="mt-2 space-y-2">
          {organization.people.length > 0 ? (
            organization.people.map((person: Person) => (
              <div
                key={person.id}
                className="flex items-center justify-between"
              >
                <div className="flex items-center gap-2">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={getAbsoluteUrl(person.avatarUrl)} />
                    <AvatarFallback>
                      {person.firstName?.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <p className="text-sm font-medium">{`${person.firstName} ${person.lastName}`}</p>
                    <p className="text-muted-foreground text-xs">
                      {person.roleInOrganization || "Member"}
                    </p>
                  </div>
                </div>
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-6 w-6"
                  onClick={() => removePerson(person.id)}
                  disabled={isMutating}
                >
                  <XIcon className="h-4 w-4" />
                </Button>
              </div>
            ))
          ) : (
            <p className="text-muted-foreground text-sm">
              No people linked to this organization.
            </p>
          )}
        </div>
      </div>

      <div>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              className="w-full"
              disabled={isLoadingPeople}
            >
              <UserPlus className="mr-2 h-4 w-4" />
              Add Person
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
            <Command>
              <CommandInput placeholder="Search people..." />
              <CommandList>
                <CommandEmpty>No people found.</CommandEmpty>
                <CommandGroup>
                  {availablePeople.map((person: any) => (
                    <CommandItem
                      value={`${person.firstName} ${person.lastName}`}
                      key={person.id}
                      onSelect={() => {
                        addPerson({ personId: person.id });
                      }}
                    >
                      <Check className="mr-2 h-4 w-4 opacity-0" />
                      {`${person.firstName} ${person.lastName}`}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/OrganizationCard.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Organization } from "@/types";

interface OrganizationCardProps {
  organization: Organization;
  onSelect: () => void;
}

export function OrganizationCard({
  organization,
  onSelect,
}: OrganizationCardProps) {
  return (
    <Card
      className="cursor-pointer transition-colors hover:border-primary"
      onClick={onSelect}
    >
      <CardHeader className="flex flex-row items-center gap-4">
        <Avatar className="h-12 w-12">
          <AvatarFallback>{organization.name?.charAt(0)}</AvatarFallback>
        </Avatar>
        <div className="flex-1">
          <CardTitle className="text-base">{organization.name}</CardTitle>
          <CardDescription className="text-xs">
            {organization.domain}
          </CardDescription>
        </div>
      </CardHeader>
      <CardContent>
        <p className="truncate text-sm text-muted-foreground">
          {organization.description || "No description."}
        </p>
      </CardContent>
    </Card>
  );
}
// FILE: src/features/crm/components/OrganizationDetailContent.tsx
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Globe } from "lucide-react";
import { RichTextOutput } from "@/components/shared/RichTextOutput";
import { Organization } from "@/types";
import { ManageOrganizationPeople } from "./ManageOrganizationPeople";
import { InteractionTimeline } from "./InteractionTimeline";
import { CrmAttachments } from "./CrmAttachments";

function InfoItem({
  icon: Icon,
  label,
  value,
  href,
}: {
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  href?: string;
}) {
  if (!value) return null;
  const content = (
    <div className="flex items-start gap-4">
      <Icon className="mt-1 h-5 w-5 flex-shrink-0 text-muted-foreground" />
      <div className="flex-1">
        <p className="text-sm font-medium">{value}</p>
        <p className="text-xs text-muted-foreground">{label}</p>
      </div>
    </div>
  );
  if (href) {
    return (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="block rounded-md p-2 transition-colors hover:bg-accent"
      >
        {content}
      </a>
    );
  }

  return <div className="p-2">{content}</div>;
}

export function OrganizationDetailContent({
  organization,
}: {
  organization: Organization;
}) {
  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center space-y-2 text-center">
        <Avatar className="h-24 w-24 border">
          <AvatarFallback className="text-4xl">
            {organization.name?.charAt(0)}
          </AvatarFallback>
        </Avatar>
        <div>
          <h2 className="text-2xl font-bold">{organization.name}</h2>
          <p className="text-sm text-muted-foreground">{organization.domain}</p>
        </div>
      </div>

      <hr />

      {organization.description && (
        <>
          <div className="space-y-2 px-2">
            <h3 className="text-sm font-semibold text-muted-foreground">
              About
            </h3>
            <div className="prose prose-sm max-w-none dark:prose-invert">
              <RichTextOutput html={organization.description} />
            </div>
          </div>
          <hr />
        </>
      )}

      <div className="space-y-4">
        <h3 className="px-2 text-sm font-semibold text-muted-foreground">
          Details
        </h3>
        <div className="space-y-1">
          <InfoItem
            icon={Globe}
            label="Website"
            value={organization.domain}
            href={
              organization.domain ? `https://${organization.domain}` : undefined
            }
          />
        </div>
      </div>
      <hr />

      <div className="px-2">
        <ManageOrganizationPeople organization={organization} />
      </div>
      <hr />
      <CrmAttachments entity={organization} entityType="organizations" />
      <hr />
      <div className="px-2">
        <InteractionTimeline organizationId={organization.id} />
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/OrganizationDetailPanel.tsx
import { Sheet, SheetContent, SheetFooter } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { OrganizationForm } from "./OrganizationForm";
import { OrganizationDetailContent } from "./OrganizationDetailContent";
import { useManageOrganizations } from "../api/useManageOrganizations";

interface OrganizationDetailPanelProps {
  organizationId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex flex-col items-center gap-4 pt-4">
      <Skeleton className="h-24 w-24 rounded-full" />
      <div className="w-full space-y-2">
        <Skeleton className="mx-auto h-7 w-48" />
        <Skeleton className="mx-auto h-4 w-32" />
      </div>
    </div>
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-20 w-full" />
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-12 w-full" />
  </div>
);
export function OrganizationDetailPanel({
  organizationId,
  onOpenChange,
}: OrganizationDetailPanelProps) {
  const { useGetOne, useDelete } = useManageOrganizations();
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const { data: organization, isLoading } = useGetOne(organizationId);
  const deleteMutation = useDelete();
  const handleDelete = () => {
    if (
      organization &&
      window.confirm(`Are you sure you want to delete ${organization.name}?`)
    ) {
      deleteMutation.mutate(organization.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <>
      <Sheet open={!!organizationId} onOpenChange={onOpenChange}>
        <SheetContent className="flex w-full flex-col p-0 sm:max-w-lg">
          {isLoading ? (
            <PanelSkeleton />
          ) : organization ? (
            <>
              <div className="flex-1 overflow-y-auto p-6">
                <OrganizationDetailContent organization={organization} />
              </div>
              <SheetFooter className="mt-auto border-t bg-background p-4">
                <div className="flex w-full justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditDialogOpen(true)}
                  >
                    <Edit className="mr-2 h-4 w-4" /> Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                    disabled={deleteMutation.isPending}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    {deleteMutation.isPending ? "Deleting..." : "Delete"}
                  </Button>
                </div>
              </SheetFooter>
            </>
          ) : (
            <div className="flex h-full items-center justify-center">
              <p>Could not load organization details.</p>
            </div>
          )}
        </SheetContent>
      </Sheet>
      <ResourceCrudDialog
        isOpen={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        title="Edit Organization"
        description="Make changes to the organization's details."
        form={OrganizationForm}
        resourcePath="organizations"
        resourceKey={["organizations"]}
        resourceId={organization?.id}
      />
    </>
  );
}
// FILE: src/features/crm/components/OrganizationForm.tsx
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput, FormTextarea } from "@/components/shared/form/FormFields";

const organizationSchema = z.object({
  name: nameSchema("Organization name"),
  description: descriptionSchema,
  domain: z.string().optional().nullable(),
  logoUrl: z.string().url().optional().nullable(),
});

interface OrganizationFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function OrganizationForm({
  initialData,
  onSuccess,
}: OrganizationFormProps) {
  return (
    <ResourceForm
      schema={organizationSchema}
      resourcePath="organizations"
      resourceKey={["organizations"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Organization Name"
            placeholder="Acme Inc."
          />
          <FormInput
            name="domain"
            label="Website Domain (Optional)"
            placeholder="acme.com"
          />
          <FormTextarea
            name="description"
            label="Description (Optional)"
            placeholder="A short summary of the organization"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/crm/components/OrganizationList.tsx
import { EmptyState } from "@/components/shared/EmptyState";
import { Building2 } from "lucide-react";
import { OrganizationCard } from "./OrganizationCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Organization } from "@/types";
import { useManageOrganizations } from "../api/useManageOrganizations";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
    {Array.from({ length: 4 }).map((_, i) => (
      <Skeleton key={i} className="h-36 w-full" />
    ))}
  </div>
);

export function OrganizationList({
  onOrganizationSelect,
}: {
  onOrganizationSelect: (id: string) => void;
}) {
  const { useGetAll } = useManageOrganizations();
  const { data, isLoading } = useGetAll();

  if (isLoading) return <ListSkeleton />;

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Building2 className="h-10 w-10" />}
        title="No Organizations Found"
        description="Get started by creating your first organization."
      />
    );
  }

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {data.data.map((organization: Organization) => (
        <OrganizationCard
          key={organization.id}
          organization={organization}
          onSelect={() => onOrganizationSelect(organization.id)}
        />
      ))}
    </div>
  );
}

// FILE: src/features/crm/components/PersonDetailContent.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  Cake,
  ExternalLink,
  Github,
  Globe,
  Linkedin,
  Mail,
  Phone,
  Twitter,
  Building2,
} from "lucide-react";
import { format } from "date-fns";
import { RichTextOutput } from "@/components/shared/RichTextOutput";
import { getAbsoluteUrl, parseServerDate } from "@/lib/utils";
import { InteractionTimeline } from "./InteractionTimeline";
import { CrmAttachments } from "./CrmAttachments";
import { Person } from "@/types";

const socialIcons: Record<string, React.ElementType> = {
  LINKEDIN: Linkedin,
  TWITTER: Twitter,
  GITHUB: Github,
  WEBSITE: Globe,
  OTHER: ExternalLink,
};

function InfoItem({
  icon: Icon,
  label,
  value,
  href,
}: {
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  href?: string;
}) {
  if (!value) return null;
  const content = (
    <div className="flex items-start gap-4">
      <Icon className="mt-1 h-5 w-5 flex-shrink-0 text-muted-foreground" />
      <div className="flex-1">
        <p className="text-sm font-medium">{value}</p>
        <p className="text-xs text-muted-foreground">{label}</p>
      </div>
    </div>
  );
  if (href) {
    return (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="block rounded-md p-2 transition-colors hover:bg-accent"
      >
        {content}
      </a>
    );
  }

  return <div className="p-2">{content}</div>;
}

export function PersonDetailContent({ person }: { person: Person }) {
  const name = `${person.firstName} ${person.lastName}`;
  const roles = person.roles?.join(", ") || "Contact";
  const birthday = parseServerDate(person.birthday);

  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center space-y-2 text-center">
        <Avatar className="h-24 w-24 border">
          <AvatarImage
            src={getAbsoluteUrl(person.avatarUrl)}
            alt={name}
            className="h-full w-full object-cover"
          />
          <AvatarFallback className="text-4xl">
            {name?.charAt(0)}
          </AvatarFallback>
        </Avatar>
        <div>
          <h2 className="text-2xl font-bold">{name}</h2>
          <p className="text-sm text-muted-foreground">{roles}</p>
        </div>
      </div>

      <hr />

      <div className="space-y-4">
        <h3 className="px-2 text-sm font-semibold text-muted-foreground">
          Contact Information
        </h3>
        <div className="space-y-1">
          <InfoItem
            icon={Mail}
            label="Email"
            value={person.email}
            href={person.email ? `mailto:${person.email}` : undefined}
          />
          <InfoItem
            icon={Phone}
            label="Phone"
            value={person.phoneNumber}
            href={person.phoneNumber ? `tel:${person.phoneNumber}` : undefined}
          />
          <InfoItem
            icon={Cake}
            label="Birthday"
            value={birthday && format(birthday, "PPP")}
          />
        </div>
      </div>

      {person.organizations?.length > 0 && (
        <>
          <hr />
          <div className="space-y-4">
            <h3 className="px-2 text-sm font-semibold text-muted-foreground">
              Organizations
            </h3>
            <div className="space-y-1">
              {person.organizations.map((link: any) => (
                <InfoItem
                  key={link.organizationId}
                  icon={Building2}
                  label={link.role || "Member"}
                  value={link.organization.name}
                />
              ))}
            </div>
          </div>
        </>
      )}

      {person.biography && (
        <>
          <hr />
          <div className="space-y-2 px-2">
            <h3 className="text-sm font-semibold text-muted-foreground">
              Biography
            </h3>
            <div className="prose prose-sm max-w-none dark:prose-invert">
              <RichTextOutput html={person.biography} />
            </div>
          </div>
        </>
      )}

      {person.socialLinks?.length > 0 && (
        <>
          <hr />
          <div className="space-y-4">
            <h3 className="px-2 text-sm font-semibold text-muted-foreground">
              On the Web
            </h3>
            <div className="space-y-1">
              {person.socialLinks.map((link: any) => {
                const Icon = socialIcons[link.provider] || ExternalLink;
                return (
                  <InfoItem
                    key={link.id}
                    icon={Icon}
                    label={link.provider}
                    value={<span className="truncate">{link.url}</span>}
                    href={link.url}
                  />
                );
              })}
            </div>
          </div>
        </>
      )}

      {person.skills?.length > 0 && (
        <>
          <hr />
          <div className="space-y-2 px-2">
            <h3 className="text-sm font-semibold text-muted-foreground">
              Skills
            </h3>
            <div className="flex flex-wrap gap-2 pt-2">
              {person.skills.map((skill: any) => (
                <Badge key={skill.id} variant="secondary">
                  {skill.name}
                </Badge>
              ))}
            </div>
          </div>
        </>
      )}
      <hr />
      <CrmAttachments entity={person} entityType="people" />
      <hr />
      <div className="px-2">
        <InteractionTimeline personId={person.id} />
      </div>
    </div>
  );
}
// FILE: src/features/crm/components/PersonDetailPanel.tsx
import { Sheet, SheetContent, SheetFooter } from "@/components/ui/sheet";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";
import { PersonDetailContent } from "./PersonDetailContent";
import { Button } from "@/components/ui/button";
import { Trash2, Edit } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { PersonForm } from "./PersonForm";

interface PersonDetailPanelProps {
  personId: string | null;
  onOpenChange: (isOpen: boolean) => void;
}

const PanelSkeleton = () => (
  <div className="space-y-6 p-6">
    <div className="flex flex-col items-center gap-4 pt-4">
      <Skeleton className="h-24 w-24 rounded-full" />
      <div className="w-full space-y-2">
        <Skeleton className="mx-auto h-7 w-48" />
        <Skeleton className="mx-auto h-4 w-32" />
      </div>
    </div>
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-20 w-full" />
    <hr />
    <Skeleton className="h-4 w-32" />
    <Skeleton className="h-12 w-full" />
  </div>
);
export function PersonDetailPanel({
  personId,
  onOpenChange,
}: PersonDetailPanelProps) {
  const personResource = useApiResource("people", ["people"]);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const { data: person, isLoading } = personResource.useGetOne(personId);
  const deleteMutation = personResource.useDelete();
  const handleDelete = () => {
    if (
      person &&
      window.confirm(`Are you sure you want to delete ${person.name}?`)
    ) {
      deleteMutation.mutate(person.id, {
        onSuccess: () => {
          onOpenChange(false);
        },
      });
    }
  };

  return (
    <>
      <Sheet open={!!personId} onOpenChange={onOpenChange}>
        <SheetContent className="flex w-full flex-col p-0 sm:max-w-lg">
          {isLoading ? (
            <PanelSkeleton />
          ) : person ? (
            <>
              <div className="flex-1 overflow-y-auto p-6">
                <PersonDetailContent person={person} />
              </div>
              <SheetFooter className="mt-auto border-t bg-background p-4">
                <div className="flex w-full justify-end gap-2">
                  <Button
                    variant="outline"
                    onClick={() => setIsEditDialogOpen(true)}
                  >
                    <Edit className="mr-2 h-4 w-4" /> Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                    disabled={deleteMutation.isPending}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    {deleteMutation.isPending ? "Deleting..." : "Delete"}
                  </Button>
                </div>
              </SheetFooter>
            </>
          ) : (
            <div className="flex h-full items-center justify-center">
              <p>Could not load person details.</p>
            </div>
          )}
        </SheetContent>
      </Sheet>
      <ResourceCrudDialog
        isOpen={isEditDialogOpen}
        onOpenChange={setIsEditDialogOpen}
        title="Edit Person"
        description="Make changes to the person's details."
        form={PersonForm}
        resourcePath="people"
        resourceKey={["people"]}
        resourceId={person?.id}
      />
    </>
  );
}
// FILE: src/features/crm/components/PersonForm.tsx
import {
  FormInput,
  FormDatePicker,
  FormMultiSelect,
  FormTextarea,
} from "@/components/shared/form/FormFields";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { z } from "zod";
import { requiredStringSchema, phoneNumberSchema } from "@/lib/schemas";
import { useGetSkills } from "@/features/crm/api/useGetSkills";

const personSchema = z.object({
  firstName: requiredStringSchema("First name"),
  lastName: requiredStringSchema("Last name"),
  email: z
    .string()
    .email("A valid email is required.")
    .optional()
    .or(z.literal("")),
  biography: z.string().optional().nullable(),
  phoneNumber: phoneNumberSchema,
  birthday: z.date().nullable().optional(),
  skillIds: z.array(z.string().uuid()).optional(),
});
interface PersonFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function PersonForm({ initialData, onSuccess }: PersonFormProps) {
  const { data: skillsData, isLoading: isLoadingSkills } = useGetSkills();

  const processedInitialData = initialData
    ? {
        ...initialData,
        birthday: initialData.birthday ? new Date(initialData.birthday) : null,
        skillIds: initialData.skills?.map((s: any) => s.id) || [],
      }
    : {
        birthday: null,
        skillIds: [],
      };

  return (
    <ResourceForm
      schema={personSchema}
      resourcePath="people"
      resourceKey={["people"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <div className="grid grid-cols-2 gap-4">
            <FormInput name="firstName" label="First Name" placeholder="John" />
            <FormInput name="lastName" label="Last Name" placeholder="Doe" />
          </div>
          <FormInput
            name="email"
            label="Email Address"
            placeholder="name@example.com"
          />
          <FormTextarea name="biography" label="Biography" />
          <div className="grid grid-cols-2 gap-4">
            <FormInput name="phoneNumber" label="Phone Number" />
            <FormDatePicker name="birthday" label="Birthday" />
          </div>
          <FormMultiSelect
            name="skillIds"
            label="Skills"
            placeholder={isLoadingSkills ? "Loading..." : "Select skills"}
            options={
              skillsData?.map((skill: any) => ({
                id: skill.id,
                name: skill.name,
              })) || []
            }
          />
        </>
      )}
    />
  );
}
// FILE: src/features/crm/components/PersonList.tsx
import { useState } from "react";
import { useManagePeople } from "../api/useManagePeople";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { EmptyState } from "@/components/shared/EmptyState";
import { Contact, Trash2 } from "lucide-react";
import {
  DataTable,
  ColumnDef,
  DataTableWrapper,
} from "@/components/shared/DataTable";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { getAbsoluteUrl } from "@/lib/utils";
import { Person } from "@/types";

interface PersonListProps {
  onPersonSelect: (personId: string) => void;
}

const PersonListSkeleton = () => (
  <div className="space-y-2">
    {Array.from({ length: 8 }).map((_, i) => (
      <Skeleton key={i} className="h-12 w-full rounded-lg" />
    ))}
  </div>
);

export function PersonList({ onPersonSelect }: PersonListProps) {
  const { useGetAll, useBulkDelete } = useManagePeople();
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);
  const bulkDeleteMutation = useBulkDelete();
  const { data, isLoading, isError } = useGetAll({
    page,
    search: searchTerm,
  });

  const handlePageChange = (newPage: number) => {
    if (newPage > 0 && newPage <= (data?.totalPages || 1)) {
      setPage(newPage);
    }
  };

  const columns: ColumnDef<Person>[] = [
    {
      accessorKey: "name",
      header: "Name",
      cell: ({ row }) => {
        const person = row.original;
        return (
          <div
            className="flex cursor-pointer items-center gap-3"
            onClick={() => onPersonSelect(person.id)}
          >
            <Avatar className="h-9 w-9">
              <AvatarImage
                src={getAbsoluteUrl(person.avatarUrl)}
                alt={`${person.firstName} ${person.lastName}`}
                className="h-full w-full object-cover"
              />
              <AvatarFallback>{person.firstName?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="font-medium">{`${person.firstName} ${person.lastName}`}</span>
          </div>
        );
      },
    },
    {
      accessorKey: "email",
      header: "Email",
      cell: ({ row }) => (
        <div onClick={() => onPersonSelect(row.original.id)}>
          {row.original.email}
        </div>
      ),
    },
    {
      accessorKey: "roles",
      header: "Roles",
      cell: ({ row }) => {
        const person = row.original;
        return (
          <div
            className="flex flex-wrap gap-1"
            onClick={() => onPersonSelect(person.id)}
          >
            {person.roles.map((role: string) => (
              <Badge key={role} variant="secondary">
                {role}
              </Badge>
            ))}
          </div>
        );
      },
    },
  ];

  if (isLoading) return <PersonListSkeleton />;

  if (!isLoading && (!data || data.data.length === 0)) {
    return (
      <EmptyState
        icon={<Contact />}
        title="No People Found"
        description="No one matches your search criteria, or no people have been added yet."
      />
    );
  }

  if (isError) return <div>Error loading people.</div>;

  return (
    <div className="space-y-4">
      <Input
        placeholder="Search by name or email..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="max-w-sm"
      />

      <DataTableWrapper>
        <DataTable
          columns={columns}
          data={data?.data || []}
          pagination={{
            page: data?.page || 1,
            totalPages: data?.totalPages || 1,
            handlePageChange,
          }}
          bulkActions={(selectedIds) => (
            <Button
              variant="destructive"
              onClick={() => {
                if (
                  window.confirm(
                    `Delete ${selectedIds.length} selected people? This may include users and cannot be undone.`
                  )
                ) {
                  bulkDeleteMutation.mutate({ ids: selectedIds });
                }
              }}
              disabled={bulkDeleteMutation.isPending}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Delete ({selectedIds.length})
            </Button>
          )}
        />
      </DataTableWrapper>
    </div>
  );
}
// FILE: src/features/home/api/useGetMyTasks.ts
import { useApiResource } from "@/hooks/useApiResource";
import { ListTasksQuery, Task } from "@/types";

export function useGetMyTasks(query: ListTasksQuery) {
  const resource = useApiResource<Task>("tasks/my-tasks", ["myTasks"]);
  return resource.useGetAll(query);
}

// FILE: src/features/home/components/DashboardWidget.tsx
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { ReactNode } from "react";

interface DashboardWidgetProps {
  title: string;
  children: ReactNode;
  className?: string;
}

export function DashboardWidget({
  title,
  children,
  className,
}: DashboardWidgetProps) {
  return (
    <Card className={className} style={{ height: "100%" }}>
      <CardHeader>
        <CardTitle className="text-base">{title}</CardTitle>
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  );
}
// FILE: src/features/home/components/HomeDashboard.tsx
import GridLayout from "react-grid-layout";
import "react-grid-layout/css/styles.css";
import "react-resizable/css/styles.css";
import { MyTasksWidget } from "./MyTasksWidget";
import { RecentMentionsWidget } from "./RecentMentionsWidget";

export function HomeDashboard() {
  const layout = [
    { i: "my-tasks", x: 0, y: 0, w: 6, h: 10 },
    { i: "mentions", x: 6, y: 0, w: 6, h: 10 },
  ];

  const layoutWidth =
    typeof window !== "undefined"
      ? window.innerWidth > 1280
        ? 1200
        : window.innerWidth - 256 - 48
      : 1200;

  return (
    <GridLayout
      className="layout"
      layout={layout}
      cols={12}
      rowHeight={30}
      width={layoutWidth}
      isDraggable={true}
      isResizable={true}
    >
      <div key="my-tasks">
        <MyTasksWidget />
      </div>
      <div key="mentions">
        <RecentMentionsWidget />
      </div>
    </GridLayout>
  );
}
// FILE: src/features/home/components/MyTasksWidget.tsx
import { DashboardWidget } from "./DashboardWidget";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { useGetMyTasks } from "@/features/project-management/api/useGetMyTasks";

export function MyTasksWidget() {
  const { data, isLoading } = useGetMyTasks({ limit: 5 });

  return (
    <DashboardWidget title="My Open Tasks">
      <div className="space-y-2">
        {isLoading && <p>Loading tasks...</p>}
        {data?.data?.length === 0 && (
          <p className="text-sm text-muted-foreground">
            No open tasks assigned to you.
          </p>
        )}
        {data?.data?.map((task: any) => (
          <div key={task.id} className="text-sm">
            {task.title}
          </div>
        ))}
        <Button variant="link" asChild className="p-0">
          <Link to="/my-tasks">View all tasks</Link>
        </Button>
      </div>
    </DashboardWidget>
  );
}
// FILE: src/features/home/components/RecentMentionsWidget.tsx
import { DashboardWidget } from "./DashboardWidget";

export function RecentMentionsWidget() {
  return (
    <DashboardWidget title="Recent Mentions">
      <p className="text-muted-foreground text-sm">You have no new mentions.</p>
    </DashboardWidget>
  );
}
// FILE: src/features/integrations/api/useManageIntegrations.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageIntegrations() {
  const resource = useApiResource("integrations", ["integrations"]);
  return resource;
}
// FILE: src/features/integrations/components/IntegrationList.tsx
import { useManageIntegrations } from "../api/useManageIntegrations";
import { useOAuth } from "@/hooks/useOAuth";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Skeleton } from "@/components/ui/skeleton";
import { Globe, RefreshCw } from "lucide-react";
import { useQueryClient } from "@tanstack/react-query";

const INTEGRATION_PROVIDERS = [
  {
    name: "Google",
    provider: "google",
    description: "Connect your Google account for seamless integration.",
    icon: Globe,
  },
];

export function IntegrationList() {
  const { openOAuthPopup } = useOAuth();
  const queryClient = useQueryClient();
  const { data, isLoading, isError } = useManageIntegrations().useGetAll();

  const handleConnect = async (provider: string) => {
    const workspaceId = "your-workspace-id";
    await openOAuthPopup(provider, workspaceId);
    queryClient.invalidateQueries({ queryKey: ["integrations"] });
  };

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {Array.from({ length: 3 }).map((_, i) => (
          <Skeleton key={i} className="h-48 w-full" />
        ))}
      </div>
    );
  }

  if (isError) return <div>Failed to load integrations.</div>;

  const connectedProviders = new Set(
    data?.data?.map((integration: any) => integration.provider)
  );

  return (
    <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
      {INTEGRATION_PROVIDERS.map((providerInfo) => {
        const isConnected = connectedProviders.has(
          providerInfo.provider.toUpperCase()
        );
        const integrationData = data?.data?.find(
          (i: any) => i.provider === providerInfo.provider.toUpperCase()
        );
        return (
          <Card key={providerInfo.provider}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <providerInfo.icon className="h-8 w-8" />
                  <CardTitle>{providerInfo.name}</CardTitle>
                </div>
                <Switch checked={isConnected} disabled />
              </div>
            </CardHeader>
            <CardContent>
              <CardDescription>{providerInfo.description}</CardDescription>
              <div className="mt-4">
                {isConnected ? (
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" disabled>
                      <RefreshCw className="mr-2 h-4 w-4" />
                      Reconnect
                    </Button>
                    <p className="text-xs text-muted-foreground">
                      Connected on{" "}
                      {new Date(integrationData.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                ) : (
                  <Button
                    onClick={() => handleConnect(providerInfo.provider)}
                    size="sm"
                  >
                    Connect
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
// FILE: src/features/project-management/api/useBulkUpdateTasks.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { BulkUpdateTasksDto } from "@/types";

async function bulkUpdateTasks(
  data: BulkUpdateTasksDto
): Promise<{ count: number }> {
  const response = await api.patch("/tasks/bulk", data);
  return response.data;
}

export function useBulkUpdateTasks(projectId?: string) {
  const queryKeysToInvalidate: (string | undefined)[][] = [["myTasks"]];
  if (projectId) {
    queryKeysToInvalidate.push(["tasks", projectId]);
  }

  return useApiMutation<
    { count: number },
    { taskIds: string[]; updates: BulkUpdateTasksDto["updates"] }
  >({
    mutationFn: (variables) =>
      bulkUpdateTasks({
        taskIds: variables.taskIds,
        updates: variables.updates,
      }),
    successMessage: (data) => `${data.count} tasks updated successfully.`,
    invalidateQueries: queryKeysToInvalidate,
  });
}
// FILE: src/features/project-management/api/useCreateProjectFromTemplate.ts
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

interface CreateFromTemplateParams {
  templateId: string;
  name: string;
  workspaceId: string;
}

async function createProjectFromTemplate({
  templateId,
  name,
  workspaceId,
}: CreateFromTemplateParams): Promise<any> {
  const { data } = await api.post(
    `project-templates/${templateId}/create-project`,
    { name, workspaceId }
  );
  return data;
}

export function useCreateProjectFromTemplate(workspaceId: string) {
  return useApiMutation({
    mutationFn: (params: Omit<CreateFromTemplateParams, "workspaceId">) =>
      createProjectFromTemplate({ ...params, workspaceId }),
    successMessage: "Project created from template successfully!",
    invalidateQueries: [["projects", workspaceId]],
  });
}
// FILE: src/features/project-management/api/useCreateView.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useQueryClient } from "@tanstack/react-query";
interface CreateViewParams {
  workspaceId: string;
  projectId: string;
  viewData: any;
}

async function createView({
  workspaceId,
  projectId,
  viewData,
}: CreateViewParams): Promise<any> {
  const payload = {
    ...viewData,
    projectId: projectId,
  };
  const { data } = await api.post(
    `workspaces/${workspaceId}/projects/${projectId}/views`,
    payload
  );

  return data;
}

export function useCreateView(workspaceId: string) {
  const queryClient = useQueryClient();
  return useApiMutation<any, { projectId: string; viewData: any }>({
    mutationFn: ({ projectId, viewData }) =>
      createView({ workspaceId, projectId, viewData }),
    successMessage: "New view created successfully.",
    onSuccess: (_data, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["views", variables.projectId],
      });
    },
  });
}
// FILE: src/features/project-management/api/useGetMyTasks.ts
import { useApiResource } from "@/hooks/useApiResource";
import { ListTasksQuery, Task } from "@/types";

export function useGetMyTasks(query: ListTasksQuery) {
  const resource = useApiResource<Task>("tasks/my-tasks", ["myTasks"]);
  return resource.useGetAll(query);
}
// FILE: src/features/project-management/api/useGetProjectMembers.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function getProjectMembers(
  workspaceId: string,
  projectId: string
): Promise<any> {
  const { data } = await api.get(
    `workspaces/${workspaceId}/projects/${projectId}/members`
  );
  return data;
}

export function useGetProjectMembers(
  workspaceId: string,
  projectId: string,
  options: { enabled?: boolean } = { enabled: true }
) {
  return useQuery({
    queryKey: ["projectMembers", projectId],
    queryFn: () => getProjectMembers(workspaceId, projectId),
    enabled: !!workspaceId && !!projectId && !!options.enabled,
  });
}
// FILE: src/features/project-management/api/useGetProjects.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Project } from "@/types";

interface ProjectListQuery {
  limit?: number;
}

export function useGetProjects(workspaceId?: string) {
  const resourceUrl = workspaceId
    ? `workspaces/${workspaceId}/projects`
    : `projects`;
  const resourceKey = workspaceId
    ? ["projects", workspaceId]
    : ["projects", "all"];

  const resource = useApiResource<Project, ProjectListQuery>(
    resourceUrl,
    resourceKey
  );
  return resource.useGetAll({ limit: 1000, enabled: !!workspaceId });
}
// FILE: src/features/project-management/api/useGetTasks.ts
import { useQuery } from "@tanstack/react-query";
import api from "@/lib/api";
import { ListTasksQuery, Task, PaginatedResponse } from "@/types";

interface UseGetTasksParams {
  scope: "user" | "project";
  workspaceId?: string;
  projectId?: string;
  query: ListTasksQuery;
  enabled?: boolean;
}

const fetchTasks = async ({
  scope,
  workspaceId,
  projectId,
  query,
}: UseGetTasksParams): Promise<PaginatedResponse<Task>> => {
  let url: string;
  if (scope === "project") {
    if (!workspaceId || !projectId) {
      throw new Error(
        "Workspace and Project IDs are required for project scope."
      );
    }
    url = `/workspaces/${workspaceId}/projects/${projectId}/tasks`;
  } else {
    url = "/tasks/my-tasks";
  }

  const { data } = await api.get(url, { params: query });
  return data;
};

export const useGetTasks = ({
  scope,
  workspaceId,
  projectId,
  query,
  enabled = true,
}: UseGetTasksParams) => {
  const queryKey =
    scope === "project" ? ["tasks", projectId, query] : ["myTasks", query];

  return useQuery({
    queryKey,
    queryFn: () => fetchTasks({ scope, workspaceId, projectId, query }),
    enabled: enabled && (scope === "user" || (!!workspaceId && !!projectId)),
  });
};
// FILE: src/features/project-management/api/useGetViews.ts
import { useQuery } from "@tanstack/react-query";
import api from "@/lib/api";
import { PaginatedResponse, View } from "@/types";

interface UseGetViewsParams {
  scope: "user" | "project";
  workspaceId?: string;
  projectId?: string;
  enabled?: boolean;
}

const fetchViews = async ({
  scope,
  workspaceId,
  projectId,
}: UseGetViewsParams): Promise<PaginatedResponse<View>> => {
  let url: string;
  if (scope === "project") {
    if (!workspaceId || !projectId) {
      throw new Error("Workspace and Project IDs are required for project scope.");
    }
    url = `/workspaces/${workspaceId}/projects/${projectId}/views`;
  } else {
    url = "/views";
  }

  const { data } = await api.get(url);
  return data;
};

export const useGetViews = ({
  scope,
  workspaceId,
  projectId,
  enabled = true,
}: UseGetViewsParams) => {
  const queryKey =
    scope === "project" ? ["views", projectId] : ["myViews"];

  return useQuery({
    queryKey,
    queryFn: () => fetchViews({ scope, workspaceId, projectId }),
    enabled: enabled && (scope === "user" || (!!workspaceId && !!projectId)),
  });
};
// FILE: src/features/project-management/api/useInstantiateTaskTemplate.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface InstantiateTemplateParams {
  templateId: string;
  workspaceId?: string;
  projectId?: string;
}

async function instantiateTemplate({
  templateId,
  workspaceId,
  projectId,
}: InstantiateTemplateParams): Promise<any> {
  const { data } = await api.post(`task-templates/${templateId}/instantiate`, {
    workspaceId,
    projectId,
  });
  return data;
}

export function useInstantiateTaskTemplate(
  workspaceId?: string,
  projectId?: string
) {
  const invalidateKeys = projectId ? [["tasks", projectId]] : [["myTasks"]];

  return useApiMutation<any, { templateId: string }>({
    mutationFn: ({ templateId }) =>
      instantiateTemplate({ templateId, workspaceId, projectId }),
    successMessage: "Task created from template.",
    invalidateQueries: invalidateKeys,
  });
}
// FILE: src/features/project-management/api/useManageGoals.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Goal } from "@/types";

export function useManageGoals(workspaceId: string, projectId: string) {
  const { resourceUrl, resourceKey } = useApiResource.constructUrlAndKey({
    scope: "goals",
    workspaceId,
    projectId,
  });

  const resource = useApiResource<Goal, any>(resourceUrl, resourceKey);

  return {
    ...resource,
    resourceUrl,
    resourceKey,
  };
}
// FILE: src/features/project-management/api/useManageProjectAttachments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

type PluralEntityType = "knowledge-bases" | "whiteboards" | "publications";

interface AttachParams {
  workspaceId: string;
  projectId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function attachEntity(params: AttachParams): Promise<any> {
  const { workspaceId, projectId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/projects/${projectId}/${plural}`;
  const { data } = await api.post(url, { entityId });
  return data;
}

interface DetachParams {
  workspaceId: string;
  projectId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function detachEntity(params: DetachParams): Promise<void> {
  const { workspaceId, projectId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/projects/${projectId}/${plural}/${entityId}`;
  await api.delete(url);
}

export function useManageProjectAttachments(
  workspaceId: string,
  projectId: string
) {
  const invalidateQueries = [
    ["projects", workspaceId],
    ["project", projectId],
  ];

  const useAttachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        attachEntity({ workspaceId, projectId, ...data }),
      successMessage: "Attachment added to project.",
      invalidateQueries,
    });
  };

  const useDetachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        detachEntity({ workspaceId, projectId, ...data }),
      successMessage: "Attachment removed from project.",
      invalidateQueries,
    });
  };

  return { useAttachEntity, useDetachEntity };
}
// FILE: src/features/project-management/api/useManageProjectMembers.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface AddMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
  roleId: string;
  isGuest: boolean;
}
async function addMember(params: AddMemberParams) {
  const { workspaceId, projectId, userId, roleId, isGuest } = params;
  const { data } = await api.post(
    `workspaces/${workspaceId}/projects/${projectId}/members`,
    { userId, roleId, isGuest }
  );
  return data;
}

interface AddTeamParams {
  workspaceId: string;
  projectId: string;
  teamId: string;
  roleId: string;
  isGuest: boolean;
}
async function addTeam(params: AddTeamParams) {
  const { workspaceId, projectId, teamId, roleId, isGuest } = params;
  const { data } = await api.post(
    `workspaces/${workspaceId}/projects/${projectId}/members/team`,
    { teamId, roleId, isGuest }
  );
  return data;
}

interface UpdateMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
  roleId: string;
  isGuest?: boolean;
}
async function updateMember(params: UpdateMemberParams) {
  const { workspaceId, projectId, userId, roleId, isGuest } = params;
  const { data } = await api.patch(
    `workspaces/${workspaceId}/projects/${projectId}/members/${userId}`,
    { roleId, isGuest }
  );
  return data;
}

interface RemoveMemberParams {
  workspaceId: string;
  projectId: string;
  userId: string;
}
async function removeMember(params: RemoveMemberParams) {
  const { workspaceId, projectId, userId } = params;
  await api.delete(
    `workspaces/${workspaceId}/projects/${projectId}/members/${userId}`
  );
}

export function useManageProjectMembers(
  workspaceId: string,
  projectId: string
) {
  const invalidateQueries = [["projectMembers", projectId]];

  const useAddMember = () =>
    useApiMutation({
      mutationFn: (data: Omit<AddMemberParams, "workspaceId" | "projectId">) =>
        addMember({ workspaceId, projectId, ...data }),
      successMessage: "Member added to project.",
      invalidateQueries,
    });

  const useAddTeam = () =>
    useApiMutation({
      mutationFn: (data: Omit<AddTeamParams, "workspaceId" | "projectId">) =>
        addTeam({ workspaceId, projectId, ...data }),
      successMessage: (data) => `${data.count} member(s) added to the project.`,
      invalidateQueries,
    });

  const useUpdateMember = () =>
    useApiMutation({
      mutationFn: (
        data: Omit<UpdateMemberParams, "workspaceId" | "projectId">
      ) => updateMember({ workspaceId, projectId, ...data }),
      successMessage: "Member updated successfully.",
      invalidateQueries,
    });

  const useRemoveMember = () =>
    useApiMutation({
      mutationFn: (userId: string) =>
        removeMember({ workspaceId, projectId, userId }),
      successMessage: "Member removed from project.",
      invalidateQueries,
    });

  return {
    useAddMember,
    useAddTeam,
    useUpdateMember,
    useRemoveMember,
  };
}
// FILE: src/features/project-management/api/useManageProjects.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Project } from "@/types";

export function useManageProjects(workspaceId?: string) {
  const { resourceUrl, resourceKey } = useApiResource.constructUrlAndKey({
    scope: "projects",
    workspaceId,
  });

  const resource = useApiResource<Project>(resourceUrl, resourceKey);

  return {
    ...resource,
    resourceUrl,
    resourceKey,
  };
}
// FILE: src/features/project-management/api/useManageProjectTemplates.ts
import { useApiResource } from "@/hooks/useApiResource";
import { ProjectTemplate } from "@/types";

interface ProjectTemplateQuery {
  search?: string;
  page?: number;
  limit?: number;
}
export function useManageProjectTemplates(projectId?: string) {
  const resourceUrl = projectId
    ? `projects/${projectId}/templates`
    : "project-templates";
  const resourceKey = projectId
    ? ["projectTemplates", projectId]
    : ["projectTemplates"];

  return useApiResource<ProjectTemplate, ProjectTemplateQuery>(
    resourceUrl,
    resourceKey
  );
}
// FILE: src/features/project-management/api/useManageTaskAttachments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

type PluralEntityType = "knowledge-bases" | "whiteboards" | "publications";

interface AttachParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function attachEntity(params: AttachParams): Promise<any> {
  const { workspaceId, projectId, taskId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/${plural}`;
  const { data } = await api.post(url, { entityId });
  return data;
}

interface DetachParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function detachEntity(params: DetachParams): Promise<void> {
  const { workspaceId, projectId, taskId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/${plural}/${entityId}`;
  await api.delete(url);
}

export function useManageTaskAttachments(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  const useAttachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        attachEntity({ workspaceId, projectId, taskId, ...data }),
      successMessage: "Attachment added.",
      invalidateQueries: [["task", taskId]],
    });
  };

  const useDetachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        detachEntity({ workspaceId, projectId, taskId, ...data }),
      successMessage: "Attachment removed.",
      invalidateQueries: [["task", taskId]],
    });
  };

  return { useAttachEntity, useDetachEntity };
}
// FILE: src/features/project-management/api/useManageTaskDocuments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { DocumentType } from "@/types/api";


interface AttachDocumentParams {
  workspaceId?: string;
  projectId?: string;
  taskId: string;
  formData: FormData;
}

async function attachDocument({
  workspaceId,
  projectId,
  taskId,
  formData,
}: AttachDocumentParams): Promise<any> {
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/documents`
      : `tasks/${taskId}/documents`;

  const { data } = await api.post(url, formData, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return data;
}

export function useAttachDocument(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (formData: FormData) =>
      attachDocument({ workspaceId, projectId, taskId, formData }),
    successMessage: "Document attached successfully.",
    invalidateQueries: [["task", taskId]],
  });
}


interface DetachDocumentParams {
  workspaceId?: string;
  projectId?: string;
  taskId: string;
  documentId: string;
  type: DocumentType;
}

async function detachDocument({
  workspaceId,
  projectId,
  taskId,
  documentId,
  type,
}: DetachDocumentParams): Promise<void> {
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/documents/${documentId}/${type}`
      : `tasks/${taskId}/documents/${documentId}/${type}`;
  await api.delete(url);
}

export function useDetachDocument(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (params: { documentId: string; type: DocumentType }) =>
      detachDocument({ workspaceId, projectId, taskId, ...params }),
    successMessage: "Document detached successfully.",
    invalidateQueries: [["task", taskId]],
  });
}


interface LinkDocumentParams {
  workspaceId?: string;
  projectId?: string;
  taskId: string;
  title: string;
  externalUrl: string;
  type: DocumentType;
}

async function linkDocument(params: LinkDocumentParams): Promise<any> {
  const { workspaceId, projectId, taskId, ...linkData } = params;
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/documents`
      : `tasks/${taskId}/documents`;

  const { data } = await api.post(url, linkData, {
    headers: { "Content-Type": "application/json" },
  });
  return data;
}

export function useLinkDocument(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (data: {
      title: string;
      externalUrl: string;
      type: DocumentType;
    }) => linkDocument({ workspaceId, projectId, taskId, ...data }),
    successMessage: "Document linked successfully.",
    invalidateQueries: [["task", taskId]],
  });
}
// FILE: src/features/project-management/api/useManageTaskLinks.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { TaskLinkType } from "@/types/api";

interface AddLinkParams {
  workspaceId?: string | null;
  projectId?: string | null;
  sourceTaskId: string;
  targetTaskId: string;
  type: TaskLinkType;
}

async function addLink({
  workspaceId,
  projectId,
  sourceTaskId,
  targetTaskId,
  type,
}: AddLinkParams): Promise<any> {
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${sourceTaskId}/links`
      : `tasks/${sourceTaskId}/links`;
  const { data } = await api.post(url, { targetTaskId, type });
  return data;
}

interface RemoveLinkParams {
  workspaceId?: string | null;
  projectId?: string | null;
  taskId: string;
  linkId: string;
}

async function removeLink({
  workspaceId,
  projectId,
  taskId,
  linkId,
}: RemoveLinkParams): Promise<any> {
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/links/${linkId}`
      : `tasks/${taskId}/links/${linkId}`;
  const { data } = await api.delete(url);
  return data;
}

interface UpdateLinkParams {
  workspaceId?: string | null;
  projectId?: string | null;
  taskId: string;
  linkId: string;
  type: TaskLinkType;
}

async function updateLink({
  workspaceId,
  projectId,
  taskId,
  linkId,
  type,
}: UpdateLinkParams): Promise<any> {
  const url =
    projectId && workspaceId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/links/${linkId}`
      : `tasks/${taskId}/links/${linkId}`;
  const { data } = await api.patch(url, { type });
  return data;
}

export function useManageTaskLinks(
  workspaceId?: string | null,
  projectId?: string | null
) {
  const addLinkMutation = useApiMutation<
    any,
    Omit<AddLinkParams, "workspaceId" | "projectId">
  >({
    mutationFn: (params) => addLink({ workspaceId, projectId, ...params }),
    successMessage: "Task dependency created.",
    invalidateQueries: (_data, variables) => [
      ["task", variables.sourceTaskId],
      ["task", variables.targetTaskId],
    ],
  });

  const removeLinkMutation = useApiMutation<
    any,
    Omit<RemoveLinkParams, "workspaceId" | "projectId">
  >({
    mutationFn: (params) => removeLink({ workspaceId, projectId, ...params }),
    successMessage: "Task dependency removed.",
    invalidateQueries: (_data, variables) => [["task", variables.taskId]],
  });

  const updateLinkMutation = useApiMutation<
    any,
    Omit<UpdateLinkParams, "workspaceId" | "projectId">
  >({
    mutationFn: (params) => updateLink({ workspaceId, projectId, ...params }),
    successMessage: "Task dependency updated.",
    invalidateQueries: (_data, variables) => [["task", variables.taskId]],
  });

  return {
    addLink: addLinkMutation.mutate,
    removeLink: removeLinkMutation.mutate,
    updateLink: updateLinkMutation.mutate,
    isPending:
      addLinkMutation.isPending ||
      removeLinkMutation.isPending ||
      updateLinkMutation.isPending,
  };
}
// FILE: src/features/project-management/api/useManageTasks.ts
import { useApiResource } from "@/hooks/useApiResource";
import { useQueryClient } from "@tanstack/react-query";
import { Task } from "@/types";

export function useManageTasks(
  workspaceId?: string | null,
  projectId?: string | null
) {
  const queryClient = useQueryClient();

  const { resourceUrl, resourceKey } = useApiResource.constructUrlAndKey({
    scope: "tasks",
    workspaceId,
    projectId,
  });

  const resource = useApiResource(resourceUrl, resourceKey);
  const useCreate = () => {
    const createMutation = resource.useCreate();

    const mutate = (
      data: Partial<Task>,
      options?: { onSuccess?: (data: any) => void }
    ) => {
      createMutation.mutate(data, {
        onSuccess: (newData) => {
          if (data.parentId) {
            queryClient.invalidateQueries({
              queryKey: ["task", data.parentId],
            });
          }
          options?.onSuccess?.(newData);
        },
      });
    };
    return { ...createMutation, mutate };
  };

  const useDelete = () => {
    const deleteMutation = resource.useDelete();

    const mutate = (
      ids: string | string[],
      options?: { onSuccess?: () => void }
    ) => {
      const tasksToDelete: Task[] = [];
      const idArray = Array.isArray(ids) ? ids : [ids];

      idArray.forEach((id) => {
        const task = queryClient.getQueryData<Task>(["task", id]);
        if (task) {
          tasksToDelete.push(task);
        } else {
          const queries = queryClient.getQueryCache().findAll({
            queryKey: ["tasks"],
            exact: false,
          });
          for (const query of queries) {
            const data = query.state.data as any;
            const foundTask = data?.data?.find((t: Task) => t.id === id);
            if (foundTask) {
              tasksToDelete.push(foundTask);
              break;
            }
          }
        }
      });

      deleteMutation.mutate(ids, {
        onSuccess: () => {
          tasksToDelete.forEach((task) => {
            if (task.parentId) {
              queryClient.invalidateQueries({
                queryKey: ["task", task.parentId],
              });
            }
          });
          options?.onSuccess?.();
        },
      });
    };

    return { ...deleteMutation, mutate };
  };

  return { ...resource, useCreate, useDelete };
}
// FILE: src/features/project-management/api/useManageTaskTemplates.ts
import { useApiResource } from "@/hooks/useApiResource";
import { TaskTemplate } from "@/types";

interface TaskTemplateQuery {
  search?: string;
  page?: number;
  limit?: number;
  workspaceId?: string;
  projectId?: string;
}

export function useManageTaskTemplates(
  workspaceId?: string,
  projectId?: string
) {
  const resourceUrl =
    workspaceId && projectId
      ? `workspaces/${workspaceId}/projects/${projectId}/task-templates`
      : "task-templates";

  const resourceKey = projectId
    ? ["taskTemplates", projectId]
    : workspaceId
      ? ["taskTemplates", workspaceId]
      : ["taskTemplates"];

  const resource = useApiResource<TaskTemplate, TaskTemplateQuery>(
    resourceUrl,
    resourceKey
  );
  return resource;
}
// FILE: src/features/project-management/api/useManageTaskTypes.ts
import { useApiResource } from "@/hooks/useApiResource";
import { TaskType } from "@/types";

export function useManageTaskTypes(workspaceId?: string, projectId?: string) {
  const { resourceUrl, resourceKey } = useApiResource.constructUrlAndKey({
    scope: "task-types",
    workspaceId,
    projectId,
  });

  if (!workspaceId && !projectId) {
    const globalResource = useApiResource<TaskType>("task-types", [
      "taskTypes",
      "global",
    ]);
    return globalResource;
  }

  return useApiResource<TaskType>(resourceUrl, resourceKey);
}
// FILE: src/features/project-management/api/useManageTimeLogs.ts
import { useApiResource } from "@/hooks/useApiResource";

export function useManageTimeLogs(
  workspaceId: string | undefined,
  projectId: string | undefined,
  taskId: string
) {
  const resourceUrl =
    workspaceId && projectId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/timelogs`
      : `tasks/${taskId}/timelogs`;

  const resourceKey = ["timeLogs", taskId];

  return useApiResource(resourceUrl, resourceKey);
}
// FILE: src/features/project-management/api/useUpdateTask.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { Task } from "@/types";
import { useQueryClient, QueryKey } from "@tanstack/react-query";
import { toast } from "sonner";

interface UpdateTaskParams {
  taskId: string;
  workspaceId?: string | null;
  projectId?: string | null;
  taskData: Partial<Task>;
}

async function updateTask({
  taskId,
  workspaceId,
  projectId,
  taskData,
}: UpdateTaskParams): Promise<Task> {
  const url =
    workspaceId && projectId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`
      : `tasks/${taskId}`;
  const { data } = await api.put(url, taskData);
  return data;
}

const updateTaskInTree = (
  tasks: Task[],
  taskId: string,
  updates: Partial<Task>
): Task[] => {
  if (!tasks) return [];
  return tasks.map((task) => {
    if (task.id === taskId) {
      return { ...task, ...updates };
    }
    if (task.subtasks && task.subtasks.length > 0) {
      return {
        ...task,
        subtasks: updateTaskInTree(task.subtasks, taskId, updates),
      };
    }
    return task;
  });
};

type UpdateTaskContext = {
  previousData: Map<QueryKey, any>;
};
export function useUpdateTask() {
  const queryClient = useQueryClient();

  return useApiMutation<Task, UpdateTaskParams, UpdateTaskContext>({
    mutationFn: updateTask,
    onMutate: async (variables) => {
      const { taskId, taskData, projectId } = variables;

      const queryKeysToCancel: QueryKey[] = [
        ["task", taskId],
        ["myTasks"],
        ["tasks"],
      ];
      if (projectId) {
        queryKeysToCancel.push(["projects", projectId, "tasks"]);
      }

      await Promise.all(
        queryKeysToCancel.map((key) =>
          queryClient.cancelQueries({ queryKey: key, exact: false })
        )
      );

      const previousData = new Map<QueryKey, any>();

      const singleTaskQueryKey: QueryKey = ["task", taskId];
      const previousTask = queryClient.getQueryData<Task>(singleTaskQueryKey);
      if (previousTask) {
        previousData.set(singleTaskQueryKey, previousTask);
        queryClient.setQueryData<Task>(singleTaskQueryKey, {
          ...previousTask,
          ...taskData,
        });
      }

      const queryCache = queryClient.getQueryCache();
      const listQueryKeys: QueryKey[] = [["myTasks"], ["tasks"]];
      if (projectId) {
        listQueryKeys.push(["projects", projectId, "tasks"]);
      }

      for (const key of listQueryKeys) {
        const queries = queryCache.findAll({ queryKey: key, exact: false });
        for (const query of queries) {
          const oldData = query.state.data as any;
          if (oldData?.pages) {
            previousData.set(query.queryKey, oldData);
            const updatedPages = oldData.pages.map((page: any) => ({
              ...page,
              data: updateTaskInTree(page.data, taskId, taskData),
            }));
            queryClient.setQueryData(query.queryKey, {
              ...oldData,
              pages: updatedPages,
            });
          } else if (oldData?.data) {
            previousData.set(query.queryKey, oldData);
            const updatedListData = {
              ...oldData,
              data: updateTaskInTree(oldData.data, taskId, taskData),
            };
            queryClient.setQueryData(query.queryKey, updatedListData);
          }
        }
      }

      return { previousData };
    },
    onError: (_err, _variables, context) => {
      if (context?.previousData) {
        context.previousData.forEach((data: any, queryKey: QueryKey) => {
          queryClient.setQueryData(queryKey, data);
        });
        toast.error("Failed to update task. Reverting changes.");
      }
    },
    onSettled: (_data, _error, variables) => {
      const { taskId, projectId } = variables;
      queryClient.invalidateQueries({ queryKey: ["task", taskId] });
      if (projectId) {
        queryClient.invalidateQueries({
          queryKey: ["projects", projectId, "tasks"],
          exact: false,
        });
        queryClient.invalidateQueries({
          queryKey: ["tasks", projectId],
          exact: false,
        });
      }
      queryClient.invalidateQueries({ queryKey: ["myTasks"], exact: false });
    },
  });
}

interface SetTaskParentParams {
  taskId: string;
  workspaceId?: string | null;
  projectId?: string | null;
  parentId: string | null;
}

async function setTaskParent({
  taskId,
  workspaceId,
  projectId,
  parentId,
}: SetTaskParentParams): Promise<Task> {
  const url =
    workspaceId && projectId
      ? `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/set-parent`
      : `tasks/${taskId}/set-parent`;
  const { data } = await api.patch(url, { parentId });
  return data;
}

export function useSetTaskParent() {
  const queryClient = useQueryClient();

  return useApiMutation<Task, SetTaskParentParams>({
    mutationFn: setTaskParent,
    onSuccess: (updatedTask) => {
      const originalTask = queryClient.getQueryData<Task>([
        "task",
        updatedTask.id,
      ]);
      if (originalTask?.parentId) {
        queryClient.invalidateQueries({
          queryKey: ["task", originalTask.parentId],
        });
      }

      queryClient.invalidateQueries({ queryKey: ["task", updatedTask.id] });
      if (updatedTask.parentId) {
        queryClient.invalidateQueries({
          queryKey: ["task", updatedTask.parentId],
        });
      }
      if (updatedTask.projectId) {
        queryClient.invalidateQueries({
          queryKey: ["tasks", updatedTask.projectId],
          exact: false,
        });
      } else {
        queryClient.invalidateQueries({ queryKey: ["myTasks"], exact: false });
      }
    },
  });
}
// FILE: src/features/project-management/api/useUpdateTaskCustomValues.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

interface UpdateValuesParams {
  workspaceId: string;
  projectId: string;
  taskId: string;
  updates: { fieldId: string; value: any }[];
}

async function updateTaskCustomValues({
  workspaceId,
  projectId,
  taskId,
  updates,
}: UpdateValuesParams): Promise<any> {
  const { data } = await api.patch(
    `workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}/custom-fields`,
    { updates }
  );
  return data;
}

export function useUpdateTaskCustomValues(
  workspaceId: string,
  projectId: string,
  taskId: string
) {
  return useApiMutation({
    mutationFn: (updates: { fieldId: string; value: any }[]) =>
      updateTaskCustomValues({ workspaceId, projectId, taskId, updates }),
    invalidateQueries: [
      ["task", taskId],
      ["tasks", projectId],
    ],
  });
}

// FILE: src/features/project-management/components/AssigneeSelector.tsx
import { useMemo, useState } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, UserPlus, X } from "lucide-react";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAbsoluteUrl } from "@/lib/utils";

interface AssigneeSelectorProps {
  projectId?: string | null;
  workspaceId?: string | null;
  selectedIds: string[];
  onSelectionChange: (newIds: string[]) => void;
}

type SelectableUser = {
  id: string;
  name: string;
  avatarUrl: string | null;
};

export function AssigneeSelector({
  projectId,
  workspaceId,
  selectedIds,
  onSelectionChange,
}: AssigneeSelectorProps) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { data: projectMembersData, isLoading: isLoadingProjectMembers } =
    useGetProjectMembers(workspaceId!, projectId!, { enabled: !!projectId });

  const userResource = useApiResource("admin/users", ["users"]);
  const { data: allUsersData, isLoading: isLoadingAllUsers } =
    userResource.useGetAll({
      enabled: !projectId,
    });

  const isLoading = isLoadingProjectMembers || isLoadingAllUsers;
  const availableUsers: SelectableUser[] = useMemo(() => {
    if (projectId) {
      return (
        projectMembersData?.map((member: any) => ({
          id: member.userId,
          name: member.name,
          avatarUrl: member.avatarUrl,
        })) || []
      );
    }
    return (
      allUsersData?.data?.map((user: any) => ({
        id: user.id,
        name: user.name,
        avatarUrl: user.avatarUrl,
      })) || []
    );
  }, [projectId, projectMembersData, allUsersData]);

  const selectedUsers = useMemo(
    () => availableUsers.filter((user) => selectedIds.includes(user.id)) || [],
    [availableUsers, selectedIds]
  );

  const unassignedUsers = useMemo(
    () => availableUsers.filter((user) => !selectedIds.includes(user.id)),
    [availableUsers, selectedIds]
  );

  const handleSelect = (userId: string) => {
    onSelectionChange([...selectedIds, userId]);
    setPopoverOpen(false);
  };

  const handleRemove = (userId: string) => {
    onSelectionChange(selectedIds.filter((id) => id !== userId));
  };

  return (
    <div className="flex min-h-9 flex-wrap items-center gap-2 rounded-md border border-input p-1">
      {selectedUsers.map((user) => (
        <Badge
          key={user.id}
          variant="secondary"
          className="flex items-center gap-2 rounded-full bg-gray-100 py-0.5 pl-0.5 pr-2"
        >
          <Avatar className="h-5 w-5">
            <AvatarImage src={getAbsoluteUrl(user.avatarUrl)} alt={user.name} />
            <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
          </Avatar>
          <span className="text-sm font-normal">{user.name}</span>
          <Button
            size="icon"
            variant="ghost"
            type="button"
            className="ml-1 h-4 w-4 rounded-full"
            onClick={() => handleRemove(user.id)}
          >
            <X className="h-3 w-3 text-muted-foreground hover:text-primary" />
          </Button>
        </Badge>
      ))}

      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className="h-6 w-6"
            disabled={isLoading}
          >
            <UserPlus className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-[200px] p-0">
          <Command>
            <CommandInput placeholder="Assign user..." />
            <CommandList>
              <CommandEmpty>No available users found.</CommandEmpty>
              <CommandGroup>
                {unassignedUsers.map((user: SelectableUser) => (
                  <CommandItem
                    key={user.id}
                    value={user.name}
                    onSelect={() => handleSelect(user.id)}
                    className="flex items-center"
                  >
                    <Avatar className="mr-2 h-5 w-5">
                      <AvatarImage
                        src={getAbsoluteUrl(user.avatarUrl)}
                        alt={user.name}
                      />
                      <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="flex-1 truncate">{user.name}</span>
                    <Check
                      className={cn(
                        "ml-auto h-4 w-4",
                        selectedIds.includes(user.id)
                          ? "opacity-100"
                          : "opacity-0"
                      )}
                    />
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  );
}
// FILE: src/features/project-management/components/calendar-view/AgendaView.tsx
import { Task } from "@/types";
import { format, isToday, isTomorrow } from "date-fns";
import { ListViewHeader } from "../list-view/ListViewHeader";
import { TaskGroup } from "../list-view/TaskGroup";
import { useMemo } from "react";
import { EmptyState } from "@/components/shared/EmptyState";
import { Calendar } from "lucide-react";

interface AgendaViewProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;
  selectedTaskIds: string[];
  setSelectedTaskIds: (ids: string[]) => void;
}

const getGroupName = (date: Date): string => {
  if (isToday(date)) return "Today";
  if (isTomorrow(date)) return "Tomorrow";
  return format(date, "EEEE, MMMM d");
};

export function AgendaView({
  tasks,
  onTaskSelect,
  onTaskUpdate,
  selectedTaskIds,
  setSelectedTaskIds,
}: AgendaViewProps) {
  const upcomingTasks = useMemo(
    () =>
      tasks
        .filter((task) => {
          if (!task.dueDate) return false;
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          return new Date(task.dueDate) >= today;
        })
        .sort(
          (a, b) =>
            new Date(a.dueDate!).getTime() - new Date(b.dueDate!).getTime()
        ),
    [tasks]
  );

  const groupedTasks = useMemo(() => {
    const groupMap = new Map<string, Task[]>();

    upcomingTasks.forEach((task) => {
      const groupName = getGroupName(new Date(task.dueDate!));
      if (!groupMap.has(groupName)) {
        groupMap.set(groupName, []);
      }
      groupMap.get(groupName)!.push(task);
    });
    return Array.from(groupMap.entries());
  }, [upcomingTasks]);

  if (upcomingTasks.length === 0) {
    return (
      <EmptyState
        icon={<Calendar className="h-10 w-10 text-primary" />}
        title="No upcoming tasks"
        description="There are no tasks scheduled for today or in the future."
      />
    );
  }

  return (
    <div className="rounded-lg border border-border bg-surface">
      <ListViewHeader
        showWorkspace={true}
        showProject={true}
        showTaskType={true}
        tasks={upcomingTasks}
        selectedTaskIds={selectedTaskIds}
        setSelectedTaskIds={setSelectedTaskIds}
      />
      <div id="task-list">
        {groupedTasks.map(([groupName, tasksInGroup]) => (
          <TaskGroup
            key={groupName}
            groupName={groupName}
            tasks={tasksInGroup}
            onTaskSelect={onTaskSelect}
            onTaskUpdate={onTaskUpdate}
            showWorkspace={true}
            showProject={true}
            showTaskType={true}
            selectedTaskIds={selectedTaskIds}
            setSelectedTaskIds={setSelectedTaskIds}
          />
        ))}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/calendar-view/CalendarTaskItem.tsx
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { useApiResource } from "@/hooks/useApiResource";
import { useParams } from "react-router-dom";
import { Task } from "@/types";
import { TaskPriority } from "@/types/api";
import { Badge } from "@/components/ui/badge";
import { getIcon } from "@/lib/icons";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { ActionMenu } from "@/components/shared/ActionMenu";

const priorityBadgeConfig: Partial<
  Record<TaskPriority, { label: string; className: string }>
> = {
  [TaskPriority.URGENT]: {
    label: "Urgent",
    className: "bg-priority-urgent text-background border-priority-urgent",
  },
  [TaskPriority.HIGH]: {
    label: "High",
    className: "bg-priority-high text-background border-priority-high",
  },
  [TaskPriority.MEDIUM]: {
    label: "Medium",
    className: "bg-priority-medium text-background border-priority-medium",
  },
  [TaskPriority.LOW]: {
    label: "Low",
    className: "bg-priority-low text-background border-priority-low",
  },
};

export function CalendarTaskItem({
  task,
  onTaskSelect,
}: {
  task: Task;
  onTaskSelect: (taskId: string) => void;
}) {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const deleteTaskMutation = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    ["tasks", projectId]
  ).useDelete();
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: task.id,
    data: { type: "Task", task },
  });

  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm(`Delete task "${task.title}"?`)) {
      deleteTaskMutation.mutate(task.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    onTaskSelect(task.id);
  };

  const priorityConfig =
    task.priority && priorityBadgeConfig[task.priority]
      ? priorityBadgeConfig[task.priority]
      : null;

  const TaskTypeIcon = task.taskType?.icon ? getIcon(task.taskType.icon) : null;

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      onClick={() => onTaskSelect(task.id)}
      className={cn(isDragging && "dragging-card")}
    >
      <Card className="mb-2 cursor-grab border-border bg-element hover:bg-hover active:cursor-grabbing">
        <CardHeader className="flex flex-row items-start justify-between p-3 pb-2">
          <CardTitle className="text-sm font-semibold">{task.title}</CardTitle>
          <ActionMenu
            onEdit={handleEdit}
            onDelete={handleDelete}
            deleteDisabled={deleteTaskMutation.isPending}
          />
        </CardHeader>

        <CardContent className="flex flex-col gap-2 px-3 pb-2"></CardContent>

        <CardFooter className="flex items-center justify-between p-3 pt-1">
          <div className="flex flex-wrap items-center gap-2">
            {priorityConfig && (
              <Badge
                variant="outline"
                className={`text-xs ${priorityConfig.className}`}
              >
                {priorityConfig.label}
              </Badge>
            )}
            {task.taskType && (
              <Badge
                variant="outline"
                style={
                  task.taskType.color
                    ? {
                        backgroundColor: `${task.taskType.color}20`,
                        color: task.taskType.color,
                        borderColor: `${task.taskType.color}80`,
                      }
                    : {}
                }
              >
                {TaskTypeIcon && <TaskTypeIcon className="mr-1 h-3 w-3" />}
                {task.taskType.name}
              </Badge>
            )}
          </div>
          <div className="flex -space-x-2">
            {task.assignees?.map((assignee) => (
              <Avatar
                key={assignee.id}
                className="h-6 w-6 border-2 border-background"
              >
                <AvatarImage src={getAbsoluteUrl(assignee.avatarUrl)} />
                <AvatarFallback>{assignee.name.charAt(0)}</AvatarFallback>
              </Avatar>
            ))}
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
// FILE: src/features/project-management/components/calendar-view/CalendarToolbar.tsx
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { format } from "date-fns";

type View = "month" | "week" | "agenda";

interface CalendarToolbarProps {
  currentDate: Date;
  currentView: View;
  onNavigate: (action: "PREV" | "NEXT" | "TODAY") => void;
  onViewChange: (view: View) => void;
}

export function CalendarToolbar({
  currentDate,
  currentView,
  onNavigate,
  onViewChange,
}: CalendarToolbarProps) {
  const getPeriodLabel = () => {
    if (currentView === "month") {
      return format(currentDate, "MMMM yyyy");
    }
    if (currentView === "week") {
      const startOfWeek = new Date(currentDate);
      startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6);
      return `${format(startOfWeek, "MMM d")} - ${format(
        endOfWeek,
        "MMM d, yyyy"
      )}`;
    }
    return "Agenda";
  };

  return (
    <div className="mb-4 flex flex-col items-center justify-between gap-4 sm:flex-row">
      <div className="flex items-center space-x-2">
        {currentView !== "agenda" && (
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="icon"
              onClick={() => onNavigate("PREV")}
              className="h-9 w-9 bg-element hover:bg-hover"
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="icon"
              onClick={() => onNavigate("NEXT")}
              className="h-9 w-9 bg-element hover:bg-hover"
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        )}
        <h2 className="ml-4 text-xl font-semibold text-foreground">
          {getPeriodLabel()}
        </h2>
      </div>
      <div className="flex items-center space-x-4">
        <Button
          onClick={() => onNavigate("TODAY")}
          variant="outline"
          className="bg-element hover:bg-hover"
        >
          Today
        </Button>
        <div className="flex items-center rounded-lg bg-element p-1 text-sm">
          {(["month", "week", "agenda"] as View[]).map((view) => (
            <button
              key={view}
              onClick={() => onViewChange(view)}
              className={`view-btn rounded-md px-3 py-1 capitalize ${
                currentView === view ? "bg-hover font-semibold" : ""
              }`}
            >
              {view}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/calendar-view/CalendarView.tsx
import { useState, useCallback, useEffect } from "react";
import { Task } from "@/types";
import { CalendarToolbar } from "./CalendarToolbar";
import { MonthView } from "./MonthView";
import { WeekView } from "./WeekView";
import { AgendaView } from "./AgendaView";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  DragStartEvent,
  PointerSensor,
  closestCenter,
  useSensor,
  useSensors,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { CalendarTaskItem } from "./CalendarTaskItem";
import { useUpdateTask } from "../../api/useUpdateTask";
import { useParams } from "react-router-dom";

type View = "month" | "week" | "agenda";

interface CalendarViewProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;
}

export function CalendarView({
  tasks,
  onTaskSelect,
  onTaskUpdate,
}: CalendarViewProps) {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [currentView, setCurrentView] = useState<View>("month");
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const [localTasks, setLocalTasks] = useState<Task[]>(tasks);
  const [selectedTaskIds, setSelectedTaskIds] = useState<string[]>([]);

  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  useEffect(() => {
    setLocalTasks(tasks);
  }, [tasks]);

  const updateTaskMutation = useUpdateTask();

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const handleNavigate = useCallback(
    (action: "PREV" | "NEXT" | "TODAY") => {
      if (action === "TODAY") {
        setCurrentDate(new Date());
        return;
      }

      const newDate = new Date(currentDate);
      const increment = action === "PREV" ? -1 : 1;

      if (currentView === "month") {
        newDate.setMonth(newDate.getMonth() + increment);
      } else if (currentView === "week") {
        newDate.setDate(newDate.getDate() + 7 * increment);
      }
      setCurrentDate(newDate);
    },
    [currentDate, currentView]
  );

  const handleDragStart = (event: DragStartEvent) => {
    if (event.active.data.current?.type === "Task") {
      setActiveTask(event.active.data.current.task);
    }
  };
  const handleDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;
    if (
      !over ||
      active.id === over.id ||
      over.data.current?.type !== "date-cell"
    ) {
      return;
    }

    const taskId = active.id as string;
    const newDueDate = over.data.current?.date as Date;

    setLocalTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === taskId
          ? { ...task, dueDate: newDueDate.toISOString() }
          : task
      )
    );

    updateTaskMutation.mutate({
      taskId,
      workspaceId,
      projectId,
      taskData: { dueDate: newDueDate.toISOString() },
    });
  };

  return (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
    >
      <div className="h-full">
        <CalendarToolbar
          currentDate={currentDate}
          currentView={currentView}
          onNavigate={handleNavigate}
          onViewChange={setCurrentView}
        />
        <div className="rounded-lg bg-surface">
          {currentView === "month" && (
            <MonthView
              tasks={localTasks}
              currentDate={currentDate}
              onTaskSelect={onTaskSelect}
            />
          )}
          {currentView === "week" && (
            <WeekView
              tasks={localTasks}
              currentDate={currentDate}
              onTaskSelect={onTaskSelect}
            />
          )}
          {currentView === "agenda" && (
            <AgendaView
              tasks={tasks}
              onTaskSelect={onTaskSelect}
              onTaskUpdate={onTaskUpdate}
              selectedTaskIds={selectedTaskIds}
              setSelectedTaskIds={setSelectedTaskIds}
            />
          )}
        </div>
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <div className="dragging-card-overlay">
              <CalendarTaskItem task={activeTask} onTaskSelect={() => {}} />
            </div>
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}
// FILE: src/features/project-management/components/calendar-view/MonthView.tsx
import { Task } from "@/types";
import {
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  eachDayOfInterval,
  isSameMonth,
  isSameDay,
  format,
} from "date-fns";
import { CalendarTaskItem } from "./CalendarTaskItem";
import { useDroppable } from "@dnd-kit/core";
import { SortableContext } from "@dnd-kit/sortable";
import { cn } from "@/lib/utils";

interface MonthViewProps {
  tasks: Task[];
  currentDate: Date;
  onTaskSelect: (taskId: string) => void;
}

function DayCell({
  day,
  isCurrentMonth,
  tasks,
  onTaskSelect,
}: {
  day: Date;
  isCurrentMonth: boolean;
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}) {
  const { setNodeRef, isOver } = useDroppable({
    id: day.toISOString(),
    data: {
      type: "date-cell",
      date: day,
    },
  });

  const isToday = isSameDay(day, new Date());
  const taskIds = tasks.map((t) => t.id);

  return (
    <div
      ref={setNodeRef}
      className={cn(
        "calendar-day relative flex flex-col p-2",
        isCurrentMonth ? "" : "bg-background/50",
        isOver && "drag-over-day"
      )}
    >
      <span
        className={`self-start text-sm font-medium ${
          isToday
            ? "flex h-7 w-7 items-center justify-center rounded-full bg-primary text-primary-foreground"
            : "text-foreground"
        }`}
      >
        {format(day, "d")}
      </span>
      <div className="mt-1 flex-grow space-y-1 overflow-y-auto">
        <SortableContext items={taskIds}>
          {tasks.map((task) => (
            <CalendarTaskItem
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}

export function MonthView({
  tasks,
  currentDate,
  onTaskSelect,
}: MonthViewProps) {
  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const startDate = startOfWeek(monthStart);
  const endDate = endOfWeek(monthEnd);

  const days = eachDayOfInterval({ start: startDate, end: endDate });

  return (
    <div>
      <div className="grid grid-cols-7 border-b border-border text-center font-medium text-muted-foreground">
        {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
          <div key={day} className="py-3">
            {day}
          </div>
        ))}
      </div>
      <div className="calendar-grid">
        {days.map((day) => {
          const isCurrentMonth = isSameMonth(day, monthStart);
          const tasksForDay = tasks.filter(
            (task) => task.dueDate && isSameDay(new Date(task.dueDate), day)
          );

          return (
            <DayCell
              key={day.toString()}
              day={day}
              isCurrentMonth={isCurrentMonth}
              tasks={tasksForDay}
              onTaskSelect={onTaskSelect}
            />
          );
        })}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/calendar-view/WeekView.tsx
import { Task } from "@/types";
import {
  startOfWeek,
  eachDayOfInterval,
  isSameDay,
  format,
  endOfWeek,
} from "date-fns";
import { CalendarTaskItem } from "./CalendarTaskItem";
import { useDroppable } from "@dnd-kit/core";
import { SortableContext } from "@dnd-kit/sortable";
import { cn } from "@/lib/utils";

interface WeekViewProps {
  tasks: Task[];
  currentDate: Date;
  onTaskSelect: (taskId: string) => void;
}

function DayColumn({
  day,
  tasks,
  onTaskSelect,
}: {
  day: Date;
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}) {
  const { setNodeRef, isOver } = useDroppable({
    id: day.toISOString(),
    data: {
      type: "date-cell",
      date: day,
    },
  });

  const isToday = isSameDay(day, new Date());
  const taskIds = tasks.map((t) => t.id);

  return (
    <div
      ref={setNodeRef}
      className={cn(
        "calendar-day relative flex flex-col p-2",
        isToday ? "bg-hover" : "",
        isOver && "drag-over-day"
      )}
    >
      <div className="flex-grow space-y-2 overflow-y-auto">
        <SortableContext items={taskIds}>
          {tasks.map((task) => (
            <CalendarTaskItem
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}

export function WeekView({ tasks, currentDate, onTaskSelect }: WeekViewProps) {
  const weekStart = startOfWeek(currentDate);
  const weekEnd = endOfWeek(currentDate);
  const days = eachDayOfInterval({ start: weekStart, end: weekEnd });

  return (
    <div>
      <div className="grid grid-cols-7 border-b border-border text-center font-medium text-muted-foreground">
        {days.map((day) => (
          <div key={day.toString()} className="py-3">
            {format(day, "EEE")}{" "}
            <span className="text-foreground">{format(day, "d")}</span>
          </div>
        ))}
      </div>
      <div className="calendar-grid">
        {days.map((day) => {
          const tasksForDay = tasks.filter(
            (task) => task.dueDate && isSameDay(new Date(task.dueDate), day)
          );

          return (
            <DayColumn
              key={day.toString()}
              day={day}
              tasks={tasksForDay}
              onTaskSelect={onTaskSelect}
            />
          );
        })}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/ChecklistItem.tsx
import { useState } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { GripVertical, Trash2 } from "lucide-react";
import { ChecklistItem as ChecklistItemType } from "@/types";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

interface ChecklistItemProps {
  item: ChecklistItemType;
  onUpdate: (id: string, updates: Partial<ChecklistItemType>) => void;
  onRemove: (id: string) => void;
}

export function ChecklistItem({
  item,
  onUpdate,
  onRemove,
}: ChecklistItemProps) {
  const [text, setText] = useState(item.text);
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: item.id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    zIndex: isDragging ? 10 : "auto",
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setText(e.target.value);
  };
  const handleBlur = () => {
    if (text.trim() === "") {
      onRemove(item.id);
    } else if (text !== item.text) {
      onUpdate(item.id, { text });
    }
  };
  return (
    <div
      ref={setNodeRef}
      style={style}
      className="group flex items-center gap-2 rounded-md bg-element"
    >
      <span
        className="cursor-grab p-2 text-muted-foreground hover:text-foreground"
        {...listeners}
        {...attributes}
      >
        <GripVertical className="h-5 w-5" />
      </span>
      <Checkbox
        checked={item.completed}
        onCheckedChange={(checked) =>
          onUpdate(item.id, { completed: !!checked })
        }
      />
      <Input
        value={text}
        onChange={handleTextChange}
        onBlur={handleBlur}
        className={`h-8 flex-grow border-none bg-transparent focus:ring-0 ${item.completed ? "text-muted-foreground line-through" : ""}`}
      />
      <Button
        variant="ghost"
        size="icon"
        className="h-8 w-8 opacity-0 group-hover:opacity-100"
        onClick={() => onRemove(item.id)}
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}
// FILE: src/features/project-management/components/CreateProjectFromTemplateForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { FormInput, FormSelect } from "@/components/shared/form/FormFields";
import { useCreateProjectFromTemplate } from "../api/useCreateProjectFromTemplate";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { nameSchema } from "@/lib/schemas";
import { useManageProjectTemplates } from "../api/useManageProjectTemplates";

const formSchema = z.object({
  name: nameSchema("Project"),
  templateId: z.string().uuid("You must select a template."),
});

type FormValues = z.infer<typeof formSchema>;

interface CreateProjectFromTemplateFormProps {
  workspaceId: string;
  onSuccess?: () => void;
}

export function CreateProjectFromTemplateForm({
  workspaceId,
  onSuccess,
}: CreateProjectFromTemplateFormProps) {
  const { data: templatesData, isLoading: isLoadingTemplates } =
    useManageProjectTemplates().useGetAll();

  const createMutation = useCreateProjectFromTemplate(workspaceId);

  const methods = useForm<FormValues>({
    resolver: zodResolver(formSchema),
  });

  async function onSubmit(values: FormValues) {
    await createMutation.mutateAsync(
      { templateId: values.templateId, name: values.name },
      {
        onSuccess: () => {
          methods.reset();
          onSuccess?.();
        },
      }
    );
  }

  const templateOptions =
    templatesData?.data?.map((template: any) => ({
      value: template.id,
      label: template.name,
    })) || [];

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="name"
            label="New Project Name"
            placeholder="e.g., Q4 Marketing Campaign"
          />
          <FormSelect
            name="templateId"
            label="Template"
            placeholder={
              isLoadingTemplates ? "Loading templates..." : "Select a template"
            }
            options={templateOptions}
            disabled={isLoadingTemplates}
          />
          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending ? "Creating..." : "Create Project"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/project-management/components/CreateProjectRoleForm.tsx
import { z } from "zod";
import { nameSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const projectRoleSchema = z.object({
  name: nameSchema("Role"),
});

interface CreateProjectRoleFormProps {
  workspaceId: string;
  projectId: string;
  onSuccess?: () => void;
}

export function CreateProjectRoleForm({
  workspaceId,
  projectId,
  onSuccess,
}: CreateProjectRoleFormProps) {
  return (
    <ResourceForm
      schema={projectRoleSchema}
      resourcePath={`workspaces/${workspaceId}/projects/${projectId}/roles`}
      resourceKey={["projectRoles", projectId]}
      onSuccess={onSuccess}
      renderFields={() => (
        <FormInput
          name="name"
          label="Role Name"
          placeholder="e.g., Contributor"
        />
      )}
    />
  );
}
// FILE: src/features/project-management/components/CreateTaskForm.tsx
import { useForm, FormProvider } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import {
  FormInput,
  FormRichTextEditor,
  FormSelect,
  FormDatePicker,
  FormAssigneeSelector,
  FormTaskTypeSelector,
} from "@/components/shared/form/FormFields";
import { useApiResource } from "@/hooks/useApiResource";
import { useGetProfile } from "@/features/user-management/api/useGetProfile";
import { AxiosError } from "axios";
import { TaskStatus, TaskPriority } from "@/types/api";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect } from "react";

const taskSchema = z.object({
  title: z.string().min(1, "Title is required."),
  description: z.string().optional(),
  status: z.nativeEnum(TaskStatus),
  priority: z.nativeEnum(TaskPriority),
  taskTypeId: z.string().uuid().nullable().optional(),
  parentId: z.string().nullable().optional(),
  boardColumnId: z.string().uuid().optional().nullable(),
  startDate: z.date().optional().nullable(),
  dueDate: z.date().optional().nullable(),
  assigneeIds: z.array(z.string().uuid()).optional(),
});

type TaskFormValues = z.infer<typeof taskSchema>;

interface CreateTaskFormProps {
  workspaceId?: string;
  projectId?: string;
  parentId?: string | null;
  onSuccess?: () => void;
  defaultValues?: Partial<TaskFormValues>;
}

export function CreateTaskForm({
  workspaceId,
  projectId,
  parentId = null,
  onSuccess,
  defaultValues,
}: CreateTaskFormProps) {
  const taskResource = useApiResource(
    projectId
      ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
      : "tasks",
    projectId ? ["tasks", projectId] : ["myTasks"]
  );

  const createMutation = taskResource.useCreate();
  const { data: profileData } = useGetProfile();
  const methods = useForm<TaskFormValues>({
    resolver: zodResolver(taskSchema),
    defaultValues: {
      title: "",
      description: "",
      status: TaskStatus.TODO,
      priority: TaskPriority.NONE,
      taskTypeId: null,
      parentId: parentId,
      boardColumnId: null,
      startDate: null,
      dueDate: null,
      assigneeIds: [],
      ...defaultValues,
    },
  });

  useEffect(() => {
    if (profileData && !methods.getValues("assigneeIds")?.length) {
      methods.setValue("assigneeIds", [profileData.id]);
    }
  }, [profileData, methods]);
  async function onSubmit(values: TaskFormValues) {
    const submitData: Partial<TaskFormValues> & { projectId?: string } = {
      ...values,
    };
    if (projectId) {
      submitData.projectId = projectId;
    }
    if (!submitData.boardColumnId) delete submitData.boardColumnId;
    if (!submitData.parentId) delete submitData.parentId;
    if (!submitData.taskTypeId) delete submitData.taskTypeId;

    await createMutation.mutate(submitData, {
      onSuccess: () => {
        methods.reset();
        onSuccess?.();
      },
    });
  }

  const errorMessage = (
    createMutation.error as AxiosError<{ message?: string }>
  )?.response?.data?.message;
  const statusOptions = Object.values(TaskStatus).map((s) => ({
    value: s,
    label: s,
  }));
  const priorityOptions = Object.values(TaskPriority).map((p) => ({
    value: p,
    label: p,
  }));

  return (
    <FormProvider {...methods}>
      <Form {...methods}>
        <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-4">
          <FormInput
            name="title"
            label="Title"
            placeholder="e.g. Draft Q3 financial report"
          />
          <FormTaskTypeSelector
            name="taskTypeId"
            label="Task Type"
            workspaceId={workspaceId}
            projectId={projectId}
          />
          <FormAssigneeSelector
            name="assigneeIds"
            label="Assignees"
            projectId={projectId}
            workspaceId={workspaceId}
          />
          <FormRichTextEditor name="description" label="Description" />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="status"
              label="Status"
              placeholder="Set status"
              options={statusOptions}
            />
            <FormSelect
              name="priority"
              label="Priority"
              placeholder="Set priority"
              options={priorityOptions}
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <FormDatePicker name="startDate" label="Start Date (Optional)" />
            <FormDatePicker name="dueDate" label="Due Date (Optional)" />
          </div>

          {errorMessage && (
            <div className="text-sm font-medium text-red-500">
              {errorMessage}
            </div>
          )}

          <Button
            type="submit"
            className="w-full"
            disabled={createMutation.isPending}
          >
            {createMutation.isPending ? "Creating Task..." : "Create Task"}
          </Button>
        </form>
      </Form>
    </FormProvider>
  );
}
// FILE: src/features/project-management/components/CreateTemplateForm.tsx
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import {
  FormInput,
  FormRichTextEditor,
} from "@/components/shared/form/FormFields";

const templateSchema = z.object({
  name: nameSchema("Template"),
  description: descriptionSchema,
});

interface CreateTemplateFormProps {
  sourceProjectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CreateTemplateForm({
  sourceProjectId,
  initialData,
  onSuccess,
}: CreateTemplateFormProps) {
  return (
    <ResourceForm
      schema={templateSchema}
      resourcePath="project-templates"
      resourceKey={["projectTemplates"]}
      initialData={initialData}
      onSuccess={onSuccess}
      processValues={(values) => ({ ...values, sourceProjectId })}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Template Name"
            placeholder="e.g., Standard Software Project"
          />
          <FormRichTextEditor
            name="description"
            label="Description (Optional)"
          />
        </>
      )}
    />
  );
}

// FILE: src/features/project-management/components/CreateTemplateFromTaskForm.tsx
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";
import { z } from "zod";
import { Task } from "@/types";

const formSchema = z.object({
  name: z.string().min(1, "Template name is required."),
});

interface CreateTemplateFromTaskDialogProps {
  workspaceId: string;
  projectId: string;
  task: Task;
  onSuccess?: () => void;
}

export function CreateTemplateFromTaskForm({
  projectId,
  task,
  onSuccess,
}: CreateTemplateFromTaskDialogProps) {
  return (
    <ResourceForm
      schema={formSchema}
      resourcePath="task-templates"
      resourceKey={["taskTemplates", projectId]}
      initialData={{ name: `Template: ${task.title}` }}
      onSuccess={onSuccess}
      processValues={(values) => {
        const {
          id: _id,
          createdAt: _createdAt,
          updatedAt: _updatedAt,
          projectId: _pId,
          workspaceId: _wId,
          ...templateData
        } = task;
        return { name: values.name, templateData, projectId };
      }}
      renderFields={() => (
        <FormInput
          name="name"
          label="Template Name"
          placeholder="Enter a name for the template"
        />
      )}
    />
  );
}

// FILE: src/features/project-management/components/CustomFieldDefinitionForm.tsx
import { CustomFieldType } from "@/types/api";
import {
  FormInput,
  FormSelect,
  FormTextarea,
} from "@/components/shared/form/FormFields";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { z } from "zod";

const customFieldSchema = z.object({
  name: z.string().min(1, "Field name is required."),
  type: z.nativeEnum(CustomFieldType),
  options: z
    .object({
      values: z.union([z.array(z.string()), z.string()]),
    })
    .optional(),
});

interface FormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function CustomFieldDefinitionForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: FormProps) {
  const isEditMode = !!initialData;

  const processedInitialData = initialData
    ? {
        ...initialData,
        options: {
          values: initialData.options?.values?.join(", ") || "",
        },
      }
    : {
        type: CustomFieldType.TEXT,
        options: { values: "" },
      };

  return (
    <ResourceForm
      schema={customFieldSchema}
      resourcePath={`workspaces/${workspaceId}/projects/${projectId}/custom-fields`}
      resourceKey={["customFieldDefinitions", projectId]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => {
        const payload: any = { name: values.name, type: values.type };
        if (values.type === "SELECT" && values.options) {
          payload.options = {
            values:
              typeof values.options.values === "string"
                ? values.options.values
                    .split(",")
                    .map((s) => s.trim())
                    .filter(Boolean)
                : values.options.values,
          };
        }
        return payload;
      }}
      renderFields={({ watch }) => {
        const selectedType = watch("type");
        const fieldTypeOptions = Object.values(CustomFieldType).map((type) => ({
          value: type,
          label: type,
        }));

        return (
          <>
            <FormInput
              name="name"
              label="Field Name"
              placeholder="e.g., Story Points"
            />
            <FormSelect
              name="type"
              label="Field Type"
              placeholder="Select a field type"
              options={fieldTypeOptions}
              disabled={isEditMode}
            />
            {selectedType === "SELECT" && (
              <FormTextarea
                name="options.values"
                label="Options"
                placeholder="Enter comma-separated values, e.g., Low, Medium, High"
              />
            )}
          </>
        );
      }}
    />
  );
}
// FILE: src/features/project-management/components/CustomFieldDefinitionList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CustomFieldDefinitionForm } from "./CustomFieldDefinitionForm";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

export function CustomFieldDefinitionList({
  workspaceId,
  projectId,
}: ListProps) {
  const customFieldResource = useApiResource(
    `workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    ["customFieldDefinitions", projectId]
  );
  const { data: fieldsData, isLoading } = customFieldResource.useGetAll();
  const deleteMutation = customFieldResource.useDelete();
  const [editingFieldId, setEditingFieldId] = useState<string | null>(null);
  const handleDelete = (field: any) => {
    if (
      window.confirm(`Delete custom field "${field.name}"? This is permanent.`)
    ) {
      deleteMutation.mutate(field.id);
    }
  };

  if (isLoading) return <div>Loading custom fields...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Type</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {fieldsData?.data && fieldsData.data.length > 0 ? (
              fieldsData.data.map((field: any) => (
                <TableRow key={field.id}>
                  <TableCell className="font-medium">{field.name}</TableCell>
                  <TableCell>
                    <Badge variant="outline">{field.type}</Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <ActionMenu
                      onEdit={() => setEditingFieldId(field.id)}
                      onDelete={() => handleDelete(field)}
                      deleteDisabled={deleteMutation.isPending}
                    />
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={3} className="h-24 text-center">
                  No custom fields defined for this project.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <ResourceCrudDialog
        isOpen={!!editingFieldId}
        onOpenChange={(isOpen) => !isOpen && setEditingFieldId(null)}
        resourceId={editingFieldId}
        resourcePath={`workspaces/${workspaceId}/projects/${projectId}/custom-fields`}
        resourceKey={["customFieldDefinitions", projectId]}
        title="Edit Custom Field"
        description="Change the name or options for this custom field. The type cannot be changed after creation."
        form={CustomFieldDefinitionForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}
// FILE: src/features/project-management/components/EditProjectRoleDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { useApiResource } from "@/hooks/useApiResource";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

interface EditProjectRoleDialogProps {
  role: any | null;
  workspaceId: string;
  projectId: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function EditProjectRoleDialog({
  role,
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: EditProjectRoleDialogProps) {
  const permissionResource = useApiResource("admin/permissions", [
    "permissions",
  ]);
  const { data: permissionsData, isLoading: isLoadingPermissions } =
    permissionResource.useGetAll();
  const assignMutation = useApiMutation({
    mutationFn: (permissionId: string) =>
      api.post(
        `/workspaces/${workspaceId}/projects/${projectId}/roles/${role?.id}/permissions`,
        { permissionId }
      ),
    invalidateQueries: [["projectRoles", projectId]],
  });
  const revokeMutation = useApiMutation({
    mutationFn: (permissionId: string) =>
      api.delete(
        `/workspaces/${workspaceId}/projects/${projectId}/roles/${role?.id}/permissions/${permissionId}`
      ),
    invalidateQueries: [["projectRoles", projectId]],
  });
  if (!isOpen || !role) return null;

  const rolePermissionIds = new Set(role.permissions.map((p: any) => p.id));
  const handlePermissionToggle = (permissionId: string, isChecked: boolean) => {
    if (isChecked) {
      assignMutation.mutate(permissionId);
    } else {
      revokeMutation.mutate(permissionId);
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Edit Role: {role.name}</DialogTitle>
          <DialogDescription>
            Manage the permissions assigned to this project-specific role.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <h4 className="font-semibold">Permissions</h4>
          {isLoadingPermissions ? (
            <p>Loading permissions...</p>
          ) : (
            <div className="grid h-96 overflow-y-auto rounded-md border p-4 sm:grid-cols-2">
              {permissionsData?.data.map((permission: any) => (
                <div key={permission.id} className="flex items-center gap-2">
                  <Checkbox
                    id={`perm-${permission.id}`}
                    checked={rolePermissionIds.has(permission.id)}
                    onCheckedChange={(checked) =>
                      handlePermissionToggle(permission.id, !!checked)
                    }
                  />
                  <label
                    htmlFor={`perm-${permission.id}`}
                    className="text-sm font-medium"
                  >
                    {permission.action} on {permission.subject}
                  </label>
                </div>
              ))}
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/project-management/components/gantt-view/GanttChartView.tsx
import { useEffect, useRef } from "react";
import { gantt } from "dhtmlx-gantt";
import "dhtmlx-gantt/codebase/dhtmlxgantt.css";
import "@/styles/gantt.css";
import { Task } from "@/types";
import { useUpdateTask } from "../../api/useUpdateTask";
import { useParams } from "react-router-dom";
import { TaskLinkType } from "@/types/api";
import { useManageTaskLinks } from "../../api/useManageTaskLinks";

interface GanttChartViewProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

export function GanttChartView({ tasks, onTaskSelect }: GanttChartViewProps) {
  const ganttContainer = useRef<HTMLDivElement>(null);
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  const updateTaskMutation = useUpdateTask();
  const { addLink, removeLink } = useManageTaskLinks(workspaceId, projectId);

  useEffect(() => {
    if (!ganttContainer.current) return;

    gantt.config.date_format = "%Y-%m-%d %H:%i";
    gantt.config.columns = [
      { name: "text", label: "Task Name", tree: true, width: "*" },
      { name: "start_date", label: "Start Date", align: "center", width: 90 },
      { name: "duration", label: "Duration", align: "center", width: 70 },
    ];
    gantt.config.drag_links = true;
    gantt.config.drag_progress = true;
    gantt.config.drag_resize = true;
    gantt.config.drag_move = true;
    gantt.config.show_progress = true;
    gantt.config.fit_tasks = true;

    gantt.templates.tooltip_text = function (_start, _end, task) {
      const taskData = (task as any).resource as Task;
      if (!taskData) return task.text;
      const statusText = taskData.status.replace("_", " ");
      return `<b>${task.text}</b><br/>
              <b>Status:</b> ${statusText}<br/>
              <b>Duration:</b> ${task.duration} days`;
    };

    gantt.templates.task_class = function (_start, _end, task) {
      const taskData = (task as any).resource as Task;
      if (taskData) {
        return `gantt-status-${taskData.status.toLowerCase()}`;
      }
      return "";
    };

    gantt.plugins({
      marker: true,
    });

    gantt.init(ganttContainer.current);

    gantt.addMarker({
      start_date: new Date(),
      css: "gantt_today_marker",
      text: "Today",
      title: `Today: ${new Date().toLocaleDateString()}`,
    });

    const onTaskClickHandler = (id: string | number) => {
      onTaskSelect(id as string);
      return true;
    };

    const onAfterTaskDrag = (id: string | number, mode: string) => {
      const task = gantt.getTask(id);
      const updates: {
        startDate?: string | null;
        dueDate?: string | null;
        progress?: number;
      } = {};

      if (
        mode === gantt.config.drag_mode.progress &&
        typeof task.progress === "number"
      ) {
        updates.progress = Math.round(task.progress * 100);
      } else if (
        mode === gantt.config.drag_mode.move ||
        mode === gantt.config.drag_mode.resize
      ) {
        updates.startDate = task.start_date?.toISOString() ?? null;
        updates.dueDate = task.end_date?.toISOString() ?? null;
      }

      updateTaskMutation.mutate({
        taskId: id as string,
        workspaceId,
        projectId,
        taskData: updates,
      });
    };

    const onAfterLinkAddHandler = (_id: string | number, link: any) => {
      addLink({
        sourceTaskId: link.source,
        targetTaskId: link.target,
        type: TaskLinkType.BLOCKS,
      });
    };

    const onAfterLinkDeleteHandler = (id: string | number, link: any) => {
      removeLink({
        taskId: link.source,
        linkId: id as string,
      });
    };

    const taskClickEvent = gantt.attachEvent("onTaskClick", onTaskClickHandler);
    const taskDragEvent = gantt.attachEvent("onAfterTaskDrag", onAfterTaskDrag);
    const linkAddEvent = gantt.attachEvent(
      "onAfterLinkAdd",
      onAfterLinkAddHandler
    );
    const linkDeleteEvent = gantt.attachEvent(
      "onAfterLinkDelete",
      onAfterLinkDeleteHandler
    );

    return () => {
      gantt.detachEvent(taskClickEvent);
      gantt.detachEvent(taskDragEvent);
      gantt.detachEvent(linkAddEvent);
      gantt.detachEvent(linkDeleteEvent);
      gantt.clearAll();
    };
  }, [
    workspaceId,
    projectId,
    updateTaskMutation,
    onTaskSelect,
    addLink,
    removeLink,
  ]);

  useEffect(() => {
    if (tasks) {
      const ganttLinks: any[] = [];
      const ganttTasks = tasks.map((task) => {
        if (task.links) {
          task.links.forEach((link) => {
            if (link.type === TaskLinkType.BLOCKS && link.targetTask) {
              ganttLinks.push({
                id: link.id,
                source: task.id,
                target: link.targetTask.id,
                type: "0",
              });
            }
          });
        }
        return {
          id: task.id,
          text: task.title,
          start_date: task.startDate ? new Date(task.startDate) : new Date(),
          end_date: task.dueDate
            ? new Date(task.dueDate)
            : new Date(new Date().setDate(new Date().getDate() + 1)),
          parent: task.parentId || 0,
          progress:
            task.status === "DONE"
              ? 1
              : task.progress
                ? task.progress / 100
                : 0,
          open: true,
          resource: task,
        };
      });

      const formattedTasks = {
        data: ganttTasks,
        links: ganttLinks,
      };
      gantt.clearAll();
      gantt.parse(formattedTasks);
    }
  }, [tasks]);

  return (
    <div
      ref={ganttContainer}
      style={{ width: "100%", height: "calc(100vh - 220px)" }}
    ></div>
  );
}
// FILE: src/features/project-management/components/GlobalTaskTypeForm.tsx
import { z } from "zod";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const CreateTaskTypeDtoSchema = z.object({
  name: z.string().min(1, "Type name is required."),
  icon: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
});

interface TaskTypeFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function GlobalTaskTypeForm({
  initialData,
  onSuccess,
}: TaskTypeFormProps) {
  return (
    <ResourceForm
      schema={CreateTaskTypeDtoSchema}
      resourcePath="task-types"
      resourceKey={["taskTypes", "global"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Type Name"
            placeholder="e.g., Bug, Story, Spike"
          />
          <FormInput
            name="icon"
            label="Icon (Optional)"
            placeholder="e.g., Bug, Flame, Lightbulb"
          />
          <FormInput
            name="color"
            label="Color (Optional)"
            placeholder="e.g., #ff0000, blue.500"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/project-management/components/GlobalTaskTypeList.tsx
import { useState } from "react";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card } from "@/components/ui/card";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { GlobalTaskTypeForm } from "./GlobalTaskTypeForm";
import { ActionMenu } from "@/components/shared/ActionMenu";

export function GlobalTaskTypeList() {
  const { useGetAll, useDelete } = useManageTaskTypes();
  const { data: typesData, isLoading } = useGetAll();
  const deleteMutation = useDelete();
  const [editingTypeId, setEditingTypeId] = useState<string | null>(null);

  const handleDelete = (type: any) => {
    if (window.confirm(`Delete task type "${type.name}"? This is permanent.`)) {
      deleteMutation.mutate(type.id);
    }
  };

  if (isLoading) return <div>Loading custom task types...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Icon</TableHead>
              <TableHead>Color</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {typesData?.data && typesData.data.length > 0 ? (
              typesData.data.map((type: any) => (
                <TableRow key={type.id}>
                  <TableCell className="font-medium">{type.name}</TableCell>
                  <TableCell>{type.icon}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <div
                        className="h-4 w-4 rounded-full"
                        style={{
                          backgroundColor: type.color || "transparent",
                          border: "1px solid #ccc",
                        }}
                      />
                      <span>{type.color}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <ActionMenu
                      onEdit={() => setEditingTypeId(type.id)}
                      onDelete={() => handleDelete(type)}
                      deleteDisabled={deleteMutation.isPending}
                    />
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  No global task types defined.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <ResourceCrudDialog
        isOpen={!!editingTypeId}
        onOpenChange={(isOpen) => !isOpen && setEditingTypeId(null)}
        resourceId={editingTypeId}
        resourcePath={`/task-types`}
        resourceKey={["taskTypes", "global"]}
        title="Edit Task Type"
        description="Change the name, icon, or color for this task type."
        form={GlobalTaskTypeForm}
      />
    </>
  );
}
// FILE: src/features/project-management/components/GoalCard.tsx
import { EntityCard } from "@/components/shared/EntityCard";
import { Progress } from "@/components/ui/progress";
import { useManageGoals } from "../api/useManageGoals";
import { Badge } from "@/components/ui/badge";
import { KeyResultType } from "@/types/api";
import { Target } from "lucide-react";
import { Goal, KeyResult } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface GoalCardProps {
  goal: Goal;
  onEdit: () => void;
  workspaceId: string;
  projectId: string;
}

const getOverallProgress = (keyResults: KeyResult[] = []) => {
  if (keyResults.length === 0) return 0;
  const totalProgress = keyResults.reduce((sum, kr) => {
    const range = kr.targetValue - kr.startValue;
    if (range === 0) return sum + (kr.currentValue >= kr.targetValue ? 100 : 0);
    const progress = ((kr.currentValue - kr.startValue) / range) * 100;
    return sum + Math.max(0, Math.min(100, progress));
  }, 0);
  return totalProgress / keyResults.length;
};

const formatKeyResultValue = (value: number, type: KeyResultType) => {
  switch (type) {
    case KeyResultType.PERCENTAGE:
      return `${value}%`;
    case KeyResultType.CURRENCY:
      return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(value);
    case KeyResultType.BOOLEAN:
      return value > 0 ? "Done" : "Not Done";
    default:
      return value.toLocaleString();
  }
};

export function GoalCard({
  goal,
  onEdit,
  workspaceId,
  projectId,
}: GoalCardProps) {
  const { useDelete } = useManageGoals(workspaceId, projectId);
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(`Are you sure you want to delete the goal "${goal.name}"?`)
    ) {
      deleteMutation.mutate(goal.id);
    }
  };

  const overallProgress = getOverallProgress(goal.keyResults);

  return (
    <EntityCard
      title={goal.name}
      description={goal.description || "No description provided."}
      icon={Target}
      actions={
        <ActionMenu
          onEdit={onEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <div className="space-y-4">
        <div className="flex items-center gap-2">
          <Progress value={overallProgress} className="h-2" />
          <span className="text-sm font-semibold">
            {overallProgress.toFixed(0)}%
          </span>
        </div>
        <div className="space-y-2">
          {goal.keyResults.map((kr: KeyResult) => (
            <div key={kr.id} className="text-sm">
              <p className="font-medium">{kr.name}</p>
              <p className="text-muted-foreground">
                Progress: {formatKeyResultValue(kr.currentValue, kr.type)} /{" "}
                {formatKeyResultValue(kr.targetValue, kr.type)}
              </p>
            </div>
          ))}
        </div>
        <div className="flex justify-end">
          <Badge variant="outline">{goal.status.replace("_", " ")}</Badge>
        </div>
      </div>
    </EntityCard>
  );
}

// FILE: src/features/project-management/components/GoalForm.tsx
import {
  FormInput,
  FormRichTextEditor,
  FormDatePicker,
  FormSelect,
} from "@/components/shared/form/FormFields";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { GoalStatus, KeyResultType } from "@/types/api";
import { KeyResultInput } from "./KeyResultInput";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useManageGoals } from "../api/useManageGoals";

const keyResultSchema = z.object({
  id: z.string().uuid().optional(),
  name: z.string().min(1, "Key Result name is required."),
  type: z.nativeEnum(KeyResultType),
  startValue: z.number(),
  targetValue: z.number(),
  currentValue: z.number(),
});

const goalSchema = z.object({
  name: nameSchema("Goal"),
  description: descriptionSchema,
  status: z.nativeEnum(GoalStatus),
  startDate: z.date().nullable(),
  endDate: z.date().nullable(),
  ownerId: z.string().uuid("An owner is required."),
  keyResults: z.array(keyResultSchema).optional(),
});

interface GoalFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function GoalForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: GoalFormProps) {
  const { data: membersData, isLoading: isLoadingMembers } =
    useGetProjectMembers(workspaceId, projectId);

  const { resourceUrl, resourceKey } = useManageGoals(workspaceId, projectId);

  const statusOptions = Object.values(GoalStatus).map((s) => ({
    value: s,
    label: s.replace(/_/g, " "),
  }));

  const memberOptions =
    membersData?.map((m: any) => ({ value: m.userId, label: m.name })) || [];

  const processedInitialData = initialData
    ? {
        ...initialData,
        startDate: initialData.startDate
          ? new Date(initialData.startDate)
          : null,
        endDate: initialData.endDate ? new Date(initialData.endDate) : null,
      }
    : {
        status: GoalStatus.NOT_STARTED,
        startDate: null,
        endDate: null,
        keyResults: [],
      };

  return (
    <ResourceForm
      schema={goalSchema}
      resourcePath={resourceUrl}
      resourceKey={resourceKey}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      processValues={(values) => ({ ...values, projectId })}
      className="space-y-6"
      renderFields={({ control }) => (
        <>
          <FormInput
            name="name"
            label="Goal Name"
            placeholder="e.g., Achieve Product-Market Fit"
          />
          <FormRichTextEditor name="description" label="Description" />
          <div className="grid grid-cols-2 gap-4">
            <FormSelect
              name="status"
              label="Status"
              placeholder="Select status"
              options={statusOptions}
            />
            <FormSelect
              name="ownerId"
              label="Owner"
              placeholder={isLoadingMembers ? "Loading..." : "Select owner"}
              options={memberOptions}
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <FormDatePicker name="startDate" label="Start Date" />
            <FormDatePicker name="endDate" label="End Date" />
          </div>
          <KeyResultInput control={control} />
        </>
      )}
    />
  );
}
// FILE: src/features/project-management/components/GoalList.tsx
import { useState } from "react";
import { useManageGoals } from "../api/useManageGoals";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { EmptyState } from "@/components/shared/EmptyState";
import { Target } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { GoalCard } from "./GoalCard";
import { GoalForm } from "./GoalForm";
import { Goal } from "@/types";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

interface GoalListProps {
  workspaceId: string;
  projectId: string;
}

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2">
    {Array.from({ length: 2 }).map((_, i) => (
      <Skeleton key={i} className="h-48 w-full" />
    ))}
  </div>
);
export function GoalList({ workspaceId, projectId }: GoalListProps) {
  const { useGetAll } = useManageGoals(workspaceId, projectId);
  const { data, isLoading, isError } = useGetAll();
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const [editingGoalId, setEditingGoalId] = useState<string | null>(null);
  if (isLoading) return <ListSkeleton />;
  if (isError) return <div>Error loading goals.</div>;

  const goals = data?.data || [];
  return (
    <>
      <ListPageLayout
        title="Goals & OKRs"
        description="Track your project's high-level objectives and key results."
        actionButton={
          <Button onClick={() => setIsCreateOpen(true)}>
            <PlusCircle className="mr-2 h-4 w-4" />
            New Goal
          </Button>
        }
      >
        {goals.length === 0 ? (
          <EmptyState
            icon={<Target className="h-10 w-10 text-primary" />}
            title="No Goals Defined"
            description="Create your first goal to start tracking progress towards your objectives."
          />
        ) : (
          <div className="grid gap-4 md:grid-cols-1 lg:grid-cols-2">
            {goals.map((goal: Goal) => (
              <GoalCard
                key={goal.id}
                goal={goal}
                workspaceId={workspaceId}
                projectId={projectId}
                onEdit={() => setEditingGoalId(goal.id)}
              />
            ))}
          </div>
        )}
      </ListPageLayout>
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create a New Goal"
        description="Define a new objective for your project."
        form={GoalForm}
        formProps={{ workspaceId, projectId }}
        resourcePath={`workspaces/${workspaceId}/projects/${projectId}/goals`}
        resourceKey={["goals", projectId]}
        dialogClassName="sm:max-w-2xl"
      />
      <ResourceCrudDialog
        isOpen={!!editingGoalId}
        onOpenChange={(isOpen) => !isOpen && setEditingGoalId(null)}
        title="Edit Goal"
        description="Update the details of your goal and its key results."
        form={GoalForm}
        formProps={{ workspaceId, projectId }}
        resourcePath={`workspaces/${workspaceId}/projects/${projectId}/goals`}
        resourceKey={["goals", projectId]}
        resourceId={editingGoalId}
        dialogClassName="sm:max-w-2xl"
      />
    </>
  );
}
// FILE: src/features/project-management/components/InviteProjectMember.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ChevronsUpDown } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { FormLabel } from "@/components/ui/form";
import { useManageProjectMembers } from "../api/useManageProjectMembers";
import { useManageUsers } from "../../admin/users/api/useManageUsers";
import { useManageTeams } from "../../user-management/api/useManageTeams";
import { useApiResource } from "@/hooks/useApiResource";

interface InviteProjectMemberProps {
  workspaceId: string;
  projectId: string;
  existingMemberIds: string[];
}

export function InviteProjectMember({
  workspaceId,
  projectId,
  existingMemberIds,
}: InviteProjectMemberProps) {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [selectedRoleId, setSelectedRoleId] = useState<string | null>(null);
  const [isGuest, setIsGuest] = useState(false);
  const [selectedTeamId, setSelectedTeamId] = useState<string | null>(null);

  const { useGetAll: useGetAllUsers } = useManageUsers();
  const { useGetAll: useGetAllTeams } = useManageTeams(workspaceId);
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );

  const { data: usersData, isLoading: isLoadingUsers } = useGetAllUsers();
  const { data: rolesData, isLoading: isLoadingRoles } =
    projectRoleResource.useGetAll();
  const { data: teamsData, isLoading: isLoadingTeams } = useGetAllTeams();

  const { useAddMember, useAddTeam } = useManageProjectMembers(
    workspaceId,
    projectId
  );
  const addMemberMutation = useAddMember();
  const addTeamMutation = useAddTeam();

  const availableUsers =
    usersData?.data.filter((u: any) => !existingMemberIds.includes(u.id)) || [];

  const handleInviteUser = () => {
    if (selectedUserId && selectedRoleId) {
      addMemberMutation.mutate(
        { userId: selectedUserId, roleId: selectedRoleId, isGuest },
        {
          onSuccess: () => {
            setSelectedUserId(null);
          },
        }
      );
    }
  };

  const handleInviteTeam = () => {
    if (selectedTeamId && selectedRoleId) {
      addTeamMutation.mutate(
        { teamId: selectedTeamId, roleId: selectedRoleId, isGuest },
        {
          onSuccess: () => {
            setSelectedTeamId(null);
          },
        }
      );
    }
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle>Invite to Project</CardTitle>
        <CardDescription>
          Add individual users or entire teams to this project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="user">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="user">Invite User</TabsTrigger>
            <TabsTrigger value="team">Invite Team</TabsTrigger>
          </TabsList>
          <TabsContent value="user" className="mt-4 space-y-4">
            <div className="space-y-2">
              <Label>User</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    className="w-full justify-between"
                  >
                    {selectedUserId
                      ? usersData?.data.find(
                          (u: any) => u.id === selectedUserId
                        )?.name
                      : "Select a user"}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                  <Command>
                    <CommandInput placeholder="Search by name or email..." />
                    <CommandList>
                      {isLoadingUsers && <CommandItem>Loading...</CommandItem>}
                      <CommandEmpty>No users found.</CommandEmpty>
                      <CommandGroup>
                        {availableUsers.map((user: any) => (
                          <CommandItem
                            value={user.name}
                            key={user.id}
                            onSelect={() => setSelectedUserId(user.id)}
                          >
                            {user.name} ({user.email})
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>
            <div className="space-y-2">
              <Label>Role</Label>
              <Select
                onValueChange={setSelectedRoleId}
                disabled={isLoadingRoles}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a role" />
                </SelectTrigger>
                <SelectContent>
                  {rolesData?.data.map((role: any) => (
                    <SelectItem key={role.id} value={role.id}>
                      {role.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="is-guest-user"
                checked={isGuest}
                onCheckedChange={setIsGuest}
              />
              <FormLabel htmlFor="is-guest-user">Add as guest</FormLabel>
            </div>
            <Button
              onClick={handleInviteUser}
              disabled={
                !selectedUserId ||
                !selectedRoleId ||
                addMemberMutation.isPending
              }
              className="w-full"
            >
              {addMemberMutation.isPending ? "Inviting..." : "Invite User"}
            </Button>
          </TabsContent>
          <TabsContent value="team" className="mt-4 space-y-4">
            <div className="space-y-2">
              <Label>Team</Label>
              <Select
                onValueChange={setSelectedTeamId}
                disabled={isLoadingTeams}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a team" />
                </SelectTrigger>
                <SelectContent>
                  {teamsData?.data.map((team: any) => (
                    <SelectItem key={team.id} value={team.id}>
                      {team.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>Role</Label>
              <Select
                onValueChange={setSelectedRoleId}
                disabled={isLoadingRoles}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Assign a role to all team members" />
                </SelectTrigger>
                <SelectContent>
                  {rolesData?.data.map((role: any) => (
                    <SelectItem key={role.id} value={role.id}>
                      {role.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                id="is-guest-team"
                checked={isGuest}
                onCheckedChange={setIsGuest}
              />
              <FormLabel htmlFor="is-guest-team">Add as guests</FormLabel>
            </div>
            <Button
              onClick={handleInviteTeam}
              disabled={
                !selectedTeamId || !selectedRoleId || addTeamMutation.isPending
              }
              className="w-full"
            >
              {addTeamMutation.isPending ? "Adding Team..." : "Invite Team"}
            </Button>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}

// FILE: src/features/project-management/components/kanban-view/KanbanBoard.tsx
import { useState, useEffect } from "react";
import {
  DndContext,
  DragEndEvent,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  DragStartEvent,
  DragOverEvent,
  closestCorners,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { Task } from "@/types";
import { KanbanColumn } from "./KanbanColumn";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { ViewColumn } from "@/types";
import { TaskStatus } from "@/types/api";
import { arrayMove } from "@dnd-kit/sortable";
import { useUpdateTask } from "../../api/useUpdateTask";

interface KanbanBoardProps {
  scope: "user" | "project";
  workspaceId?: string;
  projectId?: string;
  columns: ViewColumn[];
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  columnStatusMap: Record<string, TaskStatus>;
}

export function KanbanBoard({
  columns,
  tasks,
  onTaskSelect,
  columnStatusMap,
}: KanbanBoardProps) {
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const updateTaskMutation = useUpdateTask();
  const [tasksByColumn, setTasksByColumn] = useState<Record<string, Task[]>>(
    {}
  );

  useEffect(() => {
    const grouped: Record<string, Task[]> = {};
    columns.forEach((col) => (grouped[col.id] = []));

    tasks.forEach((task) => {
      const column = columns.find(
        (col) => columnStatusMap[col.id] === task.status
      );
      if (column) {
        grouped[column.id].push(task);
      }
    });
    setTasksByColumn(grouped);
  }, [tasks, columns, columnStatusMap]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const findColumnForTask = (taskId: string) => {
    return Object.keys(tasksByColumn).find((colId) =>
      tasksByColumn[colId].some((task) => task.id === taskId)
    );
  };

  const onDragStart = (event: DragStartEvent) => {
    const task = tasks.find((t) => t.id === event.active.id);
    if (task) setActiveTask(task);
  };

  const onDragOver = (event: DragOverEvent) => {
    const { active, over } = event;
    if (!over || !activeTask || active.id === over.id) return;

    const sourceColumnId = findColumnForTask(active.id as string);
    const destColumnId =
      over.data.current?.type === "Column"
        ? (over.id as string)
        : findColumnForTask(over.id as string);

    if (!sourceColumnId || !destColumnId) return;

    if (sourceColumnId !== destColumnId) {
      setTasksByColumn((prev) => {
        const sourceItems = prev[sourceColumnId] || [];
        const destItems = prev[destColumnId] || [];

        const activeIndex = sourceItems.findIndex((t) => t.id === active.id);
        if (activeIndex === -1) return prev;

        const [movedItem] = sourceItems.splice(activeIndex, 1);

        const overIsTask = over.data.current?.type === "Task";
        let overIndex = -1;
        if (overIsTask) {
          overIndex = destItems.findIndex((t) => t.id === over.id);
        }

        if (overIndex !== -1) {
          destItems.splice(overIndex, 0, movedItem);
        } else {
          destItems.push(movedItem);
        }

        return {
          ...prev,
          [sourceColumnId]: sourceItems,
          [destColumnId]: destItems,
        };
      });
    } else {
      setTasksByColumn((prev) => {
        const items = prev[sourceColumnId];
        const oldIndex = items.findIndex((t) => t.id === active.id);
        const newIndex = items.findIndex((t) => t.id === over.id);

        if (oldIndex !== -1 && newIndex !== -1 && oldIndex !== newIndex) {
          return {
            ...prev,
            [sourceColumnId]: arrayMove(items, oldIndex, newIndex),
          };
        }
        return prev;
      });
    }
  };

  const onDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;

    if (!over) return;

    const task = tasks.find((t) => t.id === active.id);
    if (!task) return;

    const destColumnId =
      over.data.current?.type === "Column"
        ? (over.id as string)
        : findColumnForTask(over.id as string);

    if (!destColumnId) return;

    const originalStatus = task.status;
    const newStatus = columnStatusMap[destColumnId];

    if (newStatus && originalStatus !== newStatus) {
      updateTaskMutation.mutate({
        taskId: task.id,
        workspaceId: task.workspaceId,
        projectId: task.projectId,
        taskData: { status: newStatus },
      });
    }
  };

  return (
    <>
      <DndContext
        sensors={sensors}
        collisionDetection={closestCorners}
        onDragStart={onDragStart}
        onDragOver={onDragOver}
        onDragEnd={onDragEnd}
      >
        <div className="flex h-full gap-4 overflow-x-auto bg-background p-1">
          {columns.map((col: ViewColumn) => (
            <KanbanColumn
              key={col.id}
              column={col}
              tasks={tasksByColumn[col.id] || []}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </div>
        {createPortal(
          <DragOverlay>
            {activeTask ? (
              <div className="dragging-card-overlay">
                <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
              </div>
            ) : null}
          </DragOverlay>,
          document.body
        )}
      </DndContext>
    </>
  );
}
// FILE: src/features/project-management/components/kanban-view/KanbanColumn.tsx
import { useDroppable } from "@dnd-kit/core";
import { SortableContext } from "@dnd-kit/sortable";
import { Task, ViewColumn } from "@/types";
import { KanbanTaskCard } from "./KanbanTaskCard";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface KanbanColumnProps {
  column: ViewColumn;
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
}

export function KanbanColumn({
  column,
  tasks,
  onTaskSelect,
}: KanbanColumnProps) {
  const { setNodeRef, isOver } = useDroppable({
    id: column.id,
    data: { type: "Column", column },
  });
  const tasksIds = tasks.map((task: any) => task.id);
  return (
    <div
      ref={setNodeRef}
      className={cn(
        "flex w-72 shrink-0 flex-col rounded-lg bg-surface transition-colors",
        isOver && "drag-over-column"
      )}
    >
      <div className="flex flex-row items-center justify-between gap-2 p-3">
        <h3 className="font-semibold text-foreground">{column.name}</h3>
        <Badge variant="secondary" className="text-xs">
          {tasks.length}
        </Badge>
      </div>
      <div className="mb-2 border-b border-border"></div>
      <div className="flex-grow space-y-2 overflow-y-auto px-2 pb-2">
        <SortableContext items={tasksIds}>
          {tasks.map((task: any) => (
            <KanbanTaskCard
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/kanban-view/KanbanTaskCard.tsx
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Calendar, Repeat, Briefcase } from "lucide-react";
import { useApiResource } from "@/hooks/useApiResource";
import { useParams } from "react-router-dom";
import { format } from "date-fns";
import { Task } from "@/types";
import { TaskPriority } from "@/types/api";
import { Badge } from "@/components/ui/badge";
import { getIcon } from "@/lib/icons";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { ActionMenu } from "@/components/shared/ActionMenu";

const priorityBadgeConfig: Partial<
  Record<TaskPriority, { label: string; className: string }>
> = {
  [TaskPriority.URGENT]: {
    label: "Urgent",
    className: "bg-priority-urgent text-background border-priority-urgent",
  },
  [TaskPriority.HIGH]: {
    label: "High",
    className: "bg-priority-high text-background border-priority-high",
  },
  [TaskPriority.MEDIUM]: {
    label: "Medium",
    className: "bg-priority-medium text-background border-priority-medium",
  },
  [TaskPriority.LOW]: {
    label: "Low",
    className: "bg-priority-low text-background border-priority-low",
  },
};

export function KanbanTaskCard({
  task,
  onTaskSelect,
}: {
  task: Task;
  onTaskSelect: (taskId: string) => void;
}) {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const deleteTaskMutation = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/tasks`,
    ["tasks", projectId]
  ).useDelete();
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: task.id,
    data: { type: "Task", task },
  });

  const style = {
    transition,
    transform: CSS.Transform.toString(transform),
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm(`Delete task "${task.title}"?`)) {
      deleteTaskMutation.mutate(task.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    onTaskSelect(task.id);
  };

  const priorityConfig =
    task.priority && priorityBadgeConfig[task.priority]
      ? priorityBadgeConfig[task.priority]
      : null;

  const TaskTypeIcon = task.taskType?.icon ? getIcon(task.taskType.icon) : null;

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      onClick={() => onTaskSelect(task.id)}
      className={cn(isDragging && "dragging-card")}
    >
      <Card className="mb-2 cursor-grab border-border bg-element hover:bg-hover active:cursor-grabbing">
        <CardHeader className="flex flex-row items-start justify-between p-3 pb-2">
          <CardTitle className="text-sm font-semibold">{task.title}</CardTitle>
          <ActionMenu onEdit={handleEdit} onDelete={handleDelete} />
        </CardHeader>

        <CardContent className="flex flex-col gap-2 px-3 pb-2">
          <div className="flex items-center gap-3 text-sm text-muted-foreground">
            {task.dueDate && (
              <div className="flex items-center gap-1">
                <Calendar className="h-3.5 w-3.5" />
                <span>{format(new Date(task.dueDate), "MMM d")}</span>
              </div>
            )}
            {task.recurrenceRule && <Repeat className="h-3.5 w-3.5" />}
          </div>
          <div className="flex items-center gap-3 text-sm text-muted-foreground">
            {!projectId && task.projectName && (
              <div className="flex items-center gap-1">
                <Briefcase className="h-3.5 w-3.5" />
                <span className="truncate">
                  {task.workspaceName}/{task.projectName}
                </span>
              </div>
            )}
          </div>
        </CardContent>

        <CardFooter className="flex items-center justify-between p-3 pt-1">
          <div className="flex flex-wrap items-center gap-2">
            {priorityConfig && (
              <Badge
                variant="outline"
                className={`text-xs ${priorityConfig.className}`}
              >
                {priorityConfig.label}
              </Badge>
            )}
            {task.taskType && (
              <Badge
                variant="outline"
                style={
                  task.taskType.color
                    ? {
                        backgroundColor: `${task.taskType.color}20`,
                        color: task.taskType.color,
                        borderColor: `${task.taskType.color}80`,
                      }
                    : {}
                }
              >
                {TaskTypeIcon && <TaskTypeIcon className="mr-1 h-3 w-3" />}
                {task.taskType.name}
              </Badge>
            )}
          </div>
          <div className="flex -space-x-2">
            {task.assignees?.map((assignee) => (
              <Avatar
                key={assignee.id}
                className="h-6 w-6 border-2 border-background"
              >
                <AvatarImage src={getAbsoluteUrl(assignee.avatarUrl)} />
                <AvatarFallback>{assignee.name.charAt(0)}</AvatarFallback>
              </Avatar>
            ))}
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
// FILE: src/features/project-management/components/KeyResultInput.tsx
import { Control, useFieldArray } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { KeyResultType } from "@/types/api";
import { PlusCircle, Trash2 } from "lucide-react";

interface KeyResultInputProps {
  control: Control<any>;
}

export function KeyResultInput({ control }: KeyResultInputProps) {
  const { fields, append, remove } = useFieldArray({
    control,
    name: "keyResults",
  });
  return (
    <div className="space-y-4">
      <FormLabel>Key Results</FormLabel>
      <div className="space-y-4">
        {fields.map((field, index) => (
          <div
            key={field.id}
            className="grid grid-cols-12 gap-2 rounded-md border p-4"
          >
            <FormField
              control={control}
              name={`keyResults.${index}.name`}
              render={({ field }) => (
                <FormItem className="col-span-12">
                  <FormLabel className="text-xs">Name</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder="e.g., Increase user engagement"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`keyResults.${index}.type`}
              render={({ field }) => (
                <FormItem className="col-span-3">
                  <FormLabel className="text-xs">Type</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(KeyResultType).map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`keyResults.${index}.startValue`}
              render={({ field }) => (
                <FormItem className="col-span-2">
                  <FormLabel className="text-xs">Start</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      {...field}
                      onChange={(e) =>
                        field.onChange(parseFloat(e.target.value))
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`keyResults.${index}.targetValue`}
              render={({ field }) => (
                <FormItem className="col-span-2">
                  <FormLabel className="text-xs">Target</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      {...field}
                      onChange={(e) =>
                        field.onChange(parseFloat(e.target.value))
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name={`keyResults.${index}.currentValue`}
              render={({ field }) => (
                <FormItem className="col-span-2">
                  <FormLabel className="text-xs">Current</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      {...field}
                      onChange={(e) =>
                        field.onChange(parseFloat(e.target.value))
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="col-span-3 flex items-end">
              <Button
                type="button"
                variant="destructive"
                size="sm"
                className="w-full"
                onClick={() => remove(index)}
              >
                <Trash2 className="mr-2 h-4 w-4" /> Remove
              </Button>
            </div>
          </div>
        ))}
      </div>
      <Button
        type="button"
        variant="outline"
        size="sm"
        onClick={() =>
          append({
            name: "",
            type: KeyResultType.NUMBER,
            startValue: 0,
            targetValue: 100,
            currentValue: 0,
          })
        }
      >
        <PlusCircle className="mr-2 h-4 w-4" /> Add Key Result
      </Button>
    </div>
  );
}
// FILE: src/features/project-management/components/LinkDocumentForm.tsx
import { z } from "zod";
import { FormInput } from "@/components/shared/form/FormFields";
import { FormWrapper } from "@/components/shared/form/FormWrapper";
import { UseMutationResult } from "@tanstack/react-query";
import { AxiosError } from "axios";

const linkSchema = z.object({
  title: z.string().min(1, "A title is required."),
  externalUrl: z.string().url("Please enter a valid URL."),
});
type LinkFormValues = z.infer<typeof linkSchema>;

interface LinkDocumentFormProps {
  onSubmit: (values: LinkFormValues) => void;
  mutation: UseMutationResult<any, AxiosError, any, any>;
}

export function LinkDocumentForm({
  onSubmit,
  mutation,
}: LinkDocumentFormProps) {
  return (
    <FormWrapper
      schema={linkSchema}
      onSubmit={onSubmit}
      mutation={mutation}
      submitButtonText="Link Document"
      renderFields={() => (
        <>
          <FormInput
            name="title"
            label="Title"
            placeholder="e.g., Project Brief"
          />
          <FormInput
            name="externalUrl"
            label="URL"
            placeholder="https://example.com/document"
          />
        </>
      )}
    />
  );
}

// FILE: src/features/project-management/components/list-view/bulk-actions/BulkAssigneeSelector.tsx
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { UserPlus } from "lucide-react";
import { AssigneeSelector } from "../../AssigneeSelector";
import { Task } from "@/types";

interface BulkAssigneeSelectorProps {
  selectedTaskIds: string[];
  tasks: Task[];
  onUpdate: (updates: {
    addAssigneeIds?: string[];
    removeAssigneeIds?: string[];
  }) => void;
}

export function BulkAssigneeSelector({
  selectedTaskIds,
  tasks,
  onUpdate,
}: BulkAssigneeSelectorProps) {
  const firstSelectedTask = tasks.find((t) => t.id === selectedTaskIds[0]);

  if (!firstSelectedTask) {
    return null;
  }

  const allAssigneeIds = new Set<string>();
  tasks
    .filter((t) => selectedTaskIds.includes(t.id))
    .forEach((task) => {
      task.assignees.forEach((assignee) => allAssigneeIds.add(assignee.id));
    });

  const handleSelectionChange = (newIds: string[]) => {
    const currentIds = Array.from(allAssigneeIds);
    const addAssigneeIds = newIds.filter((id) => !currentIds.includes(id));
    const removeAssigneeIds = currentIds.filter((id) => !newIds.includes(id));

    onUpdate({ addAssigneeIds, removeAssigneeIds });
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm">
          <UserPlus className="mr-2 h-4 w-4" />
          Assign
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0">
        <AssigneeSelector
          projectId={firstSelectedTask.projectId}
          workspaceId={firstSelectedTask.workspaceId}
          selectedIds={Array.from(allAssigneeIds)}
          onSelectionChange={handleSelectionChange}
        />
      </PopoverContent>
    </Popover>
  );
}

// FILE: src/features/project-management/components/list-view/bulk-actions/BulkDatePicker.tsx
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar as CalendarIcon } from "lucide-react";

interface BulkDatePickerProps {
  onUpdate: (updates: { dueDate: Date | null }) => void;
}

export function BulkDatePicker({ onUpdate }: BulkDatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm">
          <CalendarIcon className="mr-2 h-4 w-4" />
          Set Due Date
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar
          mode="single"
          onSelect={(date) => onUpdate({ dueDate: date || null })}
        />
      </PopoverContent>
    </Popover>
  );
}
// FILE: src/features/project-management/components/list-view/bulk-actions/BulkMoveProjectSelector.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Briefcase } from "lucide-react";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";

interface BulkMoveProjectSelectorProps {
  onUpdate: (updates: { projectId: string }) => void;
}

export function BulkMoveProjectSelector({
  onUpdate,
}: BulkMoveProjectSelectorProps) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const [workspaceId, setWorkspaceId] = useState<string | undefined>();
  const [projectId, setProjectId] = useState<string | undefined>();

  const { data: workspacesData } = useGetWorkspaces();
  const { data: projectsData } = useGetProjects(workspaceId);

  const handleMove = () => {
    if (projectId) {
      onUpdate({ projectId });
      setPopoverOpen(false);
    }
  };

  return (
    <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm">
          <Briefcase className="mr-2 h-4 w-4" />
          Move to Project
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 space-y-4">
        <div className="space-y-2">
          <Label>Workspace</Label>
          <Select onValueChange={setWorkspaceId}>
            <SelectTrigger>
              <SelectValue placeholder="Select a workspace..." />
            </SelectTrigger>
            <SelectContent>
              {workspacesData?.data.map((ws) => (
                <SelectItem key={ws.id} value={ws.id}>
                  {ws.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="space-y-2">
          <Label>Project</Label>
          <Select onValueChange={setProjectId} disabled={!workspaceId}>
            <SelectTrigger>
              <SelectValue placeholder="Select a project..." />
            </SelectTrigger>
            <SelectContent>
              {projectsData?.data.map((p) => (
                <SelectItem key={p.id} value={p.id}>
                  {p.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <Button onClick={handleMove} disabled={!projectId} className="w-full">
          Move Tasks
        </Button>
      </PopoverContent>
    </Popover>
  );
}
// FILE: src/features/project-management/components/list-view/bulk-actions/BulkTaskTypeSelector.tsx
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Tag } from "lucide-react";
import { TaskTypeSelector } from "../../TaskTypeSelector";
import { Task } from "@/types";

interface BulkTaskTypeSelectorProps {
  selectedTaskIds: string[];
  tasks: Task[];
  onUpdate: (updates: { taskTypeId: string | null }) => void;
}

export function BulkTaskTypeSelector({
  selectedTaskIds,
  tasks,
  onUpdate,
}: BulkTaskTypeSelectorProps) {
  const firstSelectedTask = tasks.find((t) => t.id === selectedTaskIds[0]);

  if (!firstSelectedTask?.projectId) {
    return null;
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm">
          <Tag className="mr-2 h-4 w-4" />
          Set Type
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <TaskTypeSelector
          projectId={firstSelectedTask.projectId}
          workspaceId={firstSelectedTask.workspaceId}
          value={null}
          onValueChange={(value) => onUpdate({ taskTypeId: value })}
        />
      </PopoverContent>
    </Popover>
  );
}
// FILE: src/features/project-management/components/list-view/BulkActionsToolbar.tsx
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";
import { TaskPriority, TaskStatus } from "@/types/api";
import { Task } from "@/types";
import { BulkAssigneeSelector } from "./bulk-actions/BulkAssigneeSelector";
import { BulkDatePicker } from "./bulk-actions/BulkDatePicker";
import { BulkMoveProjectSelector } from "./bulk-actions/BulkMoveProjectSelector";
import { BulkTaskTypeSelector } from "./bulk-actions/BulkTaskTypeSelector";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

type BulkUpdatePayload = {
  status?: TaskStatus;
  priority?: TaskPriority;
  projectId?: string;
  taskTypeId?: string | null;
  dueDate?: Date | null;
  addAssigneeIds?: string[];
  removeAssigneeIds?: string[];
};

interface BulkActionsToolbarProps {
  selectedTaskIds: string[];
  tasks: Task[];
  onBulkDelete: () => void;
  onBulkUpdate: (updates: BulkUpdatePayload) => void;
  isDeleting: boolean;
  isUpdating: boolean;
}

export function BulkActionsToolbar({
  selectedTaskIds,
  tasks,
  onBulkDelete,
  onBulkUpdate,
  isDeleting,
  isUpdating,
}: BulkActionsToolbarProps) {
  const isActionPending = isDeleting || isUpdating;

  return (
    <div className="flex items-center justify-between rounded-lg border border-border bg-surface p-2">
      <span className="text-sm font-medium">
        {selectedTaskIds.length} task(s) selected
      </span>
      <div className="flex items-center gap-2">
        <Select
          onValueChange={(status) =>
            onBulkUpdate({ status: status as TaskStatus })
          }
          disabled={isActionPending}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Change status..." />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskStatus).map((status) => (
              <SelectItem key={status} value={status}>
                {status.replace(/_/g, " ")}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select
          onValueChange={(priority) =>
            onBulkUpdate({ priority: priority as TaskPriority })
          }
          disabled={isActionPending}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Change priority..." />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskPriority).map((priority) => (
              <SelectItem key={priority} value={priority}>
                {priority}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <BulkAssigneeSelector
          selectedTaskIds={selectedTaskIds}
          tasks={tasks}
          onUpdate={onBulkUpdate}
        />
        <BulkDatePicker onUpdate={onBulkUpdate} />
        <BulkTaskTypeSelector
          selectedTaskIds={selectedTaskIds}
          tasks={tasks}
          onUpdate={onBulkUpdate}
        />
        <BulkMoveProjectSelector onUpdate={onBulkUpdate} />

        <Button
          variant="destructive"
          size="sm"
          onClick={onBulkDelete}
          disabled={isActionPending}
        >
          <Trash2 className="mr-2 h-4 w-4" />
          Delete
        </Button>
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/list-view/cells/AssigneeCell.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAbsoluteUrl } from "@/lib/utils";
import { Task, TaskAssignee } from "@/types";
import { Button } from "@/components/ui/button";
import { UserPlus } from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { AssigneeSelector } from "../../AssigneeSelector";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

const useAssigneeMutations = (task: Task) => {
  const isProjectTask = !!task.projectId;
  const workspaceId = task.workspaceId;
  const projectId = task.projectId;
  const invalidateQueries: (string | null | undefined)[][] = [
    ["task", task.id],
    ["myTasks"],
  ];
  if (projectId) {
    invalidateQueries.push(["tasks", projectId]);
  }

  const assignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees`
        : `/tasks/${task.id}/assignees`;
      return api.post(url, { userId });
    },
    invalidateQueries,
  });

  const unassignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees/${userId}`
        : `/tasks/${task.id}/assignees/${userId}`;
      return api.delete(url);
    },
    invalidateQueries,
  });

  return { assignMutation, unassignMutation };
};

export function AssigneeCell({ task }: { task: Task }) {
  const { assignMutation, unassignMutation } = useAssigneeMutations(task);

  const handleSelectionChange = (newIds: string[]) => {
    const currentIds = task.assignees.map((a) => a.id);

    const added = newIds.filter((id) => !currentIds.includes(id));
    const removed = currentIds.filter((id) => !newIds.includes(id));

    added.forEach((userId) => assignMutation.mutate(userId));
    removed.forEach((userId) => unassignMutation.mutate(userId));
  };

  const MAX_VISIBLE_AVATARS = 3;
  const visibleAssignees = task.assignees.slice(0, MAX_VISIBLE_AVATARS);
  const hiddenCount = task.assignees.length - MAX_VISIBLE_AVATARS;

  return (
    <div className="flex items-center -space-x-2">
      {visibleAssignees.map((assignee: TaskAssignee) => (
        <Avatar
          key={assignee.id}
          className="h-7 w-7 rounded-full ring-2 ring-surface"
        >
          <AvatarImage
            src={getAbsoluteUrl(assignee.avatarUrl)}
            alt={assignee.name}
          />
          <AvatarFallback>{assignee.name?.charAt(0)}</AvatarFallback>
        </Avatar>
      ))}
      {hiddenCount > 0 && (
        <Avatar className="h-7 w-7 rounded-full ring-2 ring-surface">
          <AvatarFallback className="bg-muted text-xs text-muted-foreground">
            +{hiddenCount}
          </AvatarFallback>
        </Avatar>
      )}
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            onClick={(e) => e.stopPropagation()}
            className="hover-action h-7 w-7 flex-shrink-0 rounded-full border-2 border-dashed border-border bg-transparent text-muted-foreground opacity-0 hover:bg-hover hover:text-foreground"
          >
            <UserPlus className="h-4 w-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-80 p-0"
          onClick={(e) => e.stopPropagation()}
        >
          <AssigneeSelector
            projectId={task.projectId}
            workspaceId={task.workspaceId}
            selectedIds={task.assignees.map((a) => a.id)}
            onSelectionChange={handleSelectionChange}
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}
// FILE: src/features/project-management/components/list-view/cells/DueDateCell.tsx
import { format } from "date-fns";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Task } from "@/types";

const isOverdue = (dueDateStr: string | null): boolean => {
  if (!dueDateStr) return false;
  const dueDate = new Date(dueDateStr);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return dueDate < today;
};

interface DueDateCellProps {
  task: Task;
  onUpdate: (taskId: string, updates: Partial<Task>) => void;
}

export function DueDateCell({ task, onUpdate }: DueDateCellProps) {
  const dueDate = task.dueDate ? new Date(task.dueDate) : null;

  const handleDateSelect = (date: Date | undefined) => {
    onUpdate(task.id, { dueDate: date ? date.toISOString() : null });
  };

  return (
    <Popover>
      <PopoverTrigger asChild onClick={(e) => e.stopPropagation()}>
        <Button
          variant="ghost"
          className={`h-auto p-0 font-normal hover:bg-transparent ${
            isOverdue(task.dueDate) ? "font-semibold text-red-500" : ""
          }`}
        >
          {dueDate ? format(dueDate, "MMM d") : "-"}
        </Button>
      </PopoverTrigger>
      <PopoverContent
        className="p-0"
        align="start"
        onClick={(e) => e.stopPropagation()}
      >
        <Calendar
          mode="single"
          selected={dueDate ?? undefined}
          onSelect={handleDateSelect}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  );
}
// FILE: src/features/project-management/components/list-view/cells/index.ts
export * from "./AssigneeCell";
export * from "./DueDateCell";
export * from "./PriorityCell";
export * from "./StatusCell";
export * from "./TaskTypeCell";
// FILE: src/features/project-management/components/list-view/cells/PriorityCell.tsx
import { TaskPriority, Task } from "@/types";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Flag } from "lucide-react";
import { cn } from "@/lib/utils";

const priorityMap: Record<
  TaskPriority,
  { color: string; label: string } | undefined
> = {
  [TaskPriority.URGENT]: { color: "text-priority-urgent", label: "Urgent" },
  [TaskPriority.HIGH]: { color: "text-priority-high", label: "High" },
  [TaskPriority.MEDIUM]: { color: "text-priority-medium", label: "Medium" },
  [TaskPriority.LOW]: { color: "text-blue-500", label: "Low" },
  [TaskPriority.NONE]: { color: "text-muted-foreground", label: "None" },
};
interface PriorityCellProps {
  task: Task;
  onUpdate: (taskId: string, updates: Partial<Task>) => void;
}

export function PriorityCell({ task, onUpdate }: PriorityCellProps) {
  const config = priorityMap[task.priority];

  const handleUpdate = (newPriority: TaskPriority) => {
    onUpdate(task.id, { priority: newPriority });
  };

  return (
    <Select
      defaultValue={task.priority}
      onValueChange={(val) => handleUpdate(val as TaskPriority)}
    >
      <SelectTrigger
        className="h-auto w-full border-none bg-transparent p-0 hover:bg-transparent focus:bg-transparent focus:ring-0 [&>svg]:hidden"
        onClick={(e) => e.stopPropagation()}
      >
        <SelectValue asChild>
          <div className="priority-flag flex items-center space-x-2 bg-transparent">
            {config && <Flag className={cn("h-4 w-4", config.color)} />}
            <span className="hidden lg:inline">{config?.label}</span>
          </div>
        </SelectValue>
      </SelectTrigger>
      <SelectContent
        className="bg-element"
        onClick={(e) => e.stopPropagation()}
      >
        {Object.values(TaskPriority).map((p) => (
          <SelectItem key={p} value={p}>
            <div className="flex items-center space-x-2">
              <Flag className={cn("h-4 w-4", priorityMap[p]?.color)} />
              <span>{priorityMap[p]?.label}</span>
            </div>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}
// FILE: src/features/project-management/components/list-view/cells/StatusCell.tsx
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Task, TaskStatus } from "@/types";

const statusMap: Record<TaskStatus, { text: string; dot: string }> = {
  [TaskStatus.IN_PROGRESS]: {
    text: "text-blue-400",
    dot: "bg-blue-400",
  },
  [TaskStatus.TODO]: {
    text: "text-slate-400",
    dot: "bg-slate-400",
  },
  [TaskStatus.IN_REVIEW]: {
    text: "text-purple-400",
    dot: "bg-purple-400",
  },
  [TaskStatus.DONE]: {
    text: "text-green-400",
    dot: "bg-green-400",
  },
  [TaskStatus.BLOCKED]: {
    text: "text-red-400",
    dot: "bg-red-400",
  },
  [TaskStatus.CANCELLED]: {
    text: "text-gray-400",
    dot: "bg-gray-400",
  },
};

interface StatusCellProps {
  task: Task;
  onUpdate: (taskId: string, updates: Partial<Task>) => void;
}

export function StatusCell({ task, onUpdate }: StatusCellProps) {
  const config = statusMap[task.status];

  const handleUpdate = (newStatus: TaskStatus) => {
    onUpdate(task.id, { status: newStatus });
  };

  return (
    <Select
      defaultValue={task.status}
      onValueChange={(val) => handleUpdate(val as TaskStatus)}
    >
      <SelectTrigger
        className="h-auto border-none bg-transparent p-0 hover:bg-transparent focus:bg-transparent focus:ring-0 [&>svg]:hidden"
        onClick={(e) => e.stopPropagation()}
      >
        <SelectValue asChild>
          <div
            className={`status-pill inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium ${config?.text}`}
          >
            <span className={`mr-2 h-2 w-2 ${config?.dot} rounded-full`}></span>
            {task.status.replace(/_/g, " ")}
          </div>
        </SelectValue>
      </SelectTrigger>
      <SelectContent
        className="bg-element"
        onClick={(e) => e.stopPropagation()}
      >
        {Object.values(TaskStatus).map((s) => (
          <SelectItem key={s} value={s}>
            <div className="flex items-center">
              <span
                className={`mr-2 h-2 w-2 ${statusMap[s].dot} rounded-full`}
              ></span>
              {s.replace(/_/g, " ")}
            </div>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}
// FILE: src/features/project-management/components/list-view/cells/TaskTypeCell.tsx
import { Task } from "@/types";
import { TaskTypeSelector } from "../../TaskTypeSelector";

interface TaskTypeCellProps {
  task: Task;
  onUpdate: (taskId: string, updates: Partial<Task>) => void;
}

export function TaskTypeCell({ task, onUpdate }: TaskTypeCellProps) {
  const handleUpdate = (newTypeId: string | null) => {
    onUpdate(task.id, { taskTypeId: newTypeId });
  };

  return (
    <div onClick={(e) => e.stopPropagation()}>
      <TaskTypeSelector
        workspaceId={task.workspaceId}
        projectId={task.projectId}
        value={task.taskTypeId ?? null}
        onValueChange={handleUpdate}
      />
    </div>
  );
}
// FILE: src/features/project-management/components/list-view/ColumnVisibilityToggle.tsx
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Columns } from "lucide-react";

interface Column {
  id: string;
  label: string;
  visible: boolean;
}

interface ColumnVisibilityToggleProps {
  columns: Column[];
  onVisibilityChange: (columnId: string, visible: boolean) => void;
}

export function ColumnVisibilityToggle({
  columns,
  onVisibilityChange,
}: ColumnVisibilityToggleProps) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="border-border bg-element text-foreground hover:bg-hover"
        >
          <Columns className="mr-2 h-4 w-4" />
          Columns
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        <DropdownMenuLabel>Visible Columns</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {columns.map((column) => (
          <DropdownMenuCheckboxItem
            key={column.id}
            checked={column.visible}
            onCheckedChange={(checked) =>
              onVisibilityChange(column.id, !!checked)
            }
          >
            {column.label}
          </DropdownMenuCheckboxItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
// FILE: src/features/project-management/components/list-view/ListView.tsx
import { useMemo, useState } from "react";
import { Task } from "@/types";
import { TaskStatus } from "@/types/api";
import { ListViewHeader } from "./ListViewHeader";
import { TaskGroup } from "./TaskGroup";
import {
  DndContext,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
  DragOverlay,
} from "@dnd-kit/core";
import { createPortal } from "react-dom";
import { KanbanTaskCard } from "../kanban-view/KanbanTaskCard";
import { useSetTaskParent } from "../../api/useUpdateTask";

interface ListViewProps {
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;
  emptyState: React.ReactNode;
  showWorkspaceColumn?: boolean;
  showProjectColumn?: boolean;
  showTaskTypeColumn?: boolean;
  selectedTaskIds: string[];
  setSelectedTaskIds: (ids: string[]) => void;
}

const statusOrder: TaskStatus[] = [
  TaskStatus.TODO,
  TaskStatus.IN_PROGRESS,
  TaskStatus.IN_REVIEW,
  TaskStatus.DONE,
  TaskStatus.BLOCKED,
  TaskStatus.CANCELLED,
];

const getStatusGroupName = (status: TaskStatus): string => {
  switch (status) {
    case TaskStatus.TODO:
      return "To Do";
    case TaskStatus.IN_PROGRESS:
      return "In Progress";
    case TaskStatus.IN_REVIEW:
      return "In Review";
    case TaskStatus.DONE:
      return "Done";
    case TaskStatus.BLOCKED:
      return "Blocked";
    case TaskStatus.CANCELLED:
      return "Cancelled";
    default:
      return "Other";
  }
};

export function ListView({
  tasks,
  onTaskSelect,
  onTaskUpdate,
  emptyState,
  showWorkspaceColumn = false,
  showProjectColumn = false,
  showTaskTypeColumn = false,
  selectedTaskIds,
  setSelectedTaskIds,
}: ListViewProps) {
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const setParentMutation = useSetTaskParent();
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 10,
      },
    })
  );

  const handleDragStart = (event: any) => {
    if (event.active.data.current?.type === "Task") {
      setActiveTask(event.active.data.current.task);
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    setActiveTask(null);
    const { active, over } = event;
    if (over && active.id !== over.id) {
      const draggedTask = active.data.current?.task as Task;
      const targetTask = over.data.current?.task as Task;

      if (draggedTask && targetTask) {
        setParentMutation.mutate({
          taskId: draggedTask.id,
          parentId: targetTask.id,
          workspaceId: draggedTask.workspaceId,
          projectId: draggedTask.projectId,
        });
      }
    }
  };

  const groupedTasks = useMemo(() => {
    const groupMap = new Map<string, Task[]>();
    const topLevelTasks = tasks.filter((task) => !task.parentId);

    topLevelTasks.forEach((task) => {
      const groupName = getStatusGroupName(task.status);
      if (!groupMap.has(groupName)) {
        groupMap.set(groupName, []);
      }
      groupMap.get(groupName)!.push(task);
    });

    const orderedGroups: [string, Task[]][] = [];
    for (const status of statusOrder) {
      const groupName = getStatusGroupName(status);
      if (groupMap.has(groupName)) {
        orderedGroups.push([groupName, groupMap.get(groupName)!]);
      }
    }

    return orderedGroups;
  }, [tasks]);

  if (tasks.length === 0) {
    return emptyState;
  }

  return (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
    >
      <div className="rounded-lg border border-border bg-surface">
        <ListViewHeader
          showWorkspace={showWorkspaceColumn}
          showProject={showProjectColumn}
          showTaskType={showTaskTypeColumn}
          tasks={tasks}
          selectedTaskIds={selectedTaskIds}
          setSelectedTaskIds={setSelectedTaskIds}
        />
        <div id="task-list">
          {groupedTasks.map(([groupName, tasksInGroup]) => (
            <TaskGroup
              key={groupName}
              groupName={groupName}
              tasks={tasksInGroup}
              onTaskSelect={onTaskSelect}
              onTaskUpdate={onTaskUpdate}
              showWorkspace={showWorkspaceColumn}
              showProject={showProjectColumn}
              showTaskType={showTaskTypeColumn}
              selectedTaskIds={selectedTaskIds}
              setSelectedTaskIds={setSelectedTaskIds}
            />
          ))}
        </div>
      </div>
      {createPortal(
        <DragOverlay>
          {activeTask ? (
            <div className="dragging-card-overlay">
              <KanbanTaskCard task={activeTask} onTaskSelect={() => {}} />
            </div>
          ) : null}
        </DragOverlay>,
        document.body
      )}
    </DndContext>
  );
}
// FILE: src/features/project-management/components/list-view/ListViewHeader.tsx
import { Checkbox } from "@/components/ui/checkbox";
import { Task } from "@/types";

interface ListViewHeaderProps {
  showWorkspace: boolean;
  showProject: boolean;
  showTaskType: boolean;
  tasks: Task[];
  selectedTaskIds: string[];
  setSelectedTaskIds: (ids: string[]) => void;
}

export function ListViewHeader({
  showWorkspace,
  showProject,
  showTaskType,
  tasks,
  selectedTaskIds,
  setSelectedTaskIds,
}: ListViewHeaderProps) {
  const allTaskIds = tasks.map((t) => t.id);
  const isAllSelected =
    allTaskIds.length > 0 && selectedTaskIds.length === allTaskIds.length;

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedTaskIds(allTaskIds);
    } else {
      setSelectedTaskIds([]);
    }
  };

  return (
    <div className="grid grid-cols-12 items-center gap-4 border-b border-border bg-surface px-4 py-3 text-xs font-semibold uppercase tracking-wider text-muted-foreground">
      <div className="col-span-4 flex items-center gap-3">
        <Checkbox
          checked={isAllSelected}
          onCheckedChange={handleSelectAll}
          aria-label="Select all tasks"
          className="border-border bg-element"
        />
        Task Name
      </div>
      {showWorkspace && (
        <div className="col-span-1 hidden truncate sm:block">Workspace</div>
      )}
      {showProject && (
        <div className="col-span-1 hidden truncate sm:block">Project</div>
      )}
      {showTaskType && (
        <div className="col-span-1 hidden truncate sm:block">Type</div>
      )}
      <div className="col-span-1 hidden sm:block">Assignee</div>
      <div className="col-span-1 hidden sm:block">Due Date</div>
      <div className="col-span-1 hidden sm:block">Priority</div>
      <div className="col-span-1 hidden sm:block">Status</div>
      <div className="col-span-1"></div>
    </div>
  );
}
// FILE: src/features/project-management/components/list-view/SortMenu.tsx
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { ArrowDownUp, ArrowUp, ArrowDown } from "lucide-react";
import { OnChangeFn, SortingState } from "@tanstack/react-table";

interface SortMenuProps {
  sorting: SortingState;
  setSorting: OnChangeFn<SortingState>;
  sortableColumns: { id: string; label: string }[];
}

export function SortMenu({
  sorting,
  setSorting,
  sortableColumns,
}: SortMenuProps) {
  const currentSort = sorting[0];

  const handleSort = (columnId: string) => {
    const isCurrentlySorted = currentSort?.id === columnId;
    if (isCurrentlySorted && currentSort.desc) {
      setSorting([]);
    } else {
      setSorting([
        { id: columnId, desc: isCurrentlySorted ? !currentSort.desc : false },
      ]);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          className="border-border bg-element text-foreground hover:bg-hover"
        >
          <ArrowDownUp className="mr-2 h-4 w-4" />
          <span>Sort</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        <DropdownMenuLabel>Sort by</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {sortableColumns.map((col) => (
          <DropdownMenuItem key={col.id} onClick={() => handleSort(col.id)}>
            {currentSort?.id === col.id ? (
              currentSort.desc ? (
                <ArrowDown className="mr-2 h-4 w-4" />
              ) : (
                <ArrowUp className="mr-2 h-4 w-4" />
              )
            ) : (
              <div className="w-6" />
            )}
            {col.label}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
// FILE: src/features/project-management/components/list-view/TaskGroup.tsx
import { useState } from "react";
import { Task } from "@/types";
import { TaskRow } from "./TaskRow";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import {
  SortableContext,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";

interface TaskGroupProps {
  groupName: string;
  tasks: Task[];
  onTaskSelect: (taskId: string) => void;
  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;
  showWorkspace: boolean;
  showProject: boolean;
  showTaskType: boolean;
  selectedTaskIds: string[];
  setSelectedTaskIds: (ids: string[]) => void;
}

export function TaskGroup({
  groupName,
  tasks,
  onTaskSelect,
  onTaskUpdate,
  showWorkspace,
  showProject,
  showTaskType,
  selectedTaskIds,
  setSelectedTaskIds,
}: TaskGroupProps) {
  const [isCollapsed, setIsCollapsed] = useState(false);

  if (tasks.length === 0) {
    return null;
  }
  const taskIds = tasks.map((t) => t.id);

  return (
    <div className="task-group">
      <div
        className={cn(
          "group-header sticky top-0 z-10 flex cursor-pointer items-center border-b border-border bg-element px-4 py-2 backdrop-blur-sm",
          isCollapsed && "group-collapsed"
        )}
        onClick={() => setIsCollapsed(!isCollapsed)}
      >
        <ChevronDown className="group-header-icon mr-2 h-5 w-5 text-muted-foreground" />
        <h3 className="font-semibold text-foreground">{groupName}</h3>
        <span className="ml-2 rounded-full bg-background px-2 py-0.5 text-xs font-medium text-muted-foreground">
          {tasks.length}
        </span>
      </div>
      <div className={cn("group-tasks", isCollapsed && "hidden")}>
        <SortableContext items={taskIds} strategy={verticalListSortingStrategy}>
          {tasks.map((task) => (
            <TaskRow
              key={task.id}
              task={task}
              onTaskSelect={onTaskSelect}
              onTaskUpdate={onTaskUpdate}
              showWorkspace={showWorkspace}
              showProject={showProject}
              showTaskType={showTaskType}
              selectedTaskIds={selectedTaskIds}
              setSelectedTaskIds={setSelectedTaskIds}
            />
          ))}
        </SortableContext>
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/list-view/TaskRow.tsx
import { useState } from "react";
import { Task } from "@/types";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { ChevronDown, ChevronRight } from "lucide-react";
import {
  AssigneeCell,
  DueDateCell,
  PriorityCell,
  StatusCell,
  TaskTypeCell,
} from "./cells";
import { cn } from "@/lib/utils";
import { TaskStatus } from "@/types/api";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { useDroppable } from "@dnd-kit/core";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageTasks } from "../../api/useManageTasks";

interface TaskRowProps {
  task: Task;
  level?: number;
  onTaskSelect: (taskId: string) => void;
  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;
  showWorkspace: boolean;
  showProject: boolean;
  showTaskType: boolean;
  selectedTaskIds: string[];
  setSelectedTaskIds: (ids: string[]) => void;
}

export function TaskRow({
  task,
  level = 0,
  onTaskSelect,
  onTaskUpdate,
  showWorkspace,
  showProject,
  showTaskType,
  selectedTaskIds,
  setSelectedTaskIds,
}: TaskRowProps) {
  const [isExpanded, setIsExpanded] = useState(true);
  const hasSubtasks = task.subtasks && task.subtasks.length > 0;
  const isCompleted = task.status === TaskStatus.DONE;

  const { useDelete } = useManageTasks(task.workspaceId, task.projectId);
  const deleteMutation = useDelete();

  const {
    attributes,
    listeners,
    setNodeRef: setDraggableNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: task.id, data: { type: "Task", task } });

  const { setNodeRef: setDroppableNodeRef, isOver } = useDroppable({
    id: task.id,
    data: { type: "Task", task },
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    zIndex: isDragging ? 1 : "auto",
  };

  const handleToggleExpand = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsExpanded(!isExpanded);
  };

  const handleSelectionToggle = (checked: boolean) => {
    setSelectedTaskIds(
      checked
        ? [...selectedTaskIds, task.id]
        : selectedTaskIds.filter((id) => id !== task.id)
    );
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm(`Delete task "${task.title}"?`)) {
      deleteMutation.mutate(task.id);
    }
  };

  return (
    <div
      ref={setDraggableNodeRef}
      style={style}
      data-task-id={task.id}
      className={cn(
        "task-wrapper group/task-row",
        isCompleted && "task-completed"
      )}
    >
      <div
        ref={setDroppableNodeRef}
        className={cn(
          "task-row grid cursor-pointer grid-cols-12 items-center gap-4 border-b border-border/50 px-4 py-3 transition-colors duration-150 hover:bg-hover",
          isOver && "bg-primary/20"
        )}
        onClick={() => onTaskSelect(task.id)}
      >
        <div
          className="col-span-4 flex items-center"
          style={{ paddingLeft: `${level * 24}px` }}
        >
          <span
            className="task-drag-handle mr-1 cursor-grab touch-none p-1 text-muted-foreground opacity-0 group-hover/task-row:opacity-100"
            {...attributes}
            {...listeners}
            onClick={(e) => e.stopPropagation()}
          >
            {/* :: */}
          </span>
          <Checkbox
            className="task-checkbox mr-3 h-4 w-4 cursor-pointer rounded border-border bg-element text-primary focus:ring-primary"
            checked={selectedTaskIds.includes(task.id)}
            onCheckedChange={handleSelectionToggle}
            onClick={(e) => e.stopPropagation()}
          />
          <div className="mr-1 w-6">
            {hasSubtasks && (
              <Button
                variant="ghost"
                size="icon"
                className="subtask-toggle-btn h-6 w-6 rounded-md p-1 hover:bg-hover"
                onClick={handleToggleExpand}
              >
                {isExpanded ? (
                  <ChevronDown className="subtask-icon h-4 w-4" />
                ) : (
                  <ChevronRight className="subtask-icon h-4 w-4" />
                )}
              </Button>
            )}
          </div>
          <span className="flex-1 truncate">{task.title}</span>
        </div>

        {showWorkspace && (
          <div className="col-span-1 hidden truncate text-sm sm:block">
            {task.workspaceName}
          </div>
        )}
        {showProject && (
          <div className="col-span-1 hidden truncate text-sm sm:block">
            {task.projectName}
          </div>
        )}
        {showTaskType && (
          <div className="col-span-1 hidden truncate text-sm sm:block">
            <TaskTypeCell task={task} onUpdate={onTaskUpdate} />
          </div>
        )}
        <div className="col-span-1 hidden sm:block">
          <AssigneeCell task={task} />
        </div>
        <div className="col-span-1 hidden text-sm sm:block">
          <DueDateCell task={task} onUpdate={onTaskUpdate} />
        </div>
        <div className="col-span-1 hidden sm:block">
          <PriorityCell task={task} onUpdate={onTaskUpdate} />
        </div>
        <div className="relative col-span-1 hidden sm:block">
          <StatusCell task={task} onUpdate={onTaskUpdate} />
        </div>
        <div className="col-span-1 text-right">
          <div className="opacity-0 group-hover/task-row:opacity-100">
            <ActionMenu
              onEdit={() => onTaskSelect(task.id)}
              onDelete={handleDelete}
            />
          </div>
        </div>
      </div>
      {hasSubtasks && isExpanded && (
        <div className="subtasks-container">
          {task.subtasks.map((sub) => (
            <TaskRow
              key={sub.id}
              task={sub}
              level={level + 1}
              onTaskSelect={onTaskSelect}
              onTaskUpdate={onTaskUpdate}
              showWorkspace={showWorkspace}
              showProject={showProject}
              showTaskType={showTaskType}
              selectedTaskIds={selectedTaskIds}
              setSelectedTaskIds={setSelectedTaskIds}
            />
          ))}
        </div>
      )}
    </div>
  );
}
// FILE: src/features/project-management/components/MoveTaskToProjectSelector.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import { Label } from "@/components/ui/label";

interface MoveTaskToProjectSelectorProps {
  onMove: (projectId: string) => void;
}

export function MoveTaskToProjectSelector({
  onMove,
}: MoveTaskToProjectSelectorProps) {
  const [selectedWorkspaceId, setSelectedWorkspaceId] = useState<
    string | undefined
  >();
  const [selectedProjectId, setSelectedProjectId] = useState<
    string | undefined
  >();

  const { data: workspacesData, isLoading: isLoadingWorkspaces } =
    useGetWorkspaces();
  const { data: projectsData, isLoading: isLoadingProjects } =
    useGetProjects(selectedWorkspaceId);

  const handleMove = () => {
    if (selectedProjectId) {
      onMove(selectedProjectId);
    }
  };

  return (
    <div className="space-y-2 rounded-md border p-3">
      <h3 className="text-sm font-semibold">Move to Project</h3>
      <div className="space-y-2">
        <Label>Workspace</Label>
        <Select
          onValueChange={setSelectedWorkspaceId}
          disabled={isLoadingWorkspaces}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a workspace..." />
          </SelectTrigger>
          <SelectContent>
            {workspacesData?.data.map((ws) => (
              <SelectItem key={ws.id} value={ws.id}>
                {ws.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div className="space-y-2">
        <Label>Project</Label>
        <Select
          onValueChange={setSelectedProjectId}
          disabled={!selectedWorkspaceId || isLoadingProjects}
          value={selectedProjectId}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a project..." />
          </SelectTrigger>
          <SelectContent>
            {projectsData?.data.map((p) => (
              <SelectItem key={p.id} value={p.id}>
                {p.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Button
        onClick={handleMove}
        disabled={!selectedProjectId}
        className="w-full"
        size="sm"
      >
        Move Task
      </Button>
    </div>
  );
}
// FILE: src/features/project-management/components/ProjectAttachments.tsx
import { useState } from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import { Plus, Trash2 } from "lucide-react";
import { useManageProjectAttachments } from "../api/useManageProjectAttachments";
import { useManageKnowledgeBases } from "@/features/collaboration/api/useManageKnowledgeBases";
import { useManagePublications } from "@/features/publications/api/useManagePublications";
import { useManageWhiteboards } from "@/features/collaboration/api/useManageWhiteboards";
import { getIcon } from "@/lib/icons";
import { AnyValue } from "@/types";

export function ProjectAttachments({
  project,
  workspaceId,
}: {
  project: AnyValue;
  workspaceId: string;
}) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { useAttachEntity, useDetachEntity } = useManageProjectAttachments(
    workspaceId,
    project.id
  );
  const attachMutation = useAttachEntity();
  const detachMutation = useDetachEntity();
  const { data: kbsData } = useManageKnowledgeBases().useGetAll();
  const { data: pubsData } = useManagePublications().useGetAll();
  const { data: whiteboardsData } = useManageWhiteboards().useGetAll();

  const handleAttach = (entityId: string, plural: any) => {
    attachMutation.mutate({ entityId, plural });
    setPopoverOpen(false);
  };

  const handleDetach = (entityId: string, plural: any) => {
    detachMutation.mutate({ entityId, plural });
  };

  const attachments = [
    ...(project.knowledgeBases || []).map((kb: any) => ({
      ...kb,
      type: "KnowledgeBase",
      plural: "knowledge-bases",
    })),
    ...(project.publications || []).map((p: any) => ({
      ...p,
      type: "Publication",
      plural: "publications",
    })),
    ...(project.whiteboards || []).map((w: any) => ({
      ...w,
      type: "Whiteboard",
      plural: "whiteboards",
    })),
  ];

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Attachments</h3>
        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <Plus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[250px] p-0">
            <Command>
              <CommandInput placeholder="Attach..." />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup heading="Knowledge Bases">
                  {kbsData?.data?.map((kb: any) => (
                    <CommandItem
                      key={kb.id}
                      onSelect={() => handleAttach(kb.id, "knowledge-bases")}
                    >
                      {kb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Publications">
                  {pubsData?.data?.map((pub: any) => (
                    <CommandItem
                      key={pub.id}
                      onSelect={() => handleAttach(pub.id, "publications")}
                    >
                      {pub.title}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Whiteboards">
                  {whiteboardsData?.data?.map((wb: any) => (
                    <CommandItem
                      key={wb.id}
                      onSelect={() => handleAttach(wb.id, "whiteboards")}
                    >
                      {wb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
      <div className="max-h-48 space-y-1 overflow-y-auto rounded-md border p-1">
        {attachments.length > 0 ? (
          attachments.map((item: any) => {
            const Icon = getIcon(item.type);
            return (
              <div
                key={item.id}
                className="flex items-center justify-between rounded-md p-2 text-sm hover:bg-accent/50"
              >
                <div className="flex min-w-0 items-center gap-2">
                  <Icon className="h-4 w-4 flex-shrink-0" />
                  <span className="truncate">{item.name || item.title}</span>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={() => handleDetach(item.id, item.plural)}
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            );
          })
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No attachments.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/ProjectCard.tsx
import { getIcon } from "@/lib/icons";
import { EntityCard } from "@/components/shared/EntityCard";
import { CardContent } from "@/components/ui/card";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageProjects } from "../api/useManageProjects";

interface ProjectCardProps {
  project: any;
  onEdit: (projectId: string) => void;
}

export function ProjectCard({ project, onEdit }: ProjectCardProps) {
  const { useDelete } = useManageProjects(project.workspaceId);
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${project.name}" project? This action is permanent.`
      )
    ) {
      deleteMutation.mutate(project.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit(project.id);
  };

  const projectUrl = `/workspaces/${project.workspaceId}/projects/${project.id}`;
  const Icon = getIcon(project.icon);

  return (
    <EntityCard
      title={project.name}
      description={project.description}
      linkTo={projectUrl}
      icon={Icon}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <CardContent>
        <div className="flex justify-between text-sm text-muted-foreground">
          <span>Status: {project.status}</span>
          <span>
            Created: {new Date(project.createdAt).toLocaleDateString("en-US")}
          </span>
        </div>
      </CardContent>
    </EntityCard>
  );
}
// FILE: src/features/project-management/components/ProjectForm.tsx
import { z } from "zod";
import { toast } from "sonner";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { useCreateView } from "@/features/project-management/api/useCreateView";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";
import { useManageProjects } from "../api/useManageProjects";

const projectSchema = z.object({
  name: nameSchema("Project"),
  description: descriptionSchema,
});

interface ProjectFormProps {
  workspaceId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function ProjectForm({
  workspaceId,
  initialData,
  onSuccess,
}: ProjectFormProps) {
  const createViewMutation = useCreateView(workspaceId);
  const resource = useManageProjects(workspaceId);

  const handleCreateSuccess = async (newProject: any) => {
    toast.success(
      `Project "${newProject.name}" created. Setting up default views...`
    );
    const listPromise = createViewMutation.mutateAsync({
      viewData: { name: "List", type: "LIST" },
      projectId: newProject.id,
    });
    const kanbanPromise = createViewMutation.mutateAsync({
      viewData: {
        name: "Kanban",
        type: "KANBAN",
        columns: [
          { name: "To Do" },
          { name: "In Progress" },
          { name: "In Review" },
          { name: "Done" },
        ],
      },
      projectId: newProject.id,
    });
    await Promise.all([listPromise, kanbanPromise]);
    toast.success("Default views created.");
    onSuccess?.();
  };

  return (
    <ResourceForm
      schema={projectSchema}
      resourcePath={resource.resourceUrl}
      resourceKey={resource.resourceKey}
      initialData={initialData}
      onSuccess={initialData ? onSuccess : handleCreateSuccess}
      processValues={(values) => ({ ...values, workspaceId })}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Project Name"
            placeholder="e.g. Annual Report Analysis"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A short description of the project's goals"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/project-management/components/ProjectList.tsx
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { FolderKanban } from "lucide-react";
import { useState } from "react";
import { ProjectCard } from "./ProjectCard";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { ProjectForm } from "./ProjectForm";
import { useManageProjects } from "../api/useManageProjects";

const ProjectListSkeleton = () => (
  <div className="grid gap-4 pt-6 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function ProjectList({ workspaceId }: { workspaceId: string }) {
  const { useGetAll, resourceUrl, resourceKey } =
    useManageProjects(workspaceId);
  const { data, isLoading, isError, error } = useGetAll();
  const [editingProjectId, setEditingProjectId] = useState<string | null>(null);

  if (isLoading) {
    return <ProjectListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Projects"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching projects for this workspace. Please try again later."
        }
      />
    );
  }

  const handleEdit = (projectId: string) => {
    setEditingProjectId(projectId);
  };

  if (!data || data.data.length === 0) {
    return (
      <div className="pt-6">
        <EmptyState
          icon={<FolderKanban className="h-10 w-10 text-primary" />}
          title="This workspace has no projects yet."
          description="Create the first project in this workspace to get started."
        />
      </div>
    );
  }

  return (
    <>
      <div className="grid gap-4 pt-6 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((project: any) => (
          <ProjectCard project={project} key={project.id} onEdit={handleEdit} />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingProjectId}
        onOpenChange={(isOpen) => !isOpen && setEditingProjectId(null)}
        title="Edit Project"
        description="Make changes to your project here. Click save when you're done."
        form={ProjectForm}
        formProps={{ workspaceId }}
        resourcePath={resourceUrl}
        resourceKey={resourceKey}
        resourceId={editingProjectId}
      />
    </>
  );
}
// FILE: src/features/project-management/components/ProjectMemberList.tsx
import { useGetProjectMembers } from "../api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card } from "@/components/ui/card";
import { getAbsoluteUrl } from "@/lib/utils";
import { useManageProjectMembers } from "../api/useManageProjectMembers";

interface ProjectMemberListProps {
  workspaceId: string;
  projectId: string;
}

export function ProjectMemberList({
  workspaceId,
  projectId,
}: ProjectMemberListProps) {
  const { data: membersData, isLoading: isLoadingMembers } =
    useGetProjectMembers(workspaceId, projectId);
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );
  const { data: rolesData, isLoading: isLoadingRoles } =
    projectRoleResource.useGetAll();

  const { useUpdateMember, useRemoveMember } = useManageProjectMembers(
    workspaceId,
    projectId
  );
  const updateMemberMutation = useUpdateMember();
  const removeMemberMutation = useRemoveMember();

  const handleDelete = (member: any) => {
    if (window.confirm(`Remove ${member.name} from this project?`)) {
      removeMemberMutation.mutate(member.userId);
    }
  };

  const handleRoleChange = (userId: string, roleId: string) => {
    updateMemberMutation.mutate({ userId, roleId });
  };

  if (isLoadingMembers || isLoadingRoles) return <div>Loading members...</div>;

  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Member</TableHead>
            <TableHead>Role</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {membersData?.length > 0 ? (
            membersData.map((member: any) => (
              <TableRow key={member.userId}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <Avatar className="h-8 w-8">
                      <AvatarImage
                        src={getAbsoluteUrl(member.avatarUrl)}
                        alt={member.name}
                        className="h-full w-full object-cover"
                      />
                      <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <span className="font-medium">{member.name}</span>
                  </div>
                </TableCell>
                <TableCell>
                  <Select
                    value={member.roleId}
                    onValueChange={(newRoleId) =>
                      handleRoleChange(member.userId, newRoleId)
                    }
                  >
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select a role" />
                    </SelectTrigger>
                    <SelectContent>
                      {rolesData?.data.map((role: any) => (
                        <SelectItem key={role.id} value={role.id}>
                          {role.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </TableCell>
                <TableCell className="text-right">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem
                        className="text-red-600"
                        onClick={() => handleDelete(member)}
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Remove from Project
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={3} className="h-24 text-center">
                No members have been added to this project yet.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </Card>
  );
}
// FILE: src/features/project-management/components/ProjectRoleList.tsx
import { useState } from "react";
import { useApiResource } from "@/hooks/useApiResource";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { EditProjectRoleDialog } from "./EditProjectRoleDialog";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface Props {
  workspaceId: string;
  projectId: string;
}

export function ProjectRoleList({ workspaceId, projectId }: Props) {
  const projectRoleResource = useApiResource(
    `/workspaces/${workspaceId}/projects/${projectId}/roles`,
    ["projectRoles", projectId]
  );
  const { data: rolesData, isLoading } = projectRoleResource.useGetAll();
  const deleteMutation = projectRoleResource.useDelete();
  const [editingRole, setEditingRole] = useState<any | null>(null);
  if (isLoading) return <div>Loading Project Roles...</div>;

  const handleDelete = (role: any) => {
    if (
      window.confirm(
        `Delete project role "${role.name}"? This cannot be undone.`
      )
    ) {
      deleteMutation.mutate(role.id);
    }
  };

  return (
    <>
      <div className="space-y-4">
        {rolesData?.data.map((role: any) => (
          <Card key={role.id}>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>{role.name}</CardTitle>
              <ActionMenu
                onEdit={() => setEditingRole(role)}
                onDelete={() => handleDelete(role)}
                deleteDisabled={deleteMutation.isPending}
              />
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-1">
                {role.permissions?.length > 0 ? (
                  role.permissions.map((p: any) => (
                    <Badge variant="secondary" key={p.id}>
                      {p.action} on {p.subject}
                    </Badge>
                  ))
                ) : (
                  <span className="text-sm text-muted-foreground">
                    No permissions assigned.
                  </span>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
      <EditProjectRoleDialog
        role={editingRole}
        workspaceId={workspaceId}
        projectId={projectId}
        isOpen={!!editingRole}
        onOpenChange={(isOpen) => !isOpen && setEditingRole(null)}
      />
    </>
  );
}
// FILE: src/features/project-management/components/ProjectTemplateCard.tsx
import { EntityCard } from "@/components/shared/EntityCard";
import { useManageProjectTemplates } from "../api/useManageProjectTemplates";
import { FileText } from "lucide-react";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface ProjectTemplateCardProps {
  template: any;
  onEdit: () => void;
}

export function ProjectTemplateCard({
  template,
  onEdit,
}: ProjectTemplateCardProps) {
  const { useDelete } = useManageProjectTemplates();
  const deleteMutation = useDelete();
  const handleDelete = (e: React.MouseEvent) => {
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${template.name}" template?`
      )
    ) {
      deleteMutation.mutate(template.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.preventDefault();
    onEdit();
  };
  return (
    <EntityCard
      title={template.name}
      description={template.description || "No description provided."}
      icon={FileText}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <div className="text-sm text-muted-foreground">
        Created on: {new Date(template.createdAt).toLocaleDateString("en-US")}
      </div>
    </EntityCard>
  );
}

// FILE: src/features/project-management/components/ProjectTemplateList.tsx
import { useState } from "react";
import { EmptyState } from "@/components/shared/EmptyState";
import { FileText } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { ProjectTemplateCard } from "./ProjectTemplateCard";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateTemplateForm } from "./CreateTemplateForm";
import { useManageProjectTemplates } from "../api/useManageProjectTemplates";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2">
    {Array.from({ length: 2 }).map((_, i) => (
      <Skeleton key={i} className="h-40 w-full" />
    ))}
  </div>
);

export function ProjectTemplateList({ workspaceId, projectId }: ListProps) {
  const { useGetAll } = useManageProjectTemplates();
  const { data, isLoading, isError } = useGetAll();
  const [editingId, setEditingId] = useState<string | null>(null);

  if (isLoading) return <ListSkeleton />;
  if (isError) return <div>Error loading project templates.</div>;

  const templates = data?.data || [];

  if (templates.length === 0) {
    return (
      <EmptyState
        icon={<FileText />}
        title="No Templates"
        description="This project has not been saved as a template yet."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2">
        {templates.map((template: any) => (
          <ProjectTemplateCard
            key={template.id}
            template={template}
            onEdit={() => setEditingId(template.id)}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        resourceId={editingId}
        resourcePath={`project-templates`}
        resourceKey={["projectTemplates"]}
        title="Edit Template"
        description="Update the name and description of this project template."
        form={CreateTemplateForm}
        formProps={{ workspaceId, projectId, sourceProjectId: projectId }}
      />
    </>
  );
}
// FILE: src/features/project-management/components/RecurrenceSelector.tsx
import { useState, useEffect } from "react";
import { RRule, rrulestr, Options } from "rrule";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Repeat } from "lucide-react";
interface RecurrenceSelectorProps {
  value: string | null;
  onSave: (rruleString: string | null) => void;
  startDate: Date | string | null;
}

const frequencies = [
  { value: RRule.DAILY, label: "Daily" },
  { value: RRule.WEEKLY, label: "Weekly" },
  { value: RRule.MONTHLY, label: "Monthly" },
  { value: RRule.YEARLY, label: "Yearly" },
];
const weekdays = [
  { value: RRule.MO.weekday, label: "M" },
  { value: RRule.TU.weekday, label: "T" },
  { value: RRule.WE.weekday, label: "W" },
  { value: RRule.TH.weekday, label: "T" },
  { value: RRule.FR.weekday, label: "F" },
  { value: RRule.SA.weekday, label: "S" },
  { value: RRule.SU.weekday, label: "S" },
];
export function RecurrenceSelector({
  value,
  onSave,
  startDate,
}: RecurrenceSelectorProps) {
  const [options, setOptions] = useState<Partial<Options>>({});
  const [ruleText, setRuleText] = useState("Does not repeat");
  const [popoverOpen, setPopoverOpen] = useState(false);
  useEffect(() => {
    if (value) {
      try {
        const rule = rrulestr(value);
        setOptions(rule.options);
        setRuleText(rule.toText());
      } catch (e) {
        console.error("Error parsing RRULE string:", e);
        setRuleText("Invalid rule");
      }
    } else {
      setOptions({});
      setRuleText("Does not repeat");
    }
  }, [value]);

  const handleSave = () => {
    if (Object.keys(options).length === 0 || options.freq === undefined) {
      onSave(null);
    } else {
      const rule = new RRule({
        dtstart: startDate ? new Date(startDate) : new Date(),
        ...options,
      });
      onSave(rule.toString());
    }
    setPopoverOpen(false);
  };

  const handleClear = () => {
    setOptions({});
    onSave(null);
    setPopoverOpen(false);
  };
  const freq = options.freq ?? RRule.DAILY;

  const byweekdayValue = options.byweekday
    ? (Array.isArray(options.byweekday)
        ? options.byweekday
        : [options.byweekday]
      ).map((day) => day.toString())
    : [];
  return (
    <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
      <PopoverTrigger asChild>
        <Button variant="outline" className="w-full justify-start font-normal">
          <Repeat className="mr-2 h-4 w-4" />
          <span className="truncate">{ruleText}</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80">
        <div className="grid gap-4">
          <div className="space-y-2">
            <h4 className="font-medium leading-none">Recurrence</h4>
            <p className="text-sm text-muted-foreground">
              Set how often this task should repeat.
            </p>
          </div>
          <div className="grid gap-2">
            <div className="grid grid-cols-3 items-center gap-4">
              <Label htmlFor="freq">Repeats</Label>
              <Select
                value={freq?.toString()}
                onValueChange={(val) =>
                  setOptions({ ...options, freq: parseInt(val) })
                }
              >
                <SelectTrigger id="freq" className="col-span-2 h-8">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {frequencies.map((f) => (
                    <SelectItem key={f.value} value={f.value.toString()}>
                      {f.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {freq === RRule.WEEKLY && (
              <div className="grid grid-cols-3 items-center gap-4">
                <Label>On</Label>
                <ToggleGroup
                  type="multiple"
                  variant="outline"
                  className="col-span-2 justify-start"
                  value={byweekdayValue}
                  onValueChange={(days) =>
                    setOptions({ ...options, byweekday: days.map(Number) })
                  }
                >
                  {weekdays.map((day) => (
                    <ToggleGroupItem
                      key={day.value}
                      value={String(day.value)}
                      className="h-8 w-8"
                    >
                      {day.label}
                    </ToggleGroupItem>
                  ))}
                </ToggleGroup>
              </div>
            )}
            <div className="grid grid-cols-3 items-center gap-4">
              <Label htmlFor="interval">Interval</Label>
              <Input
                id="interval"
                type="number"
                defaultValue={options.interval || 1}
                onChange={(e) =>
                  setOptions({
                    ...options,
                    interval: parseInt(e.target.value) || 1,
                  })
                }
                className="col-span-2 h-8"
              />
            </div>
          </div>
          <div className="flex justify-end gap-2">
            <Button variant="ghost" size="sm" onClick={handleClear}>
              Clear
            </Button>
            <Button size="sm" onClick={handleSave}>
              Set
            </Button>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}
// FILE: src/features/project-management/components/SubtaskItem.tsx
import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  CheckCircle2,
  Circle,
  CircleDashed,
  CircleSlash,
  Eye,
  OctagonAlert,
  Trash2,
  ChevronDown,
  ChevronRight,
} from "lucide-react";
import { TaskStatus } from "@/types/api";
import React from "react";
import { Task } from "@/types";

interface SubtaskItemProps {
  task: Task;
  onTaskSelect: (taskId: string) => void;
  onRemove: (taskId: string) => void;
  level?: number;
}

const statusIconMap: Record<TaskStatus, React.ElementType> = {
  [TaskStatus.TODO]: Circle,
  [TaskStatus.IN_PROGRESS]: CircleDashed,
  [TaskStatus.IN_REVIEW]: Eye,
  [TaskStatus.DONE]: CheckCircle2,
  [TaskStatus.BLOCKED]: OctagonAlert,
  [TaskStatus.CANCELLED]: CircleSlash,
};

const statusColorMap: Record<TaskStatus, string> = {
  [TaskStatus.TODO]: "text-gray-500",
  [TaskStatus.IN_PROGRESS]: "text-blue-500",
  [TaskStatus.IN_REVIEW]: "text-purple-500",
  [TaskStatus.DONE]: "text-green-500",
  [TaskStatus.BLOCKED]: "text-red-500",
  [TaskStatus.CANCELLED]: "text-gray-400",
};

export function SubtaskItem({
  task,
  onTaskSelect,
  onRemove,
  level = 0,
}: SubtaskItemProps) {
  const [isExpanded, setIsExpanded] = useState(true);
  const hasSubtasks = task.subtasks && task.subtasks.length > 0;

  const handleToggleExpand = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsExpanded(!isExpanded);
  };

  const handleSelect = () => {
    onTaskSelect(task.id);
  };

  const handleRemove = (e: React.MouseEvent) => {
    e.stopPropagation();
    onRemove(task.id);
  };

  const Icon = statusIconMap[task.status] || Circle;
  const isStruckThrough =
    task.status === TaskStatus.CANCELLED || task.status === TaskStatus.DONE;

  return (
    <div className="flex flex-col">
      <div
        className="group flex cursor-pointer items-center gap-2 rounded-md py-1 pl-1 pr-2 hover:bg-hover"
        onClick={handleSelect}
        style={{ paddingLeft: `${level * 24}px` }}
      >
        <div className="flex w-6 items-center justify-center">
          {hasSubtasks ? (
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              onClick={handleToggleExpand}
            >
              {isExpanded ? (
                <ChevronDown className="h-4 w-4" />
              ) : (
                <ChevronRight className="h-4 w-4" />
              )}
            </Button>
          ) : (
            <div className="w-6" />
          )}
        </div>
        <Icon
          className={`h-4 w-4 flex-shrink-0 ${statusColorMap[task.status]}`}
        />
        <span
          className={`flex-grow truncate text-sm ${
            isStruckThrough ? "text-muted-foreground line-through" : ""
          }`}
        >
          {task.title}
        </span>
        <Badge variant="outline" className="text-xs">
          {task.priority}
        </Badge>
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6 opacity-0 group-hover:opacity-100"
          onClick={handleRemove}
        >
          <Trash2 className="h-3.5 w-3.5 text-destructive" />
        </Button>
      </div>
      {hasSubtasks && isExpanded && (
        <div className="mt-1">
          {task.subtasks.map((subtask) => (
            <SubtaskItem
              key={subtask.id}
              task={subtask}
              onTaskSelect={onTaskSelect}
              onRemove={onRemove}
              level={level + 1}
            />
          ))}
        </div>
      )}
    </div>
  );
}
// FILE: src/features/project-management/components/SubtaskList.tsx
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { SubtaskItem } from "./SubtaskItem";
import { useManageTasks } from "../api/useManageTasks";
import { toast } from "sonner";
import { useQueryClient } from "@tanstack/react-query";

interface SubtaskListProps {
  task: any;
  onAddSubtask: () => void;
  onTaskSelect: (taskId: string) => void;
}

export function SubtaskList({
  task,
  onAddSubtask,
  onTaskSelect,
}: SubtaskListProps) {
  const queryClient = useQueryClient();
  const { useDelete } = useManageTasks(task.workspaceId, task.projectId);
  const deleteTaskMutation = useDelete();

  const handleRemoveSubtask = (taskId: string) => {
    if (window.confirm("Are you sure you want to delete this sub-task?")) {
      deleteTaskMutation.mutate(taskId, {
        onSuccess: () => {
          toast.success("Sub-task deleted.");
          queryClient.invalidateQueries({ queryKey: ["task", task.id] });
        },
      });
    }
  };
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Sub-tasks</h3>
        <Button variant="ghost" size="sm" onClick={onAddSubtask}>
          <Plus className="mr-1 h-4 w-4" /> Add Sub-task
        </Button>
      </div>
      <div className="space-y-1 rounded-md border p-2">
        {task.subtasks?.length > 0 ? (
          task.subtasks.map((subtask: any) => (
            <SubtaskItem
              key={subtask.id}
              task={subtask}
              onTaskSelect={onTaskSelect}
              onRemove={handleRemoveSubtask}
              level={0}
            />
          ))
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No sub-tasks yet.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskAssignees.tsx
import { useState, useMemo } from "react";
import { cn, getAbsoluteUrl } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { Check, UserPlus, X } from "lucide-react";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useApiResource } from "@/hooks/useApiResource";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";

export function TaskAssignees({ task }: any) {
  const [popoverOpen, setPopoverOpen] = useState(false);

  const isProjectTask = !!task.projectId;
  const workspaceId = task.workspaceId;
  const projectId = task.projectId;

  const assignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees`
        : `/tasks/${task.id}/assignees`;
      return api.post(url, { userId });
    },
    successMessage: "User assigned to task.",
    invalidateQueries: [["task", task.id], ["myTasks"]],
  });

  const unassignMutation = useApiMutation({
    mutationFn: (userId: string) => {
      const url = isProjectTask
        ? `/workspaces/${workspaceId}/projects/${projectId}/tasks/${task.id}/assignees/${userId}`
        : `/tasks/${task.id}/assignees/${userId}`;
      return api.delete(url);
    },
    successMessage: "User unassigned from task.",
    invalidateQueries: [["task", task.id], ["myTasks"]],
  });

  const { data: projectMembersData, isLoading: isLoadingProjectMembers } =
    useGetProjectMembers(workspaceId!, projectId!, { enabled: isProjectTask });
  const { data: allUsersData, isLoading: isLoadingAllUsers } = useApiResource(
    "admin/users",
    ["users"]
  ).useGetAll({
    enabled: !isProjectTask,
  });
  const isLoading = isLoadingProjectMembers || isLoadingAllUsers;

  const availableUsers = useMemo(() => {
    if (isProjectTask) {
      return (
        projectMembersData?.map((member: any) => ({
          id: member.userId,
          name: member.name,
          avatarUrl: member.avatarUrl,
        })) || []
      );
    }

    return (
      allUsersData?.data?.map((user: any) => ({
        id: user.id,
        name: user.name,
        avatarUrl: user.avatarUrl,
      })) || []
    );
  }, [isProjectTask, projectMembersData, allUsersData]);
  const assignedIds = new Set(task.assignees.map((a: any) => a.id));

  const handleSelect = (userId: string) => {
    assignMutation.mutate(userId, {
      onSuccess: () => {
        setPopoverOpen(false);
      },
    });
  };

  return (
    <div>
      <h3 className="mb-2 text-sm font-semibold">Assignees</h3>
      <div className="flex flex-wrap items-center gap-2">
        {task.assignees.map((assignee: any) => (
          <Badge
            key={assignee.id}
            variant="secondary"
            className="flex items-center gap-2 rounded-full bg-element py-0.5 pl-0.5 pr-2"
          >
            <Avatar className="h-5 w-5">
              <AvatarImage
                src={getAbsoluteUrl(assignee.avatarUrl)}
                alt={assignee.name}
              />
              <AvatarFallback>{assignee.name?.charAt(0)}</AvatarFallback>
            </Avatar>
            <span className="text-sm font-normal">{assignee.name}</span>
            <Button
              size="icon"
              variant="ghost"
              className="ml-1 h-4 w-4 rounded-full"
              onClick={() => unassignMutation.mutate(assignee.id)}
              disabled={unassignMutation.isPending}
            >
              <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
            </Button>
          </Badge>
        ))}

        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              disabled={isLoading}
            >
              <UserPlus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[200px] p-0">
            <Command>
              <CommandInput placeholder="Assign user..." />
              <CommandList>
                {isLoading && <CommandItem>Loading...</CommandItem>}
                <CommandEmpty>No available users found.</CommandEmpty>
                <CommandGroup>
                  {availableUsers
                    .filter((user: any) => !assignedIds.has(user.id))
                    .map((user: any) => (
                      <CommandItem
                        key={user.id}
                        value={user.name}
                        onSelect={() => handleSelect(user.id)}
                        className="flex items-center"
                      >
                        <Avatar className="mr-2 h-5 w-5">
                          <AvatarImage
                            src={getAbsoluteUrl(user.avatarUrl)}
                            alt={user.name}
                          />
                          <AvatarFallback>
                            {user.name?.charAt(0)}
                          </AvatarFallback>
                        </Avatar>
                        <span className="flex-1 truncate">{user.name}</span>
                        <Check
                          className={cn(
                            "ml-auto h-4 w-4",
                            assignedIds.has(user.id)
                              ? "opacity-100"
                              : "opacity-0"
                          )}
                        />
                      </CommandItem>
                    ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/project-management/components/TaskAttachments.tsx
import { useState } from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import { Plus, Trash2 } from "lucide-react";
import { useManageTaskAttachments } from "../api/useManageTaskAttachments";
import { useManageKnowledgeBases } from "@/features/collaboration/api/useManageKnowledgeBases";
import { useManagePublications } from "@/features/publications/api/useManagePublications";
import { useManageWhiteboards } from "@/features/collaboration/api/useManageWhiteboards";
import { getIcon } from "@/lib/icons";

export function TaskAttachments({ task, workspaceId, projectId }: any) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { useAttachEntity, useDetachEntity } = useManageTaskAttachments(
    workspaceId,
    projectId,
    task.id
  );
  const attachMutation = useAttachEntity();
  const detachMutation = useDetachEntity();

  const { data: kbsData } = useManageKnowledgeBases().useGetAll();
  const { data: pubsData } = useManagePublications().useGetAll();
  const { data: whiteboardsData } = useManageWhiteboards().useGetAll();

  const handleAttach = (entityId: string, plural: any) => {
    attachMutation.mutate({ entityId, plural });
    setPopoverOpen(false);
  };

  const handleDetach = (entityId: string, plural: any) => {
    detachMutation.mutate({ entityId, plural });
  };

  const attachments = [
    ...(task.knowledgeBases || []).map((kb: any) => ({
      ...kb,
      type: "KnowledgeBase",
      plural: "knowledge-bases",
    })),
    ...(task.publications || []).map((p: any) => ({
      ...p,
      type: "Publication",
      plural: "publications",
    })),
    ...(task.whiteboards || []).map((w: any) => ({
      ...w,
      type: "Whiteboard",
      plural: "whiteboards",
    })),
  ];

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Attachments</h3>
        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <Plus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[250px] p-0">
            <Command>
              <CommandInput placeholder="Attach..." />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup heading="Knowledge Bases">
                  {kbsData?.data?.map((kb: any) => (
                    <CommandItem
                      key={kb.id}
                      onSelect={() => handleAttach(kb.id, "knowledge-bases")}
                    >
                      {kb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Publications">
                  {pubsData?.data?.map((pub: any) => (
                    <CommandItem
                      key={pub.id}
                      onSelect={() => handleAttach(pub.id, "publications")}
                    >
                      {pub.title}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Whiteboards">
                  {whiteboardsData?.data?.map((wb: any) => (
                    <CommandItem
                      key={wb.id}
                      onSelect={() => handleAttach(wb.id, "whiteboards")}
                    >
                      {wb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
      <div className="max-h-32 space-y-1 overflow-y-auto rounded-md border p-1">
        {attachments.length > 0 ? (
          attachments.map((item: any) => {
            const Icon = getIcon(item.type);
            return (
              <div
                key={item.id}
                className="flex items-center justify-between rounded-md p-2 text-sm hover:bg-accent/50"
              >
                <div className="flex min-w-0 items-center gap-2">
                  <Icon className="h-4 w-4 flex-shrink-0" />
                  <span className="truncate">{item.name || item.title}</span>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={() => handleDetach(item.id, item.plural)}
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            );
          })
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No attachments.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskChecklist.tsx
import { useState, useEffect } from "react";
import { v4 as uuidv4 } from "uuid";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { ChecklistItem } from "./ChecklistItem";
import { ChecklistItem as ChecklistItemType } from "@/types";
import {
  DndContext,
  closestCenter,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";

interface TaskChecklistProps {
  initialItems: ChecklistItemType[];
  onSave: (items: ChecklistItemType[]) => void;
}

export function TaskChecklist({ initialItems, onSave }: TaskChecklistProps) {
  const [items, setItems] = useState<ChecklistItemType[]>(initialItems || []);
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 5,
      },
    })
  );

  useEffect(() => {
    setItems(initialItems || []);
  }, [initialItems]);

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (active.id !== over?.id) {
      setItems((currentItems) => {
        const oldIndex = currentItems.findIndex(
          (item) => item.id === active.id
        );
        const newIndex = currentItems.findIndex((item) => item.id === over!.id);
        const newOrder = arrayMove(currentItems, oldIndex, newIndex);
        onSave(newOrder);
        return newOrder;
      });
    }
  };

  const handleAddItem = () => {
    const newItem: ChecklistItemType = {
      id: uuidv4(),
      text: "",
      completed: false,
    };
    const newItems = [...items, newItem];
    setItems(newItems);
  };

  const handleUpdateItem = (
    id: string,
    updates: Partial<ChecklistItemType>
  ) => {
    const newItems = items.map((item) =>
      item.id === id ? { ...item, ...updates } : item
    );
    setItems(newItems);
    onSave(newItems);
  };

  const handleRemoveItem = (id: string) => {
    const newItems = items.filter((item) => item.id !== id);
    setItems(newItems);
    onSave(newItems);
  };

  const completedCount = items.filter((item) => item.completed).length;
  const progress = items.length > 0 ? (completedCount / items.length) * 100 : 0;

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Checklist</h3>
        {items.length > 0 && (
          <span className="text-xs text-muted-foreground">
            {completedCount} / {items.length}
          </span>
        )}
      </div>
      {items.length > 0 && <Progress value={progress} className="h-2" />}
      <div className="space-y-2">
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext items={items} strategy={verticalListSortingStrategy}>
            {items.map((item) => (
              <ChecklistItem
                key={item.id}
                item={item}
                onUpdate={handleUpdateItem}
                onRemove={handleRemoveItem}
              />
            ))}
          </SortableContext>
        </DndContext>
      </div>
      <Button variant="outline" size="sm" onClick={handleAddItem}>
        <Plus className="mr-2 h-4 w-4" />
        Add item
      </Button>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskCustomFields.tsx
import { useApiResource } from "@/hooks/useApiResource";
import { useUpdateTaskCustomValues } from "../api/useUpdateTaskCustomValues";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Label } from "@/components/ui/label";
import { Calendar as CalendarIcon } from "lucide-react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { format } from "date-fns";

export function TaskCustomFields({ task, workspaceId, projectId }: any) {
  if (!projectId) {
    return null;
  }

  const { data: definitionsData, isLoading } = useApiResource(
    `workspaces/${workspaceId}/projects/${projectId}/custom-fields`,
    ["customFieldDefinitions", projectId]
  ).useGetAll();

  const { mutate: updateValues } = useUpdateTaskCustomValues(
    workspaceId,
    projectId,
    task.id
  );

  if (isLoading) {
    return (
      <div className="space-y-4">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
    );
  }

  if (!definitionsData || definitionsData.data.length === 0) {
    return null;
  }

  const handleUpdate = (fieldId: string, value: any) => {
    updateValues([{ fieldId, value }]);
  };
  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Custom Fields</h3>
      <div className="space-y-4">
        {definitionsData.data.map((def: any) => {
          const currentValue =
            task.customFields.find((cf: any) => cf.fieldId === def.id)?.value ??
            "";

          return (
            <div key={def.id}>
              <Label className="text-xs text-muted-foreground">
                {def.name}
              </Label>
              {def.type === "TEXT" && (
                <Input
                  defaultValue={currentValue}
                  onBlur={(e) => handleUpdate(def.id, e.target.value)}
                />
              )}
              {def.type === "NUMBER" && (
                <Input
                  type="number"
                  defaultValue={currentValue}
                  onBlur={(e) =>
                    handleUpdate(def.id, parseFloat(e.target.value))
                  }
                />
              )}
              {def.type === "DATE" && (
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !currentValue && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {currentValue ? (
                        format(new Date(currentValue), "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={
                        currentValue ? new Date(currentValue) : undefined
                      }
                      onSelect={(date) =>
                        handleUpdate(def.id, date?.toISOString())
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              )}
              {def.type === "SELECT" && (
                <Select
                  defaultValue={currentValue}
                  onValueChange={(value) => handleUpdate(def.id, value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder={`Select ${def.name}`} />
                  </SelectTrigger>
                  <SelectContent>
                    {def.options?.values?.map((option: string) => (
                      <SelectItem key={option} value={option}>
                        {option}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskDetailBody.tsx
import { RichTextEditor } from "@/components/shared/RichTextEditor";
import { CommentSection } from "@/features/collaboration/components/CommentSection";
import { SubtaskList } from "./SubtaskList";
import { useState, useEffect } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/project-management/components/CreateTaskForm";
import { TaskLinks } from "./TaskLinks";
import { TaskChecklist } from "./TaskChecklist";
import { ChecklistItem } from "@/types";
import { ActivityLog } from "@/features/analytics/components/ActivityLog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useQueryClient } from "@tanstack/react-query";

export function TaskDetailBody({
  task,
  workspaceId,
  projectId,
  onSave,
  onTaskSelect,
}: any) {
  const [isSubtaskDialogOpen, setIsSubtaskDialogOpen] = useState(false);
  const [description, setDescription] = useState(task.description || "");
  const queryClient = useQueryClient();

  useEffect(() => {
    setDescription(task.description || "");
  }, [task.description]);
  const handleChecklistSave = (items: ChecklistItem[]) => {
    onSave("checklist", items);
  };

  const handleSubtaskSuccess = () => {
    setIsSubtaskDialogOpen(false);
    queryClient.invalidateQueries({ queryKey: ["task", task.id] });
  };

  return (
    <div className="col-span-2 space-y-6 border-r pr-6">
      <RichTextEditor
        value={description}
        onChange={setDescription}
        onBlur={() => {
          if (description !== task.description) {
            onSave("description", description);
          }
        }}
        workspaceId={workspaceId}
        projectId={projectId}
      />

      <TaskChecklist
        initialItems={task.checklist || []}
        onSave={handleChecklistSave}
      />

      <SubtaskList
        task={task}
        onAddSubtask={() => setIsSubtaskDialogOpen(true)}
        onTaskSelect={onTaskSelect}
      />

      <TaskLinks task={task} workspaceId={workspaceId} projectId={projectId} />

      <Tabs defaultValue="comments">
        <TabsList>
          <TabsTrigger value="comments">Comments</TabsTrigger>
          <TabsTrigger value="activity">Activity</TabsTrigger>
        </TabsList>
        <TabsContent value="comments" className="mt-4">
          <CommentSection
            workspaceId={workspaceId}
            projectId={projectId}
            taskId={task.id}
          />
        </TabsContent>
        <TabsContent value="activity" className="mt-4">
          <ActivityLog scope={{ taskId: task.id }} title="Task Activity" />
        </TabsContent>
      </Tabs>

      <ResourceCrudDialog
        isOpen={isSubtaskDialogOpen}
        onOpenChange={setIsSubtaskDialogOpen}
        title="Create Sub-task"
        description="Fill in the details below to add a new sub-task."
        form={CreateTaskForm}
        formProps={{
          workspaceId,
          projectId,
          parentId: task.id,
          onSuccess: handleSubtaskSuccess,
        }}
        resourcePath={
          projectId
            ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
            : "/tasks"
        }
        resourceKey={projectId ? ["tasks", projectId] : ["myTasks"]}
      />
    </div>
  );
}

// FILE: src/features/project-management/components/TaskDetailModal.tsx
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { EditableField } from "@/components/shared/EditableField";
import { useApiResource } from "@/hooks/useApiResource";
import { TaskDetailBody } from "./TaskDetailBody";
import {
  TaskDetailSidebar,
  TaskDetailSidebarSkeleton,
} from "./TaskDetailSidebar";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { CornerUpLeft, ChevronRight } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { useUpdateTask } from "../api/useUpdateTask";
import { Link } from "react-router-dom";

interface TaskDetailModalProps {
  taskId: string | null;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onTaskSelect: (taskId: string | null) => void;
}

export function TaskDetailModal({
  taskId,
  isOpen,
  onOpenChange,
  onTaskSelect,
}: TaskDetailModalProps) {
  const { data: task, isLoading } = useApiResource("tasks", [
    "task",
    taskId,
  ]).useGetOne(taskId);

  const updateTaskMutation = useUpdateTask();

  const handleSave = (field: string, value: any) => {
    if (taskId) {
      updateTaskMutation.mutate({
        taskId,
        workspaceId: task?.workspaceId,
        projectId: task?.projectId,
        taskData: { [field]: value },
      });
    }
  };

  const renderContent = () => {
    if (isLoading || !task) {
      return (
        <>
          <div className="pr-6">
            <Skeleton className="h-8 w-3/4" />
          </div>
          <div className="flex-1 overflow-y-auto py-4">
            <div className="grid grid-cols-3 gap-6">
              <div className="col-span-2 space-y-6 border-r pr-6">
                <Skeleton className="h-32 w-full" />
                <Skeleton className="h-4 w-1/4" />
                <Skeleton className="h-24 w-full" />
              </div>
              <TaskDetailSidebarSkeleton />
            </div>
          </div>
        </>
      );
    }

    return (
      <>
        {task.projectId && task.workspaceId && task.projectName && (
          <div className="flex items-center gap-1 text-sm text-muted-foreground">
            <Link
              to={`/workspaces/${task.workspaceId}/projects`}
              className="hover:underline"
            >
              {task.workspaceName}
            </Link>
            <ChevronRight className="h-4 w-4" />
            <Link
              to={`/workspaces/${task.workspaceId}/projects/${task.projectId}`}
              className="hover:underline"
            >
              {task.projectName}
            </Link>
          </div>
        )}
        <DialogTitle className="flex items-center gap-2 pr-6">
          {task.parentId && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-7 w-7 flex-shrink-0"
                    onClick={() => onTaskSelect(task.parentId)}
                  >
                    <CornerUpLeft className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Go to parent task</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
          <EditableField
            key={task.id}
            initialValue={task.title}
            onSave={(newTitle) => handleSave("title", newTitle)}
            className="text-2xl font-bold"
            placeholder="Task Title"
          />
        </DialogTitle>
        <DialogDescription className="pr-6 text-xs text-muted-foreground">
          Task ID: {task.shortId || task.id}
        </DialogDescription>
        <div className="flex-1 overflow-y-auto py-4">
          <div className="grid grid-cols-3 gap-6">
            <TaskDetailBody
              task={task}
              workspaceId={task.workspaceId}
              projectId={task.projectId}
              onSave={handleSave}
              onTaskSelect={onTaskSelect}
            />
            <TaskDetailSidebar
              task={task}
              workspaceId={task.workspaceId}
              projectId={task.projectId}
              onSave={handleSave}
            />
          </div>
        </div>
      </>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="flex max-h-[90vh] flex-col sm:max-w-4xl">
        {renderContent()}
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/project-management/components/TaskDetailSidebar.tsx
import { TaskAssignees } from "./TaskAssignees";
import { TimeLogSection } from "@/features/project-management/components/TimeLogSection";
import { Skeleton } from "@/components/ui/skeleton";
import { TaskCustomFields } from "./TaskCustomFields";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useUpdateTask } from "../api/useUpdateTask";
import { TaskStatus, TaskPriority } from "@/types/api";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { Calendar as CalendarIcon, X, Briefcase } from "lucide-react";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { TaskDocuments } from "./TaskDocuments";
import { EditableField } from "@/components/shared/EditableField";
import { RecurrenceSelector } from "./RecurrenceSelector";
import { TaskTypeSelector } from "@/features/project-management/components/TaskTypeSelector";
import { Task } from "@/types";
import { TaskAttachments } from "./TaskAttachments";
import { Link } from "react-router-dom";
import { MoveTaskToProjectSelector } from "./MoveTaskToProjectSelector";
import { Label } from "@/components/ui/label";

export function TaskDetailSidebar({
  task,
  workspaceId,
  projectId,
  onSave,
}: {
  task: Task;
  workspaceId: string;
  projectId: string;
  onSave: (field: string, value: any) => void;
}) {
  const updateTaskMutation = useUpdateTask();

  const handleUpdate = (
    field:
      | "status"
      | "priority"
      | "dueDate"
      | "startDate"
      | "storyPoints"
      | "recurrenceRule"
      | "taskTypeId",
    value: string | null | number | Date
  ) => {
    updateTaskMutation.mutate({
      taskId: task.id,
      workspaceId: task.workspaceId,
      projectId: task.projectId,
      taskData: { [field]: value },
    });
  };

  return (
    <div className="col-span-1 space-y-6 pr-1">
      <div>
        <h3 className="mb-2 text-sm font-semibold">Status</h3>
        <Select
          value={task.status}
          onValueChange={(value) => handleUpdate("status", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set status" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskStatus).map((s) => (
              <SelectItem key={s} value={s}>
                {s}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Priority</h3>
        <Select
          value={task.priority}
          onValueChange={(value) => handleUpdate("priority", value)}
        >
          <SelectTrigger>
            <SelectValue placeholder="Set priority" />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskPriority).map((p) => (
              <SelectItem key={p} value={p}>
                {p}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {task.projectId && task.workspaceId ? (
        <div>
          <h3 className="mb-2 text-sm font-semibold">Project</h3>
          <div className="flex items-center justify-between rounded-md border p-2 text-sm">
            <Link
              to={`/workspaces/${task.workspaceId}/projects/${task.projectId}`}
              className="flex min-w-0 items-center gap-2"
            >
              <Briefcase className="h-4 w-4 flex-shrink-0" />
              <span className="truncate font-medium hover:underline">
                {task.projectName}
              </span>
            </Link>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onSave("projectId", null)}
              disabled={updateTaskMutation.isPending}
            >
              Move to My Tasks
            </Button>
          </div>
        </div>
      ) : (
        <MoveTaskToProjectSelector
          onMove={(newProjectId) => onSave("projectId", newProjectId)}
        />
      )}

      {projectId && workspaceId && (
        <div>
          <h3 className="mb-2 text-sm font-semibold">Task Type</h3>
          <TaskTypeSelector
            workspaceId={workspaceId}
            projectId={projectId}
            value={task.taskTypeId ?? null}
            onValueChange={(value) => handleUpdate("taskTypeId", value)}
          />
        </div>
      )}
      <div>
        <h3 className="mb-2 text-sm font-semibold">Story Points</h3>
        <EditableField
          initialValue={task.storyPoints?.toString() || ""}
          onSave={(value) =>
            handleUpdate(
              "storyPoints",
              value === "" ? null : parseInt(value, 10)
            )
          }
          placeholder="Set points"
        />
      </div>
      <div>
        <h3 className="mb-2 text-sm font-semibold">Recurrence</h3>
        <RecurrenceSelector
          value={task.recurrenceRule ?? null}
          onSave={(value) => handleUpdate("recurrenceRule", value)}
          startDate={task.startDate}
        />
      </div>

      <div className="space-y-2">
        <h3 className="text-sm font-semibold">Dates</h3>
        <div>
          <Label className="text-xs text-muted-foreground">Start Date</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !task.startDate && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {task.startDate ? (
                  format(new Date(task.startDate), "PPP")
                ) : (
                  <span>Pick a date</span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0">
              <Calendar
                mode="single"
                selected={task.startDate ? new Date(task.startDate) : undefined}
                onSelect={(date) =>
                  handleUpdate("startDate", date?.toISOString() ?? null)
                }
              />
            </PopoverContent>
          </Popover>
        </div>
        <div>
          <Label className="text-xs text-muted-foreground">Due Date</Label>
          <div className="flex items-center gap-1">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={"outline"}
                  className={cn(
                    "flex-grow justify-start text-left font-normal",
                    !task.dueDate && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {task.dueDate ? (
                    format(new Date(task.dueDate), "PPP")
                  ) : (
                    <span>Pick a date</span>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={task.dueDate ? new Date(task.dueDate) : undefined}
                  onSelect={(date) =>
                    handleUpdate("dueDate", date?.toISOString() ?? null)
                  }
                />
              </PopoverContent>
            </Popover>
            {task.dueDate && (
              <Button
                variant="ghost"
                size="icon"
                className="h-9 w-9 flex-shrink-0"
                onClick={() => handleUpdate("dueDate", null)}
              >
                <X className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>
      </div>
      <TaskAssignees task={task} />
      <TaskCustomFields
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TaskDocuments
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TaskAttachments
        task={task}
        workspaceId={workspaceId}
        projectId={projectId}
      />
      <TimeLogSection
        workspaceId={workspaceId}
        projectId={projectId}
        taskId={task.id}
      />
    </div>
  );
}

export function TaskDetailSidebarSkeleton() {
  return (
    <div className="col-span-1 space-y-6">
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/4" />
        <Skeleton className="h-9 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <div className="flex flex-wrap gap-2">
          <Skeleton className="h-7 w-24 rounded-full" />
          <Skeleton className="h-7 w-7 rounded-full" />
        </div>
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-10 w-full" />
      </div>
      <div className="space-y-2">
        <Skeleton className="h-4 w-1/3" />
        <Skeleton className="h-8 w-1/2" />
        <Skeleton className="h-10 w-full" />
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskDocuments.tsx
import { useRef, useMemo } from "react";
import { DocumentType } from "@/types/api";
import { Task } from "@/types";
import { Button } from "@/components/ui/button";
import {
  Paperclip,
  Upload,
  Trash2,
  FileText,
  Link as LinkIcon,
} from "lucide-react";
import {
  useAttachDocument,
  useDetachDocument,
} from "../api/useManageTaskDocuments";
import { toast } from "sonner";
import { getAbsoluteUrl } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const MAX_FILE_SIZE = 5 * 1024 * 1024;

function DocumentItem({
  doc,
  task,
  onDetach,
}: {
  doc: any;
  task: Task;
  onDetach: (documentId: string, type: DocumentType) => void;
}) {
  const isPropagated = doc.taskId !== task.id;
  const isExternal = !!doc.externalUrl;

  return (
    <div className="hover:bg-hover flex items-center justify-between rounded-md p-2 text-sm">
      <a
        href={isExternal ? doc.externalUrl : getAbsoluteUrl(doc.url)}
        target="_blank"
        rel="noopener noreferrer"
        className="flex min-w-0 items-center gap-2"
      >
        {isExternal ? (
          <LinkIcon className="h-4 w-4 flex-shrink-0" />
        ) : (
          <FileText className="h-4 w-4 flex-shrink-0" />
        )}
        <span className="truncate" title={doc.title}>
          {doc.title}
        </span>
        {isPropagated && (
          <span className="text-xs text-muted-foreground">(from subtask)</span>
        )}
      </a>
      {!isPropagated && (
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6"
          onClick={() => onDetach(doc.documentId, doc.type)}
        >
          <Trash2 className="h-3 w-3" />
        </Button>
      )}
    </div>
  );
}

function DocumentList({
  title,
  docs,
  task,
  onDetach,
}: {
  title: string;
  docs: any[];
  task: Task;
  onDetach: (documentId: string, type: DocumentType) => void;
}) {
  return (
    <div>
      <h4 className="mb-1 text-xs font-semibold uppercase text-muted-foreground">
        {title} ({docs.length})
      </h4>
      <div className="space-y-1 rounded-md border p-1">
        {docs.length > 0 ? (
          docs.map((doc: any) => (
            <DocumentItem
              key={`${doc.documentId}-${doc.type}`}
              doc={doc}
              task={task}
              onDetach={onDetach}
            />
          ))
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No documents attached.
          </p>
        )}
      </div>
    </div>
  );
}

export function TaskDocuments({
  task,
  workspaceId,
  projectId,
}: {
  task: Task;
  workspaceId?: string;
  projectId?: string;
}) {
  const attachMutation = useAttachDocument(workspaceId, projectId, task.id);
  const detachMutation = useDetachDocument(workspaceId, projectId, task.id);

  const inputRef = useRef<HTMLInputElement>(null);
  const outputRef = useRef<HTMLInputElement>(null);

  const allDocs = useMemo(() => {
    const collectedDocs = new Map();
    function collect(currentTask: Task) {
      currentTask.documents?.forEach((doc: any) => {
        const key = `${doc.documentId}-${doc.type}`;
        if (!collectedDocs.has(key)) {
          collectedDocs.set(key, { ...doc, taskId: currentTask.id });
        }
      });
      currentTask.subtasks?.forEach(collect);
    }
    collect(task);
    return Array.from(collectedDocs.values());
  }, [task]);

  const inputDocs = allDocs.filter((d: any) => d.type === DocumentType.INPUT);
  const outputDocs = allDocs.filter((d: any) => d.type === DocumentType.OUTPUT);

  const handleFileChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    type: DocumentType
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.size > MAX_FILE_SIZE) {
      toast.error("File size cannot exceed 5MB.");
      return;
    }

    const formData = new FormData();
    formData.append("file", file);
    formData.append("type", type);
    attachMutation.mutate(formData);

    event.target.value = "";
  };

  const handleDetach = (documentId: string, type: DocumentType) => {
    detachMutation.mutate({ documentId, type });
  };

  return (
    <div className="space-y-4">
      <input
        type="file"
        ref={inputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, DocumentType.INPUT)}
      />
      <input
        type="file"
        ref={outputRef}
        className="hidden"
        onChange={(e) => handleFileChange(e, DocumentType.OUTPUT)}
      />
      <h3 className="text-sm font-semibold">Documents</h3>
      <div className="space-y-4">
        <DocumentList
          title="Inputs"
          docs={inputDocs}
          task={task}
          onDetach={handleDetach}
        />
        <div className="grid grid-cols-2 gap-2">
          <Button
            variant="outline"
            size="sm"
            className="w-full"
            onClick={() => inputRef.current?.click()}
            disabled={attachMutation.isPending}
          >
            <Upload className="mr-2 h-4 w-4" /> Upload
          </Button>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="w-full">
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    disabled
                  >
                    <LinkIcon className="mr-2 h-4 w-4" /> Link
                  </Button>
                </div>
              </TooltipTrigger>
              <TooltipContent>
                <p>Linking documents is temporarily unavailable.</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>

        <DocumentList
          title="Outputs"
          docs={outputDocs}
          task={task}
          onDetach={handleDetach}
        />
        <div className="grid grid-cols-2 gap-2">
          <Button
            variant="outline"
            size="sm"
            className="w-full"
            onClick={() => outputRef.current?.click()}
            disabled={attachMutation.isPending}
          >
            <Paperclip className="mr-2 h-4 w-4" /> Upload
          </Button>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <div className="w-full">
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    disabled
                  >
                    <LinkIcon className="mr-2 h-4 w-4" /> Link
                  </Button>
                </div>
              </TooltipTrigger>
              <TooltipContent>
                <p>Linking documents is temporarily unavailable.</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskLinks.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Link2, Trash2 } from "lucide-react";
import { useManageTaskLinks } from "../api/useManageTaskLinks";
import { TaskLinkType } from "@/types/api";

function TaskLinkItem({ link, onRemove, onUpdateType }: any) {
  const target = link.targetTask ?? link.sourceTask;

  return (
    <div className="flex items-center justify-between rounded-md p-2 text-sm hover:bg-accent/50">
      <div className="flex min-w-0 items-center gap-2">
        <Link2 className="h-4 w-4 flex-shrink-0" />
        <Select
          defaultValue={link.type}
          onValueChange={(newType) => onUpdateType(link.id, newType)}
        >
          <SelectTrigger className="h-7 w-[120px] text-xs">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskLinkType).map((type) => (
              <SelectItem key={type} value={type} className="text-xs">
                {type.replace(/_/g, " ")}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <span className="truncate text-muted-foreground" title={target.title}>
          {target.title}
        </span>
      </div>
      <Button
        variant="ghost"
        size="icon"
        className="h-6 w-6"
        onClick={() => {
          if (link.id) {
            onRemove(link.id);
          }
        }}
      >
        <Trash2 className="h-3 w-3" />
      </Button>
    </div>
  );
}

export function TaskLinks({ task, workspaceId, projectId }: any) {
  const [targetTaskId, setTargetTaskId] = useState("");
  const [linkType, setLinkType] = useState<TaskLinkType>(
    TaskLinkType.RELATES_TO
  );

  const { addLink, removeLink, updateLink, isPending } = useManageTaskLinks(
    workspaceId,
    projectId
  );

  const handleAddLink = (e: React.FormEvent) => {
    e.preventDefault();
    if (!targetTaskId.trim()) return;
    addLink(
      { sourceTaskId: task.id, targetTaskId, type: linkType },
      { onSuccess: () => setTargetTaskId("") }
    );
  };

  const allLinks = [...(task.links || []), ...(task.linkedToBy || [])];

  return (
    <div className="space-y-2">
      <h3 className="text-sm font-semibold">Linked Tasks</h3>
      <div className="max-h-48 space-y-1 overflow-y-auto rounded-md border p-1">
        {allLinks.length > 0 ? (
          allLinks.map((link: any) => (
            <TaskLinkItem
              key={link.id}
              link={link}
              onRemove={(linkId: string) =>
                removeLink({ taskId: task.id, linkId })
              }
              onUpdateType={(linkId: string, type: TaskLinkType) =>
                updateLink({ taskId: task.id, linkId, type })
              }
            />
          ))
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No linked tasks.
          </p>
        )}
      </div>
      <form onSubmit={handleAddLink} className="flex gap-2">
        <Input
          placeholder="Paste Task ID to link"
          value={targetTaskId}
          onChange={(e) => setTargetTaskId(e.target.value)}
        />
        <Select
          value={linkType}
          onValueChange={(value) => setLinkType(value as TaskLinkType)}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {Object.values(TaskLinkType).map((type) => (
              <SelectItem key={type} value={type}>
                {type.replace(/_/g, " ")}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Button type="submit" disabled={isPending}>
          Link
        </Button>
      </form>
    </div>
  );
}
// FILE: src/features/project-management/components/TaskTypeForm.tsx
import { z } from "zod";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const CreateTaskTypeDtoSchema = z.object({
  name: z.string().min(1, "Type name is required."),
  icon: z.string().optional().nullable(),
  color: z.string().optional().nullable(),
});

interface TaskTypeFormProps {
  workspaceId: string;
  projectId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function TaskTypeForm({
  workspaceId,
  projectId,
  initialData,
  onSuccess,
}: TaskTypeFormProps) {
  return (
    <ResourceForm
      schema={CreateTaskTypeDtoSchema}
      resourcePath={`workspaces/${workspaceId}/projects/${projectId}/task-types`}
      resourceKey={["taskTypes", projectId]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Type Name"
            placeholder="e.g., Bug, Story, Spike"
          />
          <FormInput
            name="icon"
            label="Icon (Optional)"
            placeholder="e.g., Bug, Flame, Lightbulb"
          />
          <FormInput
            name="color"
            label="Color (Optional)"
            placeholder="e.g., #ff0000, blue.500"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/project-management/components/TaskTypeList.tsx
import { useState } from "react";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card } from "@/components/ui/card";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { TaskTypeForm } from "./TaskTypeForm";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface ListProps {
  workspaceId: string;
  projectId: string;
}

export function TaskTypeList({ workspaceId, projectId }: ListProps) {
  const { useGetAll, useDelete } = useManageTaskTypes(workspaceId, projectId);
  const { data: typesData, isLoading } = useGetAll();
  const deleteMutation = useDelete();
  const [editingTypeId, setEditingTypeId] = useState<string | null>(null);

  const handleDelete = (type: any) => {
    if (window.confirm(`Delete task type "${type.name}"? This is permanent.`)) {
      deleteMutation.mutate(type.id);
    }
  };

  if (isLoading) return <div>Loading custom task types...</div>;

  return (
    <>
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Icon</TableHead>
              <TableHead>Color</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {typesData?.data && typesData.data.length > 0 ? (
              typesData.data.map((type: any) => (
                <TableRow key={type.id}>
                  <TableCell className="font-medium">{type.name}</TableCell>
                  <TableCell>{type.icon}</TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <div
                        className="h-4 w-4 rounded-full"
                        style={{
                          backgroundColor: type.color || "transparent",
                          border: "1px solid #ccc",
                        }}
                      />
                      <span>{type.color}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <ActionMenu
                      onEdit={() => setEditingTypeId(type.id)}
                      onDelete={() => handleDelete(type)}
                      deleteDisabled={deleteMutation.isPending}
                    />
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  No custom task types defined for this project.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Card>
      <ResourceCrudDialog
        isOpen={!!editingTypeId}
        onOpenChange={(isOpen) => !isOpen && setEditingTypeId(null)}
        resourceId={editingTypeId}
        resourcePath={`workspaces/${workspaceId}/projects/${projectId}/task-types`}
        resourceKey={["taskTypes", projectId]}
        title="Edit Task Type"
        description="Change the name, icon, or color for this task type."
        form={TaskTypeForm}
        formProps={{ workspaceId, projectId }}
      />
    </>
  );
}
// FILE: src/features/project-management/components/TaskTypeSelector.tsx
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useManageTaskTypes } from "../api/useManageTaskTypes";
import { TaskType } from "@/types";

interface TaskTypeSelectorProps {
  workspaceId?: string | null;
  projectId?: string | null;
  value: string | null;
  onValueChange: (value: string | null) => void;
  disabled?: boolean;
}

export function TaskTypeSelector({
  workspaceId,
  projectId,
  value,
  onValueChange,
  disabled,
}: TaskTypeSelectorProps) {
  const { data: typesData, isLoading } = useManageTaskTypes(
    workspaceId ?? undefined,
    projectId ?? undefined
  ).useGetAll();

  const selectedType = typesData?.data?.find((t: TaskType) => t.id === value);

  const displayValue = () => {
    if (isLoading && value) return "Loading...";
    if (selectedType) return selectedType.name;
    return "None";
  };

  return (
    <Select
      value={value ?? ""}
      onValueChange={(val) => onValueChange(val === "none" ? null : val)}
      disabled={disabled || isLoading}
    >
      <SelectTrigger
        className="h-auto w-full justify-start border-none bg-transparent p-1 font-normal hover:bg-accent focus:ring-0"
        onClick={(e) => e.stopPropagation()}
      >
        <SelectValue placeholder="None">{displayValue()}</SelectValue>
      </SelectTrigger>
      <SelectContent onClick={(e) => e.stopPropagation()}>
        {isLoading ? (
          <SelectItem value="loading" disabled>
            Loading types...
          </SelectItem>
        ) : (
          <>
            <SelectItem value="none">None</SelectItem>
            {typesData?.data?.map((type: TaskType) => (
              <SelectItem key={type.id} value={type.id}>
                {type.name}
              </SelectItem>
            ))}
          </>
        )}
      </SelectContent>
    </Select>
  );
}
// FILE: src/features/project-management/components/TemplateSelectorDialog.tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { useManageTaskTemplates } from "../api/useManageTaskTemplates";
import { useInstantiateTaskTemplate } from "../api/useInstantiateTaskTemplate";
import { Skeleton } from "@/components/ui/skeleton";

interface TemplateSelectorDialogProps {
  workspaceId?: string;
  projectId?: string;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function TemplateSelectorDialog({
  workspaceId,
  projectId,
  isOpen,
  onOpenChange,
}: TemplateSelectorDialogProps) {
  const { useGetAll } = useManageTaskTemplates(workspaceId, projectId);
  const { data: templatesData, isLoading } = useGetAll();
  const instantiateMutation = useInstantiateTaskTemplate(
    workspaceId,
    projectId
  );

  const handleSelect = (templateId: string) => {
    instantiateMutation.mutate(
      { templateId },
      {
        onSuccess: () => {
          onOpenChange(false);
        },
      }
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create Task from Template</DialogTitle>
          <DialogDescription>
            Select a template to create a new task with pre-filled information.
          </DialogDescription>
        </DialogHeader>
        <Command>
          <CommandInput placeholder="Search templates..." />
          <CommandList>
            {isLoading && (
              <div className="space-y-2 p-4">
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
              </div>
            )}
            <CommandEmpty>No templates found for this context.</CommandEmpty>
            <CommandGroup>
              {templatesData?.data?.map((template: any) => (
                <CommandItem
                  key={template.id}
                  value={template.name}
                  onSelect={() => handleSelect(template.id)}
                  disabled={instantiateMutation.isPending}
                >
                  {template.name}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/project-management/components/TimeLogItem.tsx
import { useManageTimeLogs } from "../api/useManageTimeLogs";
import { ActionMenu } from "@/components/shared/ActionMenu";

interface TimeLogItemProps {
  log: any;
  workspaceId: string;
  projectId: string;
  taskId: string;
}

export function TimeLogItem({
  log,
  workspaceId,
  projectId,
  taskId,
}: TimeLogItemProps) {
  const { useDelete } = useManageTimeLogs(workspaceId, projectId, taskId);
  const deleteMutation = useDelete();
  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this time log?")) {
      deleteMutation.mutate(log.id);
    }
  };

  return (
    <div className="flex items-center justify-between rounded-md py-1 pl-2 pr-1 text-sm hover:bg-hover">
      <div className="flex-grow">
        <span>{log.description || "Time logged"}</span>
        <p className="text-xs text-muted-foreground">
          Logged on: {new Date(log.loggedAt).toLocaleDateString()}
        </p>
      </div>
      <div className="flex items-center gap-2">
        <span className="font-medium">{log.duration}m</span>
        <ActionMenu
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/TimeLogSection.tsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { TimeLogItem } from "./TimeLogItem";
import { useManageTimeLogs } from "../api/useManageTimeLogs";
export function TimeLogSection({ workspaceId, projectId, taskId }: any) {
  const { useGetAll, useCreate } = useManageTimeLogs(
    workspaceId,
    projectId,
    taskId
  );
  const { data: timeLogsData, isLoading } = useGetAll();
  const addTimeLogMutation = useCreate();

  const [duration, setDuration] = useState("");
  const [description, setDescription] = useState("");
  const handleAddTimeLog = () => {
    const durationInMinutes = parseInt(duration, 10);
    if (!isNaN(durationInMinutes) && durationInMinutes > 0) {
      addTimeLogMutation.mutate(
        {
          taskId: taskId,
          duration: durationInMinutes,
          description,
          loggedAt: new Date().toISOString(),
        },
        {
          onSuccess: () => {
            setDuration("");
            setDescription("");
          },
        }
      );
    }
  };

  if (isLoading) return <div>Loading time logs...</div>;

  const totalMinutes =
    timeLogsData?.data?.reduce(
      (sum: number, log: any) => sum + log.duration,
      0
    ) || 0;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return (
    <div className="space-y-4">
      <h3 className="text-sm font-semibold">Time Tracking</h3>
      <div className="text-2xl font-bold">
        {hours}h {minutes}m
      </div>
      <div className="space-y-2">
        <div className="grid grid-cols-3 gap-2">
          <Input
            type="number"
            placeholder="Minutes"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            className="col-span-1"
          />
          <Input
            placeholder="Description (optional)"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="col-span-2"
          />
        </div>
        <Button
          onClick={handleAddTimeLog}
          disabled={addTimeLogMutation.isPending || !duration}
          size="sm"
        >
          {addTimeLogMutation.isPending ? "Logging..." : "Log Time"}
        </Button>
      </div>
      <div className="max-h-32 space-y-1 overflow-y-auto rounded-md border p-1">
        {timeLogsData && timeLogsData.data && timeLogsData.data.length > 0 ? (
          timeLogsData.data.map((log: any) => (
            <TimeLogItem
              key={log.id}
              log={log}
              workspaceId={workspaceId}
              projectId={projectId}
              taskId={taskId}
            />
          ))
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No time logged for this task.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/project-management/components/WhiteboardView.tsx
import { Tldraw } from "tldraw";
import "tldraw/tldraw.css";

export function WhiteboardView() {
  return (
    <div className="fixed inset-0 z-50">
      <Tldraw />
    </div>
  );
}
// FILE: src/features/publications/api/useManagePublicationCategories.ts
import { useApiResource } from "@/hooks/useApiResource";
import { PublicationCategory } from "@/types";

export function useManagePublicationCategories() {
  const resource = useApiResource<PublicationCategory>(
    "publications/categories",
    ["publicationCategories"]
  );
  return resource;
}
// FILE: src/features/publications/api/useManagePublications.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Publication } from "@/types";

export function useManagePublications() {
  const resource = useApiResource<Publication>("publications", [
    "publications",
  ]);
  return resource;
}
// FILE: src/features/publications/components/CreatePublicationForm.tsx
import { z } from "zod";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import {
  FormInput,
  FormRichTextEditor,
  FormMultiSelectPopover,
  FormSelect,
} from "@/components/shared/form/FormFields";
import { PublicationStatus } from "@/types/api";
import { useManagePublicationCategories } from "../api/useManagePublicationCategories";
import { useManageUsers } from "../../admin/users/api/useManageUsers";

const publicationSchema = z.object({
  title: z.string().min(3, "Title must be at least 3 characters."),
  slug: z.string().min(3, "Slug must be at least 3 characters."),
  excerpt: z.string().optional(),
  authorIds: z
    .array(z.string().uuid())
    .min(1, "At least one author is required."),
  categoryIds: z.array(z.string().uuid()).optional(),
  status: z.nativeEnum(PublicationStatus),
});

interface PublicationFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function CreatePublicationForm({
  initialData,
  onSuccess,
}: PublicationFormProps) {
  const { useGetAll: useGetAllUsers } = useManageUsers();
  const { useGetAll: useGetAllCategories } = useManagePublicationCategories();
  const { data: usersData } = useGetAllUsers({});
  const { data: categoriesData } = useGetAllCategories();

  const statusOptions = Object.values(PublicationStatus).map((s) => ({
    value: s,
    label: s.charAt(0) + s.slice(1).toLowerCase(),
  }));

  const userOptions =
    usersData?.data?.map((user: any) => ({ id: user.id, name: user.name })) ||
    [];
  const categoryOptions =
    categoriesData?.data?.map((cat: any) => ({
      id: cat.id,
      name: cat.name,
    })) || [];

  const processedInitialData = initialData
    ? {
        ...initialData,
        authorIds: initialData.authors?.map((a: any) => a.id) || [],
        categoryIds: initialData.categories?.map((c: any) => c.id) || [],
      }
    : {
        authorIds: [],
        categoryIds: [],
        status: PublicationStatus.DRAFT,
      };

  return (
    <ResourceForm
      schema={publicationSchema}
      resourcePath="publications"
      resourceKey={["publications"]}
      initialData={processedInitialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="title"
            label="Title"
            placeholder="The Future of AI in Research..."
          />
          <FormInput
            name="slug"
            label="Slug"
            placeholder="the-future-of-ai-in-research"
          />
          <FormRichTextEditor name="excerpt" label="Excerpt (Optional)" />
          <FormMultiSelectPopover
            name="authorIds"
            label="Authors"
            placeholder="Select authors..."
            options={userOptions}
          />
          <FormMultiSelectPopover
            name="categoryIds"
            label="Categories"
            placeholder="Select categories..."
            options={categoryOptions}
          />
          <FormSelect
            name="status"
            label="Status"
            placeholder="Select status"
            options={statusOptions}
          />
        </>
      )}
    />
  );
}
// FILE: src/features/publications/components/PublicationCard.tsx
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManagePublications } from "../api/useManagePublications";

interface PublicationCardProps {
  publication: any;
  onEdit: (publication: any) => void;
}

const statusVariantMap: Record<
  string,
  "default" | "outline" | "secondary" | "destructive"
> = {
  DRAFT: "secondary",
  PUBLISHED: "default",
  ARCHIVED: "outline",
};
export function PublicationCard({ publication, onEdit }: PublicationCardProps) {
  const { useDelete } = useManagePublications();
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (window.confirm(`Delete publication "${publication.title}"?`)) {
      deleteMutation.mutate(publication.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit(publication);
  };
  return (
    <Card className="flex flex-col">
      <CardHeader className="flex-row items-start justify-between">
        <div className="flex-grow">
          <CardTitle>{publication.title}</CardTitle>
          <CardDescription>
            {publication.excerpt || "No excerpt provided."}
          </CardDescription>
        </div>
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      </CardHeader>
      <CardFooter className="flex justify-between">
        <div className="flex flex-wrap gap-1">
          {publication.authors.map((author: any) => (
            <Badge key={author.id} variant="secondary" className="font-normal">
              {author.name}
            </Badge>
          ))}
        </div>
        <Badge variant={statusVariantMap[publication.status]}>
          {publication.status}
        </Badge>
      </CardFooter>
    </Card>
  );
}
// FILE: src/features/publications/components/PublicationCategoryForm.tsx
import { z } from "zod";
import { nameSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const categorySchema = z.object({
  name: nameSchema("Category"),
});

interface PublicationCategoryFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function PublicationCategoryForm({
  initialData,
  onSuccess,
}: PublicationCategoryFormProps) {
  return (
    <ResourceForm
      schema={categorySchema}
      resourcePath="publications/categories"
      resourceKey={["publicationCategories"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <FormInput
          name="name"
          label="Category Name"
          placeholder="e.g., Research"
        />
      )}
    />
  );
}
// FILE: src/features/publications/components/PublicationCategoryManager.tsx
import { useState } from "react";
import { useManagePublicationCategories } from "../api/useManagePublicationCategories";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Edit, Trash2, PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { PublicationCategoryForm } from "./PublicationCategoryForm";

export function PublicationCategoryManager() {
  const { useGetAll, useDelete } = useManagePublicationCategories();
  const { data, isLoading } = useGetAll();
  const deleteMutation = useDelete();
  const [editingId, setEditingId] = useState<string | null>(null);
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  const handleDelete = (category: any) => {
    if (window.confirm(`Delete category "${category.name}"?`)) {
      deleteMutation.mutate(category.id);
    }
  };

  if (isLoading) return <div>Loading categories...</div>;

  return (
    <>
      <div className="space-y-4">
        <Button onClick={() => setIsCreateOpen(true)} size="sm">
          <PlusCircle className="mr-2 h-4 w-4" />
          New Category
        </Button>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead className="w-[50px] text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {data?.data && data.data.length > 0 ? (
                data.data.map((category: any) => (
                  <TableRow key={category.id}>
                    <TableCell className="font-medium">
                      {category.name}
                    </TableCell>
                    <TableCell className="text-right">
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-8 w-8"
                          >
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent>
                          <DropdownMenuItem
                            onClick={() => setEditingId(category.id)}
                          >
                            <Edit className="mr-2 h-4 w-4" /> Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            className="text-red-500"
                            onClick={() => handleDelete(category)}
                          >
                            <Trash2 className="mr-2 h-4 w-4" /> Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={2} className="h-24 text-center">
                    No categories created yet.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </div>
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create Category"
        description="Create a new category for publications."
        form={PublicationCategoryForm}
        resourcePath="publications/categories"
        resourceKey={["publicationCategories"]}
      />
      <ResourceCrudDialog
        isOpen={!!editingId}
        onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
        title="Edit Category"
        description="Edit the category name."
        form={PublicationCategoryForm}
        resourcePath="publications/categories"
        resourceKey={["publicationCategories"]}
        resourceId={editingId}
      />
    </>
  );
}
// FILE: src/features/publications/components/PublicationList.tsx
import { useState } from "react";
import { PublicationCard } from "./PublicationCard";
import { Skeleton } from "@/components/ui/skeleton";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreatePublicationForm } from "./CreatePublicationForm";
import { useManagePublications } from "../api/useManagePublications";

const PublicationListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 6 }).map((_, i) => (
      <div key={i} className="flex flex-col space-y-3">
        <Skeleton className="h-[125px] w-full rounded-xl" />
        <div className="space-y-2">
          <Skeleton className="h-4 w-3/4" />
          <Skeleton className="h-4 w-1/2" />
        </div>
      </div>
    ))}
  </div>
);

export function PublicationList() {
  const { useGetAll } = useManagePublications();
  const { data, isLoading, isError } = useGetAll();
  const [editingPublicationId, setEditingPublicationId] = useState<
    string | null
  >(null);

  if (isLoading) return <PublicationListSkeleton />;
  if (isError) return <div>Failed to load publications.</div>;
  if (!data || data.data.length === 0) return <div>No publications found.</div>;
  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((pub: any) => (
          <PublicationCard
            key={pub.id}
            publication={pub}
            onEdit={() => setEditingPublicationId(pub.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        isOpen={!!editingPublicationId}
        onOpenChange={(isOpen) => !isOpen && setEditingPublicationId(null)}
        title="Edit Publication"
        description="Make changes to the publication details."
        form={CreatePublicationForm}
        resourcePath="publications"
        resourceKey={["publications"]}
        resourceId={editingPublicationId}
      />
    </>
  );
}
// FILE: src/features/system/api/useBroadcastNotification.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function broadcastNotification(notificationData: any): Promise<any> {
  const { data } = await api.post("/notifications/broadcast", notificationData);
  return data;
}

export function useBroadcastNotification() {
  return useApiMutation({
    mutationFn: broadcastNotification,
    successMessage: (data) => `Broadcast sent to ${data.count} user(s).`,
  });
}
// FILE: src/features/system/api/useGetActiveAnnouncements.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { Announcement } from "@/types";

async function getActiveAnnouncements(): Promise<Announcement[]> {
  const { data } = await api.get("announcements/active");
  return data;
}

export function useGetActiveAnnouncements() {
  return useQuery({
    queryKey: ["activeAnnouncements"],
    queryFn: getActiveAnnouncements,
    staleTime: 1000 * 60 * 5,
  });
}
// FILE: src/features/system/api/useGetNotificationPreferences.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
async function getNotificationPreferences(): Promise<any> {
  const { data } = await api.get("/notifications/preferences");
  return data;
}

export function useGetNotificationPreferences() {
  return useQuery({
    queryKey: ["notificationPreferences"],
    queryFn: getNotificationPreferences,
  });
}
// FILE: src/features/system/api/useGetNotifications.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { PaginatedNotificationsResponse } from "@/types";

async function getNotifications(query?: {
  limit?: number;
  page?: number;
  isRead?: boolean;
}): Promise<PaginatedNotificationsResponse> {
  const { data } = await api.get("/notifications", { params: query });
  return data;
}

export function useGetNotifications(query: {
  limit?: number;
  page?: number;
  isRead?: boolean;
}) {
  return useQuery({
    queryKey: ["notifications", query],
    queryFn: () => getNotifications(query),
  });
}
// FILE: src/features/system/api/useMarkAllNotificationsAsRead.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function markAllAsRead(): Promise<{ count: number }> {
  const { data } = await api.post("/notifications/mark-all-as-read");
  return data;
}

export function useMarkAllNotificationsAsRead() {
  return useApiMutation<{ count: number }, void>({
    mutationFn: () => markAllAsRead(),
    invalidateQueries: [["notifications"]],
  });
}
// FILE: src/features/system/api/useMarkNotificationAsRead.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
import { Notification } from "@/types";
async function markAsRead(notificationId: string): Promise<Notification> {
  const { data } = await api.patch(`/notifications/${notificationId}/read`);
  return data;
}

export function useMarkNotificationAsRead() {
  return useApiMutation({
    mutationFn: markAsRead,
    invalidateQueries: [["notifications"]],
  });
}
// FILE: src/features/system/api/useSearch.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { SearchResults } from "@/types";

interface SearchQuery {
  q: string;
  limit?: number;
  type?: "project" | "task" | "publication" | "report" | "user";
}

async function performSearch(query: SearchQuery): Promise<SearchResults> {
  const { data } = await api.get("search", { params: query });
  return data;
}

export function useSearch(searchTerm: string, limit = 5) {
  return useQuery({
    queryKey: ["search", searchTerm, limit],
    queryFn: () => performSearch({ q: searchTerm, limit }),

    enabled: searchTerm.length > 1,
  });
}
// FILE: src/features/system/api/useUpdateNotificationPreferences.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";
async function updateNotificationPreferences(
  preferencesData: any
): Promise<any> {
  const { data } = await api.put("/notifications/preferences", preferencesData);
  return data;
}

export function useUpdateNotificationPreferences() {
  return useApiMutation({
    mutationFn: updateNotificationPreferences,
    successMessage: "Notification preferences updated.",
    invalidateQueries: [["notificationPreferences"]],
  });
}
// FILE: src/features/system/components/ActiveAnnouncements.tsx
import { useState } from "react";
import { useGetActiveAnnouncements } from "../api/useGetActiveAnnouncements";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Megaphone, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { RichTextOutput } from "@/components/shared/RichTextOutput";
import { Announcement } from "@/types";

export function ActiveAnnouncements() {
  const { data: announcements, isLoading } = useGetActiveAnnouncements();
  const [dismissedIds, setDismissedIds] = useState<string[]>([]);

  if (isLoading || !announcements || announcements.length === 0) {
    return null;
  }

  const handleDismiss = (id: string) => {
    setDismissedIds((prev) => [...prev, id]);
  };

  const announcementsToShow = announcements.filter(
    (ann: Announcement) => !dismissedIds.includes(ann.id)
  );

  if (announcementsToShow.length === 0) {
    return null;
  }

  return (
    <div className="space-y-4">
      {announcementsToShow.map((ann) => (
        <Alert key={ann.id}>
          <Megaphone className="h-4 w-4" />
          <div className="flex-grow">
            <AlertTitle className="flex items-center justify-between">
              <span>{ann.title}</span>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => handleDismiss(ann.id)}
              >
                <X className="h-4 w-4" />
              </Button>
            </AlertTitle>
            <AlertDescription>
              {ann.content?.message ? (
                <RichTextOutput html={ann.content.message} />
              ) : (
                "This announcement does not have a detailed message."
              )}
            </AlertDescription>
          </div>
        </Alert>
      ))}
    </div>
  );
}

// FILE: src/features/system/components/BroadcastNotificationDialog.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Megaphone } from "lucide-react";
import { BroadcastNotificationForm } from "./BroadcastNotificationForm";
export function BroadcastNotificationDialog() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Megaphone className="mr-2 h-4 w-4" />
          Broadcast Notification
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send a Broadcast Notification</DialogTitle>
          <DialogDescription>
            This message will be sent as a real-time notification to all active
            users.
          </DialogDescription>
        </DialogHeader>
        <BroadcastNotificationForm onSuccess={() => setIsOpen(false)} />
      </DialogContent>
    </Dialog>
  );
}
// FILE: src/features/system/components/BroadcastNotificationForm.tsx
import { z } from "zod";
import {
  FormMultiSelectPopover,
  FormRichTextEditor,
} from "@/components/shared/form/FormFields";
import { NotificationSeverity, NotificationType } from "@/types/api";
import { useBroadcastNotification } from "../api/useBroadcastNotification";
import { useApiResource } from "@/hooks/useApiResource";
import { FormWrapper } from "@/components/shared/form/FormWrapper";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const broadcastSchema = z.object({
  message: z.string().min(1, "Message is required."),
  severity: z.nativeEnum(NotificationSeverity),
  type: z.nativeEnum(NotificationType),
  targetRoleIds: z.array(z.string().uuid()).optional(),
});
type BroadcastFormValues = z.infer<typeof broadcastSchema>;

interface BroadcastFormProps {
  onSuccess?: () => void;
}

export function BroadcastNotificationForm({ onSuccess }: BroadcastFormProps) {
  const broadcastMutation = useBroadcastNotification();
  const { data: rolesData, isLoading: isLoadingRoles } = useApiResource(
    "admin/roles",
    ["roles"]
  ).useGetAll();

  const roleOptions =
    rolesData?.data?.map((role: any) => ({
      id: role.id,
      name: role.name,
    })) || [];

  function onSubmit(values: BroadcastFormValues) {
    const payload: any = {
      message: values.message,
      severity: values.severity,
      type: values.type,
    };
    if (values.targetRoleIds && values.targetRoleIds.length > 0) {
      payload.target = { roleIds: values.targetRoleIds };
    }
    broadcastMutation.mutate(payload, { onSuccess });
  }

  return (
    <FormWrapper
      schema={broadcastSchema}
      onSubmit={onSubmit}
      mutation={broadcastMutation}
      submitButtonText="Send Broadcast"
      defaultValues={{
        message: "",
        severity: NotificationSeverity.MEDIUM,
        type: NotificationType.SYSTEM_BROADCAST,
        targetRoleIds: [],
      }}
      renderFields={({ control }) => (
        <>
          <FormRichTextEditor name="message" label="Broadcast Message" />
          <div className="grid grid-cols-2 gap-4">
            <FormField
              control={control}
              name="severity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Severity</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select severity" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(NotificationSeverity).map((s) => (
                        <SelectItem key={s} value={s}>
                          {s}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Type</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select type" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.values(NotificationType).map((t) => (
                        <SelectItem key={t} value={t}>
                          {t.replace(/_/g, " ")}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
          <FormMultiSelectPopover
            name="targetRoleIds"
            label="Target Roles (Optional)"
            placeholder={
              isLoadingRoles ? "Loading roles..." : "Broadcast to all users"
            }
            options={roleOptions}
          />
        </>
      )}
    />
  );
}

// FILE: src/features/system/components/NotificationBell.tsx
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { BellIcon } from "lucide-react";
import { useGetNotifications } from "../api/useGetNotifications";
import { NotificationItem } from "./NotificationItem";
import { useMarkAllNotificationsAsRead } from "../api/useMarkAllNotificationsAsRead";
import { Skeleton } from "@/components/ui/skeleton";
export function NotificationBell() {
  const { data, isLoading } = useGetNotifications({});
  const markAllReadMutation = useMarkAllNotificationsAsRead();
  const unreadCount = data?.unreadCount ?? 0;

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="relative h-8 w-8 rounded-full"
        >
          <BellIcon className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute top-0 right-0 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs text-white">
              {unreadCount}
            </span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between border-b p-3">
          <h4 className="font-medium">Notifications</h4>
          <Button
            variant="link"
            size="sm"
            className="h-auto p-0"
            onClick={() => markAllReadMutation.mutate()}
            disabled={markAllReadMutation.isPending || unreadCount === 0}
          >
            Mark all as read
          </Button>
        </div>
        <div className="max-h-96 overflow-y-auto">
          {isLoading ? (
            <div className="space-y-3 p-4">
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
              <Skeleton className="h-12 w-full" />
            </div>
          ) : data?.data && data.data.length > 0 ? (
            data.data.map((notification: any) => (
              <NotificationItem
                key={notification.id}
                notification={notification}
              />
            ))
          ) : (
            <p className="text-muted-foreground p-4 text-center text-sm">
              You're all caught up!
            </p>
          )}
        </div>
      </PopoverContent>
    </Popover>
  );
}

// FILE: src/features/system/components/NotificationItem.tsx
import { useMarkNotificationAsRead } from "../api/useMarkNotificationAsRead";
import { cn } from "@/lib/utils";
import { RichTextOutput } from "@/components/shared/RichTextOutput";
export function NotificationItem({ notification }: { notification: any }) {
  const markAsReadMutation = useMarkNotificationAsRead();
  const handleClick = () => {
    if (!notification.isRead) {
      markAsReadMutation.mutate(notification.id);
    }
  };

  return (
    <div
      className={cn(
        "hover:bg-accent flex cursor-pointer items-start gap-3 p-3",
        !notification.isRead && "bg-blue-50 dark:bg-blue-900/20"
      )}
      onClick={handleClick}
    >
      {!notification.isRead && (
        <span className="mt-1 block h-2 w-2 rounded-full bg-blue-500" />
      )}
      <div className={cn("grid gap-1", notification.isRead && "pl-5")}>
        <RichTextOutput
          html={notification.message}
          className="text-sm font-medium"
        />
        <p className="text-muted-foreground text-sm">
          {new Date(notification.createdAt).toLocaleString("en-US")}
        </p>
      </div>
    </div>
  );
}

// FILE: src/features/system/components/NotificationPreferencesForm.tsx
import { z } from "zod";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { useGetNotificationPreferences } from "../api/useGetNotificationPreferences";
import { useUpdateNotificationPreferences } from "../api/useUpdateNotificationPreferences";
import { Skeleton } from "@/components/ui/skeleton";
import { NotificationType, EmailDigestFrequency } from "@/types/api";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const notificationTypes = Object.values(NotificationType);
const emailFrequencies = Object.values(EmailDigestFrequency);

const preferencesSchema = z.object({
  preferences: z.record(
    z.string(),
    z.object({
      inApp: z.boolean().optional(),
      email: z.boolean().optional(),
    })
  ),
  emailDigestFrequency: z.nativeEnum(EmailDigestFrequency),
});
type PreferencesFormValues = z.infer<typeof preferencesSchema>;

export function NotificationPreferencesForm() {
  const { data, isLoading } = useGetNotificationPreferences();
  const updateMutation = useUpdateNotificationPreferences();

  function onSubmit(values: PreferencesFormValues) {
    updateMutation.mutate(values);
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/2" />
          <Skeleton className="mt-2 h-4 w-3/4" />
        </CardHeader>
        <CardContent className="space-y-6">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Notification Preferences</CardTitle>
        <CardDescription>
          Manage how and when you are notified about activity.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <FormWrapper
          schema={preferencesSchema}
          onSubmit={onSubmit}
          mutation={updateMutation}
          defaultValues={data}
          className="space-y-8"
          submitButtonText="Save Preferences"
          renderFields={({ control }) => (
            <>
              {notificationTypes.map((type) => (
                <FormField
                  key={type}
                  control={control}
                  name={`preferences.${type}.inApp`}
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                      <div className="space-y-0.5">
                        <FormLabel className="text-base capitalize">
                          {type.replace(/_/g, " ").toLowerCase()}
                        </FormLabel>
                        <FormDescription>
                          Receive in-app notifications for this event.
                        </FormDescription>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              ))}
              <FormField
                control={control}
                name="emailDigestFrequency"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email Digest Frequency</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select email frequency" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {emailFrequencies.map((freq) => (
                          <SelectItem key={freq} value={freq}>
                            {freq.charAt(0) + freq.slice(1).toLowerCase()}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      Choose how often you want to receive email summaries.
                    </FormDescription>
                  </FormItem>
                )}
              />
            </>
          )}
        />
      </CardContent>
    </Card>
  );
}

// FILE: src/features/system/components/SearchDialog.tsx
import { useEffect, useState } from "react";
import {
  CommandDialog,
  CommandEmpty,
  CommandInput,
  CommandList,
} from "@/components/ui/command";
import { useDebounce } from "@/hooks/useDebounce";
import { useSearch } from "../api/useSearch";
import { SearchResultGroup } from "./SearchResultGroup";
interface SearchDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

export function SearchDialog({ isOpen, onOpenChange }: SearchDialogProps) {
  const [query, setQuery] = useState("");
  const debouncedQuery = useDebounce(query, 300);
  const { data: results, isLoading } = useSearch(debouncedQuery);

  useEffect(() => {
    if (!isOpen) {
      setQuery("");
    }
  }, [isOpen]);
  return (
    <CommandDialog open={isOpen} onOpenChange={onOpenChange}>
      <CommandInput
        placeholder="Search for projects, tasks, users..."
        value={query}
        onValueChange={setQuery}
      />
      <CommandList>
        {isLoading && <div className="p-4 text-sm">Searching...</div>}
        {!isLoading && !results && debouncedQuery.length > 1 && (
          <CommandEmpty>No results found.</CommandEmpty>
        )}
        {results && (
          <>
            <SearchResultGroup heading="Projects" results={results.projects} />
            <SearchResultGroup heading="Tasks" results={results.tasks} />
            <SearchResultGroup
              heading="Publications"
              results={results.publications}
            />
            <SearchResultGroup heading="Users" results={results.users} />
          </>
        )}
      </CommandList>
    </CommandDialog>
  );
}

// FILE: src/features/system/components/SearchResultGroup.tsx
import { CommandGroup, CommandSeparator } from "@/components/ui/command";
import { SearchResultItem } from "./SearchResultItem";
export function SearchResultGroup({
  heading,
  results,
}: {
  heading: string;
  results: any[];
}) {
  if (!results || results.length === 0) {
    return null;
  }

  return (
    <>
      <CommandGroup heading={heading}>
        {results.map((item) => (
          <SearchResultItem item={item} key={`${item.__typename}-${item.id}`} />
        ))}
      </CommandGroup>
      <CommandSeparator />
    </>
  );
}
// FILE: src/features/system/components/SearchResultItem.tsx
import { CommandItem } from "@/components/ui/command";
import { getIcon } from "@/lib/icons";
import { useNavigate } from "react-router-dom";
export function SearchResultItem({ item }: { item: any }) {
  const navigate = useNavigate();
  const getLink = () => {
    switch (item.__typename) {
      case "Project":
        return `/workspaces/${item.workspaceId}/projects/${item.id}`;
      case "Task":
        return `/workspaces/${item.workspaceId}/projects/${item.projectId}?taskId=${item.id}`;
      case "User":
      case "Person":
        return `/profile`; 
      case "Publication":
        return `/publications`; 
      case "Report":
        return `/analytics/reports`; 
      default:
        return "/";
    }
  };
  const handleSelect = () => {
    const url = getLink();
    navigate(url);
  };

  const Icon = getIcon(item.__typename);
  return (
    <CommandItem
      key={item.id}
      onSelect={handleSelect}
      value={item.name || item.title}
    >
      <Icon className="mr-2 h-4 w-4" />
      <span>{item.name || item.title}</span>
    </CommandItem>
  );
}
// FILE: src/features/user-management/api/useChangePassword.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";
import { useQueryClient } from "@tanstack/react-query";

async function changePassword(passwordData: any): Promise<any> {
  const { data } = await api.post("users/me/change-password", passwordData);
  return data;
}

export function useChangePassword() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);

  return useApiMutation({
    mutationFn: changePassword,
    successMessage:
      "Password changed successfully. For your security, you have been logged out.",
    onSuccess: () => {
      queryClient.clear();
      setAccessToken(null);
      navigate("/login", { replace: true });
    },
  });
}
// FILE: src/features/user-management/api/useForgotPassword.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function forgotPassword(email: string): Promise<{ message: string }> {
  const { data } = await api.post("auth/forgot-password", { email });
  return data;
}

export function useForgotPassword() {
  return useApiMutation<{ message: string }, string>({
    mutationFn: forgotPassword,
    successMessage: (data) => data.message,
  });
}
// FILE: src/features/user-management/api/useGetProfile.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";
import { User } from "@/types";

async function getProfile(): Promise<User> {
  const { data } = await api.get("users/me");
  return data;
}

export function useGetProfile() {
  return useQuery({
    queryKey: ["profile"],
    queryFn: getProfile,
  });
}
// FILE: src/features/user-management/api/useLogin.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

async function login(credentials: any): Promise<any> {
  const { data } = await api.post("auth/login", credentials);
  return data;
}

export function useLogin() {
  const navigate = useNavigate();
  const { setAccessToken } = useAuthStore();
  return useApiMutation({
    mutationFn: login,
    onSuccess: (data) => {
      setAccessToken(data.accessToken);
      navigate("/home", { replace: true });
    },
  });
}
// FILE: src/features/user-management/api/useLogout.ts
import api from "@/lib/api";
import { useAuthStore } from "@/store/auth";
import { useQueryClient } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

async function logoutUser() {
  return api.post("auth/logout");
}

export function useLogout() {
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const setAccessToken = useAuthStore((state) => state.setAccessToken);
  return useApiMutation({
    mutationFn: logoutUser,
    successMessage: "You have been successfully logged out.",
    onSuccess: () => {
      queryClient.clear();
      setAccessToken(null);
      navigate("/login", { replace: true });
    },
    errorMessage:
      "Could not contact the server, but you have been logged out locally.",
  });
}
// FILE: src/features/user-management/api/useManageTeams.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Team } from "@/types";

export function useManageTeams(workspaceId: string) {
  return useApiResource<Team>(`workspaces/${workspaceId}/teams`, [
    "teams",
    workspaceId,
  ]);
}
// FILE: src/features/user-management/api/useResetPassword.ts
import api from "@/lib/api";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

interface ResetPasswordData {
  token: string;
  newPassword: string;
}

async function resetPassword(
  resetData: ResetPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("auth/reset-password", resetData);
  return data;
}

export function useResetPassword() {
  const navigate = useNavigate();
  return useApiMutation({
    mutationFn: resetPassword,
    successMessage: (data) => data.message,
    onSuccess: () => {
      navigate("/login");
    },
  });
}
// FILE: src/features/user-management/api/useSetupPassword.ts
import api from "@/lib/api";
import { useNavigate } from "react-router-dom";
import { useApiMutation } from "@/hooks/useApiMutation";

interface SetupPasswordData {
  token: string;
  newPassword: string;
}

async function setupPassword(
  setupData: SetupPasswordData
): Promise<{ message: string }> {
  const { data } = await api.post("auth/setup-password", setupData);
  return data;
}

export function useSetupPassword() {
  const navigate = useNavigate();
  return useApiMutation({
    mutationFn: setupPassword,
    successMessage: (data) => data.message,
    onSuccess: () => {
      navigate("/login");
    },
  });
}
// FILE: src/features/user-management/api/useUpdateProfile.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function updateProfile(profileData: any): Promise<any> {
  const { data } = await api.put("users/me/profile", profileData);
  return data;
}

export function useUpdateProfile() {
  return useApiMutation({
    mutationFn: updateProfile,
    successMessage: "Profile updated successfully!",
    invalidateQueries: [["profile"]],
  });
}
// FILE: src/features/user-management/api/useUploadAvatar.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

async function uploadAvatar(formData: FormData): Promise<any> {
  const { data } = await api.patch("users/me/avatar", formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
  return data;
}

export function useUploadAvatar() {
  return useApiMutation({
    mutationFn: uploadAvatar,
    successMessage: "Avatar updated successfully!",
    invalidateQueries: [["profile"]],
  });
}
// FILE: src/features/user-management/api/useVerifyResetToken.ts
import api from "@/lib/api";
import { useQuery } from "@tanstack/react-query";

async function verifyResetToken(token: string): Promise<{ message: string }> {
  const { data } = await api.get(`auth/reset-password/${token}`);
  return data;
}

export function useVerifyResetToken(token: string | null) {
  return useQuery({
    queryKey: ["verifyResetToken", token],
    queryFn: () => verifyResetToken(token!),
    enabled: !!token,
    retry: false,
    staleTime: Infinity,
    gcTime: Infinity,
  });
}
// FILE: src/features/user-management/components/ChangePasswordForm.tsx
import { z } from "zod";
import { FormInput } from "@/components/shared/form/FormFields";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { useChangePassword } from "../api/useChangePassword";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const changePasswordSchema = z
  .object({
    currentPassword: z.string().min(1, "Current password is required."),
    newPassword: z
      .string()
      .min(8, "New password must be at least 8 characters long."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "New passwords do not match.",
    path: ["confirmPassword"],
  });

type ChangePasswordFormValues = z.infer<typeof changePasswordSchema>;

export function ChangePasswordForm() {
  const changePasswordMutation = useChangePassword();

  function onSubmit(values: ChangePasswordFormValues) {
    changePasswordMutation.mutate(values);
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Change Password</CardTitle>
        <CardDescription>
          For your security, we recommend choosing a strong password that you
          don't use elsewhere.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <FormWrapper
          schema={changePasswordSchema}
          onSubmit={onSubmit}
          mutation={changePasswordMutation}
          submitButtonText="Change Password"
          renderFields={() => (
            <>
              <FormInput
                name="currentPassword"
                label="Current Password"
                type="password"
              />
              <FormInput
                name="newPassword"
                label="New Password"
                type="password"
              />
              <FormInput
                name="confirmPassword"
                label="Confirm New Password"
                type="password"
              />
            </>
          )}
        />
      </CardContent>
    </Card>
  );
}
// FILE: src/features/user-management/components/ForgotPasswordForm.tsx
import { z } from "zod";
import { FormInput } from "@/components/shared/form/FormFields";
import { useForgotPassword } from "../api/useForgotPassword";
import { Link } from "react-router-dom";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const forgotPasswordSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
});

type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>;

export function ForgotPasswordForm() {
  const forgotPasswordMutation = useForgotPassword();

  function onSubmit(values: ForgotPasswordFormValues) {
    forgotPasswordMutation.mutate(values.email);
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Forgot Password?</h1>
        <p className="text-muted-foreground">
          Enter your email and we'll send you a link to reset it.
        </p>
      </div>
      <FormWrapper
        schema={forgotPasswordSchema}
        onSubmit={onSubmit}
        mutation={forgotPasswordMutation}
        submitButtonText="Send Reset Link"
        defaultValues={{ email: "" }}
        renderFields={() => (
          <FormInput
            name="email"
            label="Email"
            placeholder="name@example.com"
          />
        )}
      />
      <div className="mt-4 text-center text-sm">
        <Link to="/login" className="underline hover:text-primary">
          Back to login
        </Link>
      </div>
    </div>
  );
}
// FILE: src/features/user-management/components/LoginForm.tsx
import { FormLabel } from "@/components/ui/form";
import { FormInput } from "@/components/shared/form/FormFields";
import { useLogin } from "../api/useLogin";
import { AxiosError } from "axios";
import { z } from "zod";
import { Link } from "react-router-dom";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address."),
  password: z.string().min(1, "Password is required."),
});
type LoginFormValues = z.infer<typeof loginSchema>;

export function LoginForm() {
  const loginMutation = useLogin();

  function onSubmit(values: LoginFormValues) {
    loginMutation.mutate(values);
  }

  const getErrorMessage = () => {
    if (!loginMutation.isError || !loginMutation.error) {
      return null;
    }
    const error = loginMutation.error as AxiosError<{ message?: string }>;
    return error.response?.data?.message || "An unexpected error occurred.";
  };

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome Back</h1>
        <p className="text-muted-foreground">
          Enter your credentials to sign in
        </p>
      </div>
      <FormWrapper
        schema={loginSchema}
        onSubmit={onSubmit}
        mutation={loginMutation}
        submitButtonText="Sign In"
        defaultValues={{ email: "", password: "" }}
        renderFields={() => (
          <>
            <FormInput
              name="email"
              label="Email"
              placeholder="name@example.com"
            />
            <div>
              <div className="flex items-center justify-between">
                <FormLabel>Password</FormLabel>
                <Link
                  to="/forgot-password"
                  className="text-sm font-medium text-primary hover:underline"
                >
                  Forgot Password?
                </Link>
              </div>
              <FormInput
                name="password"
                label=""
                type="password"
                placeholder="••••••••"
                className="mt-2"
              />
            </div>

            {loginMutation.isError && (
              <div className="text-sm font-medium text-red-500">
                {getErrorMessage()}
              </div>
            )}
          </>
        )}
      />
    </div>
  );
}
// FILE: src/features/user-management/components/ManageTeamMembers.tsx
import { useApiMutation } from "@/hooks/useApiMutation";
import api from "@/lib/api";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Check, UserPlus, XIcon } from "lucide-react";
import { getAbsoluteUrl } from "@/lib/utils";
import { useManageUsers } from "../../admin/users/api/useManageUsers";

interface ManageTeamMembersProps {
  team: any;
  workspaceId: string;
}

export function ManageTeamMembers({
  team,
  workspaceId,
}: ManageTeamMembersProps) {
  const { useGetAll: useGetAllUsers } = useManageUsers();
  const { data: usersData, isLoading: isLoadingUsers } = useGetAllUsers();
  const invalidateQueries = [
    ["teams", workspaceId],
    ["team", team.id],
  ];

  const addUserMutation = useApiMutation({
    mutationFn: (userId: string) =>
      api.post(`workspaces/${workspaceId}/teams/${team.id}/members/${userId}`),
    successMessage: "User added to team.",
    invalidateQueries,
  });

  const removeUserMutation = useApiMutation({
    mutationFn: (userId: string) =>
      api.delete(
        `workspaces/${workspaceId}/teams/${team.id}/members/${userId}`
      ),
    successMessage: "User removed from team.",
    invalidateQueries,
  });

  const memberIds = new Set(team.members.map((m: any) => m.id));
  const availableUsers =
    usersData?.data.filter((user: any) => !memberIds.has(user.id)) || [];
  return (
    <div className="space-y-4">
      <div>
        <h4 className="font-semibold">Team Members</h4>
        <div className="mt-2 flex min-h-[40px] flex-wrap items-center gap-2 rounded-md border p-2">
          {team.members.length > 0 ? (
            team.members.map((member: any) => (
              <Badge key={member.id} variant="secondary" className="pr-1">
                <Avatar className="mr-2 h-5 w-5">
                  <AvatarImage
                    src={getAbsoluteUrl(member.avatarUrl)}
                    alt={member.name}
                    className="h-full w-full object-cover"
                  />
                  <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
                </Avatar>
                <span>{member.name}</span>
                <Button
                  size="icon"
                  variant="ghost"
                  className="ml-1 h-4 w-4"
                  onClick={() => removeUserMutation.mutate(member.id)}
                  disabled={removeUserMutation.isPending}
                >
                  <XIcon className="h-3 w-3" />
                </Button>
              </Badge>
            ))
          ) : (
            <p className="px-2 text-sm text-muted-foreground">
              No members in this team.
            </p>
          )}
        </div>
      </div>

      <div>
        <h4 className="font-semibold">Add Member</h4>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              className="w-full justify-between"
              disabled={isLoadingUsers}
            >
              Select user to add...
              <UserPlus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
            <Command>
              <CommandInput placeholder="Search users..." />
              <CommandList>
                <CommandEmpty>No users available.</CommandEmpty>
                <CommandGroup>
                  {availableUsers.map((user: any) => (
                    <CommandItem
                      value={user.name}
                      key={user.id}
                      onSelect={() => {
                        addUserMutation.mutate(user.id);
                      }}
                    >
                      <Check className="mr-2 h-4 w-4 opacity-0" />
                      {user.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}

// FILE: src/features/user-management/components/ProfileAvatar.tsx
import { useState, useRef } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { useUploadAvatar } from "../api/useUploadAvatar";
import { Camera, Link as LinkIcon, Trash2 } from "lucide-react";
import { toast } from "sonner";
import { getAbsoluteUrl } from "@/lib/utils";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useUpdateProfile } from "../api/useUpdateProfile";
import { useAdminUploadAvatar } from "@/features/admin/users/api/useAdminUploadAvatar";
import { useApiResource } from "@/hooks/useApiResource";

interface ProfileAvatarProps {
  user: any;
  isSelfProfile?: boolean;
}

export function ProfileAvatar({
  user,
  isSelfProfile = true,
}: ProfileAvatarProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const selfUploadMutation = useUploadAvatar();
  const adminUploadMutation = useAdminUploadAvatar(user.id);
  const uploadAvatarMutation = isSelfProfile
    ? selfUploadMutation
    : adminUploadMutation;

  const selfUpdateMutation = useUpdateProfile();
  const adminUpdateMutation = useApiResource("admin/users", [
    "users",
  ]).useUpdate();
  const updateProfileMutation = isSelfProfile
    ? selfUpdateMutation
    : adminUpdateMutation;

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const allowedTypes = [
        "image/png",
        "image/jpeg",
        "image/jpg",
        "image/gif",
      ];
      if (!allowedTypes.includes(file.type)) {
        toast.error("Please select a valid image file (PNG, JPEG, or GIF)");
        return;
      }
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        toast.error("File size must be less than 5MB");
        return;
      }
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result as string);
        const formData = new FormData();
        formData.append("file", file);
        uploadAvatarMutation.mutate(formData, {
          onSuccess: () => setPreview(null),
          onError: () => setPreview(null),
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleRemoveAvatar = () => {
    const payload = isSelfProfile
      ? { avatarUrl: null }
      : { id: user.id, data: { avatarUrl: null } };
    updateProfileMutation.mutate(payload);
  };

  const handleLinkAvatar = () => {
    const url = window.prompt("Enter the URL of the image:");
    if (url) {
      try {
        new URL(url);
        const payload = isSelfProfile
          ? { avatarUrl: url }
          : { id: user.id, data: { avatarUrl: url } };
        updateProfileMutation.mutate(payload);
      } catch (e) {
        toast.error("Invalid URL provided.");
      }
    }
  };

  const avatarSrc = preview || getAbsoluteUrl(user?.avatarUrl);

  return (
    <div className="relative">
      <Avatar className="h-32 w-32">
        <AvatarImage
          src={avatarSrc}
          alt={user?.name}
          className="h-full w-full object-cover"
        />
        <AvatarFallback className="text-4xl">
          {user?.name?.charAt(0)}
        </AvatarFallback>
      </Avatar>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept="image/png,image/jpeg,image/jpg,image/gif"
      />
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            size="icon"
            className="absolute bottom-1 right-1 h-8 w-8 rounded-full"
            disabled={
              uploadAvatarMutation.isPending || updateProfileMutation.isPending
            }
          >
            <Camera className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={() => fileInputRef.current?.click()}>
            <Camera className="mr-2 h-4 w-4" />
            <span>Upload Photo</span>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleLinkAvatar}>
            <LinkIcon className="mr-2 h-4 w-4" />
            <span>Use Image URL</span>
          </DropdownMenuItem>
          {user?.avatarUrl && (
            <>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={handleRemoveAvatar}
                className="text-red-500 focus:text-red-500"
              >
                <Trash2 className="mr-2 h-4 w-4" />
                <span>Remove Photo</span>
              </DropdownMenuItem>
            </>
          )}
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}
// FILE: src/features/user-management/components/ResetPasswordForm.tsx
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { FormInput } from "@/components/shared/form/FormFields";
import { useResetPassword } from "../api/useResetPassword";
import { Link, useSearchParams } from "react-router-dom";
import { useEffect } from "react";
import { useVerifyResetToken } from "../api/useVerifyResetToken";
import { Skeleton } from "@/components/ui/skeleton";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const resetPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>;

export function ResetPasswordForm() {
  const resetPasswordMutation = useResetPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  const { isLoading: isVerifying, isError: isVerificationError } =
    useVerifyResetToken(token);

  function onSubmit(values: ResetPasswordFormValues) {
    resetPasswordMutation.mutate(values);
  }

  if (isVerifying) {
    return (
      <div className="w-full max-w-sm space-y-4">
        <Skeleton className="h-8 w-3/4" />
        <Skeleton className="h-10 w-full" />
        <Skeleton className="h-10 w-full" />
        <Skeleton className="h-10 w-full" />
      </div>
    );
  }

  if (!token || isVerificationError) {
    return (
      <div className="w-full max-w-sm text-center">
        <h2 className="text-2xl font-bold text-destructive">Invalid Token</h2>
        <p className="mt-2 text-muted-foreground">
          This password reset link is invalid or has expired.
        </p>
        <Button asChild className="mt-4">
          <Link to="/forgot-password">Request a new link</Link>
        </Button>
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Reset Your Password</h1>
        <p className="text-muted-foreground">
          Enter and confirm your new password.
        </p>
      </div>
      <FormWrapper
        schema={resetPasswordSchema}
        onSubmit={onSubmit}
        mutation={resetPasswordMutation}
        submitButtonText="Reset Password"
        defaultValues={{
          token: token || "",
          newPassword: "",
          confirmPassword: "",
        }}
        renderFields={({ setValue }) => {
          useEffect(() => {
            if (token) {
              setValue("token", token);
            }
          }, [token, setValue]);
          return (
            <>
              <FormInput
                name="newPassword"
                label="New Password"
                type="password"
                placeholder="••••••••"
              />
              <FormInput
                name="confirmPassword"
                label="Confirm New Password"
                type="password"
                placeholder="••••••••"
              />
            </>
          );
        }}
      />
    </div>
  );
}
// FILE: src/features/user-management/components/SetupPasswordForm.tsx
import { z } from "zod";
import { FormInput } from "@/components/shared/form/FormFields";
import { useSetupPassword } from "../api/useSetupPassword";
import { useSearchParams } from "react-router-dom";
import { useEffect } from "react";
import { FormWrapper } from "@/components/shared/form/FormWrapper";

const setupPasswordSchema = z
  .object({
    token: z.string().min(1),
    newPassword: z.string().min(8, "Password must be at least 8 characters."),
    confirmPassword: z.string(),
  })
  .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type SetupPasswordFormValues = z.infer<typeof setupPasswordSchema>;

export function SetupPasswordForm() {
  const setupPasswordMutation = useSetupPassword();
  const [searchParams] = useSearchParams();
  const token = searchParams.get("token");

  function onSubmit(values: SetupPasswordFormValues) {
    setupPasswordMutation.mutate(values);
  }

  if (!token) {
    return (
      <div className="text-center text-red-500">
        Invalid or missing invitation token. Please contact an administrator.
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm">
      <div className="mb-6 text-center">
        <h1 className="text-3xl font-bold">Welcome!</h1>
        <p className="text-muted-foreground">
          Set up your password to activate your account.
        </p>
      </div>
      <FormWrapper
        schema={setupPasswordSchema}
        onSubmit={onSubmit}
        mutation={setupPasswordMutation}
        submitButtonText="Set Password & Login"
        defaultValues={{
          token: token || "",
          newPassword: "",
          confirmPassword: "",
        }}
        renderFields={({ setValue }) => {
          useEffect(() => {
            if (token) {
              setValue("token", token);
            }
          }, [token, setValue]);
          return (
            <>
              <FormInput
                name="newPassword"
                label="New Password"
                type="password"
                placeholder="••••••••"
              />
              <FormInput
                name="confirmPassword"
                label="Confirm New Password"
                type="password"
                placeholder="••••••••"
              />
            </>
          );
        }}
      />
    </div>
  );
}
// FILE: src/features/user-management/components/TeamCard.tsx
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getAbsoluteUrl } from "@/lib/utils";
import { EntityCard } from "@/components/shared/EntityCard";
import { Team } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { useManageTeams } from "../api/useManageTeams";

export function TeamCard({ team, onEdit }: { team: Team; onEdit: () => void }) {
  const { useDelete } = useManageTeams(team.workspaceId);
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(`Are you sure you want to delete the "${team.name}" team?`)
    ) {
      deleteMutation.mutate(team.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit();
  };
  return (
    <EntityCard
      title={team.name}
      description={team.description || "No description provided."}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <h4 className="mb-2 text-sm font-medium text-muted-foreground">
        Members
      </h4>
      <div className="flex items-center -space-x-2">
        {team.members.map((member: any) => (
          <Avatar key={member.id} className="h-7 w-7 border-2 border-card">
            <AvatarImage
              src={getAbsoluteUrl(member.avatarUrl)}
              alt={member.name}
              className="h-full w-full object-cover"
            />
            <AvatarFallback>{member.name?.charAt(0)}</AvatarFallback>
          </Avatar>
        ))}
        {team.members.length === 0 && (
          <p className="text-sm text-muted-foreground">No members yet.</p>
        )}
      </div>
    </EntityCard>
  );
}

// FILE: src/features/user-management/components/TeamForm.tsx
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput, FormTextarea } from "@/components/shared/form/FormFields";

const teamSchema = z.object({
  name: nameSchema("Team"),
  description: descriptionSchema,
});

interface TeamFormProps {
  workspaceId: string;
  initialData?: any;
  onSuccess?: () => void;
}

export function TeamForm({
  workspaceId,
  initialData,
  onSuccess,
}: TeamFormProps) {
  return (
    <ResourceForm
      schema={teamSchema}
      resourcePath={`workspaces/${workspaceId}/teams`}
      resourceKey={["teams", workspaceId]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Team Name"
            placeholder="e.g. Research Division"
          />
          <FormTextarea
            name="description"
            label="Description (Optional)"
            placeholder="A short description of the team's purpose"
          />
        </>
      )}
    />
  );
}

// FILE: src/features/user-management/components/TeamList.tsx
import { useState } from "react";
import { TeamCard } from "./TeamCard";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { Users } from "lucide-react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { TeamForm } from "./TeamForm";
import { ManageTeamMembers } from "./ManageTeamMembers";
import { useManageTeams } from "../api/useManageTeams";

const TeamListSkeleton = () => (
  <div className="grid gap-4 pt-6 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function TeamList({ workspaceId }: { workspaceId: string }) {
  const { useGetAll } = useManageTeams(workspaceId);
  const { data, isLoading, isError, error } = useGetAll();
  const [editingTeamId, setEditingTeamId] = useState<string | null>(null);

  if (isLoading) {
    return <TeamListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Teams"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching teams for this workspace."
        }
      />
    );
  }

  if (!data || data.data.length === 0) {
    return (
      <div className="pt-6">
        <EmptyState
          icon={<Users className="h-10 w-10 text-primary" />}
          title="This workspace has no teams yet."
          description="Create the first team to start organizing users."
        />
      </div>
    );
  }

  return (
    <>
      <div className="grid gap-4 pt-6 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((team) => (
          <TeamCard
            team={{ ...team, workspaceId }}
            key={team.id}
            onEdit={() => setEditingTeamId(team.id)}
          />
        ))}
      </div>
      <ResourceCrudDialog
        resourceId={editingTeamId}
        resourcePath={`workspaces/${workspaceId}/teams`}
        resourceKey={["teams", workspaceId]}
        title="Edit Team"
        description="Update team details and manage its members."
        form={TeamForm}
        formProps={{ workspaceId }}
        isOpen={!!editingTeamId}
        onOpenChange={(isOpen: any) => !isOpen && setEditingTeamId(null)}
        dialogClassName="sm:max-w-3xl"
      >
        {(team: any) => (
          <ManageTeamMembers team={team} workspaceId={workspaceId} />
        )}
      </ResourceCrudDialog>
    </>
  );
}

// FILE: src/features/workspaces/api/useGetWorkspaces.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Workspace } from "@/types";

interface WorkspaceListQuery {
  limit?: number;
}

export function useGetWorkspaces() {
  const resource = useApiResource<Workspace, WorkspaceListQuery>("workspaces", [
    "workspaces",
  ]);
  return resource.useGetAll({ limit: 1000 });
}
// FILE: src/features/workspaces/api/useManageWorkspaceAttachments.ts
import api from "@/lib/api";
import { useApiMutation } from "@/hooks/useApiMutation";

type PluralEntityType = "knowledge-bases" | "whiteboards" | "publications";

interface AttachParams {
  workspaceId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function attachEntity(params: AttachParams): Promise<any> {
  const { workspaceId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/${plural}`;
  const { data } = await api.post(url, { entityId });
  return data;
}

interface DetachParams {
  workspaceId: string;
  entityId: string;
  plural: PluralEntityType;
}

async function detachEntity(params: DetachParams): Promise<void> {
  const { workspaceId, entityId, plural } = params;
  const url = `workspaces/${workspaceId}/${plural}/${entityId}`;
  await api.delete(url);
}

export function useManageWorkspaceAttachments(workspaceId: string) {
  const invalidateQueries = [["workspaces"], ["workspace", workspaceId]];

  const useAttachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        attachEntity({ workspaceId, ...data }),
      successMessage: "Attachment added to workspace.",
      invalidateQueries,
    });
  };

  const useDetachEntity = () => {
    return useApiMutation({
      mutationFn: (data: { entityId: string; plural: PluralEntityType }) =>
        detachEntity({ workspaceId, ...data }),
      successMessage: "Attachment removed from workspace.",
      invalidateQueries,
    });
  };

  return { useAttachEntity, useDetachEntity };
}
// FILE: src/features/workspaces/api/useManageWorkspaces.ts
import { useApiResource } from "@/hooks/useApiResource";
import { Workspace } from "@/types";

export function useManageWorkspaces() {
  return useApiResource<Workspace>("workspaces", ["workspaces"]);
}
// FILE: src/features/workspaces/components/WorkspaceAttachments.tsx
import { useState } from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
import { Plus, Trash2 } from "lucide-react";
import { useManageWorkspaceAttachments } from "../api/useManageWorkspaceAttachments";
import { useManageKnowledgeBases } from "@/features/collaboration/api/useManageKnowledgeBases";
import { useManagePublications } from "@/features/publications/api/useManagePublications";
import { useManageWhiteboards } from "@/features/collaboration/api/useManageWhiteboards";
import { getIcon } from "@/lib/icons";
import { AnyValue } from "@/types";

export function WorkspaceAttachments({ workspace }: { workspace: AnyValue }) {
  const [popoverOpen, setPopoverOpen] = useState(false);
  const { useAttachEntity, useDetachEntity } = useManageWorkspaceAttachments(
    workspace.id
  );
  const attachMutation = useAttachEntity();
  const detachMutation = useDetachEntity();

  const { data: kbsData } = useManageKnowledgeBases().useGetAll();
  const { data: pubsData } = useManagePublications().useGetAll();
  const { data: whiteboardsData } = useManageWhiteboards().useGetAll();

  const handleAttach = (entityId: string, plural: any) => {
    attachMutation.mutate({ entityId, plural });
    setPopoverOpen(false);
  };

  const handleDetach = (entityId: string, plural: any) => {
    detachMutation.mutate({ entityId, plural });
  };

  const attachments = [
    ...(workspace.knowledgeBases || []).map((kb: any) => ({
      ...kb,
      type: "KnowledgeBase",
      plural: "knowledge-bases",
    })),
    ...(workspace.publications || []).map((p: any) => ({
      ...p,
      type: "Publication",
      plural: "publications",
    })),
    ...(workspace.whiteboards || []).map((w: any) => ({
      ...w,
      type: "Whiteboard",
      plural: "whiteboards",
    })),
  ];

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <h3 className="text-sm font-semibold">Attachments</h3>
        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="icon" className="h-6 w-6">
              <Plus className="h-4 w-4" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[250px] p-0">
            <Command>
              <CommandInput placeholder="Attach..." />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup heading="Knowledge Bases">
                  {kbsData?.data?.map((kb: any) => (
                    <CommandItem
                      key={kb.id}
                      onSelect={() => handleAttach(kb.id, "knowledge-bases")}
                    >
                      {kb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Publications">
                  {pubsData?.data?.map((pub: any) => (
                    <CommandItem
                      key={pub.id}
                      onSelect={() => handleAttach(pub.id, "publications")}
                    >
                      {pub.title}
                    </CommandItem>
                  ))}
                </CommandGroup>
                <CommandSeparator />
                <CommandGroup heading="Whiteboards">
                  {whiteboardsData?.data?.map((wb: any) => (
                    <CommandItem
                      key={wb.id}
                      onSelect={() => handleAttach(wb.id, "whiteboards")}
                    >
                      {wb.name}
                    </CommandItem>
                  ))}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>
      <div className="max-h-48 space-y-1 overflow-y-auto rounded-md border p-1">
        {attachments.length > 0 ? (
          attachments.map((item: any) => {
            const Icon = getIcon(item.type);
            return (
              <div
                key={item.id}
                className="flex items-center justify-between rounded-md p-2 text-sm hover:bg-accent/50"
              >
                <div className="flex min-w-0 items-center gap-2">
                  <Icon className="h-4 w-4 flex-shrink-0" />
                  <span className="truncate">{item.name || item.title}</span>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-6 w-6"
                  onClick={() => handleDetach(item.id, item.plural)}
                >
                  <Trash2 className="h-3 w-3" />
                </Button>
              </div>
            );
          })
        ) : (
          <p className="p-2 text-center text-xs text-muted-foreground">
            No attachments.
          </p>
        )}
      </div>
    </div>
  );
}
// FILE: src/features/workspaces/components/WorkspaceCard.tsx
import { CardContent } from "@/components/ui/card";
import { Workspace } from "@/types";
import { ActionMenu } from "@/components/shared/ActionMenu";
import { EntityCard } from "@/components/shared/EntityCard";
import { useManageWorkspaces } from "../api/useManageWorkspaces";

interface WorkspaceCardProps {
  workspace: Workspace;
  onEdit: (workspaceId: string) => void;
}

export function WorkspaceCard({ workspace, onEdit }: WorkspaceCardProps) {
  const { useDelete } = useManageWorkspaces();
  const deleteMutation = useDelete();

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    if (
      window.confirm(
        `Are you sure you want to delete the "${workspace.name}" workspace? This will delete all associated projects and tasks.`
      )
    ) {
      deleteMutation.mutate(workspace.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    onEdit(workspace.id);
  };
  return (
    <EntityCard
      title={workspace.name}
      description={workspace.description || "No description provided."}
      linkTo={`/workspaces/${workspace.id}/projects`}
      actions={
        <ActionMenu
          onEdit={handleEdit}
          onDelete={handleDelete}
          deleteDisabled={deleteMutation.isPending}
        />
      }
    >
      <CardContent>
        <p className="text-sm text-muted-foreground">
          Created on:{" "}
          {new Date(workspace.createdAt).toLocaleDateString("en-US")}
        </p>
      </CardContent>
    </EntityCard>
  );
}
// FILE: src/features/workspaces/components/WorkspaceForm.tsx
import { z } from "zod";
import { nameSchema, descriptionSchema } from "@/lib/schemas";
import { ResourceForm } from "@/components/shared/form/ResourceForm";
import { FormInput } from "@/components/shared/form/FormFields";

const workspaceSchema = z.object({
  name: nameSchema("Workspace"),
  description: descriptionSchema,
});

interface WorkspaceFormProps {
  initialData?: any;
  onSuccess?: () => void;
}

export function WorkspaceForm({ initialData, onSuccess }: WorkspaceFormProps) {
  return (
    <ResourceForm
      schema={workspaceSchema}
      resourcePath="workspaces"
      resourceKey={["workspaces"]}
      initialData={initialData}
      onSuccess={onSuccess}
      renderFields={() => (
        <>
          <FormInput
            name="name"
            label="Workspace Name"
            placeholder="e.g. Q1 Research Projects"
          />
          <FormInput
            name="description"
            label="Description (Optional)"
            placeholder="A brief summary of this workspace"
          />
        </>
      )}
    />
  );
}
// FILE: src/features/workspaces/components/WorkspaceList.tsx
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { Blocks } from "lucide-react";
import { useState } from "react";
import { WorkspaceCard } from "./WorkspaceCard";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WorkspaceForm } from "./WorkspaceForm";
import { useManageWorkspaces } from "../api/useManageWorkspaces";

const WorkspaceListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);
export function WorkspaceList() {
  const { useGetAll } = useManageWorkspaces();
  const { data, isLoading, isError, error } = useGetAll();
  const [editingWorkspaceId, setEditingWorkspaceId] = useState<string | null>(
    null
  );

  if (isLoading) {
    return <WorkspaceListSkeleton />;
  }

  if (isError) {
    return (
      <ErrorState
        title="Failed to Load Workspaces"
        message={
          (error as any)?.response?.data?.message ||
          "There was a problem fetching your workspaces. Please try again later."
        }
      />
    );
  }

  const handleEdit = (workspaceId: string) => {
    setEditingWorkspaceId(workspaceId);
  };

  if (!data || data.data.length === 0) {
    return (
      <EmptyState
        icon={<Blocks className="h-10 w-10 text-primary" />}
        title="No Workspaces Found"
        description="Get started by creating your first workspace using the button above."
      />
    );
  }

  return (
    <>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {data.data.map((workspace: any) => (
          <WorkspaceCard
            key={workspace.id}
            workspace={workspace}
            onEdit={handleEdit}
          />
        ))}
      </div>

      <ResourceCrudDialog
        isOpen={!!editingWorkspaceId}
        onOpenChange={(isOpen) => !isOpen && setEditingWorkspaceId(null)}
        trigger={<></>}
        title="Edit Workspace"
        description="Make changes to your workspace here. Click save when you're done."
        form={WorkspaceForm}
        resourcePath="workspaces"
        resourceKey={["workspaces"]}
        resourceId={editingWorkspaceId}
      />
    </>
  );
}
// FILE: src/hooks/useApiMutation.ts
import {
  useMutation,
  useQueryClient,
  QueryKey,
  MutationFunction,
  UseMutationOptions,
} from "@tanstack/react-query";
import { AxiosError } from "axios";
import { toast } from "sonner";

export interface UseApiMutationOptions<TData, TVariables, TContext>
  extends Omit<
    UseMutationOptions<TData, AxiosError, TVariables, TContext>,
    "mutationFn"
  > {
  mutationFn: MutationFunction<TData, TVariables>;
  successMessage?: string | ((data: TData, variables: TVariables) => string);
  errorMessage?: string;
  invalidateQueries?:
    | QueryKey[]
    | ((data: TData, variables: TVariables) => QueryKey[]);
}

export function useApiMutation<
  TData = any,
  TVariables = any,
  TContext = unknown
>({
  mutationFn,
  successMessage,
  errorMessage,
  invalidateQueries = [],
  onSuccess,
  onError,
  ...options
}: UseApiMutationOptions<TData, TVariables, TContext>) {
  const queryClient = useQueryClient();

  return useMutation<TData, AxiosError, TVariables, TContext>({
    mutationFn,
    onSuccess: (data, variables, context) => {
      if (successMessage) {
        const message =
          typeof successMessage === "function"
            ? successMessage(data, variables)
            : successMessage;
        toast.success(message);
      }

      const keysToInvalidate =
        typeof invalidateQueries === "function"
          ? invalidateQueries(data, variables)
          : invalidateQueries;

      if (keysToInvalidate.length) {
        keysToInvalidate.forEach((key) => {
          if (key && key.length > 0) {
            queryClient.invalidateQueries({ queryKey: key });
          }
        });
      }

      if (onSuccess) {
        onSuccess(data, variables, context);
      }
    },
    onError: (error: any, variables, context) => {
      const defaultMessage = "An unexpected error occurred.";
      const message =
        errorMessage || error.response?.data?.message || defaultMessage;

      toast.error("Operation Failed", {
        description: message,
      });
      if (onError) {
        onError(error, variables, context);
      }
    },
    ...options,
  });
}
// FILE: src/hooks/useApiResource.ts
import api from "@/lib/api";
import { useQuery, QueryKey } from "@tanstack/react-query";
import { useApiMutation } from "./useApiMutation";

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

const fetchResourceList = async <T>(
  resourceUrl: string,
  query?: any
): Promise<PaginatedResponse<T>> => {
  const { data } = await api.get<PaginatedResponse<T>>(resourceUrl, {
    params: query,
  });
  return data;
};

const fetchResource = async <T>(
  resourceUrl: string,
  id: string
): Promise<T> => {
  const { data } = await api.get<T>(`${resourceUrl}/${id}`);
  return data;
};

const createResource = async <T>(
  resourceUrl: string,
  resourceData: any
): Promise<T> => {
  const { data } = await api.post<T>(`${resourceUrl}`, resourceData);
  return data;
};

const updateResource = async <T>({
  resourceUrl,
  id,
  data: resourceData,
}: {
  resourceUrl: string;
  id: string;
  data: any;
}): Promise<T> => {
  const { data } = await api.put<T>(`${resourceUrl}/${id}`, resourceData);
  return data;
};

const deleteResource = async (
  resourceUrl: string,
  ids: string | string[]
): Promise<void> => {
  if (Array.isArray(ids) && ids.length > 0) {
    await api.delete(`${resourceUrl}`, { data: { ids } });
  } else if (typeof ids === "string") {
    await api.delete(`${resourceUrl}/${ids}`);
  }
};

type Scope =
  | "workspaces"
  | "projects"
  | "tasks"
  | "teams"
  | "users"
  | "roles"
  | "permissions"
  | "announcements"
  | "dashboards"
  | "goals"
  | "task-types";

interface UrlAndKeyOptions {
  scope: Scope;
  workspaceId?: string | null;
  projectId?: string | null;
}

function constructUrlAndKey({
  scope,
  workspaceId,
  projectId,
}: UrlAndKeyOptions): { resourceUrl: string; resourceKey: QueryKey } {
  let resourceUrl = "";
  let resourceKey: (string | undefined | null)[] = [scope];

  if (workspaceId) {
    resourceUrl = `workspaces/${workspaceId}`;
    resourceKey.push(workspaceId);
    if (projectId) {
      resourceUrl += `/projects/${projectId}`;
      resourceKey.push(projectId);
    }
  }

  resourceUrl = resourceUrl ? `${resourceUrl}/${scope}` : scope;

  if (!workspaceId && ["users", "roles", "permissions"].includes(scope)) {
    resourceUrl = `admin/${scope}`;
  }

  return { resourceUrl, resourceKey: resourceKey.filter(Boolean) as QueryKey };
}

export function useApiResource<TData = any, TQuery = object>(
  resourceUrl: string,
  resourceKey: QueryKey
) {
  const resourceName =
    String(resourceKey[0]).charAt(0).toUpperCase() +
    String(resourceKey[0]).slice(1);

  const useGetAll = (query?: TQuery & { enabled?: boolean }) => {
    const { enabled = true, ...queryParams } = query || {};
    return useQuery<PaginatedResponse<TData>>({
      queryKey: [...resourceKey, queryParams],
      queryFn: () => fetchResourceList<TData>(resourceUrl, queryParams),
      enabled,
    });
  };

  const useGetOne = (id: string | null) => {
    return useQuery<TData>({
      queryKey: [...resourceKey, id],
      queryFn: () => fetchResource<TData>(resourceUrl, id!),
      enabled: !!id,
    });
  };

  const useCreate = () => {
    return useApiMutation<TData, any>({
      mutationFn: (newData: any) => createResource<TData>(resourceUrl, newData),
      successMessage: `${resourceName} created successfully.`,
      invalidateQueries: [resourceKey],
    });
  };

  const useUpdate = () => {
    return useApiMutation<TData, { id: string; data: any }>({
      mutationFn: (variables) =>
        updateResource<TData>({ resourceUrl, ...variables }),
      successMessage: `${resourceName} updated successfully.`,
      invalidateQueries: (data: any) => [
        resourceKey,
        [...resourceKey.slice(0, 1), data.id],
      ],
    });
  };

  const useDelete = () => {
    return useApiMutation<void, string | string[]>({
      mutationFn: (ids: string | string[]) => deleteResource(resourceUrl, ids),
      successMessage: (_data, variables) => {
        const count = Array.isArray(variables) ? variables.length : 1;
        return `${count} ${resourceName}(s) deleted successfully.`;
      },
      invalidateQueries: [resourceKey],
    });
  };

  return {
    useGetAll,
    useGetOne,
    useCreate,
    useUpdate,
    useDelete,
  };
}

useApiResource.constructUrlAndKey = constructUrlAndKey;
// FILE: src/hooks/useDebounce.ts
import { useState, useEffect } from "react";

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

// FILE: src/hooks/useNotificationSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useNotificationSocket() {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket) {
      return;
    }

    const handleNewNotification = (event: { payload: any }) => {
      const newNotification = event.payload;

      toast.info(newNotification.message, {
        description: `Severity: ${newNotification.severity}`,
      });

      queryClient.setQueryData<any>(
        ["notifications"],
        (oldData: { data: any; total: number; unreadCount: any }) => {
          if (!oldData) {
            const newData = {
              data: [newNotification],
              total: 1,
              unreadCount: 1,
              page: 1,
              limit: 10,
              totalPages: 1,
            };
            return newData;
          }

          const newData = {
            ...oldData,
            data: [newNotification, ...(oldData.data || [])],
            total: oldData.total + 1,
            unreadCount: (oldData.unreadCount ?? 0) + 1,
          };
          return newData;
        }
      );
    };

    socket.on("NEW_NOTIFICATION", handleNewNotification);

    return () => {
      socket.off("NEW_NOTIFICATION", handleNewNotification);
    };
  }, [socket, queryClient]);
}
// FILE: src/hooks/useOAuth.ts
import { useCallback } from "react";
import { toast } from "sonner";

export function useOAuth() {
  const openOAuthPopup = useCallback(
    (provider: string, workspaceId: string) => {
      const width = 600;
      const height = 700;
      const left = window.screen.width / 2 - width / 2;
      const top = window.screen.height / 2 - height / 2;

      const url = `http://localhost:3000/api/v1/integrations/connect/${provider}?workspaceId=${workspaceId}`;

      const popup = window.open(
        url,
        "oauth-popup",
        `width=${width},height=${height},top=${top},left=${left}`
      );

      return new Promise<void>((resolve, reject) => {
        const handleMessage = (event: MessageEvent) => {
          if (
            event.origin !== window.location.origin ||
            event.data?.source !== "google-oauth-callback"
          ) {
            return;
          }

          if (event.data.status === "success") {
            toast.success("Integration connected successfully.");
            resolve();
          } else {
            toast.error("Failed to connect integration.", {
              description: event.data.message || "An unknown error occurred.",
            });
            reject(new Error(event.data.message));
          }
          window.removeEventListener("message", handleMessage);
        };

        window.addEventListener("message", handleMessage);

        const checkPopupClosed = setInterval(() => {
          if (popup && popup.closed) {
            clearInterval(checkPopupClosed);
            window.removeEventListener("message", handleMessage);

            resolve();
          }
        }, 1000);
      });
    },
    []
  );

  return { openOAuthPopup };
}
// FILE: src/hooks/usePresence.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { usePresenceStore } from "@/store/presence";

export function usePresence(contextType: string, contextId: string) {
  const socket = useSocket();
  const { setMembers, addMember, removeMember } = usePresenceStore();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      setMembers([]);
      return;
    }

    socket.emit("join_context", { contextType, contextId }, (response: any) => {
      if (response.success) {
        setMembers(response.data.members);
      }
    });

    const onUserJoined = (event: any) => {
      addMember(event.payload);
    };

    const onUserLeft = (event: any) => {
      removeMember(event.payload.socketId);
    };

    socket.on("USER_JOINED_CONTEXT", onUserJoined);
    socket.on("USER_LEFT_CONTEXT", onUserLeft);

    return () => {
      socket.emit("leave_context", { contextType, contextId });
      socket.off("USER_JOINED_CONTEXT", onUserJoined);
      socket.off("USER_LEFT_CONTEXT", onUserLeft);

      setMembers([]);
    };
  }, [socket, contextType, contextId, setMembers, addMember, removeMember]);
}
// FILE: src/hooks/useProjectSocket.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";

export function useProjectSocket(projectId: string) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !projectId) {
      return;
    }

    const handleContextUpdate = (event: any) => {
      const { entityType, data } = event.payload;

      toast.info(`Real-time update: ${entityType} was modified.`);

      queryClient.invalidateQueries({ queryKey: ["tasks", projectId] });
      queryClient.invalidateQueries({ queryKey: ["views", projectId] });

      if (data?.id) {
        queryClient.invalidateQueries({ queryKey: ["task", data.id] });
      }
    };

    socket.on("CONTEXT_ITEM_UPDATED", handleContextUpdate);

    socket.emit("join_context", {
      contextType: "Project",
      contextId: projectId,
    });

    return () => {
      socket.emit("leave_context", {
        contextType: "Project",
        contextId: projectId,
      });
      socket.off("CONTEXT_ITEM_UPDATED", handleContextUpdate);
    };
  }, [socket, projectId, queryClient]);
}
// FILE: src/hooks/useSocket.ts
import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";
import { useAuthStore } from "@/store/auth";

export function useSocket() {
  const [socket, setSocket] = useState<Socket | null>(null);
  const accessToken = useAuthStore((state) => state.accessToken);

  useEffect(() => {
    if (!accessToken) {
      if (socket) {
        socket.disconnect();
        setSocket(null);
      }
      return;
    }

    const newSocket = io("http://localhost:3000", {
      auth: {
        token: accessToken,
      },
    });

    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, [accessToken]);

  return socket;
}
// FILE: src/hooks/useSocketSubscription.ts
import { useEffect } from "react";
import { useSocket } from "./useSocket";
import { useQueryClient } from "@tanstack/react-query";

type EventHandler = (event: any) => void;

export function useSocketSubscription(
  contextType: string,
  contextId: string,
  handlers: Record<string, EventHandler>
) {
  const socket = useSocket();
  const queryClient = useQueryClient();

  useEffect(() => {
    if (!socket || !contextId || !contextType) {
      return;
    }

    socket.emit("join_context", { contextType, contextId });

    Object.entries(handlers).forEach(([eventName, handler]) => {
      socket.on(eventName, handler);
    });

    return () => {
      socket.emit("leave_context", { contextType, contextId });

      Object.keys(handlers).forEach((eventName) => {
        socket.off(eventName);
      });
    };
  }, [socket, contextType, contextId, queryClient, handlers]);
}

// FILE: src/main.tsx
import ReactDOM from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import { QueryProvider } from "./providers/QueryProvider.tsx";
import { AuthProvider } from "./providers/AuthProvider.tsx";
import { BrowserRouter } from "react-router-dom";
import { ThemeProvider } from "next-themes";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <QueryProvider>
    <BrowserRouter>
      <AuthProvider>
        <ThemeProvider attribute="class" defaultTheme="dark">
          <App />
        </ThemeProvider>
      </AuthProvider>
    </BrowserRouter>
  </QueryProvider>
);
// FILE: src/pages/AccountSettingsPage.tsx
import { ChangePasswordForm } from "@/features/user-management/components/ChangePasswordForm";
import { NotificationPreferencesForm } from "@/features/system/components/NotificationPreferencesForm";

export function AccountSettingsPage() {
  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <ChangePasswordForm />
      <NotificationPreferencesForm />
    </div>
  );
}
// FILE: src/pages/ActivitiesPage.tsx
import { useState, useEffect } from "react";
import { ActivityLog } from "@/features/analytics/components/ActivityLog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import { Label } from "@/components/ui/label";
import { useParams } from "react-router-dom";

export function ActivitiesPage() {
  const params = useParams<{ workspaceId?: string; projectId?: string }>();
  const [workspaceId, setWorkspaceId] = useState<string | undefined>(
    params.workspaceId
  );
  const [projectId, setProjectId] = useState<string | undefined>(
    params.projectId
  );
  const { data: workspacesData } = useGetWorkspaces();
  const { data: projectsData } = useGetProjects(workspaceId);

  useEffect(() => {
    setWorkspaceId(params.workspaceId);
    setProjectId(params.projectId);
  }, [params.workspaceId, params.projectId]);

  const handleWorkspaceChange = (id: string) => {
    const newWorkspaceId = id === "all" ? undefined : id;
    setWorkspaceId(newWorkspaceId);
    setProjectId(undefined);
  };

  const handleProjectChange = (id: string) => {
    setProjectId(id === "all" ? undefined : id);
  };

  return (
    <div className="space-y-4">
      {!params.workspaceId && (
        <div className="flex items-center gap-4">
          <div className="w-64">
            <Label>Filter by Workspace</Label>
            <Select onValueChange={handleWorkspaceChange}>
              <SelectTrigger>
                <SelectValue placeholder="Select a workspace..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Workspaces</SelectItem>
                {workspacesData?.data.map((ws) => (
                  <SelectItem key={ws.id} value={ws.id}>
                    {ws.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="w-64">
            <Label>Filter by Project</Label>
            <Select
              onValueChange={handleProjectChange}
              disabled={!workspaceId || !projectsData?.data}
              value={projectId}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a project..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Projects in Workspace</SelectItem>
                {projectsData?.data.map((p) => (
                  <SelectItem key={p.id} value={p.id}>
                    {p.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      )}
      <ActivityLog scope={{ workspaceId, projectId }} />
    </div>
  );
}
// FILE: src/pages/admin/AnnouncementListPage.tsx
import { AnnouncementList } from "@/features/admin/announcements/components/AnnouncementList";
import { BroadcastNotificationDialog } from "@/features/system/components/BroadcastNotificationDialog";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { AnnouncementForm } from "@/features/admin/announcements/components/AnnouncementForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function AnnouncementListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <ListPageLayout
      title="System Communications"
      description="Create and manage announcements or send real-time broadcasts."
      actionButton={
        <div className="flex items-center gap-2">
          <BroadcastNotificationDialog />
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Announcement
              </Button>
            }
            title="Create New Announcement"
            description="Broadcast information to all users or specific roles."
            form={AnnouncementForm}
            resourcePath="announcements"
            resourceKey={["announcements"]}
          />
        </div>
      }
    >
      <AnnouncementList />
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/JobMonitoringPage.tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { JobSystemStatus } from "@/features/admin/jobs/components/JobSystemStatus";
import { JobList } from "@/features/admin/jobs/components/JobList";
import { JobScheduleList } from "@/features/admin/jobs/components/JobScheduleList";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateJobScheduleForm } from "@/features/admin/jobs/components/CreateJobScheduleForm";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { CreateJobForm } from "@/features/admin/jobs/components/CreateJobForm";
import {
  useCleanupJobs,
  useEmitJobStats,
} from "@/features/admin/jobs/api/useJobSystemActions";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function JobMonitoringPage() {
  const [isCreateScheduleOpen, setIsCreateScheduleOpen] = useState(false);
  const [isCreateJobOpen, setIsCreateJobOpen] = useState(false);
  const cleanupJobsMutation = useCleanupJobs();
  const emitStatsMutation = useEmitJobStats();

  return (
    <ListPageLayout
      title="Job Monitoring"
      description="Monitor and manage background jobs and schedules."
    >
      <Tabs defaultValue="status" className="space-y-4">
        <TabsList>
          <TabsTrigger value="status">System Status</TabsTrigger>
          <TabsTrigger value="queue">Job Queue</TabsTrigger>
          <TabsTrigger value="schedules">Schedules</TabsTrigger>
        </TabsList>
        <TabsContent value="status" className="space-y-4">
          <JobSystemStatus />
          <Card>
            <CardHeader>
              <CardTitle>System Actions</CardTitle>
              <CardDescription>
                Perform manual system-level job actions.
              </CardDescription>
            </CardHeader>
            <CardContent className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => cleanupJobsMutation.mutate(undefined)}
                disabled={cleanupJobsMutation.isPending}
              >
                {cleanupJobsMutation.isPending
                  ? "Cleaning up..."
                  : "Clean Up Old Jobs"}
              </Button>
              <Button
                variant="outline"
                onClick={() => emitStatsMutation.mutate(undefined)}
                disabled={emitStatsMutation.isPending}
              >
                {emitStatsMutation.isPending
                  ? "Emitting..."
                  : "Emit Stats via WS"}
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="queue" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Job Queue</CardTitle>
                <CardDescription>
                  A list of all recent and pending background jobs.
                </CardDescription>
              </div>
              <ResourceCrudDialog
                isOpen={isCreateJobOpen}
                onOpenChange={setIsCreateJobOpen}
                trigger={
                  <Button onClick={() => setIsCreateJobOpen(true)}>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New Job
                  </Button>
                }
                title="Manually Enqueue Job"
                description="Create and enqueue a new background job with a specific payload."
                form={CreateJobForm}
                resourcePath="admin/jobs"
                resourceKey={["jobs"]}
              />
            </CardHeader>
            <CardContent>
              <JobList />
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="schedules" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Job Schedules</CardTitle>
                <CardDescription>
                  All recurring jobs defined in the system.
                </CardDescription>
              </div>
              <ResourceCrudDialog
                isOpen={isCreateScheduleOpen}
                onOpenChange={setIsCreateScheduleOpen}
                trigger={
                  <Button onClick={() => setIsCreateScheduleOpen(true)}>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New Schedule
                  </Button>
                }
                title="Create New Job Schedule"
                description="Define a recurring job that will run automatically."
                form={CreateJobScheduleForm}
                resourcePath="admin/jobs/schedules"
                resourceKey={["jobSchedules"]}
              />
            </CardHeader>
            <CardContent>
              <JobScheduleList />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/PermissionListPage.tsx
import { PermissionList } from "@/features/admin/permissions/components/PermissionList";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function PermissionListPage() {
  return (
    <ListPageLayout
      title="System Permissions"
      description="A read-only list of all available permissions in the system."
    >
      <PermissionList />
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/RoleListPage.tsx
import { RoleList } from "@/features/admin/roles/components/RoleList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { RoleForm } from "@/features/admin/roles/components/RoleForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function RoleListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <ListPageLayout
      title="Role Management"
      description="View system roles and their assigned permissions."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Role
            </Button>
          }
          title="Create New Role"
          description="Create a new system-wide role. You can assign permissions after creation."
          form={RoleForm}
          resourcePath="admin/roles"
          resourceKey={["roles"]}
        />
      }
    >
      <RoleList />
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/SystemStatusPage.tsx
import { SystemStatusDashboard } from "@/features/admin/system-status/components/SystemStatusDashboard";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function SystemStatusPage() {
  return (
    <ListPageLayout
      title="System Status"
      description="A real-time overview of the application's health and core
      dependencies."
    >
      <SystemStatusDashboard />
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/UserListPage.tsx
import { UserList } from "@/features/admin/users/components/UserList";
import { Button } from "@/components/ui/button";
import { UserPlus } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateUserForm } from "@/features/admin/users/components/CreateUserForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function UserListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <ListPageLayout
      title="User Management"
      description="View and manage system users."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <UserPlus className="mr-2 h-4 w-4" />
              New User
            </Button>
          }
          title="Create New User"
          description="Fill out the form below to create a new user account. An invitation email will be sent for them to set their password."
          form={CreateUserForm}
          resourcePath="admin/users"
          resourceKey={["users"]}
        />
      }
    >
      <UserList />
    </ListPageLayout>
  );
}
// FILE: src/pages/admin/WorkflowListPage.tsx
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WorkflowList } from "@/features/admin/workflows/components/WorkflowList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { WorkflowForm } from "@/features/admin/workflows/components/WorkflowForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function WorkflowListPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  return (
    <ListPageLayout
      title="Workflows"
      description="Automate tasks based on project events."
      actionButton={
        <Button onClick={() => setIsCreateOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Workflow
        </Button>
      }
    >
      <WorkflowList />
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create New Workflow"
        description="Configure a trigger and a series of actions to automate your processes."
        form={WorkflowForm}
        resourcePath="admin/workflows"
        resourceKey={["workflows"]}
        dialogClassName="sm:max-w-[600px]"
      />
    </ListPageLayout>
  );
}

// FILE: src/pages/AnalyticsLayout.tsx
import { NavLink, Outlet, useLocation, useParams } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

export function AnalyticsLayout() {
  const location = useLocation();
  const { workspaceId } = useParams<{ workspaceId?: string }>();

  const basePath = workspaceId
    ? `/workspaces/${workspaceId}/analytics`
    : "/analytics";

  const analyticsNavItems = [
    ...(workspaceId
      ? [{ to: `${basePath}/dashboards`, label: "Dashboards" }]
      : [
          { to: `${basePath}/activities`, label: "Activities" },
          { to: `${basePath}/dashboards`, label: "Dashboards" },
        ]),
    { to: `${basePath}/reporting`, label: "Reporting" },
    ...(workspaceId
      ? [{ to: `${basePath}/activity`, label: "Activity" }]
      : [{ to: `${basePath}/reports`, label: "Reports" }]),
  ];

  const currentTab = location.pathname.split("/").pop() || "activities";

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Analytics</h1>
        <p className="text-muted-foreground">
          {workspaceId
            ? "Explore insights and trends for this workspace."
            : "Explore global insights and trends across all your work."}
        </p>
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          {analyticsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to} end>
              {({ isActive }) => (
                <TabsTrigger
                  value={item.to.split("/").pop()!}
                  disabled={isActive}
                >
                  {item.label}
                </TabsTrigger>
              )}
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}
// FILE: src/pages/ChatPage.tsx
import { ChatInterface } from "@/features/collaboration/components/ChatInterface";

export function ChatPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Chat</h1>
        <p className="text-muted-foreground">
          Real-time communication with your team.
        </p>
      </div>
      <ChatInterface />
    </div>
  );
}

// FILE: src/pages/CrmPage.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { PlusCircle, Settings } from "lucide-react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { PersonForm } from "@/features/crm/components/PersonForm";
import { OrganizationForm } from "@/features/crm/components/OrganizationForm";
import { PersonDetailPanel } from "@/features/crm/components/PersonDetailPanel";
import { OrganizationDetailPanel } from "@/features/crm/components/OrganizationDetailPanel";
import { DealDetailPanel } from "@/features/crm/components/DealDetailPanel";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { PersonList } from "@/features/crm/components/PersonList";
import { OrganizationList } from "@/features/crm/components/OrganizationList";
import { DealPipeline } from "@/features/crm/components/DealPipeline";
import { DealForm } from "@/features/crm/components/DealForm";
import { DealStageManager } from "@/features/crm/components/DealStageManager";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
} from "@/components/ui/dialog";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";

export function CrmPage() {
  const [selectedPersonId, setSelectedPersonId] = useState<string | null>(null);
  const [selectedOrganizationId, setSelectedOrganizationId] = useState<
    string | null
  >(null);
  const [selectedDealId, setSelectedDealId] = useState<string | null>(null);
  const [dialogState, setDialogState] = useState({ open: false, type: "" });
  const [workspaceId, setWorkspaceId] = useState<string | undefined>();
  const [projectId, setProjectId] = useState<string | undefined>();

  const { data: workspacesData } = useGetWorkspaces();
  const { data: projectsData } = useGetProjects(workspaceId);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">CRM</h1>
          <p className="text-muted-foreground">
            Manage all people, organizations, and deals.
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            onClick={() => setDialogState({ open: true, type: "person" })}
          >
            <PlusCircle className="mr-2 h-4 w-4" />
            New Person
          </Button>
          <Button
            onClick={() => setDialogState({ open: true, type: "organization" })}
          >
            <PlusCircle className="mr-2 h-4 w-4" />
            New Organization
          </Button>
          <Button onClick={() => setDialogState({ open: true, type: "deal" })}>
            <PlusCircle className="mr-2 h-4 w-4" />
            New Deal
          </Button>
        </div>
      </div>

      <Tabs defaultValue="deals">
        <TabsList>
          <TabsTrigger value="deals">Deals</TabsTrigger>
          <TabsTrigger value="people">People</TabsTrigger>
          <TabsTrigger value="organizations">Organizations</TabsTrigger>
        </TabsList>
        <TabsContent value="deals" className="mt-4">
          <div className="mb-4 flex items-center justify-between">
            <div className="flex items-end gap-4">
              <div className="w-64">
                <Label>Workspace</Label>
                <Select
                  value={workspaceId}
                  onValueChange={(id) => {
                    setWorkspaceId(id);
                    setProjectId(undefined);
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a workspace" />
                  </SelectTrigger>
                  <SelectContent>
                    {workspacesData?.data.map((ws) => (
                      <SelectItem key={ws.id} value={ws.id}>
                        {ws.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="w-64">
                <Label>Project</Label>
                <Select
                  value={projectId}
                  onValueChange={setProjectId}
                  disabled={!workspaceId}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a project" />
                  </SelectTrigger>
                  <SelectContent>
                    {projectsData?.data.map((p) => (
                      <SelectItem key={p.id} value={p.id}>
                        {p.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" disabled={!projectId}>
                  <Settings className="mr-2 h-4 w-4" />
                  Manage Stages
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Manage Deal Stages</DialogTitle>
                  <DialogDescription>
                    Add, remove, and reorder the columns in your deals pipeline.
                  </DialogDescription>
                </DialogHeader>
                <DealStageManager />
              </DialogContent>
            </Dialog>
          </div>
          <DealPipeline
            onDealSelect={setSelectedDealId}
            projectId={projectId}
          />
        </TabsContent>
        <TabsContent value="people" className="mt-4">
          <PersonList onPersonSelect={setSelectedPersonId} />
        </TabsContent>
        <TabsContent value="organizations" className="mt-4">
          <OrganizationList onOrganizationSelect={setSelectedOrganizationId} />
        </TabsContent>
      </Tabs>

      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "person"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create New Person"
        description="Add a new person to the CRM. This won't create a system user account."
        form={PersonForm}
        resourcePath="people"
        resourceKey={["people"]}
      />
      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "organization"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create New Organization"
        description="Add a new organization or company to the CRM."
        form={OrganizationForm}
        resourcePath="organizations"
        resourceKey={["organizations"]}
      />
      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "deal"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create New Deal"
        description="Add a new deal to your pipeline."
        form={DealForm}
        formProps={{ workspaceId, projectId }}
        resourcePath="deals"
        resourceKey={["deals"]}
      />

      <PersonDetailPanel
        personId={selectedPersonId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedPersonId(null);
        }}
      />
      <OrganizationDetailPanel
        organizationId={selectedOrganizationId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedOrganizationId(null);
        }}
      />
      <DealDetailPanel
        dealId={selectedDealId}
        onOpenChange={(isOpen) => {
          if (!isOpen) setSelectedDealId(null);
        }}
      />
    </div>
  );
}
// FILE: src/pages/DashboardDetailPage.tsx
import { useParams } from "react-router-dom";
import GridLayout, { Layout } from "react-grid-layout";
import { WidgetRenderer } from "@/features/analytics/components/WidgetRenderer";
import "react-grid-layout/css/styles.css";
import "react-resizable/css/styles.css";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateWidgetForm } from "@/features/analytics/components/CreateWidgetForm";
import { useGetDashboard } from "@/features/analytics/api/useGetDashboard";
import { useUpdateWidget } from "@/features/analytics/api/useUpdateWidget";

export function DashboardDetailPage() {
  const { workspaceId, projectId, dashboardId } = useParams<{
    workspaceId: string;
    projectId?: string;
    dashboardId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !dashboardId) {
    return <div>Missing ID parameter.</div>;
  }

  const { data: dashboardData, isLoading } = useGetDashboard(dashboardId);
  const updateWidgetMutation = useUpdateWidget(dashboardId);

  const handleLayoutChange = (newLayout: Layout[]) => {
    if (!dashboardData?.widgets) return;
    const originalLayout = dashboardData.widgets.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    }));
    for (const newPos of newLayout) {
      const originalPos = originalLayout.find((o: any) => o.i === newPos.i);
      if (
        originalPos &&
        (originalPos.x !== newPos.x ||
          originalPos.y !== newPos.y ||
          originalPos.w !== newPos.w ||
          originalPos.h !== newPos.h)
      ) {
        updateWidgetMutation.mutate({
          widgetId: newPos.i,
          widgetData: {
            layout: {
              x: newPos.x,
              y: newPos.y,
              w: newPos.w,
              h: newPos.h,
            },
          },
        });
      }
    }
  };

  if (isLoading) return <div>Loading Dashboard...</div>;
  if (!dashboardData) return <div>Dashboard not found.</div>;
  const layout =
    dashboardData.widgets?.map((widget: any) => ({
      ...widget.layout,
      i: widget.id,
    })) || [];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            {dashboardData.name}
          </h1>
          <p className="text-muted-foreground">{dashboardData.description}</p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Widget
            </Button>
          }
          title="Add a New Widget"
          description="Select a widget type and configure it to visualize your data."
          form={CreateWidgetForm}
          formProps={{ workspaceId, projectId, dashboardId }}
          resourcePath={`dashboards/${dashboardId}/widgets`}
          resourceKey={["dashboard", dashboardId]}
        />
      </div>

      <GridLayout
        className="layout"
        layout={layout}
        cols={12}
        rowHeight={30}
        width={1200}
        isDraggable={true}
        isResizable={true}
        onLayoutChange={handleLayoutChange}
      >
        {dashboardData.widgets?.map((widget: any) => (
          <div key={widget.id}>
            <WidgetRenderer
              widget={widget}
              workspaceId={workspaceId}
              projectId={projectId}
            />
          </div>
        ))}
      </GridLayout>
    </div>
  );
}
// FILE: src/pages/DashboardsPage.tsx
import { useState, useEffect } from "react";
import { DashboardList } from "@/features/analytics/components/DashboardList";
import { DashboardForm } from "@/features/analytics/components/DashboardForm";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import { Label } from "@/components/ui/label";
import { useParams } from "react-router-dom";

export function DashboardsPage() {
  const params = useParams<{ workspaceId?: string; projectId?: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const [workspaceId, setWorkspaceId] = useState<string | undefined>(
    params.workspaceId
  );
  const [projectId, setProjectId] = useState<string | undefined>(
    params.projectId
  );

  const { data: workspacesData } = useGetWorkspaces();
  const { data: projectsData } = useGetProjects(workspaceId);

  useEffect(() => {
    setWorkspaceId(params.workspaceId);
    setProjectId(params.projectId);
  }, [params.workspaceId, params.projectId]);

  const handleWorkspaceChange = (id: string) => {
    const newWorkspaceId = id === "all" ? undefined : id;
    setWorkspaceId(newWorkspaceId);
    setProjectId(undefined);
  };

  const handleProjectChange = (id: string) => {
    setProjectId(id === "all" ? undefined : id);
  };

  const scope = {
    workspaceId: workspaceId,
    projectId: projectId,
  };

  return (
    <div className="space-y-4">
      <div className="flex items-end justify-between">
        {!params.workspaceId && (
          <div className="flex items-center gap-4">
            <div className="w-64">
              <Label>Filter by Workspace</Label>
              <Select
                onValueChange={handleWorkspaceChange}
                value={workspaceId || "all"}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a workspace..." />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">My Dashboards</SelectItem>
                  {workspacesData?.data.map((ws) => (
                    <SelectItem key={ws.id} value={ws.id}>
                      {ws.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="w-64">
              <Label>Filter by Project</Label>
              <Select
                onValueChange={handleProjectChange}
                disabled={!workspaceId || !projectsData?.data}
                value={projectId || "all"}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a project..." />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Projects in Workspace</SelectItem>
                  {projectsData?.data.map((p) => (
                    <SelectItem key={p.id} value={p.id}>
                      {p.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        )}
        <div className={params.workspaceId ? "flex w-full justify-end" : ""}>
          <Button onClick={() => setIsCreateOpen(true)}>
            <PlusCircle className="mr-2 h-4 w-4" />
            New Dashboard
          </Button>
        </div>
      </div>
      <DashboardList {...scope} />
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create a new dashboard"
        description="Create a dashboard to track your metrics."
        form={DashboardForm}
        formProps={{ scope }}
        resourcePath={"dashboards"}
        resourceKey={
          scope.projectId
            ? ["dashboards", scope.projectId]
            : scope.workspaceId
              ? ["dashboards", scope.workspaceId]
              : ["dashboards", "user"]
        }
      />
    </div>
  );
}
// FILE: src/pages/ForgotPasswordPage.tsx
import { ForgotPasswordForm } from "@/features/user-management/components/ForgotPasswordForm";

export function ForgotPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ForgotPasswordForm />
    </div>
  );
}
// FILE: src/pages/GlobalKnowledgeBasePage.tsx
import { useManageKnowledgeBases } from "@/features/collaboration/api/useManageKnowledgeBases";
import { KnowledgeBaseCard } from "@/features/collaboration/components/KnowledgeBaseCard";
import { Skeleton } from "@/components/ui/skeleton";
import { ErrorState } from "@/components/shared/ErrorState";
import { EmptyState } from "@/components/shared/EmptyState";
import { BookOpen, PlusCircle } from "lucide-react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { KnowledgeBaseForm } from "@/features/collaboration/components/KnowledgeBaseForm";
import { Button } from "@/components/ui/button";
import { KnowledgeBase } from "@/types";

const ListSkeleton = () => (
  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
    {Array.from({ length: 3 }).map((_, i) => (
      <Card key={i}>
        <CardHeader>
          <Skeleton className="h-6 w-3/4" />
          <Skeleton className="mt-2 h-4 w-full" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-4 w-1/2" />
        </CardContent>
      </Card>
    ))}
  </div>
);

export function GlobalKnowledgeBasePage() {
  const { data, isLoading, isError, error } =
    useManageKnowledgeBases().useGetAll();
  const [editingId, setEditingId] = useState<string | null>(null);
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const editingKb = data?.data.find((kb: any) => kb.id === editingId);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Knowledge Bases</h1>
          <p className="text-muted-foreground">
            All knowledge bases you have access to across all workspaces.
          </p>
        </div>
        <Button onClick={() => setIsCreateOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Knowledge Base
        </Button>
      </div>

      {isLoading ? (
        <ListSkeleton />
      ) : isError ? (
        <ErrorState
          title="Failed to Load Knowledge Bases"
          message={
            (error as any)?.response?.data?.message ||
            "There was a problem fetching your knowledge bases."
          }
        />
      ) : !data || data.data.length === 0 ? (
        <EmptyState
          icon={<BookOpen className="h-10 w-10 text-primary" />}
          title="No Knowledge Bases Found"
          description="You are not a member of any workspaces with knowledge bases."
        />
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {data.data.map((kb: KnowledgeBase) => (
            <KnowledgeBaseCard
              key={kb.id}
              knowledgeBase={kb}
              onEdit={() => setEditingId(kb.id)}
            />
          ))}
        </div>
      )}

      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create New Knowledge Base"
        description="Create a new knowledge base. You can associate it with a workspace later."
        form={KnowledgeBaseForm}
        resourcePath="knowledge-bases"
        resourceKey={["knowledgeBases"]}
      />

      {editingKb && (
        <ResourceCrudDialog
          isOpen={!!editingId}
          onOpenChange={(isOpen) => !isOpen && setEditingId(null)}
          title="Edit Knowledge Base"
          description="Make changes to your knowledge base here."
          form={KnowledgeBaseForm}
          formProps={{ workspaceId: editingKb.workspaceId }}
          resourcePath={`knowledge-bases`}
          resourceKey={["knowledgeBases"]}
          resourceId={editingId}
        />
      )}
    </div>
  );
}
// FILE: src/pages/HomePage.tsx
import { HomeDashboard } from "@/features/home/components/HomeDashboard";
import { useGetProfile } from "@/features/user-management/api/useGetProfile";

export function HomePage() {
  const { data: user } = useGetProfile();

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Home</h1>
        <p className="text-muted-foreground">
          Welcome back, {user?.firstName}. Here is your command center for
          tasks, mentions, and notifications.
        </p>
      </div>
      <HomeDashboard />
    </div>
  );
}
// FILE: src/pages/IntegrationCallbackPage.tsx
import { useEffect } from "react";
import { useSearchParams } from "react-router-dom";
export function IntegrationCallbackPage() {
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const status = searchParams.get("status");
    const message = searchParams.get("message");

    if (window.opener) {
      window.opener.postMessage(
        {
          source: "google-oauth-callback",
          status: status,
          message: message,
        },
        window.location.origin
      );

      window.close();
    }
  }, [searchParams]);
  return (
    <div className="flex h-screen w-full items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-xl font-semibold">Processing...</h1>
        <p className="text-muted-foreground">
          You can close this window if it does not close automatically.
        </p>
      </div>
    </div>
  );
}
// FILE: src/pages/IntegrationsPage.tsx
import { IntegrationList } from "@/features/integrations/components/IntegrationList";

export function IntegrationsPage() {
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-semibold">Integrations</h2>
        <p className="text-muted-foreground">
          Connect your account to third-party services to enhance your workflow.
        </p>
      </div>
      <IntegrationList />
    </div>
  );
}
// FILE: src/pages/KnowledgeBaseDetailPage.tsx
import { useParams } from "react-router-dom";
import { KnowledgeBaseDetailView } from "@/features/collaboration/components/KnowledgeBaseDetailView";

export function KnowledgeBaseDetailPage() {
  const { workspaceId, knowledgeBaseId } = useParams<{
    workspaceId: string;
    knowledgeBaseId: string;
  }>();

  if (!workspaceId || !knowledgeBaseId) {
    return <div>Missing ID parameters</div>;
  }

  return (
    <KnowledgeBaseDetailView
      workspaceId={workspaceId}
      knowledgeBaseId={knowledgeBaseId}
    />
  );
}
// FILE: src/pages/Login.tsx
import { LoginForm } from "@/features/user-management/components/LoginForm";

export function LoginPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <LoginForm />
    </div>
  );
}
// FILE: src/pages/ProfilePage.tsx
import { UserForm } from "@/features/admin/users/components/UserForm";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useGetProfile } from "@/features/user-management/api/useGetProfile";
import { Skeleton } from "@/components/ui/skeleton";
import { ProfileAvatar } from "@/features/user-management/components/ProfileAvatar";

export function ProfilePage() {
  const { data: profile, isLoading } = useGetProfile();
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">My Profile</h1>
          <p className="text-muted-foreground">
            View and manage your personal details, publications, and activity.
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-8 lg:grid-cols-3">
        <div className="lg:col-span-1">
          <Card>
            <CardContent className="flex flex-col items-center pt-8">
              {isLoading || !profile ? (
                <Skeleton className="h-32 w-32 rounded-full" />
              ) : (
                <ProfileAvatar user={profile} isSelfProfile={true} />
              )}
              <h2 className="mt-4 text-2xl font-semibold">
                {isLoading ? <Skeleton className="h-8 w-40" /> : profile?.name}
              </h2>
              <p className="text-muted-foreground">
                {isLoading ? (
                  <Skeleton className="h-4 w-48" />
                ) : (
                  profile?.roles.join(", ")
                )}
              </p>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Personal Information</CardTitle>
              <CardDescription>
                Update your personal details. This information is visible to
                other users in the system.
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-4">
                  <Skeleton className="h-10 w-full" />
                  <Skeleton className="h-20 w-full" />
                  <Skeleton className="h-10 w-full" />
                </div>
              ) : (
                <UserForm
                  initialData={profile}
                  onSuccess={() => {}}
                  isSelfProfile
                />
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

// FILE: src/pages/ProjectAccessControlPage.tsx
import { ProjectRoleList } from "@/features/project-management/components/ProjectRoleList";
import { InviteProjectMember } from "@/features/project-management/components/InviteProjectMember";
import { ProjectMemberList } from "@/features/project-management/components/ProjectMemberList";
import { useGetProjectMembers } from "@/features/project-management/api/useGetProjectMembers";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateProjectRoleForm } from "@/features/project-management/components/CreateProjectRoleForm";

export function ProjectAccessControlPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  const { data: membersData } = useGetProjectMembers(workspaceId, projectId);
  const existingMemberIds = membersData?.map((m: any) => m.userId) || [];
  return (
    <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Members</h2>
            <p className="text-muted-foreground">
              Users who have been granted access to this project.
            </p>
          </div>
        </div>
        <ProjectMemberList workspaceId={workspaceId} projectId={projectId} />
        <InviteProjectMember
          workspaceId={workspaceId}
          projectId={projectId}
          existingMemberIds={existingMemberIds}
        />
      </div>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold">Project Roles</h2>
            <p className="text-muted-foreground">
              Custom roles and permissions specific to this project.
            </p>
          </div>
          <ResourceCrudDialog
            isOpen={isCreateOpen}
            onOpenChange={setIsCreateOpen}
            trigger={
              <Button onClick={() => setIsCreateOpen(true)}>
                <PlusCircle className="mr-2 h-4 w-4" />
                New Project Role
              </Button>
            }
            title="Create New Project Role"
            description="This role will only be available within this project."
            form={CreateProjectRoleForm}
            formProps={{ workspaceId, projectId }}
            resourcePath={`workspaces/${workspaceId}/projects/${projectId}/roles`}
            resourceKey={["projectRoles", projectId]}
          />
        </div>
        <ProjectRoleList workspaceId={workspaceId} projectId={projectId} />
      </div>
    </div>
  );
}
// FILE: src/pages/ProjectAttachmentsPage.tsx
import { useParams } from "react-router-dom";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { ProjectAttachments } from "@/features/project-management/components/ProjectAttachments";
import { useManageProjects } from "@/features/project-management/api/useManageProjects";
export function ProjectAttachmentsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  if (!workspaceId || !projectId) {
    return <div>Missing URL parameters.</div>;
  }

  const { useGetOne } = useManageProjects(workspaceId);
  const { data: projectData, isLoading } = useGetOne(projectId);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/4" />
          <Skeleton className="mt-2 h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-24 w-full" />
        </CardContent>
      </Card>
    );
  }

  if (!projectData) {
    return <div>Project not found.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Project Attachments</CardTitle>
        <CardDescription>
          Link Knowledge Bases, Publications, and Whiteboards to this project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ProjectAttachments project={projectData} workspaceId={workspaceId} />
      </CardContent>
    </Card>
  );
}
// FILE: src/pages/ProjectCustomFieldsPage.tsx
import { CustomFieldDefinitionList } from "@/features/project-management/components/CustomFieldDefinitionList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CustomFieldDefinitionForm } from "@/features/project-management/components/CustomFieldDefinitionForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function ProjectCustomFieldsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  return (
    <ListPageLayout
      title="Custom Fields"
      description="Add and manage custom data fields for tasks in this project."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Custom Field
            </Button>
          }
          title="Create New Custom Field"
          description="This field will be available for all tasks in this project."
          form={CustomFieldDefinitionForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`workspaces/${workspaceId}/projects/${projectId}/custom-fields`}
          resourceKey={["customFieldDefinitions", projectId]}
        />
      }
    >
      <CustomFieldDefinitionList
        workspaceId={workspaceId}
        projectId={projectId}
      />
    </ListPageLayout>
  );
}
// FILE: src/pages/ProjectDetailPage.tsx
import { useParams } from "react-router-dom";
import { usePresence } from "@/hooks/usePresence";
import { ErrorState } from "@/components/shared/ErrorState";
import { Skeleton } from "@/components/ui/skeleton";
import { useManageProjects } from "@/features/project-management/api/useManageProjects";
import { TasksPage } from "./TasksPage";
import { useProjectSocket } from "@/hooks/useProjectSocket";

export function ProjectDetailPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();

  if (!workspaceId || !projectId) {
    return <div>Invalid Project or Workspace ID</div>;
  }

  const projectResource = useManageProjects(workspaceId);
  const {
    data: projectData,
    isLoading: isLoadingProject,
    isError,
  } = projectResource.useGetOne(projectId);

  useProjectSocket(projectId);
  usePresence("Project", projectId);

  if (isError) {
    return (
      <ErrorState
        title="Could not load project data"
        message="Please try again later."
      />
    );
  }

  if (isLoadingProject) {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Skeleton className="h-10 w-[450px]" />
          <div className="flex items-center gap-2">
            <Skeleton className="h-10 w-10 rounded-full" />
            <Skeleton className="h-10 w-32" />
            <Skeleton className="h-10 w-10" />
          </div>
        </div>
        <Skeleton className="h-[600px] w-full" />
      </div>
    );
  }

  return (
    <TasksPage
      scope="project"
      workspaceId={workspaceId}
      projectId={projectId}
      project={projectData}
    />
  );
}
// FILE: src/pages/ProjectGeneralSettingsPage.tsx
import { useParams } from "react-router-dom";
import { ProjectForm } from "@/features/project-management/components/ProjectForm";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { useManageProjects } from "@/features/project-management/api/useManageProjects";

export function ProjectGeneralSettingsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  if (!workspaceId || !projectId) {
    return <div>Missing URL parameters.</div>;
  }

  const { useGetOne } = useManageProjects(workspaceId);
  const { data: projectData, isLoading } = useGetOne(projectId);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/4" />
          <Skeleton className="mt-2 h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <Skeleton className="h-10 w-full" />
        </CardContent>
      </Card>
    );
  }

  if (!projectData) {
    return <div>Project not found.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>General Information</CardTitle>
        <CardDescription>
          Update the name and description of your project.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ProjectForm workspaceId={workspaceId} initialData={projectData} />
      </CardContent>
    </Card>
  );
}
// FILE: src/pages/ProjectGoalsPage.tsx
import { GoalList } from "@/features/project-management/components/GoalList";
import { useParams } from "react-router-dom";
export function ProjectGoalsPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  if (!workspaceId || !projectId) {
    return <div>Missing URL parameters.</div>;
  }

  return (
    <div className="space-y-6">
      <GoalList workspaceId={workspaceId} projectId={projectId} />
    </div>
  );
}
// FILE: src/pages/ProjectListPage.tsx
import { ProjectList } from "@/features/project-management/components/ProjectList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { ProjectForm } from "@/features/project-management/components/ProjectForm";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { CreateProjectFromTemplateForm } from "@/features/project-management/components/CreateProjectFromTemplateForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function ProjectListPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [dialogState, setDialogState] = useState({
    open: false,
    type: "create",
  });

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <ListPageLayout
      title="All Projects"
      description="A list of all projects within this workspace."
      actionButton={
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Project
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem
              onClick={() => setDialogState({ open: true, type: "create" })}
            >
              New Blank Project
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={() =>
                setDialogState({ open: true, type: "createFromTemplate" })
              }
            >
              New from Template
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      }
    >
      <ProjectList workspaceId={workspaceId} />
      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "create"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create a new project"
        description="Projects live inside workspaces and contain your tasks."
        form={ProjectForm}
        formProps={{ workspaceId }}
        resourcePath={`workspaces/${workspaceId}/projects`}
        resourceKey={["projects", workspaceId]}
      />
      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "createFromTemplate"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create from Template"
        description="Create a new project based on an existing template."
        form={CreateProjectFromTemplateForm}
        formProps={{ workspaceId }}
        resourcePath={""}
        resourceKey={[]}
      />
    </ListPageLayout>
  );
}
// FILE: src/pages/ProjectSettingsPage.tsx
import { NavLink, Outlet, useLocation, useParams } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

const settingsNavItems = [
  { to: "general", label: "General" },
  { to: "access", label: "Access Control" },
  { to: "custom-fields", label: "Custom Fields" },
  { to: "task-types", label: "Task Types" },
  { to: "goals", label: "Goals" },
  { to: "templates", label: "Templates" },
  { to: "attachments", label: "Attachments" },
];

export function ProjectSettingsPage() {
  const location = useLocation();
  const { workspaceId, projectId } = useParams();
  const currentTab = location.pathname.split("/").pop() || "general";

  const basePath = `/workspaces/${workspaceId}/projects/${projectId}/settings`;
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Project Settings</h1>
        <p className="text-muted-foreground">
          Manage general settings, access control, and more for your project.
        </p>
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={`${basePath}/${item.to}`} key={item.to} end>
              {({ isActive }) => (
                <TabsTrigger value={item.to} disabled={isActive}>
                  {item.label}
                </TabsTrigger>
              )}
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}
// FILE: src/pages/ProjectTaskTypesPage.tsx
import { TaskTypeList } from "@/features/project-management/components/TaskTypeList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { TaskTypeForm } from "@/features/project-management/components/TaskTypeForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function ProjectTaskTypesPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  return (
    <ListPageLayout
      title="Task Types"
      description="Define custom types for tasks in this project, like 'Bug' or 'Story'."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Type
            </Button>
          }
          title="Create New Task Type"
          description="This type will be available for all tasks in this project."
          form={TaskTypeForm}
          formProps={{ workspaceId, projectId }}
          resourcePath={`workspaces/${workspaceId}/projects/${projectId}/task-types`}
          resourceKey={["taskTypes", projectId]}
        />
      }
    >
      <TaskTypeList workspaceId={workspaceId} projectId={projectId} />
    </ListPageLayout>
  );
}
// FILE: src/pages/ProjectTemplatesPage.tsx
import { ProjectTemplateList } from "@/features/project-management/components/ProjectTemplateList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateTemplateForm } from "@/features/project-management/components/CreateTemplateForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function ProjectTemplatesPage() {
  const { workspaceId, projectId } = useParams<{
    workspaceId: string;
    projectId: string;
  }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId || !projectId) return <div>Missing URL parameters.</div>;
  return (
    <ListPageLayout
      title="Project Templates"
      description="Save this project's structure as a template for future use."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Save as Template
            </Button>
          }
          title="Save Project as Template"
          description="This will create a new template based on the current project's structure (views, custom fields, etc.). Tasks and other content will not be included."
          form={CreateTemplateForm}
          formProps={{ workspaceId, projectId, sourceProjectId: projectId }}
          resourcePath={`project-templates`}
          resourceKey={["projectTemplates"]}
        />
      }
    >
      <ProjectTemplateList workspaceId={workspaceId} projectId={projectId} />
    </ListPageLayout>
  );
}
// FILE: src/pages/PublicationsPage.tsx
import { PublicationList } from "@/features/publications/components/PublicationList";
import { Button } from "@/components/ui/button";
import { PlusCircle, Settings } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreatePublicationForm } from "@/features/publications/components/CreatePublicationForm";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PublicationCategoryManager } from "@/features/publications/components/PublicationCategoryManager";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function PublicationsPage() {
  const [dialogState, setDialogState] = useState({
    open: false,
    type: "create",
  });

  return (
    <ListPageLayout
      title="Publications"
      description="Manage your organization's articles, papers, and other publications."
      actionButton={
        <div className="flex items-center gap-2">
          <Dialog
            open={dialogState.open && dialogState.type === "manageCategories"}
            onOpenChange={(isOpen) =>
              setDialogState({ ...dialogState, open: isOpen })
            }
          >
            <DialogTrigger asChild>
              <Button
                variant="outline"
                onClick={() =>
                  setDialogState({ open: true, type: "manageCategories" })
                }
              >
                <Settings className="mr-2 h-4 w-4" /> Manage Categories
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Publication Categories</DialogTitle>
                <DialogDescription>
                  Create, edit, and delete categories for organizing
                  publications.
                </DialogDescription>
              </DialogHeader>
              <PublicationCategoryManager />
            </DialogContent>
          </Dialog>
          <Button
            onClick={() => setDialogState({ open: true, type: "create" })}
          >
            <PlusCircle className="mr-2 h-4 w-4" />
            New Publication
          </Button>
        </div>
      }
    >
      <PublicationList />
      <ResourceCrudDialog
        isOpen={dialogState.open && dialogState.type === "create"}
        onOpenChange={(isOpen) =>
          setDialogState({ ...dialogState, open: isOpen })
        }
        title="Create Publication"
        description="Add a new article, paper, or report to the knowledge base."
        form={CreatePublicationForm}
        resourcePath="publications"
        resourceKey={["publications"]}
      />
    </ListPageLayout>
  );
}
// FILE: src/pages/ReportingPage.tsx
import { useState, useEffect } from "react";
import { ReportingOverview } from "@/features/analytics/components/ReportingOverview";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useGetWorkspaces } from "@/features/workspaces/api/useGetWorkspaces";
import { useGetProjects } from "@/features/project-management/api/useGetProjects";
import { Label } from "@/components/ui/label";
import { useParams } from "react-router-dom";

export function ReportingPage() {
  const params = useParams<{ workspaceId?: string; projectId?: string }>();
  const [workspaceId, setWorkspaceId] = useState<string | undefined>(
    params.workspaceId
  );
  const [projectId, setProjectId] = useState<string | undefined>(
    params.projectId
  );
  const { data: workspacesData } = useGetWorkspaces();
  const { data: projectsData } = useGetProjects(workspaceId);

  useEffect(() => {
    setWorkspaceId(params.workspaceId);
    setProjectId(params.projectId);
  }, [params.workspaceId, params.projectId]);

  const handleWorkspaceChange = (id: string) => {
    const newWorkspaceId = id === "all" ? undefined : id;
    setWorkspaceId(newWorkspaceId);
    setProjectId(undefined);
  };

  const handleProjectChange = (id: string) => {
    setProjectId(id === "all" ? undefined : id);
  };

  return (
    <div className="space-y-4">
      {!params.workspaceId && (
        <div className="flex items-center gap-4">
          <div className="w-64">
            <Label>Filter by Workspace</Label>
            <Select onValueChange={handleWorkspaceChange}>
              <SelectTrigger>
                <SelectValue placeholder="Global Overview" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Global Overview</SelectItem>
                {workspacesData?.data.map((ws) => (
                  <SelectItem key={ws.id} value={ws.id}>
                    {ws.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="w-64">
            <Label>Filter by Project</Label>
            <Select
              onValueChange={handleProjectChange}
              disabled={!workspaceId || !projectsData?.data}
              value={projectId}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a project..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Projects in Workspace</SelectItem>
                {projectsData?.data.map((p) => (
                  <SelectItem key={p.id} value={p.id}>
                    {p.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      )}
      <ReportingOverview scope={{ workspaceId, projectId }} />
    </div>
  );
}
// FILE: src/pages/ReportsPage.tsx
import { ReportList } from "@/features/analytics/components/ReportList";
import { ReportForm } from "@/features/analytics/components/ReportForm";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
export function ReportsPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  return (
    <div className="space-y-4">
      <div className="flex justify-end">
        <Button onClick={() => setIsCreateOpen(true)}>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Report
        </Button>
      </div>
      <ReportList />
      <ResourceCrudDialog
        isOpen={isCreateOpen}
        onOpenChange={setIsCreateOpen}
        title="Create a new report"
        description="Configure a new report to track your metrics."
        form={ReportForm}
        resourcePath="reports"
        resourceKey={["reports"]}
      />
    </div>
  );
}
// FILE: src/pages/ResetPasswordPage.tsx
import { ResetPasswordForm } from "@/features/user-management/components/ResetPasswordForm";

export function ResetPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <ResetPasswordForm />
    </div>
  );
}
// FILE: src/pages/SettingsPage.tsx
import { NavLink, Outlet, useLocation } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
const settingsNavItems = [
  { to: "/settings/integrations", label: "Integrations" },
  { to: "/settings/security", label: "Security" },
  { to: "/settings/task-types", label: "Task Types" },
];

export function SettingsPage() {
  const location = useLocation();
  const currentTab =
    settingsNavItems.find((item) => location.pathname.startsWith(item.to))
      ?.to || "/settings/integrations";

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account settings and integrations.
        </p>
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          {settingsNavItems.map((item) => (
            <NavLink to={item.to} key={item.to}>
              {({ isActive }) => (
                <TabsTrigger value={item.to} disabled={isActive}>
                  {item.label}
                </TabsTrigger>
              )}
            </NavLink>
          ))}
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}
// FILE: src/pages/SetupPasswordPage.tsx
import { SetupPasswordForm } from "@/features/user-management/components/SetupPasswordForm";

export function SetupPasswordPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <SetupPasswordForm />
    </div>
  );
}
// FILE: src/pages/TasksPage.tsx
import { useSearchParams } from "react-router-dom";
import { useState, useMemo, useEffect } from "react";
import { TaskDetailModal } from "@/features/project-management/components/TaskDetailModal";
import { ErrorState } from "@/components/shared/ErrorState";
import { Skeleton } from "@/components/ui/skeleton";
import { Task, View, ViewColumn, ViewType, ListTasksQuery } from "@/types";
import { SortingState } from "@tanstack/react-table";
import { useUpdateTask } from "@/features/project-management/api/useUpdateTask";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { CreateTaskForm } from "@/features/project-management/components/CreateTaskForm";
import { TemplateSelectorDialog } from "@/features/project-management/components/TemplateSelectorDialog";
import { EmptyState } from "@/components/shared/EmptyState";
import { CheckSquare } from "lucide-react";
import { useGetViews } from "@/features/project-management/api/useGetViews";
import { useGetTasks } from "@/features/project-management/api/useGetTasks";
import { TasksPageHeader } from "./TasksPageHeader";
import { ListView } from "@/features/project-management/components/list-view/ListView";
import { KanbanBoard } from "@/features/project-management/components/kanban-view/KanbanBoard";
import { CalendarView } from "@/features/project-management/components/calendar-view/CalendarView";
import { GanttChartView } from "@/features/project-management/components/gantt-view/GanttChartView";
import { WhiteboardView } from "@/features/project-management/components/WhiteboardView";
import { Project, TaskStatus, TaskPriority } from "@/types";
import { BulkActionsToolbar } from "@/features/project-management/components/list-view/BulkActionsToolbar";
import { useManageTasks } from "@/features/project-management/api/useManageTasks";
import { useBulkUpdateTasks } from "@/features/project-management/api/useBulkUpdateTasks";

interface TasksPageProps {
  scope: "user" | "project";
  workspaceId?: string;
  projectId?: string;
  project?: Project;
}

const initialListColumns = [
  { id: "workspace", label: "Workspace", visible: true },
  { id: "project", label: "Project", visible: true },
  { id: "taskType", label: "Type", visible: true },
];

const KANBAN_COLUMNS_USER: Omit<ViewColumn, "createdAt" | "updatedAt">[] = [
  { id: "col-todo", name: "To Do", order: 1, viewId: "my-tasks-view" },
  {
    id: "col-in-progress",
    name: "In Progress",
    order: 2,
    viewId: "my-tasks-view",
  },
  {
    id: "col-in-review",
    name: "In Review",
    order: 3,
    viewId: "my-tasks-view",
  },
  { id: "col-done", name: "Done", order: 4, viewId: "my-tasks-view" },
  { id: "col-blocked", name: "Blocked", order: 5, viewId: "my-tasks-view" },
  {
    id: "col-cancelled",
    name: "Cancelled",
    order: 6,
    viewId: "my-tasks-view",
  },
];

const columnStatusMapUser: Record<string, TaskStatus> = {
  "col-todo": TaskStatus.TODO,
  "col-in-progress": TaskStatus.IN_PROGRESS,
  "col-in-review": TaskStatus.IN_REVIEW,
  "col-done": TaskStatus.DONE,
  "col-blocked": TaskStatus.BLOCKED,
  "col-cancelled": TaskStatus.CANCELLED,
};

function mapColumnNameToStatus(columnName: string): TaskStatus | null {
  const normalizedName = columnName.trim().toUpperCase().replace(/\s+/g, "_");
  if (normalizedName === "TO_DO") return TaskStatus.TODO;
  if (Object.values(TaskStatus).includes(normalizedName as TaskStatus)) {
    return normalizedName as TaskStatus;
  }
  return null;
}

export function TasksPage({
  scope,
  workspaceId,
  projectId,
  project,
}: TasksPageProps) {
  const [searchParams, setSearchParams] = useSearchParams();
  const activeViewId = searchParams.get("view") || "list";
  const selectedTaskId = searchParams.get("taskId");

  const [sorting, setSorting] = useState<SortingState>([
    { id: "orderInColumn", desc: false },
  ]);
  const [filter, setFilter] = useState("all_assigned");
  const [isCreateTaskOpen, setIsCreateTaskOpen] = useState(false);
  const [isTemplateSelectorOpen, setIsTemplateSelectorOpen] = useState(false);
  const [listColumns, setListColumns] = useState(initialListColumns);
  const [selectedTaskIds, setSelectedTaskIds] = useState<string[]>([]);
  const [kanbanColumnIds, setKanbanColumnIds] = useState<string[]>([
    "col-todo",
    "col-in-progress",
    "col-in-review",
    "col-done",
  ]);

  const updateTaskMutation = useUpdateTask();
  const { useDelete } = useManageTasks(workspaceId, projectId);
  const deleteMutation = useDelete();
  const bulkUpdateMutation = useBulkUpdateTasks(projectId);

  const handleTaskSelect = (taskId: string | null) => {
    setSearchParams(
      (params) => {
        if (taskId) {
          params.set("taskId", taskId);
        } else {
          params.delete("taskId");
        }
        return params;
      },
      { replace: true }
    );
  };

  const handleViewChange = (view: string) => {
    setSearchParams(
      (params) => {
        params.set("view", view);
        return params;
      },
      { replace: true }
    );
  };

  const queryParams: ListTasksQuery = useMemo(() => {
    const baseQuery: ListTasksQuery = {
      sortBy: (sorting[0]?.id as ListTasksQuery["sortBy"]) ?? "priority",
      sortOrder: sorting[0]?.desc ? "desc" : "asc",
      limit: activeViewId === "list" ? 15 : 200,
      page: 1,
      includeSubtasks: true,
    };

    switch (filter) {
      case "created_standalone":
        return { ...baseQuery, userRole: "creator", taskOrigin: "standalone" };
      case "created_project":
        return { ...baseQuery, userRole: "creator", taskOrigin: "project" };
      case "assigned_standalone":
        return { ...baseQuery, userRole: "assignee", taskOrigin: "standalone" };
      case "assigned_project":
        return { ...baseQuery, userRole: "assignee", taskOrigin: "project" };
      case "all_assigned":
        return { ...baseQuery, userRole: "assignee" };
      default:
        return baseQuery;
    }
  }, [filter, sorting, activeViewId]);

  const {
    data: viewsData,
    isLoading: isLoadingViews,
    isError: isViewsError,
  } = useGetViews({ scope, workspaceId, projectId });

  const {
    data: tasksData,
    isLoading: isLoadingTasks,
    isError: isTasksError,
  } = useGetTasks({
    scope,
    workspaceId,
    projectId,
    query: queryParams,
    enabled: scope === "user" || !!activeViewId,
  });

  const userViews: View[] = useMemo(
    () => [
      {
        id: "list",
        name: "List",
        type: ViewType.LIST,
        columns: [],
        isPublic: false,
        projectId: "",
      },
      {
        id: "kanban",
        name: "Kanban",
        type: ViewType.KANBAN,
        columns: KANBAN_COLUMNS_USER as ViewColumn[],
        isPublic: false,
        projectId: "",
      },
      {
        id: "calendar",
        name: "Calendar",
        type: ViewType.CALENDAR,
        columns: [],
        isPublic: false,
        projectId: "",
      },
      {
        id: "gantt",
        name: "Gantt",
        type: ViewType.GANTT,
        columns: [],
        isPublic: false,
        projectId: "",
      },
    ],
    []
  );

  const views = useMemo(
    () => (scope === "user" ? userViews : viewsData?.data || []),
    [scope, viewsData, userViews]
  );

  const activeView = useMemo(
    () => views.find((v) => v.id === activeViewId),
    [views, activeViewId]
  );

  const projectColumnStatusMap = useMemo(() => {
    if (scope !== "project" || !activeView?.columns) {
      return {};
    }
    return activeView.columns.reduce(
      (acc, col) => {
        const status = col.status || mapColumnNameToStatus(col.name);
        if (status) {
          acc[col.id] = status;
        }
        return acc;
      },
      {} as Record<string, TaskStatus>
    );
  }, [scope, activeView]);

  useEffect(() => {
    if (!isLoadingViews && views.length > 0 && !activeView) {
      const defaultView = views.find((v) => v.type === "LIST") || views[0];
      if (defaultView) {
        handleViewChange(defaultView.id);
      }
    }
  }, [isLoadingViews, views, activeView]);

  useEffect(() => {
    setSelectedTaskIds([]);
  }, [tasksData]);

  const handleTaskUpdate = (taskId: string, updates: Partial<Task>) => {
    updateTaskMutation.mutate({
      taskId,
      workspaceId,
      projectId,
      taskData: updates,
    });
  };

  const handleBulkDelete = () => {
    if (
      window.confirm(
        `Are you sure you want to delete ${selectedTaskIds.length} tasks?`
      )
    ) {
      deleteMutation.mutate(selectedTaskIds, {
        onSuccess: () => setSelectedTaskIds([]),
      });
    }
  };

  const handleBulkUpdate = (updates: {
    status?: TaskStatus;
    priority?: TaskPriority;
    projectId?: string;
    taskTypeId?: string | null;
    dueDate?: Date | null;
    addAssigneeIds?: string[];
    removeAssigneeIds?: string[];
  }) => {
    bulkUpdateMutation.mutate(
      { taskIds: selectedTaskIds, updates },
      {
        onSuccess: () => setSelectedTaskIds([]),
      }
    );
  };

  const emptyState = (
    <EmptyState
      icon={<CheckSquare className="h-10 w-10 text-primary" />}
      title="No tasks here"
      description="No tasks match your current filter. Try selecting a different filter or create a new task."
    />
  );

  if (isViewsError || isTasksError) {
    return (
      <ErrorState
        title="Could not load tasks"
        message="Please try refreshing the page."
      />
    );
  }

  if (activeView?.type === "WHITEBOARD") {
    return <WhiteboardView />;
  }

  const isLoading = isLoadingViews || (!!activeViewId && isLoadingTasks);

  const visibleKanbanColumns = useMemo(
    () => KANBAN_COLUMNS_USER.filter((c) => kanbanColumnIds.includes(c.id)),
    [kanbanColumnIds]
  );

  return (
    <>
      <div className="space-y-4">
        <TasksPageHeader
          scope={scope}
          project={project}
          views={views}
          activeView={activeView}
          onViewChange={handleViewChange}
          onNewTaskClick={() => setIsCreateTaskOpen(true)}
          onNewTaskFromTemplateClick={() => setIsTemplateSelectorOpen(true)}
          sorting={sorting}
          setSorting={setSorting}
          listColumns={listColumns}
          onColumnVisibilityChange={(columnId, visible) =>
            setListColumns((prev) =>
              prev.map((c) => (c.id === columnId ? { ...c, visible } : c))
            )
          }
          filter={filter}
          onFilterChange={setFilter}
          kanbanColumns={KANBAN_COLUMNS_USER}
          kanbanColumnIds={kanbanColumnIds}
          setKanbanColumnIds={setKanbanColumnIds}
        />
        {selectedTaskIds.length > 0 && (
          <BulkActionsToolbar
            selectedTaskIds={selectedTaskIds}
            tasks={tasksData?.data || []}
            onBulkDelete={handleBulkDelete}
            onBulkUpdate={handleBulkUpdate}
            isDeleting={deleteMutation.isPending}
            isUpdating={bulkUpdateMutation.isPending}
          />
        )}
        {isLoading ? (
          <Skeleton className="h-[600px] w-full" />
        ) : (
          <div className="h-[calc(100vh-250px)]">
            {activeView?.type === "LIST" && (
              <ListView
                onTaskSelect={handleTaskSelect}
                tasks={tasksData?.data || []}
                emptyState={emptyState}
                onTaskUpdate={handleTaskUpdate}
                showWorkspaceColumn={
                  scope === "user" &&
                  listColumns.find((c) => c.id === "workspace")?.visible
                }
                showProjectColumn={
                  scope === "user" &&
                  listColumns.find((c) => c.id === "project")?.visible
                }
                showTaskTypeColumn={
                  listColumns.find((c) => c.id === "taskType")?.visible
                }
                selectedTaskIds={selectedTaskIds}
                setSelectedTaskIds={setSelectedTaskIds}
              />
            )}
            {activeView?.type === "KANBAN" && (
              <KanbanBoard
                scope={scope}
                columns={
                  scope === "user" ? visibleKanbanColumns : activeView.columns
                }
                columnStatusMap={
                  scope === "user"
                    ? columnStatusMapUser
                    : projectColumnStatusMap
                }
                tasks={tasksData?.data || []}
                workspaceId={workspaceId}
                projectId={projectId}
                onTaskSelect={handleTaskSelect}
              />
            )}
            {activeView?.type === "GANTT" && (
              <GanttChartView
                tasks={tasksData?.data || []}
                onTaskSelect={handleTaskSelect}
              />
            )}
            {activeView?.type === "CALENDAR" && (
              <CalendarView
                tasks={tasksData?.data || []}
                onTaskSelect={handleTaskSelect}
                onTaskUpdate={handleTaskUpdate}
              />
            )}
          </div>
        )}
      </div>

      <ResourceCrudDialog
        isOpen={isCreateTaskOpen}
        onOpenChange={setIsCreateTaskOpen}
        title="Create a new task"
        description="Fill in the details below to add a new task."
        form={CreateTaskForm}
        formProps={{ workspaceId, projectId }}
        resourcePath={
          projectId
            ? `/workspaces/${workspaceId}/projects/${projectId}/tasks`
            : "/tasks"
        }
        resourceKey={projectId ? ["tasks", projectId] : ["myTasks"]}
      />

      <TemplateSelectorDialog
        isOpen={isTemplateSelectorOpen}
        onOpenChange={setIsTemplateSelectorOpen}
        workspaceId={workspaceId}
        projectId={projectId}
      />

      <TaskDetailModal
        taskId={selectedTaskId}
        isOpen={!!selectedTaskId}
        onOpenChange={(isOpen) => {
          if (!isOpen) handleTaskSelect(null);
        }}
        onTaskSelect={handleTaskSelect}
      />
    </>
  );
}

// FILE: src/pages/TasksPageHeader.tsx
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuCheckboxItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Filter, PlusCircle, Settings, Columns } from "lucide-react";
import { Link } from "react-router-dom";
import { Project, View } from "@/types";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { SortMenu } from "@/features/project-management/components/list-view/SortMenu";
import { OnChangeFn, SortingState } from "@tanstack/react-table";
import { ColumnVisibilityToggle } from "@/features/project-management/components/list-view/ColumnVisibilityToggle";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface TasksPageHeaderProps {
  scope: "user" | "project";
  project?: Project;
  views: View[];
  activeView: View | undefined;
  onViewChange: (viewId: string) => void;
  onNewTaskClick: () => void;
  onNewTaskFromTemplateClick: () => void;
  sorting: SortingState;
  setSorting: OnChangeFn<SortingState>;
  listColumns: { id: string; label: string; visible: boolean }[];
  onColumnVisibilityChange: (columnId: string, visible: boolean) => void;
  filter: string;
  onFilterChange: (value: string) => void;
  kanbanColumns: { id: string; name: string }[];
  kanbanColumnIds: string[];
  setKanbanColumnIds: (ids: string[] | ((prev: string[]) => string[])) => void;
}

const listSortableColumns = [
  { id: "title", label: "Task Name" },
  { id: "priority", label: "Priority" },
  { id: "dueDate", label: "Due Date" },
  { id: "status", label: "Status" },
  { id: "projectName", label: "Project" },
  { id: "workspaceName", label: "Workspace" },
];

export function TasksPageHeader({
  scope,
  project,
  views,
  activeView,
  onViewChange,
  onNewTaskClick,
  onNewTaskFromTemplateClick,
  sorting,
  setSorting,
  listColumns,
  onColumnVisibilityChange,
  filter,
  onFilterChange,
  kanbanColumns,
  kanbanColumnIds,
  setKanbanColumnIds,
}: TasksPageHeaderProps) {
  return (
    <header>
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight text-foreground">
            {scope === "project" ? project?.name : "My Tasks"}
          </h1>
        </div>
        <div className="flex items-center gap-2">
          {scope === "user" && (
            <>
              <Label htmlFor="task-filter" className="sr-only">
                Filter tasks
              </Label>
              <Select value={filter} onValueChange={onFilterChange}>
                <SelectTrigger
                  id="task-filter"
                  className="border-border bg-element text-foreground hover:bg-hover"
                >
                  <div className="flex items-center gap-2">
                    <Filter className="h-4 w-4" />
                    <SelectValue />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all_assigned">
                    All Assigned Tasks
                  </SelectItem>
                  <SelectItem value="assigned_project">
                    Assigned Project Tasks
                  </SelectItem>
                  <SelectItem value="assigned_standalone">
                    Assigned Standalone Tasks
                  </SelectItem>
                  <SelectItem value="created_project">
                    Created Project Tasks
                  </SelectItem>
                  <SelectItem value="created_standalone">
                    Created Standalone Tasks
                  </SelectItem>
                </SelectContent>
              </Select>
            </>
          )}

          <SortMenu
            sorting={sorting}
            setSorting={setSorting}
            sortableColumns={listSortableColumns}
          />
          {activeView?.type === "LIST" && (
            <ColumnVisibilityToggle
              columns={listColumns}
              onVisibilityChange={onColumnVisibilityChange}
            />
          )}

          {activeView?.type === "KANBAN" && scope === "user" && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="outline"
                  className="border-border bg-element text-foreground hover:bg-hover"
                >
                  <Columns className="mr-2 h-4 w-4" />
                  Columns
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuLabel>Visible Columns</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {kanbanColumns.map((column) => (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={kanbanColumnIds.includes(column.id)}
                    onCheckedChange={(checked) => {
                      setKanbanColumnIds((prev) =>
                        checked
                          ? [...prev, column.id]
                          : prev.filter((id) => id !== column.id)
                      );
                    }}
                  >
                    {column.name}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          )}

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button className="bg-primary text-primary-foreground hover:bg-primary/90">
                <PlusCircle className="mr-2 h-4 w-4" /> New Task
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={onNewTaskClick}>
                New Blank Task
              </DropdownMenuItem>
              <DropdownMenuItem onClick={onNewTaskFromTemplateClick}>
                New from Template...
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <Button
            variant="outline"
            size="icon"
            className="border-border bg-element text-foreground hover:bg-hover"
            asChild
          >
            <Link
              to={
                scope === "project" && project
                  ? `/workspaces/${project.workspaceId}/projects/${project.id}/settings`
                  : "/settings"
              }
            >
              <Settings className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>
      <Tabs
        value={activeView?.id}
        onValueChange={onViewChange}
        className="mt-4"
      >
        <TabsList>
          {views.map((view) => (
            <TabsTrigger key={view.id} value={view.id}>
              {view.name}
            </TabsTrigger>
          ))}
        </TabsList>
      </Tabs>
    </header>
  );
}

// FILE: src/pages/TaskTypesSettingsPage.tsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { GlobalTaskTypeList } from "@/features/project-management/components/GlobalTaskTypeList";
import { GlobalTaskTypeForm } from "@/features/project-management/components/GlobalTaskTypeForm";

export function TaskTypesSettingsPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold">Global Task Types</h2>
          <p className="text-muted-foreground">
            Manage task types available for standalone tasks (not in a project).
          </p>
        </div>
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Type
            </Button>
          }
          title="Create New Global Task Type"
          description="This type will be available for all of your tasks that are not part of a project."
          form={GlobalTaskTypeForm}
          resourcePath={`task-types`}
          resourceKey={["taskTypes", "global"]}
        />
      </div>
      <GlobalTaskTypeList />
    </div>
  );
}
// FILE: src/pages/TeamsPage.tsx
import { TeamList } from "@/features/user-management/components/TeamList";
import { useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { TeamForm } from "@/features/user-management/components/TeamForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function TeamsPage() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  if (!workspaceId) {
    return <div>Invalid Workspace ID</div>;
  }

  return (
    <ListPageLayout
      title="All Teams"
      description="Manage teams within your workspace."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Team
            </Button>
          }
          title="Create a new team"
          description="Teams help you group users within a workspace."
          form={TeamForm}
          formProps={{ workspaceId }}
          resourcePath={`workspaces/${workspaceId}/teams`}
          resourceKey={["teams", workspaceId]}
        />
      }
    >
      <TeamList workspaceId={workspaceId} />
    </ListPageLayout>
  );
}
// FILE: src/pages/WhiteboardsPage.tsx
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WhiteboardForm } from "@/features/collaboration/components/WhiteboardForm";
import { Button } from "@/components/ui/button";
import { ListPageLayout } from "@/components/shared/ListPageLayout";
import { WhiteboardList } from "@/features/collaboration/components/WhiteboardList";

export function WhiteboardsPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  return (
    <ListPageLayout
      title="Whiteboards"
      description="All whiteboards you have access to across all your projects."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Whiteboard
            </Button>
          }
          title="Create a New Whiteboard"
          description="Whiteboards are collaborative canvases for your ideas."
          form={WhiteboardForm}
          resourcePath="whiteboards"
          resourceKey={["whiteboards"]}
        />
      }
    >
      <WhiteboardList />
    </ListPageLayout>
  );
}
// FILE: src/pages/WorkspaceAttachmentsPage.tsx
import { useParams } from "react-router-dom";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { WorkspaceAttachments } from "@/features/workspaces/components/WorkspaceAttachments";
import { useManageWorkspaces } from "@/features/workspaces/api/useManageWorkspaces";
export function WorkspaceAttachmentsPage() {
  const { workspaceId } = useParams<{
    workspaceId: string;
  }>();

  if (!workspaceId) {
    return <div>Missing URL parameters.</div>;
  }

  const { useGetOne } = useManageWorkspaces();
  const { data: workspaceData, isLoading } = useGetOne(workspaceId);

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/4" />
          <Skeleton className="mt-2 h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-24 w-full" />
        </CardContent>
      </Card>
    );
  }

  if (!workspaceData) {
    return <div>Workspace not found.</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Workspace Attachments</CardTitle>
        <CardDescription>
          Link Knowledge Bases, Publications, and Whiteboards to this workspace.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <WorkspaceAttachments workspace={workspaceData} />
      </CardContent>
    </Card>
  );
}

// FILE: src/pages/WorkspacesPage.tsx
import { WorkspaceList } from "@/features/workspaces/components/WorkspaceList";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { ResourceCrudDialog } from "@/components/shared/ResourceCrudDialog";
import { WorkspaceForm } from "@/features/workspaces/components/WorkspaceForm";
import { ListPageLayout } from "@/components/shared/ListPageLayout";

export function WorkspacesPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);

  return (
    <ListPageLayout
      title="Workspaces"
      description="Select a workspace to view its projects."
      actionButton={
        <ResourceCrudDialog
          isOpen={isCreateOpen}
          onOpenChange={setIsCreateOpen}
          trigger={
            <Button onClick={() => setIsCreateOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              New Workspace
            </Button>
          }
          title="Create a new workspace"
          description="Workspaces help you organize your projects and teams."
          form={WorkspaceForm}
          resourcePath="workspaces"
          resourceKey={["workspaces"]}
        />
      }
    >
      <WorkspaceList />
    </ListPageLayout>
  );
}
// FILE: src/providers/AuthProvider.tsx
import { useAuthStore } from "@/store/auth";
import { ReactNode, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";

export function AuthProvider({ children }: { children: ReactNode }) {
  const accessToken = useAuthStore((state) => state.accessToken);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const publicPaths = [
      "/login",
      "/forgot-password",
      "/reset-password",
      "/setup-password",
    ];
    const isPublicPath = publicPaths.some((path) =>
      location.pathname.startsWith(path)
    );

    if (!accessToken && !isPublicPath) {
      navigate("/login", { replace: true });
    }
  }, [accessToken, navigate, location.pathname]);

  return <>{children}</>;
}
// FILE: src/providers/QueryProvider.tsx
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactNode } from "react";

const queryClient = new QueryClient();

export function QueryProvider({ children }: { children: ReactNode }) {
  return (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
  );
}
// FILE: src/routes/AdminLayout.tsx
import { Outlet } from "react-router-dom";

export function AdminLayout() {
  return <Outlet />;
}
// FILE: src/routes/ProtectedLayout.tsx
import { Outlet } from "react-router-dom";
import { Header } from "@/components/layout/Header";
import { Sidebar } from "@/components/layout/Sidebar";
import { MainContent } from "@/components/layout/MainContent";
import { Toaster } from "@/components/ui/sonner";
import { useNotificationSocket } from "@/hooks/useNotificationSocket";
import { ActiveAnnouncements } from "@/features/system/components/ActiveAnnouncements";

export function ProtectedLayout() {
  useNotificationSocket();

  return (
    <div className="bg-background text-foreground flex h-screen w-full">
      <Sidebar />
      <div className="flex flex-1 flex-col">
        <Header />
        <MainContent>
          <ActiveAnnouncements />
          <div className="mt-4">
            <Outlet />
          </div>
        </MainContent>
      </div>
      <Toaster />
    </div>
  );
}
// FILE: src/routes/WorkspaceLayout.tsx
import { NavLink, Outlet, useLocation, useParams } from "react-router-dom";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useApiResource } from "@/hooks/useApiResource";
import { Skeleton } from "@/components/ui/skeleton";

export function WorkspaceLayout() {
  const { workspaceId } = useParams<{ workspaceId: string }>();
  const location = useLocation();
  const { data: workspace, isLoading } = useApiResource("workspaces", [
    "workspaces",
  ]).useGetOne(workspaceId!);

  const currentTab = location.pathname.split("/")[3] || "projects";

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        {isLoading ? (
          <div className="space-y-2">
            <Skeleton className="h-8 w-64" />
            <Skeleton className="h-4 w-80" />
          </div>
        ) : (
          <div>
            <h1 className="text-3xl font-bold tracking-tight">
              {workspace?.name}
            </h1>
            <p className="text-muted-foreground">{workspace?.description}</p>
          </div>
        )}
      </div>

      <Tabs value={currentTab} className="space-y-4">
        <TabsList>
          <NavLink to={`/workspaces/${workspaceId}/projects`}>
            <TabsTrigger value="projects">Projects</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/teams`}>
            <TabsTrigger value="teams">Teams</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/analytics/dashboards`}>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
          </NavLink>
          <NavLink to={`/workspaces/${workspaceId}/attachments`}>
            <TabsTrigger value="attachments">Attachments</TabsTrigger>
          </NavLink>
        </TabsList>
        <Outlet />
      </Tabs>
    </div>
  );
}
// FILE: src/store/auth.ts
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";

interface AuthState {
  accessToken: string | null;
  setAccessToken: (token: string | null) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      accessToken: null,
      setAccessToken: (token) => set({ accessToken: token }),
    }),
    {
      name: "auth-storage",
      storage: createJSONStorage(() => localStorage),
    }
  )
);

// FILE: src/store/presence.ts
import { create } from "zustand";

interface PresenceState {
  members: any[];
  setMembers: (members: any[]) => void;
  addMember: (member: any) => void;
  removeMember: (socketId: string) => void;
}

export const usePresenceStore = create<PresenceState>((set) => ({
  members: [],
  setMembers: (members) => set({ members }),
  addMember: (member) =>
    set((state) => ({
      members: state.members.some((m) => m.socketId === member.socketId)
        ? state.members
        : [...state.members, member],
    })),
  removeMember: (socketId) =>
    set((state) => ({
      members: state.members.filter((m) => m.socketId !== socketId),
    })),
}));
// FILE: src/vite-env.d.ts
/// <reference types="vite/client" />

// FILE: tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        surface: "hsl(var(--surface))",
        element: "hsl(var(--element))",
        hover: "hsl(var(--hover))",
        "kanban-bg": "hsl(var(--background))",
        "kanban-column": "hsl(var(--surface))",
        "kanban-card": "hsl(var(--element))",
        "kanban-card-hover": "hsl(var(--hover))",
        "kanban-accent": "hsl(var(--primary))",
        "priority-urgent": "hsl(var(--priority-urgent))",
        "priority-high": "hsl(var(--priority-high))",
        "priority-medium": "hsl(var(--priority-medium))",
        "priority-low": "hsl(var(--priority-low))",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
};
// FILE: vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";


export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});